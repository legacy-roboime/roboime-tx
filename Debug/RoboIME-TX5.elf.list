
RoboIME-TX5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ead4  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800ec5c  0800ec5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000003c  0800ece4  0800ece4  00016ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000d8  0800ed20  0800ed20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800edf8  0800edf8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800edfc  0800edfc  00016dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000674  20000000  0800ee00  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000096c  20000674  20000674  00018674  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000fe0  20000fe0  00018674  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00018674  2**0
                  CONTENTS, READONLY
 11 .debug_info   00011096  00000000  00000000  000186a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003507  00000000  00000000  0002973a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000430  00000000  00000000  0002cc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000623e  00000000  00000000  0002d078  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000047ef  00000000  00000000  000332b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000082  00000000  00000000  00037aa5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003a3c  00000000  00000000  00037b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000020  00000000  00000000  0003b568  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000674 	.word	0x20000674
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ec40 	.word	0x0800ec40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ec40 	.word	0x0800ec40
 80001c4:	20000678 	.word	0x20000678

080001c8 <USBD_FS_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	2212      	movs	r2, #18
 80001d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80001dc:	4618      	mov	r0, r3
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e6:	4770      	bx	lr
 80001e8:	20000020 	.word	0x20000020

080001ec <USBD_FS_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	6039      	str	r1, [r7, #0]
 80001f6:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	2204      	movs	r2, #4
 80001fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8000200:	4618      	mov	r0, r3
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	20000034 	.word	0x20000034

08000210 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d105      	bne.n	800022e <USBD_FS_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000222:	4808      	ldr	r0, [pc, #32]	; (8000244 <USBD_FS_ProductStrDescriptor+0x34>)
 8000224:	4908      	ldr	r1, [pc, #32]	; (8000248 <USBD_FS_ProductStrDescriptor+0x38>)
 8000226:	683a      	ldr	r2, [r7, #0]
 8000228:	f002 f960 	bl	80024ec <USBD_GetString>
 800022c:	e004      	b.n	8000238 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 800022e:	4805      	ldr	r0, [pc, #20]	; (8000244 <USBD_FS_ProductStrDescriptor+0x34>)
 8000230:	4905      	ldr	r1, [pc, #20]	; (8000248 <USBD_FS_ProductStrDescriptor+0x38>)
 8000232:	683a      	ldr	r2, [r7, #0]
 8000234:	f002 f95a 	bl	80024ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <USBD_FS_ProductStrDescriptor+0x38>)
}
 800023a:	4618      	mov	r0, r3
 800023c:	3708      	adds	r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	0800ec5c 	.word	0x0800ec5c
 8000248:	200006d4 	.word	0x200006d4

0800024c <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	6039      	str	r1, [r7, #0]
 8000256:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800025a:	4905      	ldr	r1, [pc, #20]	; (8000270 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800025c:	683a      	ldr	r2, [r7, #0]
 800025e:	f002 f945 	bl	80024ec <USBD_GetString>
  return USBD_StrDesc;
 8000262:	4b03      	ldr	r3, [pc, #12]	; (8000270 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8000264:	4618      	mov	r0, r3
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	0800ec74 	.word	0x0800ec74
 8000270:	200006d4 	.word	0x200006d4

08000274 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d105      	bne.n	8000292 <USBD_FS_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8000286:	4808      	ldr	r0, [pc, #32]	; (80002a8 <USBD_FS_SerialStrDescriptor+0x34>)
 8000288:	4908      	ldr	r1, [pc, #32]	; (80002ac <USBD_FS_SerialStrDescriptor+0x38>)
 800028a:	683a      	ldr	r2, [r7, #0]
 800028c:	f002 f92e 	bl	80024ec <USBD_GetString>
 8000290:	e004      	b.n	800029c <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 8000292:	4805      	ldr	r0, [pc, #20]	; (80002a8 <USBD_FS_SerialStrDescriptor+0x34>)
 8000294:	4905      	ldr	r1, [pc, #20]	; (80002ac <USBD_FS_SerialStrDescriptor+0x38>)
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	f002 f928 	bl	80024ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <USBD_FS_SerialStrDescriptor+0x38>)
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	0800ec88 	.word	0x0800ec88
 80002ac:	200006d4 	.word	0x200006d4

080002b0 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	6039      	str	r1, [r7, #0]
 80002ba:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d105      	bne.n	80002ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80002c2:	4808      	ldr	r0, [pc, #32]	; (80002e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80002c4:	4908      	ldr	r1, [pc, #32]	; (80002e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80002c6:	683a      	ldr	r2, [r7, #0]
 80002c8:	f002 f910 	bl	80024ec <USBD_GetString>
 80002cc:	e004      	b.n	80002d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80002d0:	4905      	ldr	r1, [pc, #20]	; (80002e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80002d2:	683a      	ldr	r2, [r7, #0]
 80002d4:	f002 f90a 	bl	80024ec <USBD_GetString>
  }
  return USBD_StrDesc;  
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <USBD_FS_ConfigStrDescriptor+0x38>)
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	0800ec98 	.word	0x0800ec98
 80002e8:	200006d4 	.word	0x200006d4

080002ec <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	6039      	str	r1, [r7, #0]
 80002f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d105      	bne.n	800030a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80002fe:	4808      	ldr	r0, [pc, #32]	; (8000320 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000300:	4908      	ldr	r1, [pc, #32]	; (8000324 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	f002 f8f2 	bl	80024ec <USBD_GetString>
 8000308:	e004      	b.n	8000314 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800030c:	4905      	ldr	r1, [pc, #20]	; (8000324 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800030e:	683a      	ldr	r2, [r7, #0]
 8000310:	f002 f8ec 	bl	80024ec <USBD_GetString>
  }
  return USBD_StrDesc;  
 8000314:	4b03      	ldr	r3, [pc, #12]	; (8000324 <USBD_FS_InterfaceStrDescriptor+0x38>)
}
 8000316:	4618      	mov	r0, r3
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	0800eca4 	.word	0x0800eca4
 8000324:	200006d4 	.word	0x200006d4

08000328 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000338:	d12c      	bne.n	8000394 <HAL_PCD_MspInit+0x6c>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800033a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800033e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000340:	2302      	movs	r3, #2
 8000342:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000348:	2303      	movs	r3, #3
 800034a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800034c:	230a      	movs	r3, #10
 800034e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000350:	f107 030c 	add.w	r3, r7, #12
 8000354:	4811      	ldr	r0, [pc, #68]	; (800039c <HAL_PCD_MspInit+0x74>)
 8000356:	4619      	mov	r1, r3
 8000358:	f009 f828 	bl	80093ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800035c:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <HAL_PCD_MspInit+0x78>)
 800035e:	4a10      	ldr	r2, [pc, #64]	; (80003a0 <HAL_PCD_MspInit+0x78>)
 8000360:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000362:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000366:	635a      	str	r2, [r3, #52]	; 0x34
 8000368:	2300      	movs	r3, #0
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <HAL_PCD_MspInit+0x78>)
 800036e:	4a0c      	ldr	r2, [pc, #48]	; (80003a0 <HAL_PCD_MspInit+0x78>)
 8000370:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000376:	645a      	str	r2, [r3, #68]	; 0x44
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <HAL_PCD_MspInit+0x78>)
 800037a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800037c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000384:	2043      	movs	r0, #67	; 0x43
 8000386:	2100      	movs	r1, #0
 8000388:	2200      	movs	r2, #0
 800038a:	f00c fc63 	bl	800cc54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800038e:	2043      	movs	r0, #67	; 0x43
 8000390:	f00c fc7c 	bl	800cc8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000394:	3720      	adds	r7, #32
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40020000 	.word	0x40020000
 80003a0:	40023800 	.word	0x40023800

080003a4 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003b4:	d10d      	bne.n	80003d2 <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <HAL_PCD_MspDeInit+0x34>)
 80003b8:	4a07      	ldr	r2, [pc, #28]	; (80003d8 <HAL_PCD_MspDeInit+0x34>)
 80003ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80003bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80003c0:	635a      	str	r2, [r3, #52]	; 0x34
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 80003c2:	4806      	ldr	r0, [pc, #24]	; (80003dc <HAL_PCD_MspDeInit+0x38>)
 80003c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80003c8:	f009 f98a 	bl	80096e0 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 80003cc:	2043      	movs	r0, #67	; 0x43
 80003ce:	f00c fc6b 	bl	800cca8 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40020000 	.word	0x40020000

080003e0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	f503 7361 	add.w	r3, r3, #900	; 0x384
 80003f4:	4610      	mov	r0, r2
 80003f6:	4619      	mov	r1, r3
 80003f8:	f002 f994 	bl	8002724 <USBD_LL_SetupStage>
}
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop

08000404 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f8d3 13b4 	ldr.w	r1, [r3, #948]	; 0x3b4
 8000416:	78fa      	ldrb	r2, [r7, #3]
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	4613      	mov	r3, r2
 800041c:	00db      	lsls	r3, r3, #3
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	4403      	add	r3, r0
 8000424:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	78fa      	ldrb	r2, [r7, #3]
 800042c:	4608      	mov	r0, r1
 800042e:	4611      	mov	r1, r2
 8000430:	461a      	mov	r2, r3
 8000432:	f002 f9c1 	bl	80027b8 <USBD_LL_DataOutStage>
}
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	f8d3 13b4 	ldr.w	r1, [r3, #948]	; 0x3b4
 800044e:	78fa      	ldrb	r2, [r7, #3]
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	4613      	mov	r3, r2
 8000454:	00db      	lsls	r3, r3, #3
 8000456:	1a9b      	subs	r3, r3, r2
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	4403      	add	r3, r0
 800045c:	3340      	adds	r3, #64	; 0x40
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	78fa      	ldrb	r2, [r7, #3]
 8000462:	4608      	mov	r0, r1
 8000464:	4611      	mov	r1, r2
 8000466:	461a      	mov	r2, r3
 8000468:	f002 fa02 	bl	8002870 <USBD_LL_DataInStage>
}
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop

08000474 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8000482:	4618      	mov	r0, r3
 8000484:	f002 faec 	bl	8002a60 <USBD_LL_SOF>
}
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop

08000490 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8000498:	2301      	movs	r3, #1
 800049a:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d002      	beq.n	80004aa <HAL_PCD_ResetCallback+0x1a>
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d003      	beq.n	80004b0 <HAL_PCD_ResetCallback+0x20>
 80004a8:	e005      	b.n	80004b6 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 80004aa:	2300      	movs	r3, #0
 80004ac:	73fb      	strb	r3, [r7, #15]
    break;
 80004ae:	e005      	b.n	80004bc <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 80004b0:	2301      	movs	r3, #1
 80004b2:	73fb      	strb	r3, [r7, #15]
    break;
 80004b4:	e002      	b.n	80004bc <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;    
 80004b6:	2301      	movs	r3, #1
 80004b8:	73fb      	strb	r3, [r7, #15]
    break;    
 80004ba:	bf00      	nop
  }
  USBD_LL_SetSpeed(hpcd->pData, speed);  
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
 80004c4:	4610      	mov	r0, r2
 80004c6:	4619      	mov	r1, r3
 80004c8:	f002 fa92 	bl	80029f0 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset(hpcd->pData);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 fa5c 	bl	8002990 <USBD_LL_Reset>
}
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop

080004e0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend(hpcd->pData);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 fa8e 	bl	8002a10 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	6812      	ldr	r2, [r2, #0]
 8000500:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8000504:	6812      	ldr	r2, [r2, #0]
 8000506:	f042 0201 	orr.w	r2, r2, #1
 800050a:	601a      	str	r2, [r3, #0]
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6a1b      	ldr	r3, [r3, #32]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d005      	beq.n	8000520 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_PCD_SuspendCallback+0x48>)
 8000516:	4a04      	ldr	r2, [pc, #16]	; (8000528 <HAL_PCD_SuspendCallback+0x48>)
 8000518:	6912      	ldr	r2, [r2, #16]
 800051a:	f042 0206 	orr.w	r2, r2, #6
 800051e:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	e000ed00 	.word	0xe000ed00

0800052c <HAL_PCD_ResumeCallback>:
    When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume(hpcd->pData);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800053a:	4618      	mov	r0, r3
 800053c:	f002 fa7e 	bl	8002a3c <USBD_LL_Resume>
}
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop

08000548 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800055a:	78fb      	ldrb	r3, [r7, #3]
 800055c:	4610      	mov	r0, r2
 800055e:	4619      	mov	r1, r3
 8000560:	f002 faa6 	bl	8002ab0 <USBD_LL_IsoOUTIncomplete>
}
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop

0800056c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800057e:	78fb      	ldrb	r3, [r7, #3]
 8000580:	4610      	mov	r0, r2
 8000582:	4619      	mov	r1, r3
 8000584:	f002 fa86 	bl	8002a94 <USBD_LL_IsoINIncomplete>
}
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop

08000590 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 fa94 	bl	8002acc <USBD_LL_DevConnected>
}
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop

080005ac <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fa92 	bl	8002ae4 <USBD_LL_DevDisconnected>
}
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop

080005c8 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d13a      	bne.n	800064e <USBD_LL_Init+0x86>
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <USBD_LL_Init+0x90>)
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
  pdev->pData = &hpcd_USB_OTG_FS; 
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <USBD_LL_Init+0x90>)
 80005e4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <USBD_LL_Init+0x90>)
 80005ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <USBD_LL_Init+0x90>)
 80005f2:	2204      	movs	r2, #4
 80005f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <USBD_LL_Init+0x90>)
 80005f8:	2202      	movs	r2, #2
 80005fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80005fc:	4b16      	ldr	r3, [pc, #88]	; (8000658 <USBD_LL_Init+0x90>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <USBD_LL_Init+0x90>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <USBD_LL_Init+0x90>)
 800060a:	2202      	movs	r2, #2
 800060c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <USBD_LL_Init+0x90>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <USBD_LL_Init+0x90>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <USBD_LL_Init+0x90>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <USBD_LL_Init+0x90>)
 8000622:	2201      	movs	r2, #1
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <USBD_LL_Init+0x90>)
 8000628:	2200      	movs	r2, #0
 800062a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800062c:	480a      	ldr	r0, [pc, #40]	; (8000658 <USBD_LL_Init+0x90>)
 800062e:	f007 fcdd 	bl	8007fec <HAL_PCD_Init>
  {
    //Error_Handler();
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8000632:	4809      	ldr	r0, [pc, #36]	; (8000658 <USBD_LL_Init+0x90>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	f007 fcc7 	bl	8007fc8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <USBD_LL_Init+0x90>)
 800063c:	2100      	movs	r1, #0
 800063e:	2240      	movs	r2, #64	; 0x40
 8000640:	f007 fc76 	bl	8007f30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <USBD_LL_Init+0x90>)
 8000646:	2101      	movs	r1, #1
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	f007 fc71 	bl	8007f30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200008d4 	.word	0x200008d4

0800065c <USBD_LL_DeInit>:
  * @brief  De-Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_DeInit (USBD_HandleTypeDef *pdev)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  HAL_PCD_DeInit(pdev->pData);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800066a:	4618      	mov	r0, r3
 800066c:	f007 fdc6 	bl	80081fc <HAL_PCD_DeInit>
  return USBD_OK; 
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop

0800067c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800068a:	4618      	mov	r0, r3
 800068c:	f007 fde6 	bl	800825c <HAL_PCD_Start>
  return USBD_OK; 
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop

0800069c <USBD_LL_Stop>:
  * @brief  Stops the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Stop (USBD_HandleTypeDef *pdev)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  HAL_PCD_Stop(pdev->pData);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80006aa:	4618      	mov	r0, r3
 80006ac:	f007 fdf8 	bl	80082a0 <HAL_PCD_Stop>
  return USBD_OK; 
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop

080006bc <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	70f9      	strb	r1, [r7, #3]
 80006c6:	70ba      	strb	r2, [r7, #2]
 80006c8:	803b      	strh	r3, [r7, #0]

  HAL_PCD_EP_Open(pdev->pData, 
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80006d0:	78f9      	ldrb	r1, [r7, #3]
 80006d2:	883a      	ldrh	r2, [r7, #0]
 80006d4:	78bb      	ldrb	r3, [r7, #2]
 80006d6:	f008 fb53 	bl	8008d80 <HAL_PCD_EP_Open>
                  ep_addr, 
                  ep_mps, 
                  ep_type);
  
  return USBD_OK; 
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80006f6:	78fb      	ldrb	r3, [r7, #3]
 80006f8:	4610      	mov	r0, r2
 80006fa:	4619      	mov	r1, r3
 80006fc:	f008 fba2 	bl	8008e44 <HAL_PCD_EP_Close>
  return USBD_OK; 
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop

0800070c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_FlushEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	4610      	mov	r0, r2
 8000722:	4619      	mov	r1, r3
 8000724:	f008 fd4e 	bl	80091c4 <HAL_PCD_EP_Flush>
  return USBD_OK; 
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop

08000734 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8000746:	78fb      	ldrb	r3, [r7, #3]
 8000748:	4610      	mov	r0, r2
 800074a:	4619      	mov	r1, r3
 800074c:	f008 fc94 	bl	8009078 <HAL_PCD_EP_SetStall>
  return USBD_OK; 
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop

0800075c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	4610      	mov	r0, r2
 8000772:	4619      	mov	r1, r3
 8000774:	f008 fcdc 	bl	8009130 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop

08000784 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData; 
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000796:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	b25b      	sxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	da0b      	bge.n	80007b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80007a6:	68f9      	ldr	r1, [r7, #12]
 80007a8:	4613      	mov	r3, r2
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	1a9b      	subs	r3, r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	440b      	add	r3, r1
 80007b2:	3338      	adds	r3, #56	; 0x38
 80007b4:	789b      	ldrb	r3, [r3, #2]
 80007b6:	e00b      	b.n	80007d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80007be:	68f9      	ldr	r1, [r7, #12]
 80007c0:	4613      	mov	r3, r2
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	1a9b      	subs	r3, r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80007ce:	799b      	ldrb	r3, [r3, #6]
  }
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
  
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	4610      	mov	r0, r2
 80007f2:	4619      	mov	r1, r3
 80007f4:	f008 faa2 	bl	8008d3c <HAL_PCD_SetAddress>
  return USBD_OK; 
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop

08000804 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	460a      	mov	r2, r1
 8000810:	72fa      	strb	r2, [r7, #11]
 8000812:	813b      	strh	r3, [r7, #8]

  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
 800081a:	893b      	ldrh	r3, [r7, #8]
 800081c:	7afa      	ldrb	r2, [r7, #11]
 800081e:	4608      	mov	r0, r1
 8000820:	4611      	mov	r1, r2
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	f008 fbce 	bl	8008fc4 <HAL_PCD_EP_Transmit>
  return USBD_OK;   
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop

08000834 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	607a      	str	r2, [r7, #4]
 800083e:	460a      	mov	r2, r1
 8000840:	72fa      	strb	r2, [r7, #11]
 8000842:	813b      	strh	r3, [r7, #8]

  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
 800084a:	893b      	ldrh	r3, [r7, #8]
 800084c:	7afa      	ldrb	r2, [r7, #11]
 800084e:	4608      	mov	r0, r1
 8000850:	4611      	mov	r1, r2
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	f008 fb40 	bl	8008ed8 <HAL_PCD_EP_Receive>
  return USBD_OK;   
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop

08000864 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	4610      	mov	r0, r2
 800087a:	4619      	mov	r1, r3
 800087c:	f008 fb88 	bl	8008f90 <HAL_PCD_EP_GetRxCount>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop

0800088c <USBD_LL_Delay>:
  * @brief  Delays routine for the USB Device Library.
  * @param  Delay: Delay in ms
  * @retval None
  */
void  USBD_LL_Delay (uint32_t Delay)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);  
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f00c fb7d 	bl	800cf94 <HAL_Delay>
}
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80008a4:	4806      	ldr	r0, [pc, #24]	; (80008c0 <CDC_Init_FS+0x20>)
 80008a6:	4907      	ldr	r1, [pc, #28]	; (80008c4 <CDC_Init_FS+0x24>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f002 faf7 	bl	8002e9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <CDC_Init_FS+0x20>)
 80008b0:	4905      	ldr	r1, [pc, #20]	; (80008c8 <CDC_Init_FS+0x28>)
 80008b2:	f002 fb0d 	bl	8002ed0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80008b6:	2300      	movs	r3, #0
 80008b8:	b25b      	sxtb	r3, r3
  /* USER CODE END 3 */ 
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000d94 	.word	0x20000d94
 80008c4:	20000d10 	.word	0x20000d10
 80008c8:	20000c90 	.word	0x20000c90

080008cc <CDC_DeInit_FS>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
 80008d0:	2300      	movs	r3, #0
 80008d2:	b25b      	sxtb	r3, r3
  /* USER CODE END 4 */ 
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS  (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6039      	str	r1, [r7, #0]
 80008e8:	4613      	mov	r3, r2
 80008ea:	4602      	mov	r2, r0
 80008ec:	71fa      	strb	r2, [r7, #7]
 80008ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b23      	cmp	r3, #35	; 0x23
 80008f4:	d84a      	bhi.n	800098c <CDC_Control_FS+0xac>
 80008f6:	a201      	add	r2, pc, #4	; (adr r2, 80008fc <CDC_Control_FS+0x1c>)
 80008f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fc:	0800098d 	.word	0x0800098d
 8000900:	0800098d 	.word	0x0800098d
 8000904:	0800098d 	.word	0x0800098d
 8000908:	0800098d 	.word	0x0800098d
 800090c:	0800098d 	.word	0x0800098d
 8000910:	0800098d 	.word	0x0800098d
 8000914:	0800098d 	.word	0x0800098d
 8000918:	0800098d 	.word	0x0800098d
 800091c:	0800098d 	.word	0x0800098d
 8000920:	0800098d 	.word	0x0800098d
 8000924:	0800098d 	.word	0x0800098d
 8000928:	0800098d 	.word	0x0800098d
 800092c:	0800098d 	.word	0x0800098d
 8000930:	0800098d 	.word	0x0800098d
 8000934:	0800098d 	.word	0x0800098d
 8000938:	0800098d 	.word	0x0800098d
 800093c:	0800098d 	.word	0x0800098d
 8000940:	0800098d 	.word	0x0800098d
 8000944:	0800098d 	.word	0x0800098d
 8000948:	0800098d 	.word	0x0800098d
 800094c:	0800098d 	.word	0x0800098d
 8000950:	0800098d 	.word	0x0800098d
 8000954:	0800098d 	.word	0x0800098d
 8000958:	0800098d 	.word	0x0800098d
 800095c:	0800098d 	.word	0x0800098d
 8000960:	0800098d 	.word	0x0800098d
 8000964:	0800098d 	.word	0x0800098d
 8000968:	0800098d 	.word	0x0800098d
 800096c:	0800098d 	.word	0x0800098d
 8000970:	0800098d 	.word	0x0800098d
 8000974:	0800098d 	.word	0x0800098d
 8000978:	0800098d 	.word	0x0800098d
 800097c:	0800098d 	.word	0x0800098d
 8000980:	0800098d 	.word	0x0800098d
 8000984:	0800098d 	.word	0x0800098d
 8000988:	0800098d 	.word	0x0800098d
  case CDC_SEND_BREAK:
 
    break;    
    
  default:
    break;
 800098c:	bf00      	nop
  }

  return (USBD_OK);
 800098e:	2300      	movs	r3, #0
 8000990:	b25b      	sxtb	r3, r3
  /* USER CODE END 5 */
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop

080009a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80009aa:	481a      	ldr	r0, [pc, #104]	; (8000a14 <CDC_Receive_FS+0x74>)
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	f002 fa8f 	bl	8002ed0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80009b2:	4818      	ldr	r0, [pc, #96]	; (8000a14 <CDC_Receive_FS+0x74>)
 80009b4:	f002 faca 	bl	8002f4c <USBD_CDC_ReceivePacket>
  int i;
  for(i=0; i<*Len; i++){
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	e01e      	b.n	80009fc <CDC_Receive_FS+0x5c>
    UserRxBufferFS[APP_rx_ptr_head] = Buf[i];
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <CDC_Receive_FS+0x78>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	6879      	ldr	r1, [r7, #4]
 80009c6:	440a      	add	r2, r1
 80009c8:	7811      	ldrb	r1, [r2, #0]
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <CDC_Receive_FS+0x7c>)
 80009cc:	54d1      	strb	r1, [r2, r3]
    APP_rx_ptr_head++;
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <CDC_Receive_FS+0x78>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <CDC_Receive_FS+0x78>)
 80009d6:	601a      	str	r2, [r3, #0]
    if (APP_rx_ptr_head == APP_RX_DATA_SIZE)
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <CDC_Receive_FS+0x78>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b80      	cmp	r3, #128	; 0x80
 80009de:	d102      	bne.n	80009e6 <CDC_Receive_FS+0x46>
    	APP_rx_ptr_head = 0;
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <CDC_Receive_FS+0x78>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
    if (APP_rx_ptr_head == APP_rx_ptr_tail)
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <CDC_Receive_FS+0x78>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <CDC_Receive_FS+0x80>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d101      	bne.n	80009f6 <CDC_Receive_FS+0x56>
    	return USBD_FAIL;
 80009f2:	2302      	movs	r3, #2
 80009f4:	e008      	b.n	8000a08 <CDC_Receive_FS+0x68>
{
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  int i;
  for(i=0; i<*Len; i++){
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3301      	adds	r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d3db      	bcc.n	80009be <CDC_Receive_FS+0x1e>
    if (APP_rx_ptr_head == APP_RX_DATA_SIZE)
    	APP_rx_ptr_head = 0;
    if (APP_rx_ptr_head == APP_rx_ptr_tail)
    	return USBD_FAIL;
  }
  return (USBD_OK);
 8000a06:	2300      	movs	r3, #0
 8000a08:	b25b      	sxtb	r3, r3
  /* USER CODE END 6 */ 
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000d94 	.word	0x20000d94
 8000a18:	20000d90 	.word	0x20000d90
 8000a1c:	20000c90 	.word	0x20000c90
 8000a20:	20000c8c 	.word	0x20000c8c

08000a24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be send
  * @param  Len: Number of data to be send (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <CDC_Transmit_FS+0x48>)
 8000a36:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000a3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00b      	b.n	8000a62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8000a4a:	887b      	ldrh	r3, [r7, #2]
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <CDC_Transmit_FS+0x48>)
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	461a      	mov	r2, r3
 8000a52:	f002 fa23 	bl	8002e9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <CDC_Transmit_FS+0x48>)
 8000a58:	f002 fa4e 	bl	8002ef8 <USBD_CDC_TransmitPacket>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */ 
  return result;
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000d94 	.word	0x20000d94

08000a70 <VCP_get_char>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t VCP_get_char(uint8_t *buf) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	if (APP_rx_ptr_head == APP_rx_ptr_tail)
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <VCP_get_char+0x4c>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <VCP_get_char+0x50>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d101      	bne.n	8000a88 <VCP_get_char+0x18>
		return 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	e012      	b.n	8000aae <VCP_get_char+0x3e>

	*buf = UserRxBufferFS[APP_rx_ptr_tail];
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <VCP_get_char+0x50>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <VCP_get_char+0x54>)
 8000a8e:	5cd2      	ldrb	r2, [r2, r3]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	701a      	strb	r2, [r3, #0]
	APP_rx_ptr_tail++;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <VCP_get_char+0x50>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	1c5a      	adds	r2, r3, #1
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <VCP_get_char+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
	if (APP_rx_ptr_tail == APP_RX_DATA_SIZE)
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <VCP_get_char+0x50>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b80      	cmp	r3, #128	; 0x80
 8000aa4:	d102      	bne.n	8000aac <VCP_get_char+0x3c>
		APP_rx_ptr_tail = 0;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <VCP_get_char+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]

	return 1;
 8000aac:	2301      	movs	r3, #1
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000d90 	.word	0x20000d90
 8000ac0:	20000c8c 	.word	0x20000c8c
 8000ac4:	20000c90 	.word	0x20000c90

08000ac8 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_USB_DEVICE_Init+0x48>)
 8000ad4:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <MX_USB_DEVICE_Init+0x48>)
 8000ad6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000ad8:	f042 0201 	orr.w	r2, r2, #1
 8000adc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USB_DEVICE_Init+0x48>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8000aea:	480a      	ldr	r0, [pc, #40]	; (8000b14 <MX_USB_DEVICE_Init+0x4c>)
 8000aec:	490a      	ldr	r1, [pc, #40]	; (8000b18 <MX_USB_DEVICE_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	f001 fd52 	bl	8002598 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <MX_USB_DEVICE_Init+0x4c>)
 8000af6:	4909      	ldr	r1, [pc, #36]	; (8000b1c <MX_USB_DEVICE_Init+0x54>)
 8000af8:	f001 fd98 	bl	800262c <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_USB_DEVICE_Init+0x4c>)
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <MX_USB_DEVICE_Init+0x58>)
 8000b00:	f002 f9b4 	bl	8002e6c <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <MX_USB_DEVICE_Init+0x4c>)
 8000b06:	f001 fdab 	bl	8002660 <USBD_Start>

}
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	20000d94 	.word	0x20000d94
 8000b18:	20000004 	.word	0x20000004
 8000b1c:	20000064 	.word	0x20000064
 8000b20:	20000038 	.word	0x20000038

08000b24 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8000b34:	e7fe      	b.n	8000b34 <HardFault_Handler+0x4>
 8000b36:	bf00      	nop

08000b38 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>
 8000b3e:	bf00      	nop

08000b40 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8000b44:	e7fe      	b.n	8000b44 <BusFault_Handler+0x4>
 8000b46:	bf00      	nop

08000b48 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>
 8000b4e:	bf00      	nop

08000b50 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f00c f9f2 	bl	800cf60 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000b7c:	f00c f96e 	bl	800ce5c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop

08000b84 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b88:	4801      	ldr	r0, [pc, #4]	; (8000b90 <OTG_FS_IRQHandler+0xc>)
 8000b8a:	f007 fbb1 	bl	80082f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200008d4 	.word	0x200008d4

08000b94 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f00c f851 	bl	800cc40 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000b9e:	f06f 000b 	mvn.w	r0, #11
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f00c f855 	bl	800cc54 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000baa:	f06f 000a 	mvn.w	r0, #10
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f00c f84f 	bl	800cc54 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000bb6:	f06f 0009 	mvn.w	r0, #9
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f00c f849 	bl	800cc54 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000bc2:	f06f 0004 	mvn.w	r0, #4
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f00c f843 	bl	800cc54 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000bce:	f06f 0003 	mvn.w	r0, #3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f00c f83d 	bl	800cc54 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000bda:	f06f 0001 	mvn.w	r0, #1
 8000bde:	2100      	movs	r1, #0
 8000be0:	2200      	movs	r2, #0
 8000be2:	f00c f837 	bl	800cc54 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000be6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bea:	2100      	movs	r1, #0
 8000bec:	2200      	movs	r2, #0
 8000bee:	f00c f831 	bl	800cc54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <MySpi_Init>:
 */
#include "my_spi.h"

#define SPI_TIMEOUT      0xFFFFFFFF

void MySpi_Init(MySpi *these){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_Init(&these->CS_Gpio, GPIOA, GPIO_PIN_4);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	4934      	ldr	r1, [pc, #208]	; (8000cd4 <MySpi_Init+0xe0>)
 8000c02:	2210      	movs	r2, #16
 8000c04:	f000 fef8 	bl	80019f8 <GPIO_Init>

  //MOSI, MISO, SCK GPIO configuration
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <MySpi_Init+0xe4>)
 8000c0e:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <MySpi_Init+0xe4>)
 8000c10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000c12:	f042 0201 	orr.w	r2, r2, #1
 8000c16:	631a      	str	r2, [r3, #48]	; 0x30
 8000c18:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <MySpi_Init+0xe4>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]
  GPIO_InitTypeDef GPIO_SPI_Pins_initstruct;
  GPIO_SPI_Pins_initstruct.Mode	= GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_SPI_Pins_initstruct.Pull	= GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_SPI_Pins_initstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_SPI_Pins_initstruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c30:	23e0      	movs	r3, #224	; 0xe0
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_SPI_Pins_initstruct.Alternate = GPIO_AF5_SPI1;
 8000c34:	2305      	movs	r3, #5
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_SPI_Pins_initstruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4825      	ldr	r0, [pc, #148]	; (8000cd4 <MySpi_Init+0xe0>)
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f008 fbb4 	bl	80093ac <HAL_GPIO_Init>

  __HAL_RCC_SPI1_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <MySpi_Init+0xe4>)
 8000c4a:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <MySpi_Init+0xe4>)
 8000c4c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000c4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c52:	645a      	str	r2, [r3, #68]	; 0x44
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <MySpi_Init+0xe4>)
 8000c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
  these->SpiHandle.Instance               = SPI1;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <MySpi_Init+0xe8>)
 8000c64:	609a      	str	r2, [r3, #8]
  these->SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2218      	movs	r2, #24
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24
  these->SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  these->SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
  these->SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  these->SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	631a      	str	r2, [r3, #48]	; 0x30
  these->SpiHandle.Init.CRCPolynomial     = 7;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2207      	movs	r2, #7
 8000c88:	635a      	str	r2, [r3, #52]	; 0x34
  these->SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  these->SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28
  these->SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c9c:	621a      	str	r2, [r3, #32]
  these->SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  these->SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000caa:	60da      	str	r2, [r3, #12]
  HAL_SPI_Init(&these->SpiHandle);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3308      	adds	r3, #8
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 f989 	bl	8004fc8 <HAL_SPI_Init>
  __HAL_SPI_ENABLE(&these->SpiHandle);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	6892      	ldr	r2, [r2, #8]
 8000cbe:	6812      	ldr	r2, [r2, #0]
 8000cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cc4:	601a      	str	r2, [r3, #0]
  GPIO_Set(&these->CS_Gpio);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 ff37 	bl	8001b3c <GPIO_Set>
 }
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40013000 	.word	0x40013000

08000ce0 <MySpi_Transfer>:
int MySpi_Transfer(MySpi *these, uint8_t *Data_IN, uint8_t *Data_OUT, uint16_t size){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	807b      	strh	r3, [r7, #2]
  int16_t Spi_TimeOut=0x400;
 8000cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf2:	82fb      	strh	r3, [r7, #22]
  GPIO_Reset(&these->CS_Gpio);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 ff32 	bl	8001b60 <GPIO_Reset>
  (* (uint8_t *)(Data_IN))= *(__IO uint8_t *)&these->SpiHandle.Instance->DR;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	330c      	adds	r3, #12
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	701a      	strb	r2, [r3, #0]

  while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_TXE)==0)&&(Spi_TimeOut>0)){
 8000d0a:	e002      	b.n	8000d12 <MySpi_Transfer+0x32>
	Spi_TimeOut--;
 8000d0c:	8afb      	ldrh	r3, [r7, #22]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	82fb      	strh	r3, [r7, #22]
int MySpi_Transfer(MySpi *these, uint8_t *Data_IN, uint8_t *Data_OUT, uint16_t size){
  int16_t Spi_TimeOut=0x400;
  GPIO_Reset(&these->CS_Gpio);
  (* (uint8_t *)(Data_IN))= *(__IO uint8_t *)&these->SpiHandle.Instance->DR;

  while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_TXE)==0)&&(Spi_TimeOut>0)){
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d103      	bne.n	8000d28 <MySpi_Transfer+0x48>
 8000d20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	dcf1      	bgt.n	8000d0c <MySpi_Transfer+0x2c>
	Spi_TimeOut--;
  }
  Spi_TimeOut=0x400;
 8000d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2c:	82fb      	strh	r3, [r7, #22]
  int i;
  for(i=0; i<size; i++){
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	e048      	b.n	8000dc6 <MySpi_Transfer+0xe6>
	these->SpiHandle.Instance->DR = *((uint16_t *)(Data_OUT+i));
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	440a      	add	r2, r1
 8000d3e:	8812      	ldrh	r2, [r2, #0]
 8000d40:	60da      	str	r2, [r3, #12]
	while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_TXE)==0)&&(Spi_TimeOut>0)){
 8000d42:	e002      	b.n	8000d4a <MySpi_Transfer+0x6a>
	  Spi_TimeOut--;
 8000d44:	8afb      	ldrh	r3, [r7, #22]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	82fb      	strh	r3, [r7, #22]
  }
  Spi_TimeOut=0x400;
  int i;
  for(i=0; i<size; i++){
	these->SpiHandle.Instance->DR = *((uint16_t *)(Data_OUT+i));
	while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_TXE)==0)&&(Spi_TimeOut>0)){
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d103      	bne.n	8000d60 <MySpi_Transfer+0x80>
 8000d58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	dcf1      	bgt.n	8000d44 <MySpi_Transfer+0x64>
	  Spi_TimeOut--;
	}
	Spi_TimeOut=0x400;
 8000d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d64:	82fb      	strh	r3, [r7, #22]
	while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_BSY)==1)&&(Spi_TimeOut>0)){
 8000d66:	e002      	b.n	8000d6e <MySpi_Transfer+0x8e>
	  Spi_TimeOut--;
 8000d68:	8afb      	ldrh	r3, [r7, #22]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	82fb      	strh	r3, [r7, #22]
	these->SpiHandle.Instance->DR = *((uint16_t *)(Data_OUT+i));
	while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_TXE)==0)&&(Spi_TimeOut>0)){
	  Spi_TimeOut--;
	}
	Spi_TimeOut=0x400;
	while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_BSY)==1)&&(Spi_TimeOut>0)){
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <MySpi_Transfer+0xa4>
 8000d7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dcf1      	bgt.n	8000d68 <MySpi_Transfer+0x88>
	  Spi_TimeOut--;
	}
	Spi_TimeOut=0x400;
 8000d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d88:	82fb      	strh	r3, [r7, #22]

	while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_RXNE)==0)&&(Spi_TimeOut>0)){
 8000d8a:	e002      	b.n	8000d92 <MySpi_Transfer+0xb2>
	  Spi_TimeOut--;
 8000d8c:	8afb      	ldrh	r3, [r7, #22]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	82fb      	strh	r3, [r7, #22]
	while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_BSY)==1)&&(Spi_TimeOut>0)){
	  Spi_TimeOut--;
	}
	Spi_TimeOut=0x400;

	while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_RXNE)==0)&&(Spi_TimeOut>0)){
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d103      	bne.n	8000da8 <MySpi_Transfer+0xc8>
 8000da0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	dcf1      	bgt.n	8000d8c <MySpi_Transfer+0xac>
	  Spi_TimeOut--;
	}
	Spi_TimeOut=0x400;
 8000da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dac:	82fb      	strh	r3, [r7, #22]
	(* (uint8_t *)(Data_IN+i))= *(__IO uint8_t *)&these->SpiHandle.Instance->DR;
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	4413      	add	r3, r2
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	6892      	ldr	r2, [r2, #8]
 8000db8:	320c      	adds	r2, #12
 8000dba:	7812      	ldrb	r2, [r2, #0]
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	701a      	strb	r2, [r3, #0]
  while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_TXE)==0)&&(Spi_TimeOut>0)){
	Spi_TimeOut--;
  }
  Spi_TimeOut=0x400;
  int i;
  for(i=0; i<size; i++){
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	887a      	ldrh	r2, [r7, #2]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	dcb2      	bgt.n	8000d34 <MySpi_Transfer+0x54>
	  Spi_TimeOut--;
	}
	Spi_TimeOut=0x400;
	(* (uint8_t *)(Data_IN+i))= *(__IO uint8_t *)&these->SpiHandle.Instance->DR;
  }
  while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_BSY)==1)&&(Spi_TimeOut>0)){
 8000dce:	e002      	b.n	8000dd6 <MySpi_Transfer+0xf6>
    Spi_TimeOut--;
 8000dd0:	8afb      	ldrh	r3, [r7, #22]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	82fb      	strh	r3, [r7, #22]
	  Spi_TimeOut--;
	}
	Spi_TimeOut=0x400;
	(* (uint8_t *)(Data_IN+i))= *(__IO uint8_t *)&these->SpiHandle.Instance->DR;
  }
  while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_BSY)==1)&&(Spi_TimeOut>0)){
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <MySpi_Transfer+0x10c>
 8000de4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	dcf1      	bgt.n	8000dd0 <MySpi_Transfer+0xf0>
    Spi_TimeOut--;
  }
  Spi_TimeOut=0x400;
 8000dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df0:	82fb      	strh	r3, [r7, #22]
  while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_TXE))&&(Spi_TimeOut>0)){
 8000df2:	e002      	b.n	8000dfa <MySpi_Transfer+0x11a>
    Spi_TimeOut--;
 8000df4:	8afb      	ldrh	r3, [r7, #22]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	82fb      	strh	r3, [r7, #22]
  }
  while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_BSY)==1)&&(Spi_TimeOut>0)){
    Spi_TimeOut--;
  }
  Spi_TimeOut=0x400;
  while((__HAL_SPI_GET_FLAG(&these->SpiHandle, SPI_FLAG_TXE))&&(Spi_TimeOut>0)){
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <MySpi_Transfer+0x130>
 8000e08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	dcf1      	bgt.n	8000df4 <MySpi_Transfer+0x114>
    Spi_TimeOut--;
  }
  Spi_TimeOut=0x400;
 8000e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e14:	82fb      	strh	r3, [r7, #22]
  GPIO_Set(&these->CS_Gpio);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fe8f 	bl	8001b3c <GPIO_Set>
  return 1;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <main>:

void SystemClock_Config(void);
void Error_Handler(void);

int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0b0      	sub	sp, #192	; 0xc0
 8000e2c:	af00      	add	r7, sp, #0
  HAL_Init();
 8000e2e:	f00c f821 	bl	800ce74 <HAL_Init>
  SystemClock_Config();
 8000e32:	f000 f8ff 	bl	8001034 <_Z18SystemClock_Configv>
  MX_USB_DEVICE_Init();
 8000e36:	f7ff fe47 	bl	8000ac8 <MX_USB_DEVICE_Init>
  GPIO LED5;
  GPIO_Init(&LED5, GPIOD, GPIO_PIN_14);
 8000e3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e3e:	4618      	mov	r0, r3
 8000e40:	497a      	ldr	r1, [pc, #488]	; (800102c <main+0x204>)
 8000e42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e46:	f000 fdd7 	bl	80019f8 <GPIO_Init>
  GPIO LED6;
  GPIO_Init(&LED6, GPIOD, GPIO_PIN_15);
 8000e4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e4e:	4618      	mov	r0, r3
 8000e50:	4976      	ldr	r1, [pc, #472]	; (800102c <main+0x204>)
 8000e52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e56:	f000 fdcf 	bl	80019f8 <GPIO_Init>
  Nrf24 radio;
  Nrf24_Init(&radio);
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f963 	bl	8001128 <Nrf24_Init>
  radio.is_rx=0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  Nrf24_Config(&radio);
 8000e66:	463b      	mov	r3, r7
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f975 	bl	8001158 <Nrf24_Config>
  GPIO_Set(&radio.NRF_CE);
 8000e6e:	463b      	mov	r3, r7
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fe63 	bl	8001b3c <GPIO_Set>
  if(Nrf24_Test(&radio)){
 8000e76:	463b      	mov	r3, r7
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 fcc3 	bl	8001804 <Nrf24_Test>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf0c      	ite	eq
 8000e84:	2300      	moveq	r3, #0
 8000e86:	2301      	movne	r3, #1
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d004      	beq.n	8000e98 <main+0x70>
	GPIO_Toggle(&LED6);
 8000e8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fe76 	bl	8001b84 <GPIO_Toggle>
  }
  while (1)
  {
	int i=0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint8_t bufOut[28];
	uint8_t roboId=0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
	uint8_t symbol;
	while(i<29){
 8000ea4:	e039      	b.n	8000f1a <main+0xf2>
	  if(VCP_get_char(&symbol)){
 8000ea6:	f107 0387 	add.w	r3, r7, #135	; 0x87
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fde0 	bl	8000a70 <VCP_get_char>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	bf0c      	ite	eq
 8000eb6:	2300      	moveq	r3, #0
 8000eb8:	2301      	movne	r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d02c      	beq.n	8000f1a <main+0xf2>
		if((symbol=='a')&&(i==0)){
 8000ec0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000ec4:	2b61      	cmp	r3, #97	; 0x61
 8000ec6:	d107      	bne.n	8000ed8 <main+0xb0>
 8000ec8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d103      	bne.n	8000ed8 <main+0xb0>
	      i=1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000ed6:	e020      	b.n	8000f1a <main+0xf2>
		}
		else if(i==1){
 8000ed8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d109      	bne.n	8000ef4 <main+0xcc>
	      roboId=symbol;
 8000ee0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000ee4:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
		  i=i+1;
 8000ee8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000eec:	3301      	adds	r3, #1
 8000eee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000ef2:	e012      	b.n	8000f1a <main+0xf2>
		}
		else if(i>1){
 8000ef4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	dd0e      	ble.n	8000f1a <main+0xf2>
		  bufOut[i-1]=symbol;
 8000efc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f00:	3b01      	subs	r3, #1
 8000f02:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8000f06:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f803 2c38 	strb.w	r2, [r3, #-56]
		  i=i+1;
 8000f10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f14:	3301      	adds	r3, #1
 8000f16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  {
	int i=0;
	uint8_t bufOut[28];
	uint8_t roboId=0;
	uint8_t symbol;
	while(i<29){
 8000f1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f1e:	2b1c      	cmp	r3, #28
 8000f20:	ddc1      	ble.n	8000ea6 <main+0x7e>
		  bufOut[i-1]=symbol;
		  i=i+1;
		}
	  }
	}
	bufOut[0]='a';
 8000f22:	2361      	movs	r3, #97	; 0x61
 8000f24:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	Nrf24_SetId(&radio, roboId);
 8000f28:	463a      	mov	r2, r7
 8000f2a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	f000 fc39 	bl	80017a8 <Nrf24_SetId>
	//for(i=1; i<28; i++){
	//  bufOut[i]=0;
	//}
	Nrf24_WritePayload(&radio, bufOut, 27);
 8000f36:	463a      	mov	r2, r7
 8000f38:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	221b      	movs	r2, #27
 8000f42:	f000 fa5d 	bl	8001400 <Nrf24_WritePayload>
	GPIO_Set(&radio.NRF_CE);
 8000f46:	463b      	mov	r3, r7
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fdf7 	bl	8001b3c <GPIO_Set>
    int counter=0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while(Nrf24_TxEmpty(&radio)!=0){
 8000f54:	e00d      	b.n	8000f72 <main+0x14a>
      counter++;
 8000f56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      if(counter>0xeeee2){
 8000f60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <main+0x208>)
 8000f66:	429a      	cmp	r2, r3
 8000f68:	dd03      	ble.n	8000f72 <main+0x14a>
    	Nrf24_FlushTx(&radio);
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fb35 	bl	80015dc <Nrf24_FlushTx>
	//  bufOut[i]=0;
	//}
	Nrf24_WritePayload(&radio, bufOut, 27);
	GPIO_Set(&radio.NRF_CE);
    int counter=0;
    while(Nrf24_TxEmpty(&radio)!=0){
 8000f72:	463b      	mov	r3, r7
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fd13 	bl	80019a0 <Nrf24_TxEmpty>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf0c      	ite	eq
 8000f80:	2300      	moveq	r3, #0
 8000f82:	2301      	movne	r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1e5      	bne.n	8000f56 <main+0x12e>
      counter++;
      if(counter>0xeeee2){
    	Nrf24_FlushTx(&radio);
      }
    }
	GPIO_Reset(&radio.NRF_CE);
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fde7 	bl	8001b60 <GPIO_Reset>
    if(Nrf24_DataSent(&radio)){
 8000f92:	463b      	mov	r3, r7
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fc59 	bl	800184c <Nrf24_DataSent>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bf0c      	ite	eq
 8000fa0:	2300      	moveq	r3, #0
 8000fa2:	2301      	movne	r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d008      	beq.n	8000fbc <main+0x194>
      Nrf24_CleanDataSent(&radio);
 8000faa:	463b      	mov	r3, r7
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fc8f 	bl	80018d0 <Nrf24_CleanDataSent>
	  GPIO_Toggle(&LED6);
 8000fb2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fde4 	bl	8001b84 <GPIO_Toggle>
	}
	if(Nrf24_MaxRt(&radio)){
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fc70 	bl	80018a4 <Nrf24_MaxRt>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf0c      	ite	eq
 8000fca:	2300      	moveq	r3, #0
 8000fcc:	2301      	movne	r3, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00c      	beq.n	8000fee <main+0x1c6>
	  Nrf24_CleanMaxRt(&radio);
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fca2 	bl	8001920 <Nrf24_CleanMaxRt>
	  Nrf24_FlushTx(&radio);
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fafc 	bl	80015dc <Nrf24_FlushTx>
	  GPIO_Toggle(&LED5);
 8000fe4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fdcb 	bl	8001b84 <GPIO_Toggle>
	}
	if(Nrf24_DataReady(&radio)){
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fc41 	bl	8001878 <Nrf24_DataReady>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	bf0c      	ite	eq
 8000ffc:	2300      	moveq	r3, #0
 8000ffe:	2301      	movne	r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d011      	beq.n	800102a <main+0x202>
	  uint8_t bufIn[17];
	  Nrf24_CleanDataReady(&radio);
 8001006:	463b      	mov	r3, r7
 8001008:	4618      	mov	r0, r3
 800100a:	f000 fc75 	bl	80018f8 <Nrf24_CleanDataReady>
	  Nrf24_ReadPayload(&radio, bufIn, 17);
 800100e:	463a      	mov	r2, r7
 8001010:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001014:	4610      	mov	r0, r2
 8001016:	4619      	mov	r1, r3
 8001018:	2211      	movs	r2, #17
 800101a:	f000 fa69 	bl	80014f0 <Nrf24_ReadPayload>
	  CDC_Transmit_FS(bufIn, 17);
 800101e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001022:	4618      	mov	r0, r3
 8001024:	2111      	movs	r1, #17
 8001026:	f7ff fcfd 	bl	8000a24 <CDC_Transmit_FS>
	}
  }
 800102a:	e735      	b.n	8000e98 <main+0x70>
 800102c:	40020c00 	.word	0x40020c00
 8001030:	000eeee2 	.word	0x000eeee2

08001034 <_Z18SystemClock_Configv>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38
 800103e:	4b35      	ldr	r3, [pc, #212]	; (8001114 <_Z18SystemClock_Configv+0xe0>)
 8001040:	4a34      	ldr	r2, [pc, #208]	; (8001114 <_Z18SystemClock_Configv+0xe0>)
 8001042:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001044:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <_Z18SystemClock_Configv+0xe0>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	63bb      	str	r3, [r7, #56]	; 0x38
 8001054:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
 800105a:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <_Z18SystemClock_Configv+0xe4>)
 800105c:	4a2e      	ldr	r2, [pc, #184]	; (8001118 <_Z18SystemClock_Configv+0xe4>)
 800105e:	6812      	ldr	r2, [r2, #0]
 8001060:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <_Z18SystemClock_Configv+0xe4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
 8001070:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001072:	2302      	movs	r3, #2
 8001074:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001076:	2301      	movs	r3, #1
 8001078:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800107a:	2310      	movs	r3, #16
 800107c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107e:	2302      	movs	r3, #2
 8001080:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001086:	2310      	movs	r3, #16
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 192;
 800108a:	23c0      	movs	r3, #192	; 0xc0
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001092:	2304      	movs	r3, #4
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4618      	mov	r0, r3
 800109a:	f005 ff45 	bl	8006f28 <HAL_RCC_OscConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf0c      	ite	eq
 80010a4:	2300      	moveq	r3, #0
 80010a6:	2301      	movne	r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 80010ae:	f000 f837 	bl	8001120 <_Z13Error_Handlerv>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 80010b2:	230f      	movs	r3, #15
 80010b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010b6:	2300      	movs	r3, #0
 80010b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010ca:	4618      	mov	r0, r3
 80010cc:	2100      	movs	r1, #0
 80010ce:	f006 f93d 	bl	800734c <HAL_RCC_ClockConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf0c      	ite	eq
 80010d8:	2300      	moveq	r3, #0
 80010da:	2301      	movne	r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 80010e2:	f000 f81d 	bl	8001120 <_Z13Error_Handlerv>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80010e6:	f006 fb41 	bl	800776c <HAL_RCC_GetHCLKFreq>
 80010ea:	4602      	mov	r2, r0
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <_Z18SystemClock_Configv+0xe8>)
 80010ee:	fba3 1302 	umull	r1, r3, r3, r2
 80010f2:	099b      	lsrs	r3, r3, #6
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00b fdeb 	bl	800ccd0 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80010fa:	2004      	movs	r0, #4
 80010fc:	f00b fe92 	bl	800ce24 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	2100      	movs	r1, #0
 8001106:	2200      	movs	r2, #0
 8001108:	f00b fda4 	bl	800cc54 <HAL_NVIC_SetPriority>
}
 800110c:	3750      	adds	r7, #80	; 0x50
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40007000 	.word	0x40007000
 800111c:	10624dd3 	.word	0x10624dd3

08001120 <_Z13Error_Handlerv>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
 8001124:	e7fe      	b.n	8001124 <_Z13Error_Handlerv+0x4>
 8001126:	bf00      	nop

08001128 <Nrf24_Init>:
#include <NRF24.h>

uint8_t addressRoboList[] = {0XC3, 0XC4, 0XC5, 0XC6, 0XC7, 0XC8, 0XC9,
		0XCA, 0XCB, 0XB3, 0XB4, 0XB5, 0XB6, 0XB7, 0XB8, 0XB9};

void Nrf24_Init(Nrf24 *these) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  MySpi_Init(&these->NRF_Spi);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3314      	adds	r3, #20
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fd5d 	bl	8000bf4 <MySpi_Init>
  GPIO_Init(&these->NRF_CE, GPIOA, GPIO_PIN_3);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4618      	mov	r0, r3
 800113e:	4905      	ldr	r1, [pc, #20]	; (8001154 <Nrf24_Init+0x2c>)
 8001140:	2208      	movs	r2, #8
 8001142:	f000 fc59 	bl	80019f8 <GPIO_Init>
  GPIO_Reset(&these->NRF_CE);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fd09 	bl	8001b60 <GPIO_Reset>
}
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40020000 	.word	0x40020000

08001158 <Nrf24_Config>:
int Nrf24_Config(Nrf24 *these){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint8_t reg_value;
  if(these->is_rx)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <Nrf24_Config+0x16>
    reg_value=0b00001011;
 8001168:	230b      	movs	r3, #11
 800116a:	72fb      	strb	r3, [r7, #11]
 800116c:	e001      	b.n	8001172 <Nrf24_Config+0x1a>
  else
	reg_value=0b00001010;
 800116e:	230a      	movs	r3, #10
 8001170:	72fb      	strb	r3, [r7, #11]
  Nrf24_WriteRegister(these, 0x00, &reg_value, 1);
 8001172:	f107 030b 	add.w	r3, r7, #11
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	2100      	movs	r1, #0
 800117a:	461a      	mov	r2, r3
 800117c:	2301      	movs	r3, #1
 800117e:	f000 f849 	bl	8001214 <Nrf24_WriteRegister>
  reg_value=0b11110011;
 8001182:	23f3      	movs	r3, #243	; 0xf3
 8001184:	72fb      	strb	r3, [r7, #11]
  Nrf24_WriteRegister(these, 0x04, &reg_value, 1);
 8001186:	f107 030b 	add.w	r3, r7, #11
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	2104      	movs	r1, #4
 800118e:	461a      	mov	r2, r3
 8001190:	2301      	movs	r3, #1
 8001192:	f000 f83f 	bl	8001214 <Nrf24_WriteRegister>
  reg_value=0b00000111;
 8001196:	2307      	movs	r3, #7
 8001198:	72fb      	strb	r3, [r7, #11]
  Nrf24_WriteRegister(these, 0x05, &reg_value, 1);
 800119a:	f107 030b 	add.w	r3, r7, #11
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	2105      	movs	r1, #5
 80011a2:	461a      	mov	r2, r3
 80011a4:	2301      	movs	r3, #1
 80011a6:	f000 f835 	bl	8001214 <Nrf24_WriteRegister>
  reg_value=0b00000011;
 80011aa:	2303      	movs	r3, #3
 80011ac:	72fb      	strb	r3, [r7, #11]
  Nrf24_WriteRegister(these, 0x1c, &reg_value, 1);
 80011ae:	f107 030b 	add.w	r3, r7, #11
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	211c      	movs	r1, #28
 80011b6:	461a      	mov	r2, r3
 80011b8:	2301      	movs	r3, #1
 80011ba:	f000 f82b 	bl	8001214 <Nrf24_WriteRegister>
  reg_value=0b00000110;
 80011be:	2306      	movs	r3, #6
 80011c0:	72fb      	strb	r3, [r7, #11]
  Nrf24_WriteRegister(these, 0x1d, &reg_value, 1);
 80011c2:	f107 030b 	add.w	r3, r7, #11
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	211d      	movs	r1, #29
 80011ca:	461a      	mov	r2, r3
 80011cc:	2301      	movs	r3, #1
 80011ce:	f000 f821 	bl	8001214 <Nrf24_WriteRegister>
  Nrf24_FlushRx(these);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 fa2a 	bl	800162c <Nrf24_FlushRx>
  Nrf24_FlushTx(these);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f9ff 	bl	80015dc <Nrf24_FlushTx>
  reg_value=0b01110000;
 80011de:	2370      	movs	r3, #112	; 0x70
 80011e0:	72fb      	strb	r3, [r7, #11]
  Nrf24_WriteRegister(these, (uint8_t) 0x07, &reg_value, 1);
 80011e2:	f107 030b 	add.w	r3, r7, #11
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	2107      	movs	r1, #7
 80011ea:	461a      	mov	r2, r3
 80011ec:	2301      	movs	r3, #1
 80011ee:	f000 f811 	bl	8001214 <Nrf24_WriteRegister>
  int i;
  for(i=0;i<0xeeeee2;i++);
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	e002      	b.n	80011fe <Nrf24_Config+0xa6>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <Nrf24_Config+0xb8>)
 8001202:	429a      	cmp	r2, r3
 8001204:	ddf8      	ble.n	80011f8 <Nrf24_Config+0xa0>
  return 1;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	00eeeee1 	.word	0x00eeeee1

08001214 <Nrf24_WriteRegister>:
int Nrf24_WriteRegister(Nrf24 *these, uint8_t adress, uint8_t *new_value, int size){
 8001214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001218:	b08d      	sub	sp, #52	; 0x34
 800121a:	af00      	add	r7, sp, #0
 800121c:	6178      	str	r0, [r7, #20]
 800121e:	60fa      	str	r2, [r7, #12]
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	460b      	mov	r3, r1
 8001224:	74fb      	strb	r3, [r7, #19]
 8001226:	466b      	mov	r3, sp
 8001228:	461e      	mov	r6, r3
  uint8_t buf_in[size+1];
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	1c59      	adds	r1, r3, #1
 800122e:	1e4b      	subs	r3, r1, #1
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
 8001232:	460b      	mov	r3, r1
 8001234:	461a      	mov	r2, r3
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	00d8      	lsls	r0, r3, #3
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	00d0      	lsls	r0, r2, #3
 8001248:	460b      	mov	r3, r1
 800124a:	461a      	mov	r2, r3
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8001254:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 8001258:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 800125c:	460b      	mov	r3, r1
 800125e:	3307      	adds	r3, #7
 8001260:	08db      	lsrs	r3, r3, #3
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	ebad 0d03 	sub.w	sp, sp, r3
 8001268:	466b      	mov	r3, sp
 800126a:	3300      	adds	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf_out[size+1];
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1c59      	adds	r1, r3, #1
 8001272:	1e4b      	subs	r3, r1, #1
 8001274:	623b      	str	r3, [r7, #32]
 8001276:	460b      	mov	r3, r1
 8001278:	461a      	mov	r2, r3
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8001282:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001286:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800128a:	460b      	mov	r3, r1
 800128c:	461a      	mov	r2, r3
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	00dd      	lsls	r5, r3, #3
 8001294:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001298:	00d4      	lsls	r4, r2, #3
 800129a:	460b      	mov	r3, r1
 800129c:	3307      	adds	r3, #7
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	ebad 0d03 	sub.w	sp, sp, r3
 80012a6:	466b      	mov	r3, sp
 80012a8:	3300      	adds	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  buf_out[0]=0x20|adress;
 80012ac:	7cfb      	ldrb	r3, [r7, #19]
 80012ae:	f043 0320 	orr.w	r3, r3, #32
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	701a      	strb	r2, [r3, #0]
  int i;
  for(i=1; i<size+1; i++){
 80012b8:	2301      	movs	r3, #1
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012bc:	e00b      	b.n	80012d6 <Nrf24_WriteRegister+0xc2>
    buf_out[i]=new_value[i-1];
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	3b01      	subs	r3, #1
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	4413      	add	r3, r2
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	69f9      	ldr	r1, [r7, #28]
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	440b      	add	r3, r1
 80012ce:	701a      	strb	r2, [r3, #0]
int Nrf24_WriteRegister(Nrf24 *these, uint8_t adress, uint8_t *new_value, int size){
  uint8_t buf_in[size+1];
  uint8_t buf_out[size+1];
  buf_out[0]=0x20|adress;
  int i;
  for(i=1; i<size+1; i++){
 80012d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d2:	3301      	adds	r3, #1
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	429a      	cmp	r2, r3
 80012de:	dcee      	bgt.n	80012be <Nrf24_WriteRegister+0xaa>
    buf_out[i]=new_value[i-1];
  }
  if(!MySpi_Transfer(&these->NRF_Spi, buf_in, buf_out, (int) size+1))
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f103 0014 	add.w	r0, r3, #20
 80012e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	3301      	adds	r3, #1
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	f7ff fcf5 	bl	8000ce0 <MySpi_Transfer>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <Nrf24_WriteRegister+0xec>
    return 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e000      	b.n	8001302 <Nrf24_WriteRegister+0xee>
  //for(int i=0;i<0xee2;i++);
  return 1;
 8001300:	2301      	movs	r3, #1
 8001302:	46b5      	mov	sp, r6
}
 8001304:	4618      	mov	r0, r3
 8001306:	3734      	adds	r7, #52	; 0x34
 8001308:	46bd      	mov	sp, r7
 800130a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800130e:	bf00      	nop

08001310 <Nrf24_ReadRegister>:

int Nrf24_ReadRegister(Nrf24 *these, uint8_t adress, uint8_t *value, int size){
 8001310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001314:	b08d      	sub	sp, #52	; 0x34
 8001316:	af00      	add	r7, sp, #0
 8001318:	6178      	str	r0, [r7, #20]
 800131a:	60fa      	str	r2, [r7, #12]
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	460b      	mov	r3, r1
 8001320:	74fb      	strb	r3, [r7, #19]
 8001322:	466b      	mov	r3, sp
 8001324:	461e      	mov	r6, r3
  uint8_t buf_in[size+1];
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1c59      	adds	r1, r3, #1
 800132a:	1e4b      	subs	r3, r1, #1
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
 800132e:	460b      	mov	r3, r1
 8001330:	461a      	mov	r2, r3
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	00d8      	lsls	r0, r3, #3
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	00d0      	lsls	r0, r2, #3
 8001344:	460b      	mov	r3, r1
 8001346:	461a      	mov	r2, r3
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8001350:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 8001354:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8001358:	460b      	mov	r3, r1
 800135a:	3307      	adds	r3, #7
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	ebad 0d03 	sub.w	sp, sp, r3
 8001364:	466b      	mov	r3, sp
 8001366:	3300      	adds	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf_out[size+1];
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1c59      	adds	r1, r3, #1
 800136e:	1e4b      	subs	r3, r1, #1
 8001370:	623b      	str	r3, [r7, #32]
 8001372:	460b      	mov	r3, r1
 8001374:	461a      	mov	r2, r3
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800137e:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8001382:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8001386:	460b      	mov	r3, r1
 8001388:	461a      	mov	r2, r3
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	00dd      	lsls	r5, r3, #3
 8001390:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001394:	00d4      	lsls	r4, r2, #3
 8001396:	460b      	mov	r3, r1
 8001398:	3307      	adds	r3, #7
 800139a:	08db      	lsrs	r3, r3, #3
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	ebad 0d03 	sub.w	sp, sp, r3
 80013a2:	466b      	mov	r3, sp
 80013a4:	3300      	adds	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  buf_out[0]=adress;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	7cfa      	ldrb	r2, [r7, #19]
 80013ac:	701a      	strb	r2, [r3, #0]
  if(!MySpi_Transfer(&these->NRF_Spi, buf_in, buf_out, (int) size+1))
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f103 0014 	add.w	r0, r3, #20
 80013b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	3301      	adds	r3, #1
 80013be:	b29b      	uxth	r3, r3
 80013c0:	f7ff fc8e 	bl	8000ce0 <MySpi_Transfer>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <Nrf24_ReadRegister+0xbe>
	return 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e012      	b.n	80013f4 <Nrf24_ReadRegister+0xe4>
  int i;
  for(i=0; i<size; i++){
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d2:	e00a      	b.n	80013ea <Nrf24_ReadRegister+0xda>
    value[i]=buf_in[i+1];
 80013d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013dc:	3201      	adds	r2, #1
 80013de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013e0:	5c8a      	ldrb	r2, [r1, r2]
 80013e2:	701a      	strb	r2, [r3, #0]
  uint8_t buf_out[size+1];
  buf_out[0]=adress;
  if(!MySpi_Transfer(&these->NRF_Spi, buf_in, buf_out, (int) size+1))
	return 0;
  int i;
  for(i=0; i<size; i++){
 80013e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e6:	3301      	adds	r3, #1
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbf0      	blt.n	80013d4 <Nrf24_ReadRegister+0xc4>
    value[i]=buf_in[i+1];
  }
  return 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	46b5      	mov	sp, r6
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3734      	adds	r7, #52	; 0x34
 80013fa:	46bd      	mov	sp, r7
 80013fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001400 <Nrf24_WritePayload>:
int Nrf24_WritePayload(Nrf24 *these, uint8_t *data, int size){
 8001400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001404:	b08d      	sub	sp, #52	; 0x34
 8001406:	af00      	add	r7, sp, #0
 8001408:	6178      	str	r0, [r7, #20]
 800140a:	6139      	str	r1, [r7, #16]
 800140c:	60fa      	str	r2, [r7, #12]
 800140e:	466b      	mov	r3, sp
 8001410:	461e      	mov	r6, r3
  uint8_t buf_in[size+1];
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1c59      	adds	r1, r3, #1
 8001416:	1e4b      	subs	r3, r1, #1
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
 800141a:	460b      	mov	r3, r1
 800141c:	461a      	mov	r2, r3
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	00d8      	lsls	r0, r3, #3
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	00d0      	lsls	r0, r2, #3
 8001430:	460b      	mov	r3, r1
 8001432:	461a      	mov	r2, r3
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 800143c:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 8001440:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8001444:	460b      	mov	r3, r1
 8001446:	3307      	adds	r3, #7
 8001448:	08db      	lsrs	r3, r3, #3
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	ebad 0d03 	sub.w	sp, sp, r3
 8001450:	466b      	mov	r3, sp
 8001452:	3300      	adds	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf_out[size+1];
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1c59      	adds	r1, r3, #1
 800145a:	1e4b      	subs	r3, r1, #1
 800145c:	623b      	str	r3, [r7, #32]
 800145e:	460b      	mov	r3, r1
 8001460:	461a      	mov	r2, r3
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800146a:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800146e:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8001472:	460b      	mov	r3, r1
 8001474:	461a      	mov	r2, r3
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	00dd      	lsls	r5, r3, #3
 800147c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001480:	00d4      	lsls	r4, r2, #3
 8001482:	460b      	mov	r3, r1
 8001484:	3307      	adds	r3, #7
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	ebad 0d03 	sub.w	sp, sp, r3
 800148e:	466b      	mov	r3, sp
 8001490:	3300      	adds	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  buf_out[0]=0b10100000;
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	22a0      	movs	r2, #160	; 0xa0
 8001498:	701a      	strb	r2, [r3, #0]
  int i;
  for(i=1; i<size+1; i++){
 800149a:	2301      	movs	r3, #1
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800149e:	e00b      	b.n	80014b8 <Nrf24_WritePayload+0xb8>
	buf_out[i]=data[i-1];
 80014a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a2:	3b01      	subs	r3, #1
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4413      	add	r3, r2
 80014a8:	781a      	ldrb	r2, [r3, #0]
 80014aa:	69f9      	ldr	r1, [r7, #28]
 80014ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ae:	440b      	add	r3, r1
 80014b0:	701a      	strb	r2, [r3, #0]
int Nrf24_WritePayload(Nrf24 *these, uint8_t *data, int size){
  uint8_t buf_in[size+1];
  uint8_t buf_out[size+1];
  buf_out[0]=0b10100000;
  int i;
  for(i=1; i<size+1; i++){
 80014b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b4:	3301      	adds	r3, #1
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014be:	429a      	cmp	r2, r3
 80014c0:	dcee      	bgt.n	80014a0 <Nrf24_WritePayload+0xa0>
	buf_out[i]=data[i-1];
  }
  if(!MySpi_Transfer(&these->NRF_Spi, buf_in, buf_out, (int) size+1))
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f103 0014 	add.w	r0, r3, #20
 80014c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	f7ff fc04 	bl	8000ce0 <MySpi_Transfer>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <Nrf24_WritePayload+0xe2>
	return 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	e000      	b.n	80014e4 <Nrf24_WritePayload+0xe4>
  return 1;
 80014e2:	2301      	movs	r3, #1
 80014e4:	46b5      	mov	sp, r6
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3734      	adds	r7, #52	; 0x34
 80014ea:	46bd      	mov	sp, r7
 80014ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080014f0 <Nrf24_ReadPayload>:
int Nrf24_ReadPayload(Nrf24 *these, uint8_t *data, int size){
 80014f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014f4:	b08d      	sub	sp, #52	; 0x34
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6178      	str	r0, [r7, #20]
 80014fa:	6139      	str	r1, [r7, #16]
 80014fc:	60fa      	str	r2, [r7, #12]
 80014fe:	466b      	mov	r3, sp
 8001500:	461e      	mov	r6, r3
  uint8_t buf_in[size+1];
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1c59      	adds	r1, r3, #1
 8001506:	1e4b      	subs	r3, r1, #1
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
 800150a:	460b      	mov	r3, r1
 800150c:	461a      	mov	r2, r3
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	00d8      	lsls	r0, r3, #3
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	00d0      	lsls	r0, r2, #3
 8001520:	460b      	mov	r3, r1
 8001522:	461a      	mov	r2, r3
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 800152c:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 8001530:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8001534:	460b      	mov	r3, r1
 8001536:	3307      	adds	r3, #7
 8001538:	08db      	lsrs	r3, r3, #3
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	ebad 0d03 	sub.w	sp, sp, r3
 8001540:	466b      	mov	r3, sp
 8001542:	3300      	adds	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf_out[size+1];
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1c59      	adds	r1, r3, #1
 800154a:	1e4b      	subs	r3, r1, #1
 800154c:	623b      	str	r3, [r7, #32]
 800154e:	460b      	mov	r3, r1
 8001550:	461a      	mov	r2, r3
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800155a:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800155e:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8001562:	460b      	mov	r3, r1
 8001564:	461a      	mov	r2, r3
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	00dd      	lsls	r5, r3, #3
 800156c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001570:	00d4      	lsls	r4, r2, #3
 8001572:	460b      	mov	r3, r1
 8001574:	3307      	adds	r3, #7
 8001576:	08db      	lsrs	r3, r3, #3
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	ebad 0d03 	sub.w	sp, sp, r3
 800157e:	466b      	mov	r3, sp
 8001580:	3300      	adds	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  buf_out[0]=0b01100001;
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2261      	movs	r2, #97	; 0x61
 8001588:	701a      	strb	r2, [r3, #0]
  if(!MySpi_Transfer(&these->NRF_Spi, buf_in, buf_out, (int) size+1))
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f103 0014 	add.w	r0, r3, #20
 8001590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	b29b      	uxth	r3, r3
 8001598:	3301      	adds	r3, #1
 800159a:	b29b      	uxth	r3, r3
 800159c:	f7ff fba0 	bl	8000ce0 <MySpi_Transfer>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <Nrf24_ReadPayload+0xba>
	return 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e012      	b.n	80015d0 <Nrf24_ReadPayload+0xe0>
  int i;
  for(i=0; i<size; i++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ae:	e00a      	b.n	80015c6 <Nrf24_ReadPayload+0xd6>
    data[i]=buf_in[i+1];
 80015b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4413      	add	r3, r2
 80015b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b8:	3201      	adds	r2, #1
 80015ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015bc:	5c8a      	ldrb	r2, [r1, r2]
 80015be:	701a      	strb	r2, [r3, #0]
  uint8_t buf_out[size+1];
  buf_out[0]=0b01100001;
  if(!MySpi_Transfer(&these->NRF_Spi, buf_in, buf_out, (int) size+1))
	return 0;
  int i;
  for(i=0; i<size; i++){
 80015c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c2:	3301      	adds	r3, #1
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbf0      	blt.n	80015b0 <Nrf24_ReadPayload+0xc0>
    data[i]=buf_in[i+1];
  }
  return 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	46b5      	mov	sp, r6
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3734      	adds	r7, #52	; 0x34
 80015d6:	46bd      	mov	sp, r7
 80015d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080015dc <Nrf24_FlushTx>:
int Nrf24_FlushTx(Nrf24 *these){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint8_t buf_in[1];
  uint8_t buf_out[1];
  buf_out[0]=0b11100001;
 80015e4:	23e1      	movs	r3, #225	; 0xe1
 80015e6:	733b      	strb	r3, [r7, #12]
  if(!MySpi_Transfer(&these->NRF_Spi, buf_in, buf_out, (int) 1))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f103 0114 	add.w	r1, r3, #20
 80015ee:	f107 0210 	add.w	r2, r7, #16
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	4608      	mov	r0, r1
 80015f8:	4611      	mov	r1, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	2301      	movs	r3, #1
 80015fe:	f7ff fb6f 	bl	8000ce0 <MySpi_Transfer>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <Nrf24_FlushTx+0x30>
	return 0;
 8001608:	2300      	movs	r3, #0
 800160a:	e00b      	b.n	8001624 <Nrf24_FlushTx+0x48>
  int i;
  for(i=0;i<0xee2;i++);
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	e002      	b.n	8001618 <Nrf24_FlushTx+0x3c>
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	f640 63e1 	movw	r3, #3809	; 0xee1
 800161e:	429a      	cmp	r2, r3
 8001620:	ddf7      	ble.n	8001612 <Nrf24_FlushTx+0x36>
  return 1;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <Nrf24_FlushRx>:
int Nrf24_FlushRx(Nrf24 *these){
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint8_t buf_in[1];
  uint8_t buf_out[1];
  buf_out[0]=0b11100010;
 8001634:	23e2      	movs	r3, #226	; 0xe2
 8001636:	733b      	strb	r3, [r7, #12]
  if(!(MySpi_Transfer(&these->NRF_Spi, buf_in, buf_out, (int) 1)))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f103 0114 	add.w	r1, r3, #20
 800163e:	f107 0210 	add.w	r2, r7, #16
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4608      	mov	r0, r1
 8001648:	4611      	mov	r1, r2
 800164a:	461a      	mov	r2, r3
 800164c:	2301      	movs	r3, #1
 800164e:	f7ff fb47 	bl	8000ce0 <MySpi_Transfer>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <Nrf24_FlushRx+0x30>
	return 0;
 8001658:	2300      	movs	r3, #0
 800165a:	e00b      	b.n	8001674 <Nrf24_FlushRx+0x48>
  int i;
  for(i=0;i<0xee2;i++);
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e002      	b.n	8001668 <Nrf24_FlushRx+0x3c>
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	f640 63e1 	movw	r3, #3809	; 0xee1
 800166e:	429a      	cmp	r2, r3
 8001670:	ddf7      	ble.n	8001662 <Nrf24_FlushRx+0x36>
  return 1;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <Nrf24_WriteAckPayload>:
int Nrf24_WriteAckPayload(Nrf24 *these, uint8_t *data, int size){
 800167c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001680:	b08d      	sub	sp, #52	; 0x34
 8001682:	af00      	add	r7, sp, #0
 8001684:	6178      	str	r0, [r7, #20]
 8001686:	6139      	str	r1, [r7, #16]
 8001688:	60fa      	str	r2, [r7, #12]
 800168a:	466b      	mov	r3, sp
 800168c:	461e      	mov	r6, r3
  uint8_t buf_in[size+1];
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1c59      	adds	r1, r3, #1
 8001692:	1e4b      	subs	r3, r1, #1
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
 8001696:	460b      	mov	r3, r1
 8001698:	461a      	mov	r2, r3
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	00d8      	lsls	r0, r3, #3
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	00d0      	lsls	r0, r2, #3
 80016ac:	460b      	mov	r3, r1
 80016ae:	461a      	mov	r2, r3
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 80016b8:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 80016bc:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 80016c0:	460b      	mov	r3, r1
 80016c2:	3307      	adds	r3, #7
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	ebad 0d03 	sub.w	sp, sp, r3
 80016cc:	466b      	mov	r3, sp
 80016ce:	3300      	adds	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf_out[size+1];
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1c59      	adds	r1, r3, #1
 80016d6:	1e4b      	subs	r3, r1, #1
 80016d8:	623b      	str	r3, [r7, #32]
 80016da:	460b      	mov	r3, r1
 80016dc:	461a      	mov	r2, r3
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80016e6:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80016ea:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80016ee:	460b      	mov	r3, r1
 80016f0:	461a      	mov	r2, r3
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	00dd      	lsls	r5, r3, #3
 80016f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80016fc:	00d4      	lsls	r4, r2, #3
 80016fe:	460b      	mov	r3, r1
 8001700:	3307      	adds	r3, #7
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	ebad 0d03 	sub.w	sp, sp, r3
 800170a:	466b      	mov	r3, sp
 800170c:	3300      	adds	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  buf_out[0]=0b10101000;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	22a8      	movs	r2, #168	; 0xa8
 8001714:	701a      	strb	r2, [r3, #0]
  int i;
  for(i=1; i<size+1; i++){
 8001716:	2301      	movs	r3, #1
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800171a:	e00b      	b.n	8001734 <Nrf24_WriteAckPayload+0xb8>
	buf_out[i]=data[i-1];
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	3b01      	subs	r3, #1
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4413      	add	r3, r2
 8001724:	781a      	ldrb	r2, [r3, #0]
 8001726:	69f9      	ldr	r1, [r7, #28]
 8001728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172a:	440b      	add	r3, r1
 800172c:	701a      	strb	r2, [r3, #0]
int Nrf24_WriteAckPayload(Nrf24 *these, uint8_t *data, int size){
  uint8_t buf_in[size+1];
  uint8_t buf_out[size+1];
  buf_out[0]=0b10101000;
  int i;
  for(i=1; i<size+1; i++){
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	3301      	adds	r3, #1
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173a:	429a      	cmp	r2, r3
 800173c:	dcee      	bgt.n	800171c <Nrf24_WriteAckPayload+0xa0>
	buf_out[i]=data[i-1];
  }
  if(!MySpi_Transfer(&these->NRF_Spi, buf_in, buf_out, (int) size+1))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f103 0014 	add.w	r0, r3, #20
 8001744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	b29b      	uxth	r3, r3
 800174c:	3301      	adds	r3, #1
 800174e:	b29b      	uxth	r3, r3
 8001750:	f7ff fac6 	bl	8000ce0 <MySpi_Transfer>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <Nrf24_WriteAckPayload+0xe2>
	return 0;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <Nrf24_WriteAckPayload+0xe4>
  return 1;
 800175e:	2301      	movs	r3, #1
 8001760:	46b5      	mov	sp, r6
}
 8001762:	4618      	mov	r0, r3
 8001764:	3734      	adds	r7, #52	; 0x34
 8001766:	46bd      	mov	sp, r7
 8001768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800176c <Nrf24_CheckPayloadWidth>:
int Nrf24_CheckPayloadWidth(Nrf24 *these){
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint8_t buf_in[2];
  uint8_t buf_out[2];
  buf_out[0]=0b01100000;
 8001774:	2360      	movs	r3, #96	; 0x60
 8001776:	723b      	strb	r3, [r7, #8]
  if(!MySpi_Transfer(&these->NRF_Spi, buf_in, buf_out, (int) 2))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f103 0114 	add.w	r1, r3, #20
 800177e:	f107 020c 	add.w	r2, r7, #12
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4608      	mov	r0, r1
 8001788:	4611      	mov	r1, r2
 800178a:	461a      	mov	r2, r3
 800178c:	2302      	movs	r3, #2
 800178e:	f7ff faa7 	bl	8000ce0 <MySpi_Transfer>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <Nrf24_CheckPayloadWidth+0x30>
	return 0;
 8001798:	2300      	movs	r3, #0
 800179a:	e000      	b.n	800179e <Nrf24_CheckPayloadWidth+0x32>
  return buf_in[1];
 800179c:	7b7b      	ldrb	r3, [r7, #13]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop

080017a8 <Nrf24_SetId>:
int Nrf24_SetId(Nrf24 *these, uint8_t roboId){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
  uint8_t roboAddress[5];
  int i;
  for(i=0; i<5; i++){
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e00a      	b.n	80017d0 <Nrf24_SetId+0x28>
    roboAddress[i]=addressRoboList[roboId];
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	4a10      	ldr	r2, [pc, #64]	; (8001800 <Nrf24_SetId+0x58>)
 80017be:	5cd2      	ldrb	r2, [r2, r3]
 80017c0:	f107 010c 	add.w	r1, r7, #12
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	440b      	add	r3, r1
 80017c8:	701a      	strb	r2, [r3, #0]
  return buf_in[1];
}
int Nrf24_SetId(Nrf24 *these, uint8_t roboId){
  uint8_t roboAddress[5];
  int i;
  for(i=0; i<5; i++){
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3301      	adds	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	ddf1      	ble.n	80017ba <Nrf24_SetId+0x12>
    roboAddress[i]=addressRoboList[roboId];
  }
  Nrf24_WriteRegister(these, 0x0A, roboAddress, 5);
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	210a      	movs	r1, #10
 80017de:	461a      	mov	r2, r3
 80017e0:	2305      	movs	r3, #5
 80017e2:	f7ff fd17 	bl	8001214 <Nrf24_WriteRegister>
  Nrf24_WriteRegister(these, 0x10, roboAddress, 5);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	2110      	movs	r1, #16
 80017ee:	461a      	mov	r2, r3
 80017f0:	2305      	movs	r3, #5
 80017f2:	f7ff fd0f 	bl	8001214 <Nrf24_WriteRegister>
  return 0;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000048 	.word	0x20000048

08001804 <Nrf24_Test>:

int Nrf24_Test(Nrf24 *these){
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint8_t new_value=0x57;
 800180c:	2357      	movs	r3, #87	; 0x57
 800180e:	73fb      	strb	r3, [r7, #15]
  uint8_t value=0;
 8001810:	2300      	movs	r3, #0
 8001812:	73bb      	strb	r3, [r7, #14]
  Nrf24_WriteRegister(these, 0x0F, &new_value, 1);
 8001814:	f107 030f 	add.w	r3, r7, #15
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	210f      	movs	r1, #15
 800181c:	461a      	mov	r2, r3
 800181e:	2301      	movs	r3, #1
 8001820:	f7ff fcf8 	bl	8001214 <Nrf24_WriteRegister>
  Nrf24_ReadRegister(these, 0x0F, &value, 1);
 8001824:	f107 030e 	add.w	r3, r7, #14
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	210f      	movs	r1, #15
 800182c:	461a      	mov	r2, r3
 800182e:	2301      	movs	r3, #1
 8001830:	f7ff fd6e 	bl	8001310 <Nrf24_ReadRegister>
  return (value==new_value);
 8001834:	7bba      	ldrb	r2, [r7, #14]
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	429a      	cmp	r2, r3
 800183a:	bf14      	ite	ne
 800183c:	2300      	movne	r3, #0
 800183e:	2301      	moveq	r3, #1
 8001840:	b2db      	uxtb	r3, r3
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop

0800184c <Nrf24_DataSent>:
int Nrf24_DataSent(Nrf24 *these){
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint8_t value=0;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
  Nrf24_ReadRegister(these, REG_STATUS, &value, 1);
 8001858:	f107 030f 	add.w	r3, r7, #15
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	2107      	movs	r1, #7
 8001860:	461a      	mov	r2, r3
 8001862:	2301      	movs	r3, #1
 8001864:	f7ff fd54 	bl	8001310 <Nrf24_ReadRegister>
  return (value&0b00100000);
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	f003 0320 	and.w	r3, r3, #32
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop

08001878 <Nrf24_DataReady>:
int Nrf24_DataReady(Nrf24 *these){
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint8_t value=0;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]
  Nrf24_ReadRegister(these, REG_STATUS, &value, 1);
 8001884:	f107 030f 	add.w	r3, r7, #15
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	2107      	movs	r1, #7
 800188c:	461a      	mov	r2, r3
 800188e:	2301      	movs	r3, #1
 8001890:	f7ff fd3e 	bl	8001310 <Nrf24_ReadRegister>
  return (value&0b01000000);
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop

080018a4 <Nrf24_MaxRt>:
int Nrf24_MaxRt(Nrf24 *these){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint8_t value=0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]
  Nrf24_ReadRegister(these, REG_STATUS, &value, 1);
 80018b0:	f107 030f 	add.w	r3, r7, #15
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	2107      	movs	r1, #7
 80018b8:	461a      	mov	r2, r3
 80018ba:	2301      	movs	r3, #1
 80018bc:	f7ff fd28 	bl	8001310 <Nrf24_ReadRegister>
  return (value&0b00010000);
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	f003 0310 	and.w	r3, r3, #16
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop

080018d0 <Nrf24_CleanDataSent>:
int Nrf24_CleanDataSent(Nrf24 *these){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint8_t new_value=0b00100000;
 80018d8:	2320      	movs	r3, #32
 80018da:	73fb      	strb	r3, [r7, #15]
  return Nrf24_WriteRegister(these, REG_STATUS, &new_value, 1);
 80018dc:	f107 030f 	add.w	r3, r7, #15
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	2107      	movs	r1, #7
 80018e4:	461a      	mov	r2, r3
 80018e6:	2301      	movs	r3, #1
 80018e8:	f7ff fc94 	bl	8001214 <Nrf24_WriteRegister>
 80018ec:	4603      	mov	r3, r0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop

080018f8 <Nrf24_CleanDataReady>:
int Nrf24_CleanDataReady(Nrf24 *these){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint8_t new_value=0b01000000;
 8001900:	2340      	movs	r3, #64	; 0x40
 8001902:	73fb      	strb	r3, [r7, #15]
  return Nrf24_WriteRegister(these, REG_STATUS, &new_value, 1);
 8001904:	f107 030f 	add.w	r3, r7, #15
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	2107      	movs	r1, #7
 800190c:	461a      	mov	r2, r3
 800190e:	2301      	movs	r3, #1
 8001910:	f7ff fc80 	bl	8001214 <Nrf24_WriteRegister>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop

08001920 <Nrf24_CleanMaxRt>:
int Nrf24_CleanMaxRt(Nrf24 *these){
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint8_t new_value=0b00010000;
 8001928:	2310      	movs	r3, #16
 800192a:	73fb      	strb	r3, [r7, #15]
  return Nrf24_WriteRegister(these, REG_STATUS, &new_value, 1);
 800192c:	f107 030f 	add.w	r3, r7, #15
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	2107      	movs	r1, #7
 8001934:	461a      	mov	r2, r3
 8001936:	2301      	movs	r3, #1
 8001938:	f7ff fc6c 	bl	8001214 <Nrf24_WriteRegister>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop

08001948 <Nrf24_RxEmpty>:
int Nrf24_RxEmpty(Nrf24 *these){
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint8_t value=0;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]
  Nrf24_ReadRegister(these, REG_FIFO_STATUS, &value, 1);
 8001954:	f107 030f 	add.w	r3, r7, #15
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	2117      	movs	r1, #23
 800195c:	461a      	mov	r2, r3
 800195e:	2301      	movs	r3, #1
 8001960:	f7ff fcd6 	bl	8001310 <Nrf24_ReadRegister>
  return (value&0b00000001);
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	f003 0301 	and.w	r3, r3, #1
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop

08001974 <Nrf24_RxFull>:
int Nrf24_RxFull(Nrf24 *these){
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint8_t value=0;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
  Nrf24_ReadRegister(these, REG_FIFO_STATUS, &value, 1);
 8001980:	f107 030f 	add.w	r3, r7, #15
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	2117      	movs	r1, #23
 8001988:	461a      	mov	r2, r3
 800198a:	2301      	movs	r3, #1
 800198c:	f7ff fcc0 	bl	8001310 <Nrf24_ReadRegister>
  return (value&0b00000010);
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	f003 0302 	and.w	r3, r3, #2
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop

080019a0 <Nrf24_TxEmpty>:
int Nrf24_TxEmpty(Nrf24 *these){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint8_t value=0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]
  Nrf24_ReadRegister(these, REG_FIFO_STATUS, &value, 1);
 80019ac:	f107 030f 	add.w	r3, r7, #15
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	2117      	movs	r1, #23
 80019b4:	461a      	mov	r2, r3
 80019b6:	2301      	movs	r3, #1
 80019b8:	f7ff fcaa 	bl	8001310 <Nrf24_ReadRegister>
  return (value&0b00010000);
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	f003 0310 	and.w	r3, r3, #16
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop

080019cc <Nrf24_TxFull>:
int Nrf24_TxFull(Nrf24 *these){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint8_t value=0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]
  Nrf24_ReadRegister(these, REG_FIFO_STATUS, &value, 1);
 80019d8:	f107 030f 	add.w	r3, r7, #15
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	2117      	movs	r1, #23
 80019e0:	461a      	mov	r2, r3
 80019e2:	2301      	movs	r3, #1
 80019e4:	f7ff fc94 	bl	8001310 <Nrf24_ReadRegister>
  return (value&0b00100000);
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	f003 0320 	and.w	r3, r3, #32
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop

080019f8 <GPIO_Init>:
 */

#include "stm32f4xx_hal.h"
#include "GPIO.h"

void GPIO_Init(GPIO *thisee, GPIO_TypeDef* Port, uint16_t Pin) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08e      	sub	sp, #56	; 0x38
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	4613      	mov	r3, r2
 8001a04:	80fb      	strh	r3, [r7, #6]
	if(Port == GPIOA)
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	4b3a      	ldr	r3, [pc, #232]	; (8001af4 <GPIO_Init+0xfc>)
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d10d      	bne.n	8001a2a <GPIO_Init+0x32>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <GPIO_Init+0x100>)
 8001a14:	4a38      	ldr	r2, [pc, #224]	; (8001af8 <GPIO_Init+0x100>)
 8001a16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a18:	f042 0201 	orr.w	r2, r2, #1
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a1e:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <GPIO_Init+0x100>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	623b      	str	r3, [r7, #32]
 8001a28:	6a3b      	ldr	r3, [r7, #32]
	if(Port == GPIOB)
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <GPIO_Init+0x104>)
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d10d      	bne.n	8001a4e <GPIO_Init+0x56>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <GPIO_Init+0x100>)
 8001a38:	4a2f      	ldr	r2, [pc, #188]	; (8001af8 <GPIO_Init+0x100>)
 8001a3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a3c:	f042 0202 	orr.w	r2, r2, #2
 8001a40:	631a      	str	r2, [r3, #48]	; 0x30
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <GPIO_Init+0x100>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
	if(Port == GPIOC)
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <GPIO_Init+0x108>)
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d10d      	bne.n	8001a72 <GPIO_Init+0x7a>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <GPIO_Init+0x100>)
 8001a5c:	4a26      	ldr	r2, [pc, #152]	; (8001af8 <GPIO_Init+0x100>)
 8001a5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a60:	f042 0204 	orr.w	r2, r2, #4
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
 8001a66:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <GPIO_Init+0x100>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	69bb      	ldr	r3, [r7, #24]
	if(Port == GPIOD)
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <GPIO_Init+0x10c>)
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d10d      	bne.n	8001a96 <GPIO_Init+0x9e>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <GPIO_Init+0x100>)
 8001a80:	4a1d      	ldr	r2, [pc, #116]	; (8001af8 <GPIO_Init+0x100>)
 8001a82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a84:	f042 0208 	orr.w	r2, r2, #8
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <GPIO_Init+0x100>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
	if(Port == GPIOE)
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <GPIO_Init+0x110>)
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d10d      	bne.n	8001aba <GPIO_Init+0xc2>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <GPIO_Init+0x100>)
 8001aa4:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <GPIO_Init+0x100>)
 8001aa6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aa8:	f042 0210 	orr.w	r2, r2, #16
 8001aac:	631a      	str	r2, [r3, #48]	; 0x30
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <GPIO_Init+0x100>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStructure.Pin = Pin;
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(Port,&GPIO_InitStructure);
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	68b8      	ldr	r0, [r7, #8]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f007 fc6b 	bl	80093ac <HAL_GPIO_Init>

	HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	68b8      	ldr	r0, [r7, #8]
 8001ada:	4619      	mov	r1, r3
 8001adc:	2200      	movs	r2, #0
 8001ade:	f007 ff11 	bl	8009904 <HAL_GPIO_WritePin>
	thisee->GPIO_Port = Port;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	601a      	str	r2, [r3, #0]
	thisee->GPIO_Pin = Pin;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	88fa      	ldrh	r2, [r7, #6]
 8001aec:	809a      	strh	r2, [r3, #4]
}
 8001aee:	3738      	adds	r7, #56	; 0x38
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020400 	.word	0x40020400
 8001b00:	40020800 	.word	0x40020800
 8001b04:	40020c00 	.word	0x40020c00
 8001b08:	40021000 	.word	0x40021000

08001b0c <GPIO_Status>:
uint8_t GPIO_Status(GPIO *thisee){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint8_t status_bit = HAL_GPIO_ReadPin(thisee->GPIO_Port, thisee->GPIO_Pin);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	889b      	ldrh	r3, [r3, #4]
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f007 fed8 	bl	80098d4 <HAL_GPIO_ReadPin>
 8001b24:	4603      	mov	r3, r0
 8001b26:	73fb      	strb	r3, [r7, #15]
  if(status_bit==GPIO_PIN_SET)
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <GPIO_Status+0x26>
    return 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <GPIO_Status+0x28>
  return 0;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <GPIO_Set>:
void GPIO_Set(GPIO *thise){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(thise->GPIO_Port, thise->GPIO_Pin, GPIO_PIN_SET);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	889b      	ldrh	r3, [r3, #4]
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	2201      	movs	r2, #1
 8001b52:	f007 fed7 	bl	8009904 <HAL_GPIO_WritePin>
	return;
 8001b56:	bf00      	nop
}
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop

08001b60 <GPIO_Reset>:
void GPIO_Reset(GPIO *thise){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(thise->GPIO_Port, thise->GPIO_Pin, GPIO_PIN_RESET);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	889b      	ldrh	r3, [r3, #4]
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	2200      	movs	r2, #0
 8001b76:	f007 fec5 	bl	8009904 <HAL_GPIO_WritePin>
	return;
 8001b7a:	bf00      	nop
}
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop

08001b84 <GPIO_Toggle>:
void GPIO_Toggle(GPIO *thise){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	if(GPIO_Status(thise)){
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ffbd 	bl	8001b0c <GPIO_Status>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <GPIO_Toggle+0x1c>
	  GPIO_Reset(thise);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ffe1 	bl	8001b60 <GPIO_Reset>
 8001b9e:	e002      	b.n	8001ba6 <GPIO_Toggle+0x22>
	}
	else{
	  GPIO_Set(thise);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ffcb 	bl	8001b3c <GPIO_Set>
	}
}
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8001bc2:	88fa      	ldrh	r2, [r7, #6]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8001bc8:	88fa      	ldrh	r2, [r7, #6]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	f7fe fe15 	bl	8000804 <USBD_LL_Transmit>
  
  return USBD_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	f7fe fe03 	bl	8000804 <USBD_LL_Transmit>
  
  return USBD_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	4613      	mov	r3, r2
 8001c14:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2203      	movs	r2, #3
 8001c1a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8001c1e:	88fa      	ldrh	r2, [r7, #6]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8001c26:	88fa      	ldrh	r2, [r7, #6]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	2100      	movs	r1, #0
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	f7fe fdfd 	bl	8000834 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	2100      	movs	r1, #0
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	f7fe fdeb 	bl	8000834 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2204      	movs	r2, #4
 8001c74:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f7fe fdc0 	bl	8000804 <USBD_LL_Transmit>
  
  return USBD_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop

08001c90 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2205      	movs	r2, #5
 8001c9c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f7fe fdc4 	bl	8000834 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop

08001cb8 <USBD_GetRxCount>:
* @param  pdev: device instance
* @param  ep_addr: endpoint address
* @retval Rx Data blength
*/
uint16_t  USBD_GetRxCount (USBD_HandleTypeDef  *pdev , uint8_t ep_addr)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	70fb      	strb	r3, [r7, #3]
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe fdcb 	bl	8000864 <USBD_LL_GetRxDataSize>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	b29b      	uxth	r3, r3
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop

08001cdc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	785b      	ldrb	r3, [r3, #1]
 8001cee:	2b09      	cmp	r3, #9
 8001cf0:	d839      	bhi.n	8001d66 <USBD_StdDevReq+0x8a>
 8001cf2:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <USBD_StdDevReq+0x1c>)
 8001cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf8:	08001d49 	.word	0x08001d49
 8001cfc:	08001d5d 	.word	0x08001d5d
 8001d00:	08001d67 	.word	0x08001d67
 8001d04:	08001d53 	.word	0x08001d53
 8001d08:	08001d67 	.word	0x08001d67
 8001d0c:	08001d2b 	.word	0x08001d2b
 8001d10:	08001d21 	.word	0x08001d21
 8001d14:	08001d67 	.word	0x08001d67
 8001d18:	08001d3f 	.word	0x08001d3f
 8001d1c:	08001d35 	.word	0x08001d35
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	6839      	ldr	r1, [r7, #0]
 8001d24:	f000 f936 	bl	8001f94 <USBD_GetDescriptor>
    break;
 8001d28:	e022      	b.n	8001d70 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	6839      	ldr	r1, [r7, #0]
 8001d2e:	f000 fa2d 	bl	800218c <USBD_SetAddress>
    break;
 8001d32:	e01d      	b.n	8001d70 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	f000 fa66 	bl	8002208 <USBD_SetConfig>
    break;
 8001d3c:	e018      	b.n	8001d70 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	6839      	ldr	r1, [r7, #0]
 8001d42:	f000 faeb 	bl	800231c <USBD_GetConfig>
    break;
 8001d46:	e013      	b.n	8001d70 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	6839      	ldr	r1, [r7, #0]
 8001d4c:	f000 fb18 	bl	8002380 <USBD_GetStatus>
    break;
 8001d50:	e00e      	b.n	8001d70 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	6839      	ldr	r1, [r7, #0]
 8001d56:	f000 fb3d 	bl	80023d4 <USBD_SetFeature>
    break;
 8001d5a:	e009      	b.n	8001d70 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	6839      	ldr	r1, [r7, #0]
 8001d60:	f000 fb52 	bl	8002408 <USBD_ClrFeature>
    break;
 8001d64:	e004      	b.n	8001d70 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	6839      	ldr	r1, [r7, #0]
 8001d6a:	f000 fbaf 	bl	80024cc <USBD_CtlError>
    break;
 8001d6e:	bf00      	nop
  }
  
  return ret;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop

08001d7c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d11c      	bne.n	8001dce <USBD_StdItfReq+0x52>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	889b      	ldrh	r3, [r3, #4]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d811      	bhi.n	8001dc2 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	6839      	ldr	r1, [r7, #0]
 8001daa:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	88db      	ldrh	r3, [r3, #6]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10b      	bne.n	8001dcc <USBD_StdItfReq+0x50>
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d108      	bne.n	8001dcc <USBD_StdItfReq+0x50>
      {
         USBD_CtlSendStatus(pdev);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ff54 	bl	8001c68 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8001dc0:	e00a      	b.n	8001dd8 <USBD_StdItfReq+0x5c>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	6839      	ldr	r1, [r7, #0]
 8001dc6:	f000 fb81 	bl	80024cc <USBD_CtlError>
    }
    break;
 8001dca:	e005      	b.n	8001dd8 <USBD_StdItfReq+0x5c>
 8001dcc:	e004      	b.n	8001dd8 <USBD_StdItfReq+0x5c>
    
  default:
     USBD_CtlError(pdev , req);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	f000 fb7b 	bl	80024cc <USBD_CtlError>
    break;
 8001dd6:	bf00      	nop
  }
  return USBD_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop

08001de4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	889b      	ldrh	r3, [r3, #4]
 8001df6:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d108      	bne.n	8001e16 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	6839      	ldr	r1, [r7, #0]
 8001e10:	4798      	blx	r3
    
    return USBD_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e0b9      	b.n	8001f8a <USBD_StdEPReq+0x1a6>
  }
  
  switch (req->bRequest) 
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	785b      	ldrb	r3, [r3, #1]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d039      	beq.n	8001e92 <USBD_StdEPReq+0xae>
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d002      	beq.n	8001e28 <USBD_StdEPReq+0x44>
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d06a      	beq.n	8001efc <USBD_StdEPReq+0x118>
      break;
    }
    break;
    
  default:
    break;
 8001e26:	e0af      	b.n	8001f88 <USBD_StdEPReq+0x1a4>
  switch (req->bRequest) 
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d002      	beq.n	8001e38 <USBD_StdEPReq+0x54>
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d00d      	beq.n	8001e52 <USBD_StdEPReq+0x6e>
 8001e36:	e026      	b.n	8001e86 <USBD_StdEPReq+0xa2>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d008      	beq.n	8001e50 <USBD_StdEPReq+0x6c>
 8001e3e:	7bbb      	ldrb	r3, [r7, #14]
 8001e40:	2b80      	cmp	r3, #128	; 0x80
 8001e42:	d005      	beq.n	8001e50 <USBD_StdEPReq+0x6c>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8001e44:	7bbb      	ldrb	r3, [r7, #14]
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fc73 	bl	8000734 <USBD_LL_StallEP>
      }
      break;	
 8001e4e:	e01f      	b.n	8001e90 <USBD_StdEPReq+0xac>
 8001e50:	e01e      	b.n	8001e90 <USBD_StdEPReq+0xac>
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	885b      	ldrh	r3, [r3, #2]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10a      	bne.n	8001e70 <USBD_StdEPReq+0x8c>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <USBD_StdEPReq+0x8c>
 8001e60:	7bbb      	ldrb	r3, [r7, #14]
 8001e62:	2b80      	cmp	r3, #128	; 0x80
 8001e64:	d004      	beq.n	8001e70 <USBD_StdEPReq+0x8c>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8001e66:	7bbb      	ldrb	r3, [r7, #14]
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7fe fc62 	bl	8000734 <USBD_LL_StallEP>
          
        }
      }
      pdev->pClass->Setup (pdev, req);   
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	6839      	ldr	r1, [r7, #0]
 8001e7c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fef2 	bl	8001c68 <USBD_CtlSendStatus>
      
      break;
 8001e84:	e004      	b.n	8001e90 <USBD_StdEPReq+0xac>
      
    default:                         
      USBD_CtlError(pdev , req);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	6839      	ldr	r1, [r7, #0]
 8001e8a:	f000 fb1f 	bl	80024cc <USBD_CtlError>
      break;    
 8001e8e:	bf00      	nop
    }
    break;
 8001e90:	e07a      	b.n	8001f88 <USBD_StdEPReq+0x1a4>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d002      	beq.n	8001ea2 <USBD_StdEPReq+0xbe>
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d00d      	beq.n	8001ebc <USBD_StdEPReq+0xd8>
 8001ea0:	e026      	b.n	8001ef0 <USBD_StdEPReq+0x10c>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8001ea2:	7bbb      	ldrb	r3, [r7, #14]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <USBD_StdEPReq+0xd6>
 8001ea8:	7bbb      	ldrb	r3, [r7, #14]
 8001eaa:	2b80      	cmp	r3, #128	; 0x80
 8001eac:	d005      	beq.n	8001eba <USBD_StdEPReq+0xd6>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7fe fc3e 	bl	8000734 <USBD_LL_StallEP>
      }
      break;	
 8001eb8:	e01f      	b.n	8001efa <USBD_StdEPReq+0x116>
 8001eba:	e01e      	b.n	8001efa <USBD_StdEPReq+0x116>
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	885b      	ldrh	r3, [r3, #2]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d114      	bne.n	8001eee <USBD_StdEPReq+0x10a>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8001ec4:	7bbb      	ldrb	r3, [r7, #14]
 8001ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <USBD_StdEPReq+0x102>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8001ece:	7bbb      	ldrb	r3, [r7, #14]
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7fe fc42 	bl	800075c <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff febe 	bl	8001c68 <USBD_CtlSendStatus>
      }
      break;
 8001eec:	e005      	b.n	8001efa <USBD_StdEPReq+0x116>
 8001eee:	e004      	b.n	8001efa <USBD_StdEPReq+0x116>
      
    default:                         
      USBD_CtlError(pdev , req);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	6839      	ldr	r1, [r7, #0]
 8001ef4:	f000 faea 	bl	80024cc <USBD_CtlError>
      break;    
 8001ef8:	bf00      	nop
    }
    break;
 8001efa:	e045      	b.n	8001f88 <USBD_StdEPReq+0x1a4>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d002      	beq.n	8001f0c <USBD_StdEPReq+0x128>
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d00c      	beq.n	8001f24 <USBD_StdEPReq+0x140>
 8001f0a:	e037      	b.n	8001f7c <USBD_StdEPReq+0x198>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8001f0c:	7bbb      	ldrb	r3, [r7, #14]
 8001f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <USBD_StdEPReq+0x13e>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8001f16:	7bbb      	ldrb	r3, [r7, #14]
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7fe fc0a 	bl	8000734 <USBD_LL_StallEP>
      }
      break;	
 8001f20:	e031      	b.n	8001f86 <USBD_StdEPReq+0x1a2>
 8001f22:	e030      	b.n	8001f86 <USBD_StdEPReq+0x1a2>
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8001f24:	7bbb      	ldrb	r3, [r7, #14]
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	da08      	bge.n	8001f3e <USBD_StdEPReq+0x15a>
 8001f2c:	7bbb      	ldrb	r3, [r7, #14]
 8001f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f32:	3301      	adds	r3, #1
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	e007      	b.n	8001f4e <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8001f3e:	7bbb      	ldrb	r3, [r7, #14]
 8001f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8001f44:	3310      	adds	r3, #16
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	60bb      	str	r3, [r7, #8]
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8001f50:	7bbb      	ldrb	r3, [r7, #14]
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f7fe fc15 	bl	8000784 <USBD_LL_IsStallEP>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <USBD_StdEPReq+0x184>
      {
        pep->status = 0x0001;     
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e002      	b.n	8001f6e <USBD_StdEPReq+0x18a>
      }
      else
      {
        pep->status = 0x0000;  
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
      }
      
      USBD_CtlSendData (pdev,
                        (uint8_t *)&pep->status,
 8001f6e:	68bb      	ldr	r3, [r7, #8]
      else
      {
        pep->status = 0x0000;  
      }
      
      USBD_CtlSendData (pdev,
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	4619      	mov	r1, r3
 8001f74:	2202      	movs	r2, #2
 8001f76:	f7ff fe19 	bl	8001bac <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8001f7a:	e004      	b.n	8001f86 <USBD_StdEPReq+0x1a2>
      
    default:                         
      USBD_CtlError(pdev , req);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	6839      	ldr	r1, [r7, #0]
 8001f80:	f000 faa4 	bl	80024cc <USBD_CtlError>
      break;
 8001f84:	bf00      	nop
    }
    break;
 8001f86:	bf00      	nop
    
  default:
    break;
  }
  return ret;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop

08001f94 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	885b      	ldrh	r3, [r3, #2]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	2b06      	cmp	r3, #6
 8001faa:	f200 80d1 	bhi.w	8002150 <USBD_GetDescriptor+0x1bc>
 8001fae:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <USBD_GetDescriptor+0x20>)
 8001fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb4:	08001fd1 	.word	0x08001fd1
 8001fb8:	08001feb 	.word	0x08001feb
 8001fbc:	0800202b 	.word	0x0800202b
 8001fc0:	08002151 	.word	0x08002151
 8001fc4:	08002151 	.word	0x08002151
 8001fc8:	080020fd 	.word	0x080020fd
 8001fcc:	08002123 	.word	0x08002123
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	7c11      	ldrb	r1, [r2, #16]
 8001fdc:	f107 020a 	add.w	r2, r7, #10
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4798      	blx	r3
 8001fe6:	60f8      	str	r0, [r7, #12]
    break;
 8001fe8:	e0b7      	b.n	800215a <USBD_GetDescriptor+0x1c6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7c1b      	ldrb	r3, [r3, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10d      	bne.n	800200e <USBD_GetDescriptor+0x7a>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	f107 020a 	add.w	r2, r7, #10
 8001ffe:	4610      	mov	r0, r2
 8002000:	4798      	blx	r3
 8002002:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3301      	adds	r3, #1
 8002008:	2202      	movs	r2, #2
 800200a:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800200c:	e0a5      	b.n	800215a <USBD_GetDescriptor+0x1c6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	f107 020a 	add.w	r2, r7, #10
 800201a:	4610      	mov	r0, r2
 800201c:	4798      	blx	r3
 800201e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3301      	adds	r3, #1
 8002024:	2202      	movs	r2, #2
 8002026:	701a      	strb	r2, [r3, #0]
    }
    break;
 8002028:	e097      	b.n	800215a <USBD_GetDescriptor+0x1c6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	885b      	ldrh	r3, [r3, #2]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b05      	cmp	r3, #5
 8002032:	d85d      	bhi.n	80020f0 <USBD_GetDescriptor+0x15c>
 8002034:	a201      	add	r2, pc, #4	; (adr r2, 800203c <USBD_GetDescriptor+0xa8>)
 8002036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203a:	bf00      	nop
 800203c:	08002055 	.word	0x08002055
 8002040:	0800206f 	.word	0x0800206f
 8002044:	08002089 	.word	0x08002089
 8002048:	080020a3 	.word	0x080020a3
 800204c:	080020bd 	.word	0x080020bd
 8002050:	080020d7 	.word	0x080020d7
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	7c11      	ldrb	r1, [r2, #16]
 8002060:	f107 020a 	add.w	r2, r7, #10
 8002064:	4608      	mov	r0, r1
 8002066:	4611      	mov	r1, r2
 8002068:	4798      	blx	r3
 800206a:	60f8      	str	r0, [r7, #12]
      break;
 800206c:	e045      	b.n	80020fa <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	7c11      	ldrb	r1, [r2, #16]
 800207a:	f107 020a 	add.w	r2, r7, #10
 800207e:	4608      	mov	r0, r1
 8002080:	4611      	mov	r1, r2
 8002082:	4798      	blx	r3
 8002084:	60f8      	str	r0, [r7, #12]
      break;
 8002086:	e038      	b.n	80020fa <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	7c11      	ldrb	r1, [r2, #16]
 8002094:	f107 020a 	add.w	r2, r7, #10
 8002098:	4608      	mov	r0, r1
 800209a:	4611      	mov	r1, r2
 800209c:	4798      	blx	r3
 800209e:	60f8      	str	r0, [r7, #12]
      break;
 80020a0:	e02b      	b.n	80020fa <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	7c11      	ldrb	r1, [r2, #16]
 80020ae:	f107 020a 	add.w	r2, r7, #10
 80020b2:	4608      	mov	r0, r1
 80020b4:	4611      	mov	r1, r2
 80020b6:	4798      	blx	r3
 80020b8:	60f8      	str	r0, [r7, #12]
      break;
 80020ba:	e01e      	b.n	80020fa <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	7c11      	ldrb	r1, [r2, #16]
 80020c8:	f107 020a 	add.w	r2, r7, #10
 80020cc:	4608      	mov	r0, r1
 80020ce:	4611      	mov	r1, r2
 80020d0:	4798      	blx	r3
 80020d2:	60f8      	str	r0, [r7, #12]
      break;
 80020d4:	e011      	b.n	80020fa <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	7c11      	ldrb	r1, [r2, #16]
 80020e2:	f107 020a 	add.w	r2, r7, #10
 80020e6:	4608      	mov	r0, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	4798      	blx	r3
 80020ec:	60f8      	str	r0, [r7, #12]
      break;
 80020ee:	e004      	b.n	80020fa <USBD_GetDescriptor+0x166>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	f000 f9ea 	bl	80024cc <USBD_CtlError>
      return;
 80020f8:	e044      	b.n	8002184 <USBD_GetDescriptor+0x1f0>
#endif   
    }
    break;
 80020fa:	e02e      	b.n	800215a <USBD_GetDescriptor+0x1c6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7c1b      	ldrb	r3, [r3, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d109      	bne.n	8002118 <USBD_GetDescriptor+0x184>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800210a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210c:	f107 020a 	add.w	r2, r7, #10
 8002110:	4610      	mov	r0, r2
 8002112:	4798      	blx	r3
 8002114:	60f8      	str	r0, [r7, #12]
      break;
 8002116:	e020      	b.n	800215a <USBD_GetDescriptor+0x1c6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	6839      	ldr	r1, [r7, #0]
 800211c:	f000 f9d6 	bl	80024cc <USBD_CtlError>
      return;
 8002120:	e030      	b.n	8002184 <USBD_GetDescriptor+0x1f0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	7c1b      	ldrb	r3, [r3, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10d      	bne.n	8002146 <USBD_GetDescriptor+0x1b2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f107 020a 	add.w	r2, r7, #10
 8002136:	4610      	mov	r0, r2
 8002138:	4798      	blx	r3
 800213a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	3301      	adds	r3, #1
 8002140:	2207      	movs	r2, #7
 8002142:	701a      	strb	r2, [r3, #0]
      break; 
 8002144:	e009      	b.n	800215a <USBD_GetDescriptor+0x1c6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	6839      	ldr	r1, [r7, #0]
 800214a:	f000 f9bf 	bl	80024cc <USBD_CtlError>
      return;
 800214e:	e019      	b.n	8002184 <USBD_GetDescriptor+0x1f0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	6839      	ldr	r1, [r7, #0]
 8002154:	f000 f9ba 	bl	80024cc <USBD_CtlError>
    return;
 8002158:	e014      	b.n	8002184 <USBD_GetDescriptor+0x1f0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800215a:	897b      	ldrh	r3, [r7, #10]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d011      	beq.n	8002184 <USBD_GetDescriptor+0x1f0>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	88db      	ldrh	r3, [r3, #6]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00d      	beq.n	8002184 <USBD_GetDescriptor+0x1f0>
  {
    
    len = MIN(len , req->wLength);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	88da      	ldrh	r2, [r3, #6]
 800216c:	897b      	ldrh	r3, [r7, #10]
 800216e:	429a      	cmp	r2, r3
 8002170:	bf38      	it	cc
 8002172:	4613      	movcc	r3, r2
 8002174:	b29b      	uxth	r3, r3
 8002176:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8002178:	897b      	ldrh	r3, [r7, #10]
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	68f9      	ldr	r1, [r7, #12]
 800217e:	461a      	mov	r2, r3
 8002180:	f7ff fd14 	bl	8001bac <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop

0800218c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	889b      	ldrh	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d12d      	bne.n	80021fa <USBD_SetAddress+0x6e>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	88db      	ldrh	r3, [r3, #6]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d129      	bne.n	80021fa <USBD_SetAddress+0x6e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	885b      	ldrh	r3, [r3, #2]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b0:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d104      	bne.n	80021c6 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	6839      	ldr	r1, [r7, #0]
 80021c0:	f000 f984 	bl	80024cc <USBD_CtlError>
 80021c4:	e018      	b.n	80021f8 <USBD_SetAddress+0x6c>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7fe fb02 	bl	80007dc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff fd45 	bl	8001c68 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d004      	beq.n	80021ee <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
 80021ec:	e004      	b.n	80021f8 <USBD_SetAddress+0x6c>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80021f6:	e004      	b.n	8002202 <USBD_SetAddress+0x76>
 80021f8:	e003      	b.n	8002202 <USBD_SetAddress+0x76>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	f000 f965 	bl	80024cc <USBD_CtlError>
  } 
}
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	885b      	ldrh	r3, [r3, #2]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b3f      	ldr	r3, [pc, #252]	; (8002318 <USBD_SetConfig+0x110>)
 800221a:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800221c:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <USBD_SetConfig+0x110>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d904      	bls.n	800222e <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	6839      	ldr	r1, [r7, #0]
 8002228:	f000 f950 	bl	80024cc <USBD_CtlError>
 800222c:	e070      	b.n	8002310 <USBD_SetConfig+0x108>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8002234:	2b02      	cmp	r3, #2
 8002236:	d002      	beq.n	800223e <USBD_SetConfig+0x36>
 8002238:	2b03      	cmp	r3, #3
 800223a:	d023      	beq.n	8002284 <USBD_SetConfig+0x7c>
 800223c:	e063      	b.n	8002306 <USBD_SetConfig+0xfe>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800223e:	4b36      	ldr	r3, [pc, #216]	; (8002318 <USBD_SetConfig+0x110>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01a      	beq.n	800227c <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8002246:	4b34      	ldr	r3, [pc, #208]	; (8002318 <USBD_SetConfig+0x110>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2203      	movs	r2, #3
 8002254:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002258:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <USBD_SetConfig+0x110>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4619      	mov	r1, r3
 8002260:	f000 fa2c 	bl	80026bc <USBD_SetClassConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b02      	cmp	r3, #2
 8002268:	d104      	bne.n	8002274 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	6839      	ldr	r1, [r7, #0]
 800226e:	f000 f92d 	bl	80024cc <USBD_CtlError>
          return;
 8002272:	e04d      	b.n	8002310 <USBD_SetConfig+0x108>
        }
        USBD_CtlSendStatus(pdev);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff fcf7 	bl	8001c68 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800227a:	e049      	b.n	8002310 <USBD_SetConfig+0x108>
        }
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff fcf3 	bl	8001c68 <USBD_CtlSendStatus>
      }
      break;
 8002282:	e045      	b.n	8002310 <USBD_SetConfig+0x108>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <USBD_SetConfig+0x110>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d112      	bne.n	80022b2 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <USBD_SetConfig+0x110>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <USBD_SetConfig+0x110>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f000 fa29 	bl	80026fc <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff fcdc 	bl	8001c68 <USBD_CtlSendStatus>
 80022b0:	e028      	b.n	8002304 <USBD_SetConfig+0xfc>
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <USBD_SetConfig+0x110>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d01d      	beq.n	80022fc <USBD_SetConfig+0xf4>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f000 fa17 	bl	80026fc <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <USBD_SetConfig+0x110>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <USBD_SetConfig+0x110>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4619      	mov	r1, r3
 80022e0:	f000 f9ec 	bl	80026bc <USBD_SetClassConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d104      	bne.n	80022f4 <USBD_SetConfig+0xec>
        {
          USBD_CtlError(pdev , req);  
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	6839      	ldr	r1, [r7, #0]
 80022ee:	f000 f8ed 	bl	80024cc <USBD_CtlError>
          return;
 80022f2:	e00d      	b.n	8002310 <USBD_SetConfig+0x108>
        }
        USBD_CtlSendStatus(pdev);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff fcb7 	bl	8001c68 <USBD_CtlSendStatus>
 80022fa:	e003      	b.n	8002304 <USBD_SetConfig+0xfc>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff fcb3 	bl	8001c68 <USBD_CtlSendStatus>
      }
      break;
 8002302:	e005      	b.n	8002310 <USBD_SetConfig+0x108>
 8002304:	e004      	b.n	8002310 <USBD_SetConfig+0x108>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	6839      	ldr	r1, [r7, #0]
 800230a:	f000 f8df 	bl	80024cc <USBD_CtlError>
      break;
 800230e:	bf00      	nop
    }
  }
}
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000690 	.word	0x20000690

0800231c <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	88db      	ldrh	r3, [r3, #6]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d004      	beq.n	8002338 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	f000 f8cb 	bl	80024cc <USBD_CtlError>
 8002336:	e01f      	b.n	8002378 <USBD_GetConfig+0x5c>
  }
  else 
  {
    switch (pdev->dev_state )  
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800233e:	2b02      	cmp	r3, #2
 8002340:	d002      	beq.n	8002348 <USBD_GetConfig+0x2c>
 8002342:	2b03      	cmp	r3, #3
 8002344:	d00b      	beq.n	800235e <USBD_GetConfig+0x42>
 8002346:	e012      	b.n	800236e <USBD_GetConfig+0x52>
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_default_config,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3308      	adds	r3, #8
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
      USBD_CtlSendData (pdev, 
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	4619      	mov	r1, r3
 8002356:	2201      	movs	r2, #1
 8002358:	f7ff fc28 	bl	8001bac <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_default_config,
                        1);
      break;
 800235c:	e00c      	b.n	8002378 <USBD_GetConfig+0x5c>
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_config,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3304      	adds	r3, #4
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4619      	mov	r1, r3
 8002366:	2201      	movs	r2, #1
 8002368:	f7ff fc20 	bl	8001bac <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_config,
                        1);
      break;
 800236c:	e004      	b.n	8002378 <USBD_GetConfig+0x5c>
      
    default:
       USBD_CtlError(pdev , req);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	6839      	ldr	r1, [r7, #0]
 8002372:	f000 f8ab 	bl	80024cc <USBD_CtlError>
      break;
 8002376:	bf00      	nop
    }
  }
}
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop

08002380 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8002390:	3b02      	subs	r3, #2
 8002392:	2b01      	cmp	r3, #1
 8002394:	d815      	bhi.n	80023c2 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f043 0202 	orr.w	r2, r3, #2
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	330c      	adds	r3, #12
    if (pdev->dev_remote_wakeup) 
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
    }
    
    USBD_CtlSendData (pdev, 
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4619      	mov	r1, r3
 80023ba:	2202      	movs	r2, #2
 80023bc:	f7ff fbf6 	bl	8001bac <USBD_CtlSendData>
                      (uint8_t *)& pdev->dev_config_status,
                      2);
    break;
 80023c0:	e004      	b.n	80023cc <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	6839      	ldr	r1, [r7, #0]
 80023c6:	f000 f881 	bl	80024cc <USBD_CtlError>
    break;
 80023ca:	bf00      	nop
  }
}
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop

080023d4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	885b      	ldrh	r3, [r3, #2]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10d      	bne.n	8002402 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	6839      	ldr	r1, [r7, #0]
 80023fa:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff fc33 	bl	8001c68 <USBD_CtlSendStatus>
  }

}
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8002418:	3b02      	subs	r3, #2
 800241a:	2b01      	cmp	r3, #1
 800241c:	d813      	bhi.n	8002446 <USBD_ClrFeature+0x3e>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	885b      	ldrh	r3, [r3, #2]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d10e      	bne.n	8002444 <USBD_ClrFeature+0x3c>
    {
      pdev->dev_remote_wakeup = 0; 
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	6839      	ldr	r1, [r7, #0]
 800243a:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fc13 	bl	8001c68 <USBD_CtlSendStatus>
    }
    break;
 8002442:	e005      	b.n	8002450 <USBD_ClrFeature+0x48>
 8002444:	e004      	b.n	8002450 <USBD_ClrFeature+0x48>
    
  default :
     USBD_CtlError(pdev , req);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	6839      	ldr	r1, [r7, #0]
 800244a:	f000 f83f 	bl	80024cc <USBD_CtlError>
    break;
 800244e:	bf00      	nop
  }
}
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop

08002458 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	785a      	ldrb	r2, [r3, #1]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	3302      	adds	r3, #2
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	3303      	adds	r3, #3
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	b29b      	uxth	r3, r3
 8002484:	4413      	add	r3, r2
 8002486:	b29a      	uxth	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	3304      	adds	r3, #4
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	3305      	adds	r3, #5
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	b29b      	uxth	r3, r3
 800249e:	4413      	add	r3, r2
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	3306      	adds	r3, #6
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	3307      	adds	r3, #7
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	80da      	strh	r2, [r3, #6]

}
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop

080024cc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	f7fe f92b 	bl	8000734 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	2100      	movs	r1, #0
 80024e2:	f7fe f927 	bl	8000734 <USBD_LL_StallEP>
}
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d02f      	beq.n	8002562 <USBD_GetString+0x76>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f830 	bl	8002568 <USBD_GetLen>
 8002508:	4603      	mov	r3, r0
 800250a:	3301      	adds	r3, #1
 800250c:	b29b      	uxth	r3, r3
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8002516:	7dfb      	ldrb	r3, [r7, #23]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	75fa      	strb	r2, [r7, #23]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	4413      	add	r3, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	8812      	ldrh	r2, [r2, #0]
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002528:	7dfb      	ldrb	r3, [r7, #23]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	75fa      	strb	r2, [r7, #23]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4413      	add	r3, r2
 8002532:	2203      	movs	r2, #3
 8002534:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8002536:	e010      	b.n	800255a <USBD_GetString+0x6e>
    {
      unicode[idx++] = *desc++;
 8002538:	7dfb      	ldrb	r3, [r7, #23]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	75fa      	strb	r2, [r7, #23]
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	441a      	add	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1c59      	adds	r1, r3, #1
 8002546:	60f9      	str	r1, [r7, #12]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	75fa      	strb	r2, [r7, #23]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	4413      	add	r3, r2
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != '\0') 
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1ea      	bne.n	8002538 <USBD_GetString+0x4c>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8002574:	e005      	b.n	8002582 <USBD_GetLen+0x1a>
    {
        len++;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	3301      	adds	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3301      	adds	r3, #1
 8002580:	607b      	str	r3, [r7, #4]
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f5      	bne.n	8002576 <USBD_GetLen+0xe>
    {
        len++;
        buf++;
    }

    return len;
 800258a:	7bfb      	ldrb	r3, [r7, #15]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	4613      	mov	r3, r2
 80025a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80025ac:	2302      	movs	r3, #2
 80025ae:	e01a      	b.n	80025e6 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	79fa      	ldrb	r2, [r7, #7]
 80025dc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f7fd fff2 	bl	80005c8 <USBD_LL_Init>
  
  return USBD_OK; 
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop

080025f0 <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6852      	ldr	r2, [r2, #4]
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4611      	mov	r1, r2
 8002612:	4798      	blx	r3
  
    /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7fe f841 	bl	800069c <USBD_LL_Stop>
  
  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe f81e 	bl	800065c <USBD_LL_DeInit>
  
  return USBD_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop

0800262c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d006      	beq.n	800264e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e001      	b.n	8002652 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800264e:	2302      	movs	r3, #2
 8002650:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7fe f807 	bl	800067c <USBD_LL_Start>
  
  return USBD_OK;  
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6852      	ldr	r2, [r2, #4]
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	4611      	mov	r1, r2
 8002692:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7fe f801 	bl	800069c <USBD_LL_Stop>
  
  return USBD_OK;  
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop

080026bc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80026c8:	2302      	movs	r3, #2
 80026ca:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00c      	beq.n	80026f0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4798      	blx	r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop

080026fc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4611      	mov	r1, r2
 8002716:	4798      	blx	r3
  return USBD_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop

08002724 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002734:	4618      	mov	r0, r3
 8002736:	6839      	ldr	r1, [r7, #0]
 8002738:	f7ff fe8e 	bl	8002458 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800274a:	461a      	mov	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	2b01      	cmp	r3, #1
 800275e:	d00b      	beq.n	8002778 <USBD_LL_SetupStage+0x54>
 8002760:	2b02      	cmp	r3, #2
 8002762:	d011      	beq.n	8002788 <USBD_LL_SetupStage+0x64>
 8002764:	2b00      	cmp	r3, #0
 8002766:	d117      	bne.n	8002798 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4619      	mov	r1, r3
 8002772:	f7ff fab3 	bl	8001cdc <USBD_StdDevReq>
    break;
 8002776:	e01a      	b.n	80027ae <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4619      	mov	r1, r3
 8002782:	f7ff fafb 	bl	8001d7c <USBD_StdItfReq>
    break;
 8002786:	e012      	b.n	80027ae <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	4619      	mov	r1, r3
 8002792:	f7ff fb27 	bl	8001de4 <USBD_StdEPReq>
    break;
 8002796:	e00a      	b.n	80027ae <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800279e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4619      	mov	r1, r3
 80027a8:	f7fd ffc4 	bl	8000734 <USBD_LL_StallEP>
    break;
 80027ac:	bf00      	nop
  }  
  return USBD_OK;  
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	460b      	mov	r3, r1
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80027c6:	7afb      	ldrb	r3, [r7, #11]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d138      	bne.n	800283e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80027d2:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d142      	bne.n	8002864 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d914      	bls.n	8002814 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	1ad2      	subs	r2, r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	429a      	cmp	r2, r3
 8002802:	bf38      	it	cc
 8002804:	4613      	movcc	r3, r2
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
       
        USBD_CtlContinueRx (pdev, 
 8002806:	b29b      	uxth	r3, r3
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	461a      	mov	r2, r3
 800280e:	f7ff fa19 	bl	8001c44 <USBD_CtlContinueRx>
 8002812:	e027      	b.n	8002864 <USBD_LL_DataOutStage+0xac>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002826:	2b03      	cmp	r3, #3
 8002828:	d105      	bne.n	8002836 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f7ff fa16 	bl	8001c68 <USBD_CtlSendStatus>
 800283c:	e012      	b.n	8002864 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00c      	beq.n	8002864 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8002850:	2b03      	cmp	r3, #3
 8002852:	d107      	bne.n	8002864 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	7afa      	ldrb	r2, [r7, #11]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	4611      	mov	r1, r2
 8002862:	4798      	blx	r3
  }  
  return USBD_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop

08002870 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	460b      	mov	r3, r1
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800287e:	7afb      	ldrb	r3, [r7, #11]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d16c      	bne.n	800295e <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3314      	adds	r3, #20
 8002888:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8002890:	2b02      	cmp	r3, #2
 8002892:	d157      	bne.n	8002944 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	429a      	cmp	r2, r3
 800289e:	d915      	bls.n	80028cc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	1ad2      	subs	r2, r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	689b      	ldr	r3, [r3, #8]
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
        
        USBD_CtlContinueSendData (pdev, 
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	461a      	mov	r2, r3
 80028ba:	f7ff f993 	bl	8001be4 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	2100      	movs	r1, #0
 80028c2:	2200      	movs	r2, #0
 80028c4:	2300      	movs	r3, #0
 80028c6:	f7fd ffb5 	bl	8000834 <USBD_LL_PrepareReceive>
 80028ca:	e03b      	b.n	8002944 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	68d2      	ldr	r2, [r2, #12]
 80028d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80028d8:	fb02 f201 	mul.w	r2, r2, r1
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d11c      	bne.n	800291c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	68db      	ldr	r3, [r3, #12]
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d316      	bcc.n	800291c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
           (pep->total_length >= pep->maxpacket) &&
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d20f      	bcs.n	800291c <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	2100      	movs	r1, #0
 8002900:	2200      	movs	r2, #0
 8002902:	f7ff f96f 	bl	8001be4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	2100      	movs	r1, #0
 8002912:	2200      	movs	r2, #0
 8002914:	2300      	movs	r3, #0
 8002916:	f7fd ff8d 	bl	8000834 <USBD_LL_PrepareReceive>
 800291a:	e013      	b.n	8002944 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800292e:	2b03      	cmp	r3, #3
 8002930:	d105      	bne.n	800293e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7ff f9a6 	bl	8001c90 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800294a:	2b01      	cmp	r3, #1
 800294c:	d11a      	bne.n	8002984 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff fea8 	bl	80026a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800295c:	e012      	b.n	8002984 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00c      	beq.n	8002984 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8002970:	2b03      	cmp	r3, #3
 8002972:	d107      	bne.n	8002984 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	7afa      	ldrb	r2, [r7, #11]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	4611      	mov	r1, r2
 8002982:	4798      	blx	r3
  }  
  return USBD_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop

08002990 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	2100      	movs	r1, #0
 800299c:	2200      	movs	r2, #0
 800299e:	2340      	movs	r3, #64	; 0x40
 80029a0:	f7fd fe8c 	bl	80006bc <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2240      	movs	r2, #64	; 0x40
 80029a8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	2180      	movs	r1, #128	; 0x80
 80029b0:	2200      	movs	r2, #0
 80029b2:	2340      	movs	r3, #64	; 0x40
 80029b4:	f7fd fe82 	bl	80006bc <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2240      	movs	r2, #64	; 0x40
 80029bc:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6852      	ldr	r2, [r2, #4]
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4798      	blx	r3
 
  
  return USBD_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop

080029f0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2204      	movs	r2, #4
 8002a28:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop

08002a3c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop

08002a60 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d10b      	bne.n	8002a8a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop

08002ab0 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop

08002acc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop

08002ae4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6852      	ldr	r2, [r2, #4]
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4611      	mov	r1, r2
 8002b06:	4798      	blx	r3
   
  return USBD_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop

08002b14 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	7c1b      	ldrb	r3, [r3, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10e      	bne.n	8002b4a <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	2181      	movs	r1, #129	; 0x81
 8002b30:	2202      	movs	r2, #2
 8002b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b36:	f7fd fdc1 	bl	80006bc <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b44:	f7fd fdba 	bl	80006bc <USBD_LL_OpenEP>
 8002b48:	e00b      	b.n	8002b62 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	2181      	movs	r1, #129	; 0x81
 8002b4e:	2202      	movs	r2, #2
 8002b50:	2340      	movs	r3, #64	; 0x40
 8002b52:	f7fd fdb3 	bl	80006bc <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	2340      	movs	r3, #64	; 0x40
 8002b5e:	f7fd fdad 	bl	80006bc <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	2182      	movs	r1, #130	; 0x82
 8002b66:	2203      	movs	r2, #3
 8002b68:	2308      	movs	r3, #8
 8002b6a:	f7fd fda7 	bl	80006bc <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002b6e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002b72:	f00b fb7d 	bl	800e270 <malloc>
 8002b76:	4603      	mov	r3, r0
 8002b78:	461a      	mov	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d102      	bne.n	8002b90 <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
 8002b8e:	e028      	b.n	8002be2 <USBD_CDC_Init+0xce>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002b96:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	7c1b      	ldrb	r3, [r3, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <USBD_CDC_Init+0xbc>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bca:	f7fd fe33 	bl	8000834 <USBD_LL_PrepareReceive>
 8002bce:	e008      	b.n	8002be2 <USBD_CDC_Init+0xce>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	2101      	movs	r1, #1
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2340      	movs	r3, #64	; 0x40
 8002bde:	f7fd fe29 	bl	8000834 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	2181      	movs	r1, #129	; 0x81
 8002c00:	f7fd fd70 	bl	80006e4 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	2101      	movs	r1, #1
 8002c08:	f7fd fd6c 	bl	80006e4 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	2182      	movs	r1, #130	; 0x82
 8002c10:	f7fd fd68 	bl	80006e4 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00e      	beq.n	8002c3c <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f00b fb26 	bl	800e280 <free>
    pdev->pClassData = NULL;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop

08002c48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002c58:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d03e      	beq.n	8002ce4 <USBD_CDC_Setup+0x9c>
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d000      	beq.n	8002c6c <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8002c6a:	e047      	b.n	8002cfc <USBD_CDC_Setup+0xb4>
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	88db      	ldrh	r3, [r3, #6]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d02c      	beq.n	8002cce <USBD_CDC_Setup+0x86>
    {
      if (req->bmRequest & 0x80)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	da12      	bge.n	8002ca6 <USBD_CDC_Setup+0x5e>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8002c8c:	68f9      	ldr	r1, [r7, #12]
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	88d2      	ldrh	r2, [r2, #6]
 8002c92:	4798      	blx	r3
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 8002c94:	68fa      	ldr	r2, [r7, #12]
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	88db      	ldrh	r3, [r3, #6]
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f7fe ff84 	bl	8001bac <USBD_CtlSendData>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8002ca4:	e02b      	b.n	8002cfe <USBD_CDC_Setup+0xb6>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	785a      	ldrb	r2, [r3, #1]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	88db      	ldrh	r3, [r3, #6]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
                           (uint8_t *)hcdc->data,
 8002cbc:	68fa      	ldr	r2, [r7, #12]
      else
      {
        hcdc->CmdOpCode = req->bRequest;
        hcdc->CmdLength = req->wLength;
        
        USBD_CtlPrepareRx (pdev, 
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	88db      	ldrh	r3, [r3, #6]
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f7fe ff9e 	bl	8001c08 <USBD_CtlPrepareRx>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8002ccc:	e017      	b.n	8002cfe <USBD_CDC_Setup+0xb6>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	7852      	ldrb	r2, [r2, #1]
 8002cda:	4610      	mov	r0, r2
 8002cdc:	6839      	ldr	r1, [r7, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	4798      	blx	r3
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8002ce2:	e00c      	b.n	8002cfe <USBD_CDC_Setup+0xb6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	785b      	ldrb	r3, [r3, #1]
 8002ce8:	2b0a      	cmp	r3, #10
 8002cea:	d001      	beq.n	8002cf0 <USBD_CDC_Setup+0xa8>
 8002cec:	2b0b      	cmp	r3, #11
                        &ifalt,
                        1);
      break;
      
    case USB_REQ_SET_INTERFACE :
      break;
 8002cee:	e005      	b.n	8002cfc <USBD_CDC_Setup+0xb4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4905      	ldr	r1, [pc, #20]	; (8002d08 <USBD_CDC_Setup+0xc0>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f7fe ff59 	bl	8001bac <USBD_CtlSendData>
                        &ifalt,
                        1);
      break;
 8002cfa:	bf00      	nop
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8002cfc:	bf00      	nop
  }
  return USBD_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000691 	.word	0x20000691

08002d0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002d1e:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8002d36:	2302      	movs	r3, #2
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002d56:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f7fd fd81 	bl	8000864 <USBD_LL_GetRxDataSize>
 8002d62:	4602      	mov	r2, r0
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00e      	beq.n	8002d92 <USBD_CDC_DataOut+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8002d88:	4608      	mov	r0, r1
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4798      	blx	r3

    return USBD_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <USBD_CDC_DataOut+0x50>
  }
  else
  {
    return USBD_FAIL;
 8002d92:	2302      	movs	r3, #2
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002daa:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d014      	beq.n	8002de0 <USBD_CDC_EP0_RxReady+0x44>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002dbc:	2bff      	cmp	r3, #255	; 0xff
 8002dbe:	d00f      	beq.n	8002de0 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8002dce:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002dd6:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	22ff      	movs	r2, #255	; 0xff
 8002ddc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop

08002dec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2243      	movs	r2, #67	; 0x43
 8002df8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8002dfa:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	200000e0 	.word	0x200000e0

08002e0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2243      	movs	r2, #67	; 0x43
 8002e18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8002e1a:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	2000009c 	.word	0x2000009c

08002e2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2243      	movs	r2, #67	; 0x43
 8002e38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8002e3a:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	20000124 	.word	0x20000124

08002e4c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	220a      	movs	r2, #10
 8002e58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8002e5a:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	20000058 	.word	0x20000058

08002e6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8002e76:	2302      	movs	r3, #2
 8002e78:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop

08002e9c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002eb0:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002eba:	88fa      	ldrh	r2, [r7, #6]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002ee0:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002f06:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d017      	beq.n	8002f42 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d110      	bne.n	8002f3e <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	2181      	movs	r1, #129	; 0x81
 8002f36:	f7fd fc65 	bl	8000804 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e002      	b.n	8002f44 <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 8002f42:	2302      	movs	r3, #2
  }
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002f5a:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d019      	beq.n	8002f9a <USBD_CDC_ReceivePacket+0x4e>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7c1b      	ldrb	r3, [r3, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10a      	bne.n	8002f84 <USBD_CDC_ReceivePacket+0x38>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	2101      	movs	r1, #1
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f7e:	f7fd fc59 	bl	8000834 <USBD_LL_PrepareReceive>
 8002f82:	e008      	b.n	8002f96 <USBD_CDC_ReceivePacket+0x4a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2340      	movs	r3, #64	; 0x40
 8002f92:	f7fd fc4f 	bl	8000834 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e000      	b.n	8002f9c <USBD_CDC_ReceivePacket+0x50>
  }
  else
  {
    return USBD_FAIL;
 8002f9a:	2302      	movs	r3, #2
  }
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	f107 0014 	add.w	r0, r7, #20
 8002fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d120      	bne.n	8002ffe <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d105      	bne.n	8002ff6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f001 fa96 	bl	8004528 <USB_CoreReset>
 8002ffc:	e00c      	b.n	8003018 <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f001 fa8c 	bl	8004528 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d105      	bne.n	800302a <USB_CoreInit+0x86>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003036:	b004      	add	sp, #16
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop

0800303c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f043 0201 	orr.w	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop

08003060 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f023 0201 	bic.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop

08003084 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d106      	bne.n	80030b0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	e008      	b.n	80030c2 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d105      	bne.n	80030c2 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 80030c2:	2032      	movs	r0, #50	; 0x32
 80030c4:	f009 ff66 	bl	800cf94 <HAL_Delay>
  
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop

080030d4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030d4:	b084      	sub	sp, #16
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	f107 001c 	add.w	r0, r7, #28
 80030e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0U)
 80030f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <USB_DevInit+0x34>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	601a      	str	r2, [r3, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	2b01      	cmp	r3, #1
 8003126:	d10c      	bne.n	8003142 <USB_DevInit+0x6e>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	d104      	bne.n	8003138 <USB_DevInit+0x64>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	2100      	movs	r1, #0
 8003132:	f000 f933 	bl	800339c <USB_SetDevSpeed>
 8003136:	e008      	b.n	800314a <USB_DevInit+0x76>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	2101      	movs	r1, #1
 800313c:	f000 f92e 	bl	800339c <USB_SetDevSpeed>
 8003140:	e003      	b.n	800314a <USB_DevInit+0x76>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	2103      	movs	r1, #3
 8003146:	f000 f929 	bl	800339c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	2110      	movs	r1, #16
 800314e:	f000 f8dd 	bl	800330c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f900 	bl	8003358 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315e:	2200      	movs	r2, #0
 8003160:	611a      	str	r2, [r3, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003168:	2200      	movs	r2, #0
 800316a:	615a      	str	r2, [r3, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003172:	f04f 32ff 	mov.w	r2, #4294967295
 8003176:	619a      	str	r2, [r3, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	e02d      	b.n	80031e4 <USB_DevInit+0x110>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	da09      	bge.n	80031ae <USB_DevInit+0xda>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	e007      	b.n	80031be <USB_DevInit+0xea>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ca:	2200      	movs	r2, #0
 80031cc:	611a      	str	r2, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031da:	22ff      	movs	r2, #255	; 0xff
 80031dc:	609a      	str	r2, [r3, #8]
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3301      	adds	r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d8cd      	bhi.n	8003188 <USB_DevInit+0xb4>
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e02d      	b.n	800324e <USB_DevInit+0x17a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	da09      	bge.n	8003218 <USB_DevInit+0x144>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003210:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	e007      	b.n	8003228 <USB_DevInit+0x154>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003234:	2200      	movs	r2, #0
 8003236:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	609a      	str	r2, [r3, #8]
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3301      	adds	r3, #1
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	429a      	cmp	r2, r3
 8003254:	d8cd      	bhi.n	80031f2 <USB_DevInit+0x11e>
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003262:	6912      	ldr	r2, [r2, #16]
 8003264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003268:	611a      	str	r2, [r3, #16]
  
  if (cfg.dma_enable == 1U)
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	2b01      	cmp	r3, #1
 800326e:	d116      	bne.n	800329e <USB_DevInit+0x1ca>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003276:	4a23      	ldr	r2, [pc, #140]	; (8003304 <USB_DevInit+0x230>)
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003280:	461a      	mov	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328e:	f043 0303 	orr.w	r3, r3, #3
 8003292:	6313      	str	r3, [r2, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80032aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80032ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <USB_DevInit+0x1ea>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f043 0210 	orr.w	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <USB_DevInit+0x234>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 80032ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <USB_DevInit+0x208>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f043 0208 	orr.w	r2, r3, #8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80032dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d107      	bne.n	80032f2 <USB_DevInit+0x21e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032ea:	f043 0304 	orr.w	r3, r3, #4
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032fe:	b004      	add	sp, #16
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	00800100 	.word	0x00800100
 8003308:	803c3800 	.word	0x803c3800

0800330c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	019b      	lsls	r3, r3, #6
 800331e:	f043 0220 	orr.w	r2, r3, #32
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	611a      	str	r2, [r3, #16]
 
  do
  {
    if (++count > 200000U)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	3301      	adds	r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <USB_FlushTxFifo+0x48>)
 8003330:	429a      	cmp	r2, r3
 8003332:	d901      	bls.n	8003338 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e006      	b.n	8003346 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f0      	bne.n	8003326 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	00030d40 	.word	0x00030d40

08003358 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2210      	movs	r2, #16
 8003368:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3301      	adds	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <USB_FlushRxFifo+0x40>)
 8003374:	429a      	cmp	r2, r3
 8003376:	d901      	bls.n	800337c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e006      	b.n	800338a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f0      	bne.n	800336a <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	00030d40 	.word	0x00030d40

0800339c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033b4:	6811      	ldr	r1, [r2, #0]
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop

080033cc <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0306 	and.w	r3, r3, #6
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	e01c      	b.n	8003428 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0306 	and.w	r3, r3, #6
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d007      	beq.n	800340e <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0306 	and.w	r3, r3, #6
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800340a:	2b06      	cmp	r3, #6
 800340c:	d102      	bne.n	8003414 <USB_GetDevSpeed+0x48>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 800340e:	2303      	movs	r3, #3
 8003410:	73fb      	strb	r3, [r7, #15]
 8003412:	e009      	b.n	8003428 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0306 	and.w	r3, r3, #6
 8003420:	2b04      	cmp	r3, #4
 8003422:	d101      	bne.n	8003428 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8003424:	2302      	movs	r3, #2
 8003426:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop

08003438 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d13d      	bne.n	80034c6 <USB_ActivateEndpoint+0x8e>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003456:	69d1      	ldr	r1, [r2, #28]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	7812      	ldrb	r2, [r2, #0]
 800345c:	2001      	movs	r0, #1
 800345e:	fa00 f202 	lsl.w	r2, r0, r2
 8003462:	b292      	uxth	r2, r2
 8003464:	430a      	orrs	r2, r1
 8003466:	61da      	str	r2, [r3, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d15b      	bne.n	8003538 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800348e:	461a      	mov	r2, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	0159      	lsls	r1, r3, #5
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	440b      	add	r3, r1
 800349a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f3c3 000a 	ubfx	r0, r3, #0, #11
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	78db      	ldrb	r3, [r3, #3]
 80034ac:	049b      	lsls	r3, r3, #18
 80034ae:	4318      	orrs	r0, r3
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	059b      	lsls	r3, r3, #22
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80034b6:	4303      	orrs	r3, r0
 80034b8:	430b      	orrs	r3, r1
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	e038      	b.n	8003538 <USB_ActivateEndpoint+0x100>
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034d2:	69d1      	ldr	r1, [r2, #28]
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	7812      	ldrb	r2, [r2, #0]
 80034d8:	2001      	movs	r0, #1
 80034da:	fa00 f202 	lsl.w	r2, r0, r2
 80034de:	0412      	lsls	r2, r2, #16
 80034e0:	430a      	orrs	r2, r1
 80034e2:	61da      	str	r2, [r3, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d11d      	bne.n	8003538 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350a:	461a      	mov	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	0159      	lsls	r1, r3, #5
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	440b      	add	r3, r1
 8003516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351a:	6819      	ldr	r1, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f3c3 000a 	ubfx	r0, r3, #0, #11
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	78db      	ldrb	r3, [r3, #3]
 8003528:	049b      	lsls	r3, r3, #18
 800352a:	4303      	orrs	r3, r0
 800352c:	430b      	orrs	r3, r1
 800352e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003536:	6013      	str	r3, [r2, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop

08003548 <USB_ActivateDedicatedEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  static __IO uint32_t debug = 0U;
  
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	785b      	ldrb	r3, [r3, #1]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d152      	bne.n	8003600 <USB_ActivateDedicatedEndpoint+0xb8>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d121      	bne.n	80035b6 <USB_ActivateDedicatedEndpoint+0x6e>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003580:	461a      	mov	r2, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	0159      	lsls	r1, r3, #5
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	440b      	add	r3, r1
 800358c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003590:	6819      	ldr	r1, [r3, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f3c3 000a 	ubfx	r0, r3, #0, #11
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	78db      	ldrb	r3, [r3, #3]
 800359e:	049b      	lsls	r3, r3, #18
 80035a0:	4318      	orrs	r0, r3
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	059b      	lsls	r3, r3, #22
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80035a8:	4303      	orrs	r3, r0
 80035aa:	430b      	orrs	r3, r1
 80035ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b4:	6013      	str	r3, [r2, #0]
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
    
    
    debug  |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	78db      	ldrb	r3, [r3, #3]
 80035c2:	049b      	lsls	r3, r3, #18
 80035c4:	431a      	orrs	r2, r3
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	059b      	lsls	r3, r3, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
    
    
    debug  |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80035cc:	431a      	orrs	r2, r3
 80035ce:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <USB_ActivateDedicatedEndpoint+0x180>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035dc:	4a3a      	ldr	r2, [pc, #232]	; (80036c8 <USB_ActivateDedicatedEndpoint+0x180>)
 80035de:	6013      	str	r3, [r2, #0]
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    
   USBx_DEVICE->DEACHMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	2001      	movs	r0, #1
 80035f4:	fa00 f202 	lsl.w	r2, r0, r2
 80035f8:	b292      	uxth	r2, r2
 80035fa:	430a      	orrs	r2, r1
 80035fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80035fe:	e05b      	b.n	80036b8 <USB_ActivateDedicatedEndpoint+0x170>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d140      	bne.n	800369a <USB_ActivateDedicatedEndpoint+0x152>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	7812      	ldrb	r2, [r2, #0]
 800362a:	0151      	lsls	r1, r2, #5
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	440a      	add	r2, r1
 8003630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003634:	6811      	ldr	r1, [r2, #0]
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	6892      	ldr	r2, [r2, #8]
 800363a:	f3c2 000a 	ubfx	r0, r2, #0, #11
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	78d2      	ldrb	r2, [r2, #3]
 8003642:	0492      	lsls	r2, r2, #18
 8003644:	4310      	orrs	r0, r2
        ((ep->num) << 22U) | (USB_OTG_DOEPCTL_USBAEP));
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	7812      	ldrb	r2, [r2, #0]
 800364a:	0592      	lsls	r2, r2, #22
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 800364c:	4302      	orrs	r2, r0
 800364e:	430a      	orrs	r2, r1
 8003650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003654:	601a      	str	r2, [r3, #0]
        ((ep->num) << 22U) | (USB_OTG_DOEPCTL_USBAEP));
      
      debug = (uint32_t)(((uint32_t )USBx) + USB_OTG_OUT_ENDPOINT_BASE + (0U)*USB_OTG_EP_REG_SIZE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <USB_ActivateDedicatedEndpoint+0x180>)
 800365e:	601a      	str	r2, [r3, #0]
      debug = (uint32_t )&USBx_OUTEP(ep->num)->DOEPCTL;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366e:	461a      	mov	r2, r3
 8003670:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <USB_ActivateDedicatedEndpoint+0x180>)
 8003672:	601a      	str	r2, [r3, #0]
      debug |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	78db      	ldrb	r3, [r3, #3]
 8003680:	049b      	lsls	r3, r3, #18
 8003682:	431a      	orrs	r2, r3
        ((ep->num) << 22U) | (USB_OTG_DOEPCTL_USBAEP)); 
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	059b      	lsls	r3, r3, #22
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
        ((ep->num) << 22U) | (USB_OTG_DOEPCTL_USBAEP));
      
      debug = (uint32_t)(((uint32_t )USBx) + USB_OTG_OUT_ENDPOINT_BASE + (0U)*USB_OTG_EP_REG_SIZE);
      debug = (uint32_t )&USBx_OUTEP(ep->num)->DOEPCTL;
      debug |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 800368a:	431a      	orrs	r2, r3
 800368c:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <USB_ActivateDedicatedEndpoint+0x180>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4313      	orrs	r3, r2
 8003692:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003696:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <USB_ActivateDedicatedEndpoint+0x180>)
 8003698:	601a      	str	r2, [r3, #0]
        ((ep->num) << 22U) | (USB_OTG_DOEPCTL_USBAEP)); 
    } 
    
     USBx_DEVICE->DEACHMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	7812      	ldrb	r2, [r2, #0]
 80036ac:	2001      	movs	r0, #1
 80036ae:	fa00 f202 	lsl.w	r2, r0, r2
 80036b2:	0412      	lsls	r2, r2, #16
 80036b4:	430a      	orrs	r2, r1
 80036b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000694 	.word	0x20000694

080036cc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	785b      	ldrb	r3, [r3, #1]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d132      	bne.n	8003744 <USB_DeactivateEndpoint+0x78>
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ea:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	7812      	ldrb	r2, [r2, #0]
 80036f0:	2001      	movs	r0, #1
 80036f2:	fa00 f202 	lsl.w	r2, r0, r2
 80036f6:	b292      	uxth	r2, r2
 80036f8:	43d2      	mvns	r2, r2
 80036fa:	400a      	ands	r2, r1
 80036fc:	63da      	str	r2, [r3, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800370a:	69d1      	ldr	r1, [r2, #28]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	7812      	ldrb	r2, [r2, #0]
 8003710:	2001      	movs	r0, #1
 8003712:	fa00 f202 	lsl.w	r2, r0, r2
 8003716:	b292      	uxth	r2, r2
 8003718:	43d2      	mvns	r2, r2
 800371a:	400a      	ands	r2, r1
 800371c:	61da      	str	r2, [r3, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4413      	add	r3, r2
 8003728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	7812      	ldrb	r2, [r2, #0]
 8003730:	0151      	lsls	r1, r2, #5
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	440a      	add	r2, r1
 8003736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e031      	b.n	80037a8 <USB_DeactivateEndpoint+0xdc>
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003750:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	7812      	ldrb	r2, [r2, #0]
 8003756:	2001      	movs	r0, #1
 8003758:	fa00 f202 	lsl.w	r2, r0, r2
 800375c:	0412      	lsls	r2, r2, #16
 800375e:	43d2      	mvns	r2, r2
 8003760:	400a      	ands	r2, r1
 8003762:	63da      	str	r2, [r3, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));     
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003770:	69d1      	ldr	r1, [r2, #28]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	7812      	ldrb	r2, [r2, #0]
 8003776:	2001      	movs	r0, #1
 8003778:	fa00 f202 	lsl.w	r2, r0, r2
 800377c:	0412      	lsls	r2, r2, #16
 800377e:	43d2      	mvns	r2, r2
 8003780:	400a      	ands	r2, r1
 8003782:	61da      	str	r2, [r3, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	7812      	ldrb	r2, [r2, #0]
 8003796:	0151      	lsls	r1, r2, #5
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	440a      	add	r2, r1
 800379c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop

080037b8 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d122      	bne.n	8003810 <USB_DeactivateDedicatedEndpoint+0x58>
  {
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	7812      	ldrb	r2, [r2, #0]
 80037dc:	0151      	lsls	r1, r2, #5
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	440a      	add	r2, r1
 80037e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ec:	601a      	str	r2, [r3, #0]
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037fa:	69d1      	ldr	r1, [r2, #28]
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	7812      	ldrb	r2, [r2, #0]
 8003800:	2001      	movs	r0, #1
 8003802:	fa00 f202 	lsl.w	r2, r0, r2
 8003806:	b292      	uxth	r2, r2
 8003808:	43d2      	mvns	r2, r2
 800380a:	400a      	ands	r2, r1
 800380c:	61da      	str	r2, [r3, #28]
 800380e:	e021      	b.n	8003854 <USB_DeactivateDedicatedEndpoint+0x9c>
  }
  else
  {
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP; 
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	7812      	ldrb	r2, [r2, #0]
 8003822:	0151      	lsls	r1, r2, #5
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	440a      	add	r2, r1
 8003828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003832:	601a      	str	r2, [r3, #0]
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003840:	69d1      	ldr	r1, [r2, #28]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	7812      	ldrb	r2, [r2, #0]
 8003846:	2001      	movs	r0, #1
 8003848:	fa00 f202 	lsl.w	r2, r0, r2
 800384c:	0412      	lsls	r2, r2, #16
 800384e:	43d2      	mvns	r2, r2
 8003850:	400a      	ands	r2, r1
 8003852:	61da      	str	r2, [r3, #28]
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop

08003864 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	4613      	mov	r3, r2
 8003870:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	785b      	ldrb	r3, [r3, #1]
 800387a:	2b01      	cmp	r3, #1
 800387c:	f040 813c 	bne.w	8003af8 <USB_EPStartXfer+0x294>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d13a      	bne.n	80038fe <USB_EPStartXfer+0x9a>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003896:	461a      	mov	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	0159      	lsls	r1, r3, #5
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	440b      	add	r3, r1
 80038a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	7812      	ldrb	r2, [r2, #0]
 80038c4:	0151      	lsls	r1, r2, #5
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	440a      	add	r2, r1
 80038ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ce:	6912      	ldr	r2, [r2, #16]
 80038d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80038d4:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	0159      	lsls	r1, r3, #5
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	440b      	add	r3, r1
 80038f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	0cdb      	lsrs	r3, r3, #19
 80038f8:	04db      	lsls	r3, r3, #19
 80038fa:	6113      	str	r3, [r2, #16]
 80038fc:	e083      	b.n	8003a06 <USB_EPStartXfer+0x1a2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390c:	461a      	mov	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	0159      	lsls	r1, r3, #5
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	440b      	add	r3, r1
 8003918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	0cdb      	lsrs	r3, r3, #19
 8003920:	04db      	lsls	r3, r3, #19
 8003922:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003932:	461a      	mov	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	0159      	lsls	r1, r3, #5
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	440b      	add	r3, r1
 800393e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003948:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800394c:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395c:	461a      	mov	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	0159      	lsls	r1, r3, #5
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	440b      	add	r3, r1
 8003968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396c:	6919      	ldr	r1, [r3, #16]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6958      	ldr	r0, [r3, #20]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	4403      	add	r3, r0
 8003978:	1e58      	subs	r0, r3, #1
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003982:	04d8      	lsls	r0, r3, #19
 8003984:	4b86      	ldr	r3, [pc, #536]	; (8003ba0 <USB_EPStartXfer+0x33c>)
 8003986:	4003      	ands	r3, r0
 8003988:	430b      	orrs	r3, r1
 800398a:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4413      	add	r3, r2
 8003996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	0151      	lsls	r1, r2, #5
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	440a      	add	r2, r1
 80039a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a8:	6911      	ldr	r1, [r2, #16]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	6952      	ldr	r2, [r2, #20]
 80039ae:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80039b2:	430a      	orrs	r2, r1
 80039b4:	611a      	str	r2, [r3, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	78db      	ldrb	r3, [r3, #3]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d123      	bne.n	8003a06 <USB_EPStartXfer+0x1a2>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	7812      	ldrb	r2, [r2, #0]
 80039d0:	0151      	lsls	r1, r2, #5
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	440a      	add	r2, r1
 80039d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039da:	6912      	ldr	r2, [r2, #16]
 80039dc:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
 80039e0:	611a      	str	r2, [r3, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	7812      	ldrb	r2, [r2, #0]
 80039f4:	0151      	lsls	r1, r2, #5
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	440a      	add	r2, r1
 80039fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039fe:	6912      	ldr	r2, [r2, #16]
 8003a00:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003a04:	611a      	str	r2, [r3, #16]
      }       
    }

    if (dma == 1U)
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d10a      	bne.n	8003a22 <USB_EPStartXfer+0x1be>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	6912      	ldr	r2, [r2, #16]
 8003a1e:	615a      	str	r2, [r3, #20]
 8003a20:	e015      	b.n	8003a4e <USB_EPStartXfer+0x1ea>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	78db      	ldrb	r3, [r3, #3]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d011      	beq.n	8003a4e <USB_EPStartXfer+0x1ea>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00d      	beq.n	8003a4e <USB_EPStartXfer+0x1ea>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a3e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	7812      	ldrb	r2, [r2, #0]
 8003a44:	2001      	movs	r0, #1
 8003a46:	fa00 f202 	lsl.w	r2, r0, r2
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	635a      	str	r2, [r3, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	78db      	ldrb	r3, [r3, #3]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d12c      	bne.n	8003ab0 <USB_EPStartXfer+0x24c>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d112      	bne.n	8003a8c <USB_EPStartXfer+0x228>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	7812      	ldrb	r2, [r2, #0]
 8003a78:	0151      	lsls	r1, r2, #5
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	440a      	add	r2, r1
 8003a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e011      	b.n	8003ab0 <USB_EPStartXfer+0x24c>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	0151      	lsls	r1, r2, #5
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	440a      	add	r2, r1
 8003aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003aae:	601a      	str	r2, [r3, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	7812      	ldrb	r2, [r2, #0]
 8003ac2:	0151      	lsls	r1, r2, #5
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	440a      	add	r2, r1
 8003ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003ad2:	601a      	str	r2, [r3, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	78db      	ldrb	r3, [r3, #3]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	f040 80ed 	bne.w	8003cb8 <USB_EPStartXfer+0x454>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	68d9      	ldr	r1, [r3, #12]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	79f8      	ldrb	r0, [r7, #7]
 8003aee:	9000      	str	r0, [sp, #0]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fa3d 	bl	8003f70 <USB_WritePacket>
 8003af6:	e0df      	b.n	8003cb8 <USB_EPStartXfer+0x454>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b06:	461a      	mov	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	0159      	lsls	r1, r3, #5
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	440b      	add	r3, r1
 8003b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	0cdb      	lsrs	r3, r3, #19
 8003b1a:	04db      	lsls	r3, r3, #19
 8003b1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	0159      	lsls	r1, r3, #5
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	440b      	add	r3, r1
 8003b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b46:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d129      	bne.n	8003ba4 <USB_EPStartXfer+0x340>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	7812      	ldrb	r2, [r2, #0]
 8003b62:	0151      	lsls	r1, r2, #5
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	440a      	add	r2, r1
 8003b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b6c:	6911      	ldr	r1, [r2, #16]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003b76:	430a      	orrs	r2, r1
 8003b78:	611a      	str	r2, [r3, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	7812      	ldrb	r2, [r2, #0]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b96:	6912      	ldr	r2, [r2, #16]
 8003b98:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003b9c:	611a      	str	r2, [r3, #16]
 8003b9e:	e03b      	b.n	8003c18 <USB_EPStartXfer+0x3b4>
 8003ba0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4413      	add	r3, r2
 8003bae:	1e5a      	subs	r2, r3, #1
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	0159      	lsls	r1, r3, #5
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd8:	6919      	ldr	r1, [r3, #16]
 8003bda:	8afb      	ldrh	r3, [r7, #22]
 8003bdc:	04db      	lsls	r3, r3, #19
 8003bde:	4618      	mov	r0, r3
 8003be0:	4b38      	ldr	r3, [pc, #224]	; (8003cc4 <USB_EPStartXfer+0x460>)
 8003be2:	4003      	ands	r3, r0
 8003be4:	430b      	orrs	r3, r1
 8003be6:	6113      	str	r3, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	7812      	ldrb	r2, [r2, #0]
 8003bfa:	0151      	lsls	r1, r2, #5
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	440a      	add	r2, r1
 8003c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c04:	6911      	ldr	r1, [r2, #16]
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	6892      	ldr	r2, [r2, #8]
 8003c0a:	8af8      	ldrh	r0, [r7, #22]
 8003c0c:	fb00 f202 	mul.w	r2, r0, r2
 8003c10:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003c14:	430a      	orrs	r2, r1
 8003c16:	611a      	str	r2, [r3, #16]
    }

    if (dma == 1U)
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d109      	bne.n	8003c32 <USB_EPStartXfer+0x3ce>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	68d2      	ldr	r2, [r2, #12]
 8003c30:	615a      	str	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	78db      	ldrb	r3, [r3, #3]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d12c      	bne.n	8003c94 <USB_EPStartXfer+0x430>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d112      	bne.n	8003c70 <USB_EPStartXfer+0x40c>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	7812      	ldrb	r2, [r2, #0]
 8003c5c:	0151      	lsls	r1, r2, #5
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	440a      	add	r2, r1
 8003c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e011      	b.n	8003c94 <USB_EPStartXfer+0x430>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	0151      	lsls	r1, r2, #5
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	440a      	add	r2, r1
 8003c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	7812      	ldrb	r2, [r2, #0]
 8003ca6:	0151      	lsls	r1, r2, #5
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	440a      	add	r2, r1
 8003cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cb0:	6812      	ldr	r2, [r2, #0]
 8003cb2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003cb6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	1ff80000 	.word	0x1ff80000

08003cc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	785b      	ldrb	r3, [r3, #1]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	f040 80cb 	bne.w	8003e76 <USB_EP0StartXfer+0x1ae>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d13a      	bne.n	8003d5e <USB_EP0StartXfer+0x96>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	0159      	lsls	r1, r3, #5
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	440b      	add	r3, r1
 8003d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d10:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	7812      	ldrb	r2, [r2, #0]
 8003d24:	0151      	lsls	r1, r2, #5
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	440a      	add	r2, r1
 8003d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d2e:	6912      	ldr	r2, [r2, #16]
 8003d30:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003d34:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	0159      	lsls	r1, r3, #5
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	440b      	add	r3, r1
 8003d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	0cdb      	lsrs	r3, r3, #19
 8003d58:	04db      	lsls	r3, r3, #19
 8003d5a:	6113      	str	r3, [r2, #16]
 8003d5c:	e058      	b.n	8003e10 <USB_EP0StartXfer+0x148>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	0159      	lsls	r1, r3, #5
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	440b      	add	r3, r1
 8003d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	0cdb      	lsrs	r3, r3, #19
 8003d80:	04db      	lsls	r3, r3, #19
 8003d82:	6113      	str	r3, [r2, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d92:	461a      	mov	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	0159      	lsls	r1, r3, #5
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	440b      	add	r3, r1
 8003d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003da8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dac:	6113      	str	r3, [r2, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d903      	bls.n	8003dc2 <USB_EP0StartXfer+0xfa>
      {
        ep->xfer_len = ep->maxpacket;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	7812      	ldrb	r2, [r2, #0]
 8003dd4:	0151      	lsls	r1, r2, #5
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	440a      	add	r2, r1
 8003dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dde:	6912      	ldr	r2, [r2, #16]
 8003de0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003de4:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	7812      	ldrb	r2, [r2, #0]
 8003df8:	0151      	lsls	r1, r2, #5
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e02:	6911      	ldr	r1, [r2, #16]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	6952      	ldr	r2, [r2, #20]
 8003e08:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	611a      	str	r2, [r3, #16]
    
    }
    
    if (dma == 1)
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d10a      	bne.n	8003e2c <USB_EP0StartXfer+0x164>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	6912      	ldr	r2, [r2, #16]
 8003e28:	615a      	str	r2, [r3, #20]
 8003e2a:	e011      	b.n	8003e50 <USB_EP0StartXfer+0x188>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <USB_EP0StartXfer+0x188>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e40:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	2001      	movs	r0, #1
 8003e48:	fa00 f202 	lsl.w	r2, r0, r2
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	7812      	ldrb	r2, [r2, #0]
 8003e62:	0151      	lsls	r1, r2, #5
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	440a      	add	r2, r1
 8003e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e075      	b.n	8003f62 <USB_EP0StartXfer+0x29a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e84:	461a      	mov	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	0159      	lsls	r1, r3, #5
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	440b      	add	r3, r1
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	0cdb      	lsrs	r3, r3, #19
 8003e98:	04db      	lsls	r3, r3, #19
 8003e9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	0159      	lsls	r1, r3, #5
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	440b      	add	r3, r1
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ec0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ec4:	6113      	str	r3, [r2, #16]
      
    if (ep->xfer_len > 0U)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <USB_EP0StartXfer+0x20e>
    {
      ep->xfer_len = ep->maxpacket;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	7812      	ldrb	r2, [r2, #0]
 8003ee8:	0151      	lsls	r1, r2, #5
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	440a      	add	r2, r1
 8003eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ef2:	6912      	ldr	r2, [r2, #16]
 8003ef4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003ef8:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	7812      	ldrb	r2, [r2, #0]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f16:	6911      	ldr	r1, [r2, #16]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	6892      	ldr	r2, [r2, #8]
 8003f1c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003f20:	430a      	orrs	r2, r1
 8003f22:	611a      	str	r2, [r3, #16]
    

    if (dma == 1U)
 8003f24:	79fb      	ldrb	r3, [r7, #7]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d109      	bne.n	8003f3e <USB_EP0StartXfer+0x276>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	68d2      	ldr	r2, [r2, #12]
 8003f3c:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	7812      	ldrb	r2, [r2, #0]
 8003f50:	0151      	lsls	r1, r2, #5
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	440a      	add	r2, r1
 8003f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003f60:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	71fa      	strb	r2, [r7, #7]
 8003f7c:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8003f86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d119      	bne.n	8003fc2 <USB_WritePacket+0x52>
  {
    count32b =  (len + 3U) / 4U;
 8003f8e:	88bb      	ldrh	r3, [r7, #4]
 8003f90:	3303      	adds	r3, #3
 8003f92:	089b      	lsrs	r3, r3, #2
 8003f94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	e00e      	b.n	8003fba <USB_WritePacket+0x4a>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	031a      	lsls	r2, r3, #12
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	601a      	str	r2, [r3, #0]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d3ec      	bcc.n	8003f9c <USB_WritePacket+0x2c>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
    }
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	3303      	adds	r3, #3
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e00b      	b.n	8004008 <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	601a      	str	r2, [r3, #0]
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3301      	adds	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	3304      	adds	r3, #4
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	429a      	cmp	r2, r3
 800400e:	d3ef      	bcc.n	8003ff0 <USB_ReadPacket+0x20>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
    
  }
  return ((void *)dest);
 8004010:	68bb      	ldr	r3, [r7, #8]
}
 8004012:	4618      	mov	r0, r3
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop

08004020 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	785b      	ldrb	r3, [r3, #1]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d12e      	bne.n	8004090 <USB_EPSetStall+0x70>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	db11      	blt.n	800406a <USB_EPSetStall+0x4a>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	7812      	ldrb	r2, [r2, #0]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004068:	601a      	str	r2, [r3, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	0151      	lsls	r1, r2, #5
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	440a      	add	r2, r1
 8004082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	e02d      	b.n	80040ec <USB_EPSetStall+0xcc>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	db11      	blt.n	80040c8 <USB_EPSetStall+0xa8>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	7812      	ldrb	r2, [r2, #0]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80040c6:	601a      	str	r2, [r3, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	7812      	ldrb	r2, [r2, #0]
 80040da:	0151      	lsls	r1, r2, #5
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	440a      	add	r2, r1
 80040e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80040ea:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop

080040fc <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d12c      	bne.n	8004168 <USB_EPClearStall+0x6c>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	7812      	ldrb	r2, [r2, #0]
 8004120:	0151      	lsls	r1, r2, #5
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	440a      	add	r2, r1
 8004126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004130:	601a      	str	r2, [r3, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	78db      	ldrb	r3, [r3, #3]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d003      	beq.n	8004142 <USB_EPClearStall+0x46>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	78db      	ldrb	r3, [r3, #3]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d13e      	bne.n	80041c0 <USB_EPClearStall+0xc4>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	0151      	lsls	r1, r2, #5
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	440a      	add	r2, r1
 800415a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e02b      	b.n	80041c0 <USB_EPClearStall+0xc4>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	7812      	ldrb	r2, [r2, #0]
 800417a:	0151      	lsls	r1, r2, #5
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	440a      	add	r2, r1
 8004180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800418a:	601a      	str	r2, [r3, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	78db      	ldrb	r3, [r3, #3]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d003      	beq.n	800419c <USB_EPClearStall+0xa0>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	78db      	ldrb	r3, [r3, #3]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d111      	bne.n	80041c0 <USB_EPClearStall+0xc4>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	7812      	ldrb	r2, [r2, #0]
 80041ae:	0151      	lsls	r1, r2, #5
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	440a      	add	r2, r1
 80041b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b8:	6812      	ldr	r2, [r2, #0]
 80041ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041be:	601a      	str	r2, [r3, #0]
    }    
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop

080041d0 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  
  /* Clear Pending interrupt */
  for (i = 0U; i < 15U ; i++)
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	e012      	b.n	8004204 <USB_StopDevice+0x34>
  {
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ea:	22ff      	movs	r2, #255	; 0xff
 80041ec:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fa:	22ff      	movs	r2, #255	; 0xff
 80041fc:	609a      	str	r2, [r3, #8]
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t i;
  
  /* Clear Pending interrupt */
  for (i = 0U; i < 15U ; i++)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3301      	adds	r3, #1
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b0e      	cmp	r3, #14
 8004208:	d9e9      	bls.n	80041de <USB_StopDevice+0xe>
  {
    USBx_INEP(i)->DIEPINT  = 0xFFU;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004210:	f04f 32ff 	mov.w	r2, #4294967295
 8004214:	619a      	str	r2, [r3, #24]
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421c:	2200      	movs	r2, #0
 800421e:	611a      	str	r2, [r3, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004226:	2200      	movs	r2, #0
 8004228:	615a      	str	r2, [r3, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004230:	2200      	movs	r2, #0
 8004232:	61da      	str	r2, [r3, #28]
  
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff f88f 	bl	8003358 <USB_FlushRxFifo>
  USB_FlushTxFifo(USBx ,  0x10U);  
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	2110      	movs	r1, #16
 800423e:	f7ff f865 	bl	800330c <USB_FlushTxFifo>
  
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800426a:	601a      	str	r2, [r3, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004278:	6811      	ldr	r1, [r2, #0]
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	0112      	lsls	r2, r2, #4
 800427e:	f402 62fe 	and.w	r2, r2, #2032	; 0x7f0
 8004282:	430a      	orrs	r2, r1
 8004284:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;  
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a8:	6852      	ldr	r2, [r2, #4]
 80042aa:	f022 0202 	bic.w	r2, r2, #2
 80042ae:	605a      	str	r2, [r3, #4]
  HAL_Delay(3U);
 80042b0:	2003      	movs	r0, #3
 80042b2:	f008 fe6f 	bl	800cf94 <HAL_Delay>
  
  return HAL_OK;  
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d4:	6852      	ldr	r2, [r2, #4]
 80042d6:	f042 0202 	orr.w	r2, r2, #2
 80042da:	605a      	str	r2, [r3, #4]
  HAL_Delay(3U);
 80042dc:	2003      	movs	r0, #3
 80042de:	f008 fe59 	bl	800cf94 <HAL_Delay>
  
  return HAL_OK;  
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4013      	ands	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
  return v;  
 8004308:	68fb      	ldr	r3, [r7, #12]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop

08004318 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4013      	ands	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	0c1b      	lsrs	r3, r3, #16
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4013      	ands	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	b29b      	uxth	r3, r3
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4013      	ands	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  return v;
 80043a2:	68fb      	ldr	r3, [r7, #12]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ce:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	fa22 f303 	lsr.w	r3, r2, r3
 80043d8:	01db      	lsls	r3, r3, #7
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	4013      	ands	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
  return v;
 80043f6:	68fb      	ldr	r3, [r7, #12]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <USB_ClearInterrupts>:
  * @param  USBx : Selected device
  * @param  interrupt : interrupt flag
  * @retval None
  */
void  USB_ClearInterrupts (USB_OTG_GlobalTypeDef *USBx, uint32_t interrupt)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  USBx->GINTSTS |= interrupt; 
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	615a      	str	r2, [r3, #20]
}
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0301 	and.w	r3, r3, #1
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444e:	461a      	mov	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800445c:	f023 0307 	bic.w	r3, r3, #7
 8004460:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0306 	and.w	r3, r3, #6
 800446e:	2b04      	cmp	r3, #4
 8004470:	d109      	bne.n	8004486 <USB_ActivateSetup+0x46>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	f042 0203 	orr.w	r2, r2, #3
 8004484:	601a      	str	r2, [r3, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004492:	6852      	ldr	r2, [r2, #4]
 8004494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004498:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	460b      	mov	r3, r1
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	2200      	movs	r2, #0
 80044be:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044cc:	6912      	ldr	r2, [r2, #16]
 80044ce:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80044d2:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e0:	6912      	ldr	r2, [r2, #16]
 80044e2:	f042 0218 	orr.w	r2, r2, #24
 80044e6:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f4:	6912      	ldr	r2, [r2, #16]
 80044f6:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80044fa:	611a      	str	r2, [r3, #16]
  
  if (dma == 1U)
 80044fc:	7afb      	ldrb	r3, [r7, #11]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d10a      	bne.n	8004518 <USB_EP0_OutStart+0x70>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	615a      	str	r2, [r3, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004512:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
 8004516:	601a      	str	r2, [r3, #0]
  }
  
  return HAL_OK;  
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop

08004528 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4b13      	ldr	r3, [pc, #76]	; (800458c <USB_CoreReset+0x64>)
 800453e:	429a      	cmp	r2, r3
 8004540:	d901      	bls.n	8004546 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e01b      	b.n	800457e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	daf2      	bge.n	8004534 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f043 0201 	orr.w	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3301      	adds	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <USB_CoreReset+0x64>)
 8004568:	429a      	cmp	r2, r3
 800456a:	d901      	bls.n	8004570 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e006      	b.n	800457e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f0      	bne.n	800455e <USB_CoreReset+0x36>
  
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	00030d40 	.word	0x00030d40

08004590 <USB_HostInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004590:	b084      	sub	sp, #16
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	f107 001c 	add.w	r0, r7, #28
 800459e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d10e      	bne.n	80045f4 <USB_HostInit+0x64>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045dc:	d00a      	beq.n	80045f4 <USB_HostInit+0x64>
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	f042 0204 	orr.w	r2, r2, #4
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e009      	b.n	8004608 <USB_HostInit+0x78>
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	f022 0204 	bic.w	r2, r2, #4
 8004606:	601a      	str	r2, [r3, #0]
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	2110      	movs	r1, #16
 800460c:	f7fe fe7e 	bl	800330c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7fe fea1 	bl	8003358 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	e013      	b.n	8004644 <USB_HostInit+0xb4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4413      	add	r3, r2
 8004624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004628:	f04f 32ff 	mov.w	r2, #4294967295
 800462c:	609a      	str	r2, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463a:	2200      	movs	r2, #0
 800463c:	60da      	str	r2, [r3, #12]
  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
  USB_FlushRxFifo(USBx);

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3301      	adds	r3, #1
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	6a3a      	ldr	r2, [r7, #32]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	429a      	cmp	r2, r3
 800464a:	d8e7      	bhi.n	800461c <USB_HostInit+0x8c>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
    USBx_HC(i)->HCINTMSK = 0U;
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	2101      	movs	r1, #1
 8004650:	f000 f8a0 	bl	8004794 <USB_DriveVbus>
  
  HAL_Delay(200U);
 8004654:	20c8      	movs	r0, #200	; 0xc8
 8004656:	f008 fc9d 	bl	800cf94 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f04f 32ff 	mov.w	r2, #4294967295
 8004666:	615a      	str	r2, [r3, #20]
  
  if(USBx == USB_OTG_FS)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800466e:	d10a      	bne.n	8004686 <USB_HostInit+0xf6>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x80U; 
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2280      	movs	r2, #128	; 0x80
 8004674:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a14      	ldr	r2, [pc, #80]	; (80046cc <USB_HostInit+0x13c>)
 800467a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a14      	ldr	r2, [pc, #80]	; (80046d0 <USB_HostInit+0x140>)
 8004680:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004684:	e00a      	b.n	800469c <USB_HostInit+0x10c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = (uint32_t )0x200U; 
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800468c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a10      	ldr	r2, [pc, #64]	; (80046d4 <USB_HostInit+0x144>)
 8004692:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a10      	ldr	r2, [pc, #64]	; (80046d8 <USB_HostInit+0x148>)
 8004698:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d105      	bne.n	80046ae <USB_HostInit+0x11e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f043 0210 	orr.w	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <USB_HostInit+0x14c>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046c6:	b004      	add	sp, #16
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	00600080 	.word	0x00600080
 80046d0:	004000e0 	.word	0x004000e0
 80046d4:	01000200 	.word	0x01000200
 80046d8:	00e00300 	.word	0x00e00300
 80046dc:	a3200008 	.word	0xa3200008

080046e0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock 
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	70fb      	strb	r3, [r7, #3]
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046f8:	6812      	ldr	r2, [r2, #0]
 80046fa:	f022 0203 	bic.w	r2, r2, #3
 80046fe:	601a      	str	r2, [r3, #0]
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800470c:	6811      	ldr	r1, [r2, #0]
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	f002 0203 	and.w	r2, r2, #3
 8004714:	430a      	orrs	r2, r1
 8004716:	601a      	str	r2, [r3, #0]
  
  if (freq ==  HCFG_48_MHZ)
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d106      	bne.n	800472c <USB_InitFSLSPClkSel+0x4c>
  {
    USBx_HOST->HFIR = (uint32_t)48000U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004724:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004728:	605a      	str	r2, [r3, #4]
 800472a:	e008      	b.n	800473e <USB_InitFSLSPClkSel+0x5e>
  }
  else if (freq ==  HCFG_6_MHZ)
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d105      	bne.n	800473e <USB_InitFSLSPClkSel+0x5e>
  {
    USBx_HOST->HFIR = (uint32_t)6000U;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004738:	f241 7270 	movw	r2, #6000	; 0x1770
 800473c:	605a      	str	r2, [r3, #4]
  } 
  return HAL_OK;  
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60fb      	str	r3, [r7, #12]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004764:	60fb      	str	r3, [r7, #12]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004772:	601a      	str	r2, [r3, #0]
  HAL_Delay (10U);                                /* See Note #1 */
 8004774:	200a      	movs	r0, #10
 8004776:	f008 fc0d 	bl	800cf94 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004786:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop

08004794 <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047b0:	60fb      	str	r3, [r7, #12]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <USB_DriveVbus+0x3c>
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d106      	bne.n	80047d0 <USB_DriveVbus+0x3c>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047ce:	601a      	str	r2, [r3, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d009      	beq.n	80047ee <USB_DriveVbus+0x5a>
 80047da:	78fb      	ldrb	r3, [r7, #3]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d106      	bne.n	80047ee <USB_DriveVbus+0x5a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047ec:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK; 
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60fb      	str	r3, [r7, #12]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004814:	0c5b      	lsrs	r3, r3, #17
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop

08004824 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx : Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	b29b      	uxth	r3, r3
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop

08004844 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	70f9      	strb	r1, [r7, #3]
 800484e:	70ba      	strb	r2, [r7, #2]
 8004850:	707b      	strb	r3, [r7, #1]
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485e:	f04f 32ff 	mov.w	r2, #4294967295
 8004862:	609a      	str	r2, [r3, #8]
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 8004864:	7d3b      	ldrb	r3, [r7, #20]
 8004866:	2b03      	cmp	r3, #3
 8004868:	d87c      	bhi.n	8004964 <USB_HC_Init+0x120>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <USB_HC_Init+0x2c>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	08004881 	.word	0x08004881
 8004874:	08004927 	.word	0x08004927
 8004878:	08004881 	.word	0x08004881
 800487c:	080048e9 	.word	0x080048e9
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4413      	add	r3, r2
 8004888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488c:	f240 429d 	movw	r2, #1181	; 0x49d
 8004890:	60da      	str	r2, [r3, #12]
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 8004892:	78bb      	ldrb	r3, [r7, #2]
 8004894:	b25b      	sxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	da10      	bge.n	80048bc <USB_HC_Init+0x78>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	0151      	lsls	r1, r2, #5
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	440a      	add	r2, r1
 80048ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048b2:	68d2      	ldr	r2, [r2, #12]
 80048b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	e014      	b.n	80048e6 <USB_HC_Init+0xa2>
    } 
    else 
    {
      if(USBx != USB_OTG_FS)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048c2:	d010      	beq.n	80048e6 <USB_HC_Init+0xa2>
      {
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	0151      	lsls	r1, r2, #5
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	440a      	add	r2, r1
 80048d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048dc:	68d2      	ldr	r2, [r2, #12]
 80048de:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80048e2:	60da      	str	r2, [r3, #12]
      }
    }
    break;
 80048e4:	e03e      	b.n	8004964 <USB_HC_Init+0x120>
 80048e6:	e03d      	b.n	8004964 <USB_HC_Init+0x120>
    
  case EP_TYPE_INTR:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f4:	f240 629d 	movw	r2, #1693	; 0x69d
 80048f8:	60da      	str	r2, [r3, #12]
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_NAKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
 80048fa:	78bb      	ldrb	r3, [r7, #2]
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	da10      	bge.n	8004924 <USB_HC_Init+0xe0>
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004902:	78fb      	ldrb	r3, [r7, #3]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4413      	add	r3, r2
 800490a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490e:	78fa      	ldrb	r2, [r7, #3]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	440a      	add	r2, r1
 8004916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800491a:	68d2      	ldr	r2, [r2, #12]
 800491c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004920:	60da      	str	r2, [r3, #12]
    }
    
    break;
 8004922:	e01f      	b.n	8004964 <USB_HC_Init+0x120>
 8004924:	e01e      	b.n	8004964 <USB_HC_Init+0x120>
  case EP_TYPE_ISOC:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4413      	add	r3, r2
 800492e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004932:	f240 2225 	movw	r2, #549	; 0x225
 8004936:	60da      	str	r2, [r3, #12]
                                USB_OTG_HCINTMSK_ACKM   |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;   
    
    if (epnum & 0x80U) 
 8004938:	78bb      	ldrb	r3, [r7, #2]
 800493a:	b25b      	sxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	da10      	bge.n	8004962 <USB_HC_Init+0x11e>
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4413      	add	r3, r2
 8004948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494c:	78fa      	ldrb	r2, [r7, #3]
 800494e:	0151      	lsls	r1, r2, #5
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	440a      	add	r2, r1
 8004954:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004958:	68d2      	ldr	r2, [r2, #12]
 800495a:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800495e:	60da      	str	r2, [r3, #12]
    }
    break;
 8004960:	e7ff      	b.n	8004962 <USB_HC_Init+0x11e>
 8004962:	bf00      	nop
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004970:	6991      	ldr	r1, [r2, #24]
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	2001      	movs	r0, #1
 8004976:	fa00 f202 	lsl.w	r2, r0, r2
 800497a:	430a      	orrs	r2, r1
 800497c:	619a      	str	r2, [r3, #24]
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	619a      	str	r2, [r3, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4413      	add	r3, r2
 8004992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004996:	461a      	mov	r2, r3
 8004998:	787b      	ldrb	r3, [r7, #1]
 800499a:	059b      	lsls	r3, r3, #22
 800499c:	f003 51fe 	and.w	r1, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80049a0:	78bb      	ldrb	r3, [r7, #2]
 80049a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a6:	02db      	lsls	r3, r3, #11
 80049a8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80049ac:	4319      	orrs	r1, r3
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 80049ae:	78bb      	ldrb	r3, [r7, #2]
 80049b0:	b25b      	sxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	da02      	bge.n	80049bc <USB_HC_Init+0x178>
 80049b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ba:	e000      	b.n	80049be <USB_HC_Init+0x17a>
 80049bc:	2300      	movs	r3, #0
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80049be:	4319      	orrs	r1, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80049c0:	7c3b      	ldrb	r3, [r7, #16]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d102      	bne.n	80049cc <USB_HC_Init+0x188>
 80049c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ca:	e000      	b.n	80049ce <USB_HC_Init+0x18a>
 80049cc:	2300      	movs	r3, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 80049ce:	4319      	orrs	r1, r3
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80049d0:	7d3b      	ldrb	r3, [r7, #20]
 80049d2:	049b      	lsls	r3, r3, #18
 80049d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80049d8:	4319      	orrs	r1, r3
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80049da:	8b3b      	ldrh	r3, [r7, #24]
 80049dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80049e0:	430b      	orrs	r3, r1
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80049e2:	6013      	str	r3, [r2, #0]
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
    
  if (ep_type == EP_TYPE_INTR)
 80049e4:	7d3b      	ldrb	r3, [r7, #20]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d10f      	bne.n	8004a0a <USB_HC_Init+0x1c6>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80049ea:	78fb      	ldrb	r3, [r7, #3]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	0151      	lsls	r1, r2, #5
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	440a      	add	r2, r1
 80049fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a02:	6812      	ldr	r2, [r2, #0]
 8004a04:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004a08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK; 
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0U; 
 8004a26:	2300      	movs	r3, #0
 8004a28:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0U;   
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256U;
 8004a32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a36:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a42:	d02a      	beq.n	8004a9a <USB_HC_StartXfer+0x82>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	791b      	ldrb	r3, [r3, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d126      	bne.n	8004a9a <USB_HC_StartXfer+0x82>
  {
    if((dma == 0U) && (hc->do_ping == 1U))
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10b      	bne.n	8004a6a <USB_HC_StartXfer+0x52>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	795b      	ldrb	r3, [r3, #5]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d107      	bne.n	8004a6a <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	785b      	ldrb	r3, [r3, #1]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	4619      	mov	r1, r3
 8004a62:	f000 f9f9 	bl	8004e58 <USB_DoPing>
      return HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e104      	b.n	8004c74 <USB_HC_StartXfer+0x25c>
    }
    else if(dma == 1U)
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d114      	bne.n	8004a9a <USB_HC_StartXfer+0x82>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	785b      	ldrb	r3, [r3, #1]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	7852      	ldrb	r2, [r2, #1]
 8004a82:	0151      	lsls	r1, r2, #5
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	440a      	add	r2, r1
 8004a88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a8c:	68d2      	ldr	r2, [r2, #12]
 8004a8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a92:	60da      	str	r2, [r3, #12]
      hc->do_ping = 0U;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2200      	movs	r2, #0
 8004a98:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d019      	beq.n	8004ad6 <USB_HC_StartXfer+0xbe>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	891b      	ldrh	r3, [r3, #8]
 8004aaa:	4413      	add	r3, r2
 8004aac:	1e5a      	subs	r2, r3, #1
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	891b      	ldrh	r3, [r3, #8]
 8004ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab6:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 8004ab8:	8bfa      	ldrh	r2, [r7, #30]
 8004aba:	8b3b      	ldrh	r3, [r7, #24]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d90c      	bls.n	8004ada <USB_HC_StartXfer+0xc2>
    {
      num_packets = max_hc_pkt_count;
 8004ac0:	8b3b      	ldrh	r3, [r7, #24]
 8004ac2:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 8004ac4:	8bfb      	ldrh	r3, [r7, #30]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	8912      	ldrh	r2, [r2, #8]
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	461a      	mov	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	611a      	str	r2, [r3, #16]
 8004ad4:	e001      	b.n	8004ada <USB_HC_StartXfer+0xc2>
    }
  }
  else
  {
    num_packets = 1U;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	78db      	ldrb	r3, [r3, #3]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <USB_HC_StartXfer+0xda>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 8004ae2:	8bfb      	ldrh	r3, [r7, #30]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	8912      	ldrh	r2, [r2, #8]
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	785b      	ldrb	r3, [r3, #1]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b00:	461a      	mov	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f3c3 0112 	ubfx	r1, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004b0a:	8bfb      	ldrh	r3, [r7, #30]
 8004b0c:	04db      	lsls	r3, r3, #19
  {
    hc->xfer_len = num_packets * hc->max_packet;
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004b0e:	4618      	mov	r0, r3
 8004b10:	4b5a      	ldr	r3, [pc, #360]	; (8004c7c <USB_HC_StartXfer+0x264>)
 8004b12:	4003      	ands	r3, r0
 8004b14:	4319      	orrs	r1, r3
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	7a9b      	ldrb	r3, [r3, #10]
 8004b1a:	075b      	lsls	r3, r3, #29
    hc->xfer_len = num_packets * hc->max_packet;
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004b1c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8004b20:	430b      	orrs	r3, r1
  {
    hc->xfer_len = num_packets * hc->max_packet;
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004b22:	6113      	str	r3, [r2, #16]
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
  
  if (dma)
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <USB_HC_StartXfer+0x126>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	785b      	ldrb	r3, [r3, #1]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	68d2      	ldr	r2, [r2, #12]
 8004b3c:	615a      	str	r2, [r3, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01U) ? 0U : 1U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bf14      	ite	ne
 8004b4e:	2300      	movne	r3, #0
 8004b50:	2301      	moveq	r3, #1
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	785b      	ldrb	r3, [r3, #1]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	7852      	ldrb	r2, [r2, #1]
 8004b68:	0151      	lsls	r1, r2, #5
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	440a      	add	r2, r1
 8004b6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004b78:	601a      	str	r2, [r3, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29U);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	785b      	ldrb	r3, [r3, #1]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	7852      	ldrb	r2, [r2, #1]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b96:	6811      	ldr	r1, [r2, #0]
 8004b98:	7f7a      	ldrb	r2, [r7, #29]
 8004b9a:	0752      	lsls	r2, r2, #29
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	785b      	ldrb	r3, [r3, #1]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bb8:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bc0:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	785b      	ldrb	r3, [r3, #1]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	601a      	str	r2, [r3, #0]
  
  if (dma == 0U) /* Slave mode */
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d14b      	bne.n	8004c72 <USB_HC_StartXfer+0x25a>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	78db      	ldrb	r3, [r3, #3]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d147      	bne.n	8004c72 <USB_HC_StartXfer+0x25a>
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d043      	beq.n	8004c72 <USB_HC_StartXfer+0x25a>
    {
      switch(hc->ep_type) 
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	79db      	ldrb	r3, [r3, #7]
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d832      	bhi.n	8004c58 <USB_HC_StartXfer+0x240>
 8004bf2:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <USB_HC_StartXfer+0x1e0>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c09 	.word	0x08004c09
 8004bfc:	08004c2f 	.word	0x08004c2f
 8004c00:	08004c09 	.word	0x08004c09
 8004c04:	08004c2f 	.word	0x08004c2f
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3U) / 4U;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	3303      	adds	r3, #3
 8004c0e:	089b      	lsrs	r3, r3, #2
 8004c10:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004c12:	8b7a      	ldrh	r2, [r7, #26]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d906      	bls.n	8004c2c <USB_HC_StartXfer+0x214>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	f043 0220 	orr.w	r2, r3, #32
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	619a      	str	r2, [r3, #24]
        }
        break;
 8004c2a:	e016      	b.n	8004c5a <USB_HC_StartXfer+0x242>
 8004c2c:	e015      	b.n	8004c5a <USB_HC_StartXfer+0x242>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3U) / 4U;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	3303      	adds	r3, #3
 8004c34:	089b      	lsrs	r3, r3, #2
 8004c36:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004c38:	8b7a      	ldrh	r2, [r7, #26]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d906      	bls.n	8004c56 <USB_HC_StartXfer+0x23e>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	619a      	str	r2, [r3, #24]
        }
        break;
 8004c54:	e001      	b.n	8004c5a <USB_HC_StartXfer+0x242>
 8004c56:	e000      	b.n	8004c5a <USB_HC_StartXfer+0x242>
        
      default:
        break;
 8004c58:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	68d9      	ldr	r1, [r3, #12]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	785a      	ldrb	r2, [r3, #1]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2000      	movs	r0, #0
 8004c6a:	9000      	str	r0, [sp, #0]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f7ff f97f 	bl	8003f70 <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3720      	adds	r7, #32
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	1ff80000 	.word	0x1ff80000

08004c80 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx : Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	b29b      	uxth	r3, r3
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop

08004ca0 <USB_HC_Halt>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004cc2:	0c9b      	lsrs	r3, r3, #18
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00b      	beq.n	8004ce0 <USB_HC_Halt+0x40>
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8004cda:	0c9b      	lsrs	r3, r3, #18
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
  uint32_t count = 0U;
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d15a      	bne.n	8004d96 <USB_HC_Halt+0xf6>
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cec:	78fa      	ldrb	r2, [r7, #3]
 8004cee:	0151      	lsls	r1, r2, #5
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	440a      	add	r2, r1
 8004cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004cfe:	601a      	str	r2, [r3, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d132      	bne.n	8004d72 <USB_HC_Halt+0xd2>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d2a:	601a      	str	r2, [r3, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d38:	78fa      	ldrb	r2, [r7, #3]
 8004d3a:	0151      	lsls	r1, r2, #5
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	440a      	add	r2, r1
 8004d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d44:	6812      	ldr	r2, [r2, #0]
 8004d46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004d4a:	601a      	str	r2, [r3, #0]
      do 
      {
        if (++count > 1000U) 
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d58:	d901      	bls.n	8004d5e <USB_HC_Halt+0xbe>
        {
          break;
 8004d5a:	bf00      	nop
 8004d5c:	e01a      	b.n	8004d94 <USB_HC_Halt+0xf4>
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	dbed      	blt.n	8004d4c <USB_HC_Halt+0xac>
 8004d70:	e010      	b.n	8004d94 <USB_HC_Halt+0xf4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004d90:	601a      	str	r2, [r3, #0]
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004d92:	e05a      	b.n	8004e4a <USB_HC_Halt+0x1aa>
 8004d94:	e059      	b.n	8004e4a <USB_HC_Halt+0x1aa>
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	0151      	lsls	r1, r2, #5
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	440a      	add	r2, r1
 8004daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dae:	6812      	ldr	r2, [r2, #0]
 8004db0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004db4:	601a      	str	r2, [r3, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d132      	bne.n	8004e2a <USB_HC_Halt+0x18a>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	0151      	lsls	r1, r2, #5
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	440a      	add	r2, r1
 8004dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004de2:	601a      	str	r2, [r3, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df0:	78fa      	ldrb	r2, [r7, #3]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e02:	601a      	str	r2, [r3, #0]
      do 
      {
        if (++count > 1000U) 
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3301      	adds	r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e10:	d901      	bls.n	8004e16 <USB_HC_Halt+0x176>
        {
          break;
 8004e12:	bf00      	nop
 8004e14:	e019      	b.n	8004e4a <USB_HC_Halt+0x1aa>
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	dbed      	blt.n	8004e04 <USB_HC_Halt+0x164>
 8004e28:	e00f      	b.n	8004e4a <USB_HC_Halt+0x1aa>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e36:	78fa      	ldrb	r2, [r7, #3]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e48:	601a      	str	r2, [r3, #0]
    }
  }
  
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <USB_DoPing>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e78:	461a      	mov	r2, r3
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	04db      	lsls	r3, r3, #19
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <USB_DoPing+0x70>)
 8004e82:	400b      	ands	r3, r1
 8004e84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e88:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ea0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ea8:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;  
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	1ff80000 	.word	0x1ff80000

08004ecc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx : Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fe f8c1 	bl	8003060 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	2110      	movs	r1, #16
 8004ee2:	f7fe fa13 	bl	800330c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fe fa36 	bl	8003358 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004eec:	2300      	movs	r3, #0
 8004eee:	75fb      	strb	r3, [r7, #23]
 8004ef0:	e01e      	b.n	8004f30 <USB_StopHost+0x64>
  {   

    value = USBx_HC(i)->HCCHAR ;
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f08:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f10:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f18:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8004f1a:	7dfb      	ldrb	r3, [r7, #23]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	601a      	str	r2, [r3, #0]
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
  USB_FlushRxFifo(USBx);
  
  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	75fb      	strb	r3, [r7, #23]
 8004f30:	7dfb      	ldrb	r3, [r7, #23]
 8004f32:	2b0f      	cmp	r3, #15
 8004f34:	d9dd      	bls.n	8004ef2 <USB_StopHost+0x26>
    value &= ~USB_OTG_HCCHAR_EPDIR;
    USBx_HC(i)->HCCHAR = value;
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0U; i <= 15U; i++)
 8004f36:	2300      	movs	r3, #0
 8004f38:	75fb      	strb	r3, [r7, #23]
 8004f3a:	e02f      	b.n	8004f9c <USB_StopHost+0xd0>
  {
    value = USBx_HC(i)->HCCHAR ;
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f52:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f5a:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f62:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	601a      	str	r2, [r3, #0]
    do 
    {
      if (++count > 1000U) 
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	3301      	adds	r3, #1
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f80:	d900      	bls.n	8004f84 <USB_StopHost+0xb8>
      {
        break;
 8004f82:	e008      	b.n	8004f96 <USB_StopHost+0xca>
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	dbee      	blt.n	8004f74 <USB_StopHost+0xa8>
    value &= ~USB_OTG_HCCHAR_EPDIR;
    USBx_HC(i)->HCCHAR = value;
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0U; i <= 15U; i++)
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	75fb      	strb	r3, [r7, #23]
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	2b0f      	cmp	r3, #15
 8004fa0:	d9cc      	bls.n	8004f3c <USB_StopHost+0x70>
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fac:	615a      	str	r2, [r3, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb4:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fe f840 	bl	800303c <USB_EnableGlobalInt>
  return HAL_OK;  
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop

08004fc8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e055      	b.n	8005086 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d106      	bne.n	8004ffa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f873 	bl	80050e0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005010:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6851      	ldr	r1, [r2, #4]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6892      	ldr	r2, [r2, #8]
 800501e:	4311      	orrs	r1, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	68d2      	ldr	r2, [r2, #12]
 8005024:	4311      	orrs	r1, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6912      	ldr	r2, [r2, #16]
 800502a:	4311      	orrs	r1, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6952      	ldr	r2, [r2, #20]
 8005030:	4311      	orrs	r1, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6992      	ldr	r2, [r2, #24]
 8005036:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800503a:	4311      	orrs	r1, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	69d2      	ldr	r2, [r2, #28]
 8005040:	4311      	orrs	r1, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6a12      	ldr	r2, [r2, #32]
 8005046:	4311      	orrs	r1, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800504c:	430a      	orrs	r2, r1
 800504e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6992      	ldr	r2, [r2, #24]
 8005058:	0c12      	lsrs	r2, r2, #16
 800505a:	f002 0104 	and.w	r1, r2, #4
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	69d2      	ldr	r2, [r2, #28]
 8005070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005074:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop

08005090 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e01a      	b.n	80050d8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2202      	movs	r2, #2
 80050a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f81a 	bl	80050f4 <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
  */
}
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop

080050f4 <HAL_SPI_MspDeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
  */
}
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop

08005108 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	4613      	mov	r3, r2
 8005116:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_SPI_Transmit+0x26>
 800512a:	2302      	movs	r3, #2
 800512c:	e125      	b.n	800537a <HAL_SPI_Transmit+0x272>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005136:	f007 ff21 	bl	800cf7c <HAL_GetTick>
 800513a:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	d002      	beq.n	800514e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005148:	2302      	movs	r3, #2
 800514a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800514c:	e10c      	b.n	8005368 <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0U))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_SPI_Transmit+0x52>
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d102      	bne.n	8005160 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800515e:	e103      	b.n	8005368 <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2203      	movs	r2, #3
 8005164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	88fa      	ldrh	r2, [r7, #6]
 8005178:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	88fa      	ldrh	r2, [r7, #6]
 800517e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a6:	d107      	bne.n	80051b8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	6812      	ldr	r2, [r2, #0]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d107      	bne.n	80051d6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	6812      	ldr	r2, [r2, #0]
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051de:	d148      	bne.n	8005272 <HAL_SPI_Transmit+0x16a>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d004      	beq.n	80051f2 <HAL_SPI_Transmit+0xea>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d10f      	bne.n	8005212 <HAL_SPI_Transmit+0x10a>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	8812      	ldrh	r2, [r2, #0]
 80051fa:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	3302      	adds	r3, #2
 8005200:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005210:	e029      	b.n	8005266 <HAL_SPI_Transmit+0x15e>
 8005212:	e028      	b.n	8005266 <HAL_SPI_Transmit+0x15e>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00f      	beq.n	8005242 <HAL_SPI_Transmit+0x13a>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	8812      	ldrh	r2, [r2, #0]
 800522a:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	3302      	adds	r3, #2
 8005230:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005240:	e011      	b.n	8005266 <HAL_SPI_Transmit+0x15e>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00b      	beq.n	8005260 <HAL_SPI_Transmit+0x158>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d00a      	beq.n	8005266 <HAL_SPI_Transmit+0x15e>
 8005250:	f007 fe94 	bl	800cf7c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	1ad2      	subs	r2, r2, r3
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d302      	bcc.n	8005266 <HAL_SPI_Transmit+0x15e>
        {
          errorcode = HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005264:	e080      	b.n	8005368 <HAL_SPI_Transmit+0x260>
      hspi->Instance->DR = *((uint16_t *)pData);
      pData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1d1      	bne.n	8005214 <HAL_SPI_Transmit+0x10c>
 8005270:	e049      	b.n	8005306 <HAL_SPI_Transmit+0x1fe>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d004      	beq.n	8005284 <HAL_SPI_Transmit+0x17c>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d110      	bne.n	80052a6 <HAL_SPI_Transmit+0x19e>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	330c      	adds	r3, #12
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	7812      	ldrb	r2, [r2, #0]
 800528e:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	3301      	adds	r3, #1
 8005294:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052a4:	e02a      	b.n	80052fc <HAL_SPI_Transmit+0x1f4>
 80052a6:	e029      	b.n	80052fc <HAL_SPI_Transmit+0x1f4>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d010      	beq.n	80052d8 <HAL_SPI_Transmit+0x1d0>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	330c      	adds	r3, #12
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	3301      	adds	r3, #1
 80052c6:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80052d6:	e011      	b.n	80052fc <HAL_SPI_Transmit+0x1f4>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <HAL_SPI_Transmit+0x1ee>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e4:	d00a      	beq.n	80052fc <HAL_SPI_Transmit+0x1f4>
 80052e6:	f007 fe49 	bl	800cf7c <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	1ad2      	subs	r2, r2, r3
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d302      	bcc.n	80052fc <HAL_SPI_Transmit+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052fa:	e035      	b.n	8005368 <HAL_SPI_Transmit+0x260>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
      pData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while (hspi->TxXferCount > 0U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1d0      	bne.n	80052a8 <HAL_SPI_Transmit+0x1a0>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	2102      	movs	r1, #2
 800530e:	2201      	movs	r2, #1
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f001 faed 	bl	80068f0 <SPI_WaitFlagStateUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_SPI_Transmit+0x21a>
  {
    errorcode = HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005320:	e022      	b.n	8005368 <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	f001 fb4c 	bl	80069c4 <SPI_CheckFlag_BSY>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_SPI_Transmit+0x236>
  {
    errorcode = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800533c:	e014      	b.n	8005368 <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <HAL_SPI_Transmit+0x254>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_SPI_Transmit+0x260>
  {
    errorcode = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005378:	7ffb      	ldrb	r3, [r7, #31]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3720      	adds	r7, #32
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop

08005384 <HAL_SPI_Receive>:
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af02      	add	r7, sp, #8
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	4613      	mov	r3, r2
 8005392:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a4:	d111      	bne.n	80053ca <HAL_SPI_Receive+0x46>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10d      	bne.n	80053ca <HAL_SPI_Receive+0x46>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2204      	movs	r2, #4
 80053b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	9200      	str	r2, [sp, #0]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	f000 f8ed 	bl	80055a0 <HAL_SPI_TransmitReceive>
 80053c6:	4603      	mov	r3, r0
 80053c8:	e0e6      	b.n	8005598 <HAL_SPI_Receive+0x214>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_SPI_Receive+0x54>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e0df      	b.n	8005598 <HAL_SPI_Receive+0x214>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053e0:	f007 fdcc 	bl	800cf7c <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

  if(hspi->State != HAL_SPI_STATE_READY)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d002      	beq.n	80053f8 <HAL_SPI_Receive+0x74>
  {
    errorcode = HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
 80053f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053f6:	e0c6      	b.n	8005586 <HAL_SPI_Receive+0x202>
  }

  if((pData == NULL ) || (Size == 0U))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <HAL_SPI_Receive+0x80>
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <HAL_SPI_Receive+0x86>
  {
    errorcode = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005408:	e0bd      	b.n	8005586 <HAL_SPI_Receive+0x202>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2204      	movs	r2, #4
 800540e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	88fa      	ldrh	r2, [r7, #6]
 8005422:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	88fa      	ldrh	r2, [r7, #6]
 8005428:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005450:	d107      	bne.n	8005462 <HAL_SPI_Receive+0xde>
  {
    SPI_1LINE_RX(hspi);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005460:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d107      	bne.n	8005480 <HAL_SPI_Receive+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	6812      	ldr	r2, [r2, #0]
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800547e:	601a      	str	r2, [r3, #0]
  }

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d131      	bne.n	80054ec <HAL_SPI_Receive+0x168>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 8005488:	e02a      	b.n	80054e0 <HAL_SPI_Receive+0x15c>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d011      	beq.n	80054bc <HAL_SPI_Receive+0x138>
      {
        /* read the received data */
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	330c      	adds	r3, #12
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	3301      	adds	r3, #1
 80054aa:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054ba:	e011      	b.n	80054e0 <HAL_SPI_Receive+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <HAL_SPI_Receive+0x156>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c8:	d00a      	beq.n	80054e0 <HAL_SPI_Receive+0x15c>
 80054ca:	f007 fd57 	bl	800cf7c <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad2      	subs	r2, r2, r3
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d302      	bcc.n	80054e0 <HAL_SPI_Receive+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80054de:	e052      	b.n	8005586 <HAL_SPI_Receive+0x202>

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1cf      	bne.n	800548a <HAL_SPI_Receive+0x106>
 80054ea:	e02f      	b.n	800554c <HAL_SPI_Receive+0x1c8>
    }
  }
  else
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 80054ec:	e029      	b.n	8005542 <HAL_SPI_Receive+0x1be>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d010      	beq.n	800551e <HAL_SPI_Receive+0x19a>
      {
        *((uint16_t*)pData) = hspi->Instance->DR;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	b29a      	uxth	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	3302      	adds	r3, #2
 800550c:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800551c:	e011      	b.n	8005542 <HAL_SPI_Receive+0x1be>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00b      	beq.n	800553c <HAL_SPI_Receive+0x1b8>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552a:	d00a      	beq.n	8005542 <HAL_SPI_Receive+0x1be>
 800552c:	f007 fd26 	bl	800cf7c <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad2      	subs	r2, r2, r3
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d302      	bcc.n	8005542 <HAL_SPI_Receive+0x1be>
        {
          errorcode = HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005540:	e021      	b.n	8005586 <HAL_SPI_Receive+0x202>
    }
  }
  else
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1d0      	bne.n	80054ee <HAL_SPI_Receive+0x16a>
    /* To avoid GCC warning */
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005554:	d111      	bne.n	800557a <HAL_SPI_Receive+0x1f6>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555e:	d004      	beq.n	800556a <HAL_SPI_Receive+0x1e6>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005568:	d107      	bne.n	800557a <HAL_SPI_Receive+0x1f6>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	6812      	ldr	r2, [r2, #0]
 8005574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005578:	601a      	str	r2, [r3, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_SPI_Receive+0x202>
  {
    errorcode = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005596:	7dfb      	ldrb	r3, [r7, #23]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08c      	sub	sp, #48	; 0x30
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
 80055b2:	2300      	movs	r3, #0
 80055b4:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80055ba:	2301      	movs	r3, #1
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_SPI_TransmitReceive+0x32>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e183      	b.n	80058da <HAL_SPI_TransmitReceive+0x33a>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055da:	f007 fccf 	bl	800cf7c <HAL_GetTick>
 80055de:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d00e      	beq.n	8005614 <HAL_SPI_TransmitReceive+0x74>
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055fc:	d106      	bne.n	800560c <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <HAL_SPI_TransmitReceive+0x6c>
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	2b04      	cmp	r3, #4
 800560a:	d003      	beq.n	8005614 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 800560c:	2302      	movs	r3, #2
 800560e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005612:	e158      	b.n	80058c6 <HAL_SPI_TransmitReceive+0x326>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_SPI_TransmitReceive+0x86>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_SPI_TransmitReceive+0x86>
 8005620:	887b      	ldrh	r3, [r7, #2]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d103      	bne.n	800562e <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800562c:	e14b      	b.n	80058c6 <HAL_SPI_TransmitReceive+0x326>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b01      	cmp	r3, #1
 8005638:	d103      	bne.n	8005642 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2205      	movs	r2, #5
 800563e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	887a      	ldrh	r2, [r7, #2]
 8005652:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	887a      	ldrh	r2, [r7, #2]
 8005658:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	887a      	ldrh	r2, [r7, #2]
 8005664:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	887a      	ldrh	r2, [r7, #2]
 800566a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005682:	2b00      	cmp	r3, #0
 8005684:	d107      	bne.n	8005696 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	6812      	ldr	r2, [r2, #0]
 8005690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005694:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800569e:	d172      	bne.n	8005786 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <HAL_SPI_TransmitReceive+0x112>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d10f      	bne.n	80056d2 <HAL_SPI_TransmitReceive+0x132>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	8812      	ldrh	r2, [r2, #0]
 80056ba:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	3302      	adds	r3, #2
 80056c0:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d0:	e04e      	b.n	8005770 <HAL_SPI_TransmitReceive+0x1d0>
 80056d2:	e04d      	b.n	8005770 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01c      	beq.n	8005714 <HAL_SPI_TransmitReceive+0x174>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d017      	beq.n	8005714 <HAL_SPI_TransmitReceive+0x174>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d010      	beq.n	8005714 <HAL_SPI_TransmitReceive+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	8812      	ldrh	r2, [r2, #0]
 80056fa:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	3302      	adds	r3, #2
 8005700:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d018      	beq.n	8005750 <HAL_SPI_TransmitReceive+0x1b0>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d011      	beq.n	8005750 <HAL_SPI_TransmitReceive+0x1b0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	b29a      	uxth	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3302      	adds	r3, #2
 800573c:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800574c:	2301      	movs	r3, #1
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005756:	d00b      	beq.n	8005770 <HAL_SPI_TransmitReceive+0x1d0>
 8005758:	f007 fc10 	bl	800cf7c <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	1ad2      	subs	r2, r2, r3
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	429a      	cmp	r2, r3
 8005766:	d303      	bcc.n	8005770 <HAL_SPI_TransmitReceive+0x1d0>
      {
        errorcode = HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800576e:	e0aa      	b.n	80058c6 <HAL_SPI_TransmitReceive+0x326>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1ac      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x134>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1a7      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x134>
 8005784:	e072      	b.n	800586c <HAL_SPI_TransmitReceive+0x2cc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d004      	beq.n	8005798 <HAL_SPI_TransmitReceive+0x1f8>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b01      	cmp	r3, #1
 8005796:	d110      	bne.n	80057ba <HAL_SPI_TransmitReceive+0x21a>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	330c      	adds	r3, #12
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	7812      	ldrb	r2, [r2, #0]
 80057a2:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	3301      	adds	r3, #1
 80057a8:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057b8:	e04e      	b.n	8005858 <HAL_SPI_TransmitReceive+0x2b8>
 80057ba:	e04d      	b.n	8005858 <HAL_SPI_TransmitReceive+0x2b8>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01d      	beq.n	80057fe <HAL_SPI_TransmitReceive+0x25e>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d018      	beq.n	80057fe <HAL_SPI_TransmitReceive+0x25e>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d011      	beq.n	80057fe <HAL_SPI_TransmitReceive+0x25e>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f103 020c 	add.w	r2, r3, #12
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	1c59      	adds	r1, r3, #1
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d017      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x298>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d010      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x298>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	6812      	ldr	r2, [r2, #0]
 8005820:	68d2      	ldr	r2, [r2, #12]
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8005834:	2301      	movs	r3, #1
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583e:	d00b      	beq.n	8005858 <HAL_SPI_TransmitReceive+0x2b8>
 8005840:	f007 fb9c 	bl	800cf7c <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	1ad2      	subs	r2, r2, r3
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	429a      	cmp	r2, r3
 800584e:	d303      	bcc.n	8005858 <HAL_SPI_TransmitReceive+0x2b8>
      {
        errorcode = HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005856:	e036      	b.n	80058c6 <HAL_SPI_TransmitReceive+0x326>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
      pTxData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1ac      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x21c>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1a7      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	2102      	movs	r1, #2
 8005874:	2201      	movs	r2, #1
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	f001 f83a 	bl	80068f0 <SPI_WaitFlagStateUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_SPI_TransmitReceive+0x2ea>
  {
    errorcode = HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005888:	e01d      	b.n	80058c6 <HAL_SPI_TransmitReceive+0x326>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	f001 f898 	bl	80069c4 <SPI_CheckFlag_BSY>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d006      	beq.n	80058a8 <HAL_SPI_TransmitReceive+0x308>
  {
    errorcode = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2220      	movs	r2, #32
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80058a6:	e00e      	b.n	80058c6 <HAL_SPI_TransmitReceive+0x326>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058b0:	2300      	movs	r3, #0
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3728      	adds	r7, #40	; 0x28
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop

080058e4 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_SPI_Transmit_IT+0x20>
 8005900:	2302      	movs	r3, #2
 8005902:	e072      	b.n	80059ea <HAL_SPI_Transmit_IT+0x106>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if((pData == NULL) || (Size == 0U))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <HAL_SPI_Transmit_IT+0x34>
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800591c:	e060      	b.n	80059e0 <HAL_SPI_Transmit_IT+0xfc>
  }

  if(hspi->State != HAL_SPI_STATE_READY)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b01      	cmp	r3, #1
 8005928:	d002      	beq.n	8005930 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800592a:	2302      	movs	r3, #2
 800592c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800592e:	e057      	b.n	80059e0 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2203      	movs	r2, #3
 8005934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	88fa      	ldrh	r2, [r7, #6]
 8005948:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	88fa      	ldrh	r2, [r7, #6]
 800594e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4a21      	ldr	r2, [pc, #132]	; (80059f8 <HAL_SPI_Transmit_IT+0x114>)
 8005974:	645a      	str	r2, [r3, #68]	; 0x44
 8005976:	e002      	b.n	800597e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4a20      	ldr	r2, [pc, #128]	; (80059fc <HAL_SPI_Transmit_IT+0x118>)
 800597c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005986:	d107      	bne.n	8005998 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	6812      	ldr	r2, [r2, #0]
 8005990:	6812      	ldr	r2, [r2, #0]
 8005992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005996:	601a      	str	r2, [r3, #0]
  {
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d108      	bne.n	80059b2 <HAL_SPI_Transmit_IT+0xce>
  {
    /* Enable TXE interrupt */
    __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	6852      	ldr	r2, [r2, #4]
 80059aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059ae:	605a      	str	r2, [r3, #4]
 80059b0:	e007      	b.n	80059c2 <HAL_SPI_Transmit_IT+0xde>
  }
  else
  {
    /* Enable TXE and ERR interrupt */
    __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	6812      	ldr	r2, [r2, #0]
 80059ba:	6852      	ldr	r2, [r2, #4]
 80059bc:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80059c0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d107      	bne.n	80059e0 <HAL_SPI_Transmit_IT+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059de:	601a      	str	r2, [r3, #0]
  }

error :
  __HAL_UNLOCK(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	080068ad 	.word	0x080068ad
 80059fc:	08006869 	.word	0x08006869

08005a00 <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d110      	bne.n	8005a3c <HAL_SPI_Receive_IT+0x3c>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a22:	d10b      	bne.n	8005a3c <HAL_SPI_Receive_IT+0x3c>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2204      	movs	r2, #4
 8005a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
     return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005a2c:	88fb      	ldrh	r3, [r7, #6]
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	f000 f878 	bl	8005b28 <HAL_SPI_TransmitReceive_IT>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	e06c      	b.n	8005b16 <HAL_SPI_Receive_IT+0x116>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_SPI_Receive_IT+0x4a>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e065      	b.n	8005b16 <HAL_SPI_Receive_IT+0x116>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d002      	beq.n	8005a64 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a62:	e053      	b.n	8005b0c <HAL_SPI_Receive_IT+0x10c>
  }

  if((pData == NULL) || (Size == 0U))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_SPI_Receive_IT+0x70>
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d102      	bne.n	8005a76 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a74:	e04a      	b.n	8005b0c <HAL_SPI_Receive_IT+0x10c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2204      	movs	r2, #4
 8005a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	88fa      	ldrh	r2, [r7, #6]
 8005a8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	88fa      	ldrh	r2, [r7, #6]
 8005a94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4a19      	ldr	r2, [pc, #100]	; (8005b20 <HAL_SPI_Receive_IT+0x120>)
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
 8005abc:	e002      	b.n	8005ac4 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4a18      	ldr	r2, [pc, #96]	; (8005b24 <HAL_SPI_Receive_IT+0x124>)
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005acc:	d107      	bne.n	8005ade <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	6812      	ldr	r2, [r2, #0]
 8005ad8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005adc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	6852      	ldr	r2, [r2, #4]
 8005ae8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005aec:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d107      	bne.n	8005b0c <HAL_SPI_Receive_IT+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	6812      	ldr	r2, [r2, #0]
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b0a:	601a      	str	r2, [r3, #0]
  }

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	08006825 	.word	0x08006825
 8005b24:	080067e1 	.word	0x080067e1

08005b28 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData: pointer to reception data buffer
  * @param  Size: amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b089      	sub	sp, #36	; 0x24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61bb      	str	r3, [r7, #24]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d101      	bne.n	8005b50 <HAL_SPI_TransmitReceive_IT+0x28>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e074      	b.n	8005c3a <HAL_SPI_TransmitReceive_IT+0x112>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmp  = hspi->State;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	61bb      	str	r3, [r7, #24]
  tmp1 = hspi->Init.Mode;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	617b      	str	r3, [r7, #20]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d00d      	beq.n	8005b8a <HAL_SPI_TransmitReceive_IT+0x62>
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b74:	d106      	bne.n	8005b84 <HAL_SPI_TransmitReceive_IT+0x5c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d102      	bne.n	8005b84 <HAL_SPI_TransmitReceive_IT+0x5c>
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d002      	beq.n	8005b8a <HAL_SPI_TransmitReceive_IT+0x62>
  {
    errorcode = HAL_BUSY;
 8005b84:	2302      	movs	r3, #2
 8005b86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b88:	e052      	b.n	8005c30 <HAL_SPI_TransmitReceive_IT+0x108>
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <HAL_SPI_TransmitReceive_IT+0x74>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_SPI_TransmitReceive_IT+0x74>
 8005b96:	887b      	ldrh	r3, [r7, #2]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d102      	bne.n	8005ba2 <HAL_SPI_TransmitReceive_IT+0x7a>
  {
    errorcode = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ba0:	e046      	b.n	8005c30 <HAL_SPI_TransmitReceive_IT+0x108>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d103      	bne.n	8005bb6 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2205      	movs	r2, #5
 8005bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	887a      	ldrh	r2, [r7, #2]
 8005bc6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	887a      	ldrh	r2, [r7, #2]
 8005bcc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	887a      	ldrh	r2, [r7, #2]
 8005bd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	887a      	ldrh	r2, [r7, #2]
 8005bde:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d006      	beq.n	8005bf6 <HAL_SPI_TransmitReceive_IT+0xce>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4a17      	ldr	r2, [pc, #92]	; (8005c48 <HAL_SPI_TransmitReceive_IT+0x120>)
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4a16      	ldr	r2, [pc, #88]	; (8005c4c <HAL_SPI_TransmitReceive_IT+0x124>)
 8005bf2:	645a      	str	r2, [r3, #68]	; 0x44
 8005bf4:	e005      	b.n	8005c02 <HAL_SPI_TransmitReceive_IT+0xda>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4a15      	ldr	r2, [pc, #84]	; (8005c50 <HAL_SPI_TransmitReceive_IT+0x128>)
 8005bfa:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4a15      	ldr	r2, [pc, #84]	; (8005c54 <HAL_SPI_TransmitReceive_IT+0x12c>)
 8005c00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	6852      	ldr	r2, [r2, #4]
 8005c0c:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005c10:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d107      	bne.n	8005c30 <HAL_SPI_TransmitReceive_IT+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	6812      	ldr	r2, [r2, #0]
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c2e:	601a      	str	r2, [r3, #0]
  }

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c38:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3724      	adds	r7, #36	; 0x24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	08006725 	.word	0x08006725
 8005c4c:	08006785 	.word	0x08006785
 8005c50:	0800666d 	.word	0x0800666d
 8005c54:	080066c9 	.word	0x080066c9

08005c58 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	4613      	mov	r3, r2
 8005c64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_SPI_Transmit_DMA+0x20>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e083      	b.n	8005d80 <HAL_SPI_Transmit_DMA+0x128>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d002      	beq.n	8005c92 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c90:	e071      	b.n	8005d76 <HAL_SPI_Transmit_DMA+0x11e>
  }

  if((pData == NULL) || (Size == 0U))
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <HAL_SPI_Transmit_DMA+0x46>
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d102      	bne.n	8005ca4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ca2:	e068      	b.n	8005d76 <HAL_SPI_Transmit_DMA+0x11e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	88fa      	ldrh	r2, [r7, #6]
 8005cbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	88fa      	ldrh	r2, [r7, #6]
 8005cc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cea:	d107      	bne.n	8005cfc <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	6812      	ldr	r2, [r2, #0]
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cfa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d00:	4a21      	ldr	r2, [pc, #132]	; (8005d88 <HAL_SPI_Transmit_DMA+0x130>)
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d08:	4a20      	ldr	r2, [pc, #128]	; (8005d8c <HAL_SPI_Transmit_DMA+0x134>)
 8005d0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d10:	4a1f      	ldr	r2, [pc, #124]	; (8005d90 <HAL_SPI_Transmit_DMA+0x138>)
 8005d12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d18:	2200      	movs	r2, #0
 8005d1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	4619      	mov	r1, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	330c      	adds	r3, #12
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f006 f8a4 	bl	800be80 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d107      	bne.n	8005d56 <HAL_SPI_Transmit_DMA+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d54:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	6812      	ldr	r2, [r2, #0]
 8005d5e:	6852      	ldr	r2, [r2, #4]
 8005d60:	f042 0220 	orr.w	r2, r2, #32
 8005d64:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	6812      	ldr	r2, [r2, #0]
 8005d6e:	6852      	ldr	r2, [r2, #4]
 8005d70:	f042 0202 	orr.w	r2, r2, #2
 8005d74:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	080065b1 	.word	0x080065b1
 8005d8c:	0800640d 	.word	0x0800640d
 8005d90:	08006605 	.word	0x08006605

08005d94 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d110      	bne.n	8005dd0 <HAL_SPI_Receive_DMA+0x3c>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005db6:	d10b      	bne.n	8005dd0 <HAL_SPI_Receive_DMA+0x3c>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2204      	movs	r2, #4
 8005dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
     return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005dc0:	88fb      	ldrh	r3, [r7, #6]
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	f000 f894 	bl	8005ef4 <HAL_SPI_TransmitReceive_DMA>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	e087      	b.n	8005ee0 <HAL_SPI_Receive_DMA+0x14c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_SPI_Receive_DMA+0x4a>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e080      	b.n	8005ee0 <HAL_SPI_Receive_DMA+0x14c>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d002      	beq.n	8005df8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005df2:	2302      	movs	r3, #2
 8005df4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005df6:	e06e      	b.n	8005ed6 <HAL_SPI_Receive_DMA+0x142>
  }

  if((pData == NULL) || (Size == 0U))
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <HAL_SPI_Receive_DMA+0x70>
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d102      	bne.n	8005e0a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e08:	e065      	b.n	8005ed6 <HAL_SPI_Receive_DMA+0x142>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2204      	movs	r2, #4
 8005e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	88fa      	ldrh	r2, [r7, #6]
 8005e22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	88fa      	ldrh	r2, [r7, #6]
 8005e28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e4a:	d107      	bne.n	8005e5c <HAL_SPI_Receive_DMA+0xc8>
  {
    SPI_1LINE_RX(hspi);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e60:	4a21      	ldr	r2, [pc, #132]	; (8005ee8 <HAL_SPI_Receive_DMA+0x154>)
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e68:	4a20      	ldr	r2, [pc, #128]	; (8005eec <HAL_SPI_Receive_DMA+0x158>)
 8005e6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e70:	4a1f      	ldr	r2, [pc, #124]	; (8005ef0 <HAL_SPI_Receive_DMA+0x15c>)
 8005e72:	64da      	str	r2, [r3, #76]	; 0x4c

 /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e78:	2200      	movs	r2, #0
 8005e7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	330c      	adds	r3, #12
 8005e86:	4619      	mov	r1, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f005 fff4 	bl	800be80 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d107      	bne.n	8005eb6 <HAL_SPI_Receive_DMA+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	6812      	ldr	r2, [r2, #0]
 8005ebe:	6852      	ldr	r2, [r2, #4]
 8005ec0:	f042 0220 	orr.w	r2, r2, #32
 8005ec4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	6852      	ldr	r2, [r2, #4]
 8005ed0:	f042 0201 	orr.w	r2, r2, #1
 8005ed4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	080065cd 	.word	0x080065cd
 8005eec:	080064a9 	.word	0x080064a9
 8005ef0:	08006605 	.word	0x08006605

08005ef4 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_SPI_TransmitReceive_DMA+0x28>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e0c4      	b.n	80060a6 <HAL_SPI_TransmitReceive_DMA+0x1b2>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmp  = hspi->State;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	61bb      	str	r3, [r7, #24]
  tmp1 = hspi->Init.Mode;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	617b      	str	r3, [r7, #20]
  if(!((tmp == HAL_SPI_STATE_READY) ||
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d00d      	beq.n	8005f56 <HAL_SPI_TransmitReceive_DMA+0x62>
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f40:	d106      	bne.n	8005f50 <HAL_SPI_TransmitReceive_DMA+0x5c>
      ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d102      	bne.n	8005f50 <HAL_SPI_TransmitReceive_DMA+0x5c>
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d002      	beq.n	8005f56 <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 8005f50:	2302      	movs	r3, #2
 8005f52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f54:	e0a2      	b.n	800609c <HAL_SPI_TransmitReceive_DMA+0x1a8>
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d005      	beq.n	8005f68 <HAL_SPI_TransmitReceive_DMA+0x74>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_SPI_TransmitReceive_DMA+0x74>
 8005f62:	887b      	ldrh	r3, [r7, #2]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d102      	bne.n	8005f6e <HAL_SPI_TransmitReceive_DMA+0x7a>
  {
    errorcode = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f6c:	e096      	b.n	800609c <HAL_SPI_TransmitReceive_DMA+0x1a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d103      	bne.n	8005f82 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2205      	movs	r2, #5
 8005f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t*)pTxData;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	887a      	ldrh	r2, [r7, #2]
 8005f92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	887a      	ldrh	r2, [r7, #2]
 8005f98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t*)pRxData;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	887a      	ldrh	r2, [r7, #2]
 8005fa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	887a      	ldrh	r2, [r7, #2]
 8005faa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d108      	bne.n	8005fd6 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc8:	4a39      	ldr	r2, [pc, #228]	; (80060b0 <HAL_SPI_TransmitReceive_DMA+0x1bc>)
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd0:	4a38      	ldr	r2, [pc, #224]	; (80060b4 <HAL_SPI_TransmitReceive_DMA+0x1c0>)
 8005fd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8005fd4:	e007      	b.n	8005fe6 <HAL_SPI_TransmitReceive_DMA+0xf2>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fda:	4a37      	ldr	r2, [pc, #220]	; (80060b8 <HAL_SPI_TransmitReceive_DMA+0x1c4>)
 8005fdc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe2:	4a36      	ldr	r2, [pc, #216]	; (80060bc <HAL_SPI_TransmitReceive_DMA+0x1c8>)
 8005fe4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fea:	4a35      	ldr	r2, [pc, #212]	; (80060c0 <HAL_SPI_TransmitReceive_DMA+0x1cc>)
 8005fec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	4619      	mov	r1, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	461a      	mov	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600c:	b29b      	uxth	r3, r3
 800600e:	f005 ff37 	bl	800be80 <HAL_DMA_Start_IT>

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	6812      	ldr	r2, [r2, #0]
 800601a:	6852      	ldr	r2, [r2, #4]
 800601c:	f042 0201 	orr.w	r2, r2, #1
 8006020:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006026:	2200      	movs	r2, #0
 8006028:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602e:	2200      	movs	r2, #0
 8006030:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006036:	2200      	movs	r2, #0
 8006038:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800603e:	2200      	movs	r2, #0
 8006040:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	4619      	mov	r1, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	330c      	adds	r3, #12
 8006052:	461a      	mov	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006058:	b29b      	uxth	r3, r3
 800605a:	f005 ff11 	bl	800be80 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d107      	bne.n	800607c <HAL_SPI_TransmitReceive_DMA+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	6812      	ldr	r2, [r2, #0]
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800607a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	6812      	ldr	r2, [r2, #0]
 8006084:	6852      	ldr	r2, [r2, #4]
 8006086:	f042 0220 	orr.w	r2, r2, #32
 800608a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	6812      	ldr	r2, [r2, #0]
 8006094:	6852      	ldr	r2, [r2, #4]
 8006096:	f042 0202 	orr.w	r2, r2, #2
 800609a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3720      	adds	r7, #32
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	080065cd 	.word	0x080065cd
 80060b4:	080064a9 	.word	0x080064a9
 80060b8:	080065e9 	.word	0x080065e9
 80060bc:	0800652d 	.word	0x0800652d
 80060c0:	08006605 	.word	0x08006605

080060c4 <HAL_SPI_DMAPause>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_SPI_DMAPause+0x16>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e010      	b.n	80060fc <HAL_SPI_DMAPause+0x38>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	6852      	ldr	r2, [r2, #4]
 80060ec:	f022 0203 	bic.w	r2, r2, #3
 80060f0:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_SPI_DMAResume>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <HAL_SPI_DMAResume+0x16>
 800611a:	2302      	movs	r3, #2
 800611c:	e010      	b.n	8006140 <HAL_SPI_DMAResume+0x38>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6812      	ldr	r2, [r2, #0]
 800612e:	6852      	ldr	r2, [r2, #4]
 8006130:	f042 0203 	orr.w	r2, r2, #3
 8006134:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_SPI_DMAStop>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream */
  if(hspi->hdmatx != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <HAL_SPI_DMAStop+0x1a>
  {
    HAL_DMA_Abort(hspi->hdmatx);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006160:	4618      	mov	r0, r3
 8006162:	f005 feed 	bl	800bf40 <HAL_DMA_Abort>
  }
  /* Abort the SPI DMA rx Stream */
  if(hspi->hdmarx != NULL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <HAL_SPI_DMAStop+0x2c>
  {
    HAL_DMA_Abort(hspi->hdmarx);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006172:	4618      	mov	r0, r3
 8006174:	f005 fee4 	bl	800bf40 <HAL_DMA_Abort>
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	6852      	ldr	r2, [r2, #4]
 8006182:	f022 0203 	bic.w	r2, r2, #3
 8006186:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop

0800619c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10e      	bne.n	80061dc <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	f003 0301 	and.w	r3, r3, #1
{
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d009      	beq.n	80061dc <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
    return;
 80061da:	e0b1      	b.n	8006340 <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <HAL_SPI_IRQHandler+0x5e>
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	4798      	blx	r3
    return;
 80061f8:	e0a2      	b.n	8006340 <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	f403 73b0 	and.w	r3, r3, #352	; 0x160
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 809d 	beq.w	8006340 <HAL_SPI_IRQHandler+0x1a4>
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8097 	beq.w	8006340 <HAL_SPI_IRQHandler+0x1a4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006218:	2b00      	cmp	r3, #0
 800621a:	d023      	beq.n	8006264 <HAL_SPI_IRQHandler+0xc8>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b03      	cmp	r3, #3
 8006226:	d011      	beq.n	800624c <HAL_SPI_IRQHandler+0xb0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622c:	f043 0204 	orr.w	r2, r3, #4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	e00b      	b.n	8006264 <HAL_SPI_IRQHandler+0xc8>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800624c:	2300      	movs	r3, #0
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	613b      	str	r3, [r7, #16]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	693b      	ldr	r3, [r7, #16]
        return;
 8006262:	e06d      	b.n	8006340 <HAL_SPI_IRQHandler+0x1a4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d014      	beq.n	8006298 <HAL_SPI_IRQHandler+0xfc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006272:	f043 0201 	orr.w	r2, r3, #1
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	6812      	ldr	r2, [r2, #0]
 8006290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if((itflag & SPI_FLAG_FRE) != RESET)
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00c      	beq.n	80062bc <HAL_SPI_IRQHandler+0x120>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a6:	f043 0208 	orr.w	r2, r3, #8
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80062ae:	2300      	movs	r3, #0
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	68bb      	ldr	r3, [r7, #8]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d03c      	beq.n	800633e <HAL_SPI_IRQHandler+0x1a2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	6852      	ldr	r2, [r2, #4]
 80062ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062d2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d104      	bne.n	80062f0 <HAL_SPI_IRQHandler+0x154>
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d023      	beq.n	8006338 <HAL_SPI_IRQHandler+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6812      	ldr	r2, [r2, #0]
 80062f8:	6852      	ldr	r2, [r2, #4]
 80062fa:	f022 0203 	bic.w	r2, r2, #3
 80062fe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d008      	beq.n	800631a <HAL_SPI_IRQHandler+0x17e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630c:	4a0e      	ldr	r2, [pc, #56]	; (8006348 <HAL_SPI_IRQHandler+0x1ac>)
 800630e:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006314:	4618      	mov	r0, r3
 8006316:	f005 fe83 	bl	800c020 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800631e:	2b00      	cmp	r3, #0
 8006320:	d009      	beq.n	8006336 <HAL_SPI_IRQHandler+0x19a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006326:	4a08      	ldr	r2, [pc, #32]	; (8006348 <HAL_SPI_IRQHandler+0x1ac>)
 8006328:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800632e:	4618      	mov	r0, r3
 8006330:	f005 fe76 	bl	800c020 <HAL_DMA_Abort_IT>
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
          HAL_DMA_Abort_IT(hspi->hdmarx);
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 8006334:	e003      	b.n	800633e <HAL_SPI_IRQHandler+0x1a2>
 8006336:	e002      	b.n	800633e <HAL_SPI_IRQHandler+0x1a2>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f843 	bl	80063c4 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 800633e:	bf00      	nop
  }
}
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	08006645 	.word	0x08006645

0800634c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
  */
}
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop

08006360 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
  */
}
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop

08006374 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
  */
}
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop

08006388 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
  */
}
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop

0800639c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
  */
}
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop

080063b0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
  */
}
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop

080063c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop

080063d8 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063e6:	b2db      	uxtb	r3, r3
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_SPI_GetError>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800641e:	f006 fdad 	bl	800cf7c <HAL_GetTick>
 8006422:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642e:	2b00      	cmp	r3, #0
 8006430:	d133      	bne.n	800649a <SPI_DMATransmitCplt+0x8e>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	6812      	ldr	r2, [r2, #0]
 800643a:	6852      	ldr	r2, [r2, #4]
 800643c:	f022 0202 	bic.w	r2, r2, #2
 8006440:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006442:	6978      	ldr	r0, [r7, #20]
 8006444:	2164      	movs	r1, #100	; 0x64
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	f000 fabc 	bl	80069c4 <SPI_CheckFlag_BSY>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d005      	beq.n	800645e <SPI_DMATransmitCplt+0x52>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006456:	f043 0220 	orr.w	r2, r3, #32
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <SPI_DMATransmitCplt+0x70>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2200      	movs	r2, #0
 8006480:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <SPI_DMATransmitCplt+0x8e>
    {
      HAL_SPI_ErrorCallback(hspi);
 8006492:	6978      	ldr	r0, [r7, #20]
 8006494:	f7ff ff96 	bl	80063c4 <HAL_SPI_ErrorCallback>
      return;
 8006498:	e002      	b.n	80064a0 <SPI_DMATransmitCplt+0x94>
    }
  }
  HAL_SPI_TxCpltCallback(hspi);
 800649a:	6978      	ldr	r0, [r7, #20]
 800649c:	f7ff ff56 	bl	800634c <HAL_SPI_TxCpltCallback>
}
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop

080064a8 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
#endif /* USE_SPI_CRC */

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d12d      	bne.n	8006520 <SPI_DMAReceiveCplt+0x78>
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	6852      	ldr	r2, [r2, #4]
 80064ce:	f022 0203 	bic.w	r2, r2, #3
 80064d2:	605a      	str	r2, [r3, #4]

    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064dc:	d111      	bne.n	8006502 <SPI_DMAReceiveCplt+0x5a>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e6:	d004      	beq.n	80064f2 <SPI_DMAReceiveCplt+0x4a>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f0:	d107      	bne.n	8006502 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	6812      	ldr	r2, [r2, #0]
 80064fa:	6812      	ldr	r2, [r2, #0]
 80064fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006500:	601a      	str	r2, [r3, #0]
    }

    hspi->RxXferCount = 0U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <SPI_DMAReceiveCplt+0x78>
    {
      HAL_SPI_ErrorCallback(hspi);
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f7ff ff53 	bl	80063c4 <HAL_SPI_ErrorCallback>
      return;
 800651e:	e002      	b.n	8006526 <SPI_DMAReceiveCplt+0x7e>
    }
  }
  HAL_SPI_RxCpltCallback(hspi);
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f7ff ff1d 	bl	8006360 <HAL_SPI_RxCpltCallback>
}
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006538:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	60bb      	str	r3, [r7, #8]
#if (USE_SPI_CRC != 0U)
  __IO int16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800653e:	f006 fd1d 	bl	800cf7c <HAL_GetTick>
 8006542:	60b8      	str	r0, [r7, #8]

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654e:	2b00      	cmp	r3, #0
 8006550:	d127      	bne.n	80065a2 <SPI_DMATransmitReceiveCplt+0x76>
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */
    /* Check the end of the transaction */
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	2164      	movs	r1, #100	; 0x64
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	f000 fa34 	bl	80069c4 <SPI_CheckFlag_BSY>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <SPI_DMATransmitReceiveCplt+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006566:	f043 0220 	orr.w	r2, r3, #32
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	6852      	ldr	r2, [r2, #4]
 8006578:	f022 0203 	bic.w	r2, r2, #3
 800657c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <SPI_DMATransmitReceiveCplt+0x76>
    {
      HAL_SPI_ErrorCallback(hspi);
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff ff12 	bl	80063c4 <HAL_SPI_ErrorCallback>
      return;
 80065a0:	e002      	b.n	80065a8 <SPI_DMATransmitReceiveCplt+0x7c>
    }
  }
  HAL_SPI_TxRxCpltCallback(hspi);
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7ff fee6 	bl	8006374 <HAL_SPI_TxRxCpltCallback>
}
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop

080065b0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	60fb      	str	r3, [r7, #12]

  HAL_SPI_TxHalfCpltCallback(hspi);
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f7ff fee2 	bl	8006388 <HAL_SPI_TxHalfCpltCallback>
}
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop

080065cc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	60fb      	str	r3, [r7, #12]

  HAL_SPI_RxHalfCpltCallback(hspi);
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f7ff fede 	bl	800639c <HAL_SPI_RxHalfCpltCallback>
}
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop

080065e8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	60fb      	str	r3, [r7, #12]

  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7ff feda 	bl	80063b0 <HAL_SPI_TxRxHalfCpltCallback>
}
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop

08006604 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	60fb      	str	r3, [r7, #12]

/* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	6812      	ldr	r2, [r2, #0]
 800661a:	6852      	ldr	r2, [r2, #4]
 800661c:	f022 0203 	bic.w	r2, r2, #3
 8006620:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006626:	f043 0210 	orr.w	r2, r3, #16
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f7ff fec4 	bl	80063c4 <HAL_SPI_ErrorCallback>
}
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop

08006644 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	86da      	strh	r2, [r3, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f7ff feb0 	bl	80063c4 <HAL_SPI_ErrorCallback>
}
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop

0800666c <SPI_2linesRxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006678:	1c59      	adds	r1, r3, #1
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6391      	str	r1, [r2, #56]	; 0x38
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	320c      	adds	r2, #12
 8006684:	7812      	ldrb	r2, [r2, #0]
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800668e:	b29b      	uxth	r3, r3
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* check end of the reception */
  if(hspi->RxXferCount == 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10f      	bne.n	80066c2 <SPI_2linesRxISR_8BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6812      	ldr	r2, [r2, #0]
 80066aa:	6852      	ldr	r2, [r2, #4]
 80066ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066b0:	605a      	str	r2, [r3, #4]

    if(hspi->TxXferCount == 0U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d102      	bne.n	80066c2 <SPI_2linesRxISR_8BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f99f 	bl	8006a00 <SPI_CloseRxTx_ISR>
    }
  }
}
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f103 020c 	add.w	r2, r3, #12
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	1c58      	adds	r0, r3, #1
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	6308      	str	r0, [r1, #48]	; 0x30
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	7013      	strb	r3, [r2, #0]
  hspi->TxXferCount--;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* check the end of the transmission */
  if(hspi->TxXferCount == 0U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10f      	bne.n	800671e <SPI_2linesTxISR_8BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6812      	ldr	r2, [r2, #0]
 8006706:	6852      	ldr	r2, [r2, #4]
 8006708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800670c:	605a      	str	r2, [r3, #4]

    if(hspi->RxXferCount == 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d102      	bne.n	800671e <SPI_2linesTxISR_8BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f971 	bl	8006a00 <SPI_CloseRxTx_ISR>
    }
  }
}
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <SPI_2linesRxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	68d2      	ldr	r2, [r2, #12]
 8006736:	b292      	uxth	r2, r2
 8006738:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	1c9a      	adds	r2, r3, #2
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006748:	b29b      	uxth	r3, r3
 800674a:	3b01      	subs	r3, #1
 800674c:	b29a      	uxth	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	87da      	strh	r2, [r3, #62]	; 0x3e

  if(hspi->RxXferCount == 0U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006756:	b29b      	uxth	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10f      	bne.n	800677c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	6852      	ldr	r2, [r2, #4]
 8006766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800676a:	605a      	str	r2, [r3, #4]

    if(hspi->TxXferCount == 0U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f942 	bl	8006a00 <SPI_CloseRxTx_ISR>
    }
  }
}
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop

08006784 <SPI_2linesTxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006794:	8812      	ldrh	r2, [r2, #0]
 8006796:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	1c9a      	adds	r2, r3, #2
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if(hspi->TxXferCount == 0U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10f      	bne.n	80067da <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	6852      	ldr	r2, [r2, #4]
 80067c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067c8:	605a      	str	r2, [r3, #4]

    if(hspi->RxXferCount == 0U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d102      	bne.n	80067da <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f913 	bl	8006a00 <SPI_CloseRxTx_ISR>
    }
  }
}
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ec:	1c59      	adds	r1, r3, #1
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6391      	str	r1, [r2, #56]	; 0x38
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	320c      	adds	r2, #12
 80067f8:	7812      	ldrb	r2, [r2, #0]
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->RxXferCount == 0U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d102      	bne.n	800681c <SPI_RxISR_8BIT+0x3c>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f966 	bl	8006ae8 <SPI_CloseRx_ISR>
  }
}
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop

08006824 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6812      	ldr	r2, [r2, #0]
 8006834:	68d2      	ldr	r2, [r2, #12]
 8006836:	b292      	uxth	r2, r2
 8006838:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	1c9a      	adds	r2, r3, #2
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29a      	uxth	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->RxXferCount == 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006856:	b29b      	uxth	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f943 	bl	8006ae8 <SPI_CloseRx_ISR>
  }
}
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f103 020c 	add.w	r2, r3, #12
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687c:	1c58      	adds	r0, r3, #1
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	6308      	str	r0, [r1, #48]	; 0x30
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	7013      	strb	r3, [r2, #0]
  hspi->TxXferCount--;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	86da      	strh	r2, [r3, #54]	; 0x36

  if(hspi->TxXferCount == 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d102      	bne.n	80068a4 <SPI_TxISR_8BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f966 	bl	8006b70 <SPI_CloseTx_ISR>
  }
}
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop

080068ac <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80068bc:	8812      	ldrh	r2, [r2, #0]
 80068be:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	1c9a      	adds	r2, r3, #2
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	86da      	strh	r2, [r3, #54]	; 0x36

  if(hspi->TxXferCount == 0U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d102      	bne.n	80068e8 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f944 	bl	8006b70 <SPI_CloseTx_ISR>
  }
}
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop

080068f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80068fe:	e04d      	b.n	800699c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006906:	d049      	beq.n	800699c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <SPI_WaitFlagStateUntilTimeout+0x2e>
 800690e:	f006 fb35 	bl	800cf7c <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	1ad2      	subs	r2, r2, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d33e      	bcc.n	800699c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	6812      	ldr	r2, [r2, #0]
 8006926:	6852      	ldr	r2, [r2, #4]
 8006928:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800692c:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006936:	d111      	bne.n	800695c <SPI_WaitFlagStateUntilTimeout+0x6c>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006940:	d004      	beq.n	800694c <SPI_WaitFlagStateUntilTimeout+0x5c>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694a:	d107      	bne.n	800695c <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	6812      	ldr	r2, [r2, #0]
 8006956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006964:	d110      	bne.n	8006988 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6819      	ldr	r1, [r3, #0]
 8006970:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8006974:	400b      	ands	r3, r1
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	6812      	ldr	r2, [r2, #0]
 8006980:	6812      	ldr	r2, [r2, #0]
 8006982:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006986:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e00e      	b.n	80069ba <SPI_WaitFlagStateUntilTimeout+0xca>
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	401a      	ands	r2, r3
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d101      	bne.n	80069b0 <SPI_WaitFlagStateUntilTimeout+0xc0>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <SPI_WaitFlagStateUntilTimeout+0xc2>
 80069b0:	2300      	movs	r3, #0
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d1a3      	bne.n	8006900 <SPI_WaitFlagStateUntilTimeout+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop

080069c4 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	2180      	movs	r1, #128	; 0x80
 80069d8:	2200      	movs	r2, #0
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f7ff ff88 	bl	80068f0 <SPI_WaitFlagStateUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d007      	beq.n	80069f6 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ea:	f043 0220 	orr.w	r2, r3, #32
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e000      	b.n	80069f8 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <SPI_CloseRxTx_ISR>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24 / 1000);
 8006a0c:	4b34      	ldr	r3, [pc, #208]	; (8006ae0 <SPI_CloseRxTx_ISR+0xe0>)
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	4b34      	ldr	r3, [pc, #208]	; (8006ae4 <SPI_CloseRxTx_ISR+0xe4>)
 8006a12:	fba3 1302 	umull	r1, r3, r3, r2
 8006a16:	0a5b      	lsrs	r3, r3, #9
 8006a18:	2264      	movs	r2, #100	; 0x64
 8006a1a:	fb02 f303 	mul.w	r3, r2, r3
 8006a1e:	613b      	str	r3, [r7, #16]
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006a20:	f006 faac 	bl	800cf7c <HAL_GetTick>
 8006a24:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	6812      	ldr	r2, [r2, #0]
 8006a2e:	6852      	ldr	r2, [r2, #4]
 8006a30:	f022 0220 	bic.w	r2, r2, #32
 8006a34:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1e5a      	subs	r2, r3, #1
 8006a3a:	613a      	str	r2, [r7, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d106      	bne.n	8006a4e <SPI_CloseRxTx_ISR+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a44:	f043 0220 	orr.w	r2, r3, #32
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a4c:	e006      	b.n	8006a5c <SPI_CloseRxTx_ISR+0x5c>
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0ec      	beq.n	8006a36 <SPI_CloseRxTx_ISR+0x36>
  
  /* Check the end of the transaction */
  if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart)!=HAL_OK)
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	2164      	movs	r1, #100	; 0x64
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	f7ff ffaf 	bl	80069c4 <SPI_CheckFlag_BSY>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <SPI_CloseRxTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a70:	f043 0220 	orr.w	r2, r3, #32
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <SPI_CloseRxTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a80:	2300      	movs	r3, #0
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	68fb      	ldr	r3, [r7, #12]
    HAL_SPI_ErrorCallback(hspi);
  }
  else
  {
#endif /* USE_SPI_CRC */
    if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d115      	bne.n	8006aca <SPI_CloseRxTx_ISR+0xca>
    {
      if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d107      	bne.n	8006aba <SPI_CloseRxTx_ISR+0xba>
      {
      	hspi->State = HAL_SPI_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_RxCpltCallback(hspi);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff fc54 	bl	8006360 <HAL_SPI_RxCpltCallback>
 8006ab8:	e00e      	b.n	8006ad8 <SPI_CloseRxTx_ISR+0xd8>
      }
      else
      {
      	hspi->State = HAL_SPI_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff fc56 	bl	8006374 <HAL_SPI_TxRxCpltCallback>
 8006ac8:	e006      	b.n	8006ad8 <SPI_CloseRxTx_ISR+0xd8>
      }
    }
    else
    {
      hspi->State = HAL_SPI_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fc76 	bl	80063c4 <HAL_SPI_ErrorCallback>
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000168 	.word	0x20000168
 8006ae4:	057619f1 	.word	0x057619f1

08006ae8 <SPI_CloseRx_ISR>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6812      	ldr	r2, [r2, #0]
 8006af8:	6852      	ldr	r2, [r2, #4]
 8006afa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006afe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b08:	d111      	bne.n	8006b2e <SPI_CloseRx_ISR+0x46>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b12:	d004      	beq.n	8006b1e <SPI_CloseRx_ISR+0x36>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b1c:	d107      	bne.n	8006b2e <SPI_CloseRx_ISR+0x46>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6812      	ldr	r2, [r2, #0]
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b2c:	601a      	str	r2, [r3, #0]
    }

    /* Clear overrun flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <SPI_CloseRx_ISR+0x64>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
    }
    hspi->State = HAL_SPI_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
    }
    else
    {
#endif /* USE_SPI_CRC */
      if(hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d103      	bne.n	8006b64 <SPI_CloseRx_ISR+0x7c>
      {
        HAL_SPI_RxCpltCallback(hspi);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7ff fbff 	bl	8006360 <HAL_SPI_RxCpltCallback>
 8006b62:	e002      	b.n	8006b6a <SPI_CloseRx_ISR+0x82>
      }
      else
      {
        HAL_SPI_ErrorCallback(hspi);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff fc2d 	bl	80063c4 <HAL_SPI_ErrorCallback>
      }
#if (USE_SPI_CRC != 0U)
    }
#endif /* USE_SPI_CRC */
}
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <SPI_CloseTx_ISR>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24 / 1000);
 8006b7c:	4b2b      	ldr	r3, [pc, #172]	; (8006c2c <SPI_CloseTx_ISR+0xbc>)
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	4b2b      	ldr	r3, [pc, #172]	; (8006c30 <SPI_CloseTx_ISR+0xc0>)
 8006b82:	fba3 1302 	umull	r1, r3, r3, r2
 8006b86:	0a5b      	lsrs	r3, r3, #9
 8006b88:	2264      	movs	r2, #100	; 0x64
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
 8006b8e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b90:	f006 f9f4 	bl	800cf7c <HAL_GetTick>
 8006b94:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1e5a      	subs	r2, r3, #1
 8006b9a:	613a      	str	r2, [r7, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d106      	bne.n	8006bae <SPI_CloseTx_ISR+0x3e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba4:	f043 0220 	orr.w	r2, r3, #32
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006bac:	e006      	b.n	8006bbc <SPI_CloseTx_ISR+0x4c>
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0ec      	beq.n	8006b96 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6812      	ldr	r2, [r2, #0]
 8006bc4:	6852      	ldr	r2, [r2, #4]
 8006bc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006bca:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	2164      	movs	r1, #100	; 0x64
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	f7ff fef7 	bl	80069c4 <SPI_CheckFlag_BSY>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be0:	f043 0220 	orr.w	r2, r3, #32
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10a      	bne.n	8006c06 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <SPI_CloseTx_ISR+0xae>
  {
    HAL_SPI_ErrorCallback(hspi);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7ff fbd4 	bl	80063c4 <HAL_SPI_ErrorCallback>
 8006c1c:	e002      	b.n	8006c24 <SPI_CloseTx_ISR+0xb4>
  }
  else
  {
    HAL_SPI_TxCpltCallback(hspi);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff fb94 	bl	800634c <HAL_SPI_TxCpltCallback>
  }
}
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000168 	.word	0x20000168
 8006c30:	057619f1 	.word	0x057619f1

08006c34 <HAL_RCC_DeInit>:
  *            - Peripheral clocks  
  *            - LSI, LSE and RTC clocks 
  * @retval None
  */
void HAL_RCC_DeInit(void)
{
 8006c34:	b480      	push	{r7}
 8006c36:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
 8006c38:	4b1b      	ldr	r3, [pc, #108]	; (8006ca8 <HAL_RCC_DeInit+0x74>)
 8006c3a:	4a1b      	ldr	r2, [pc, #108]	; (8006ca8 <HAL_RCC_DeInit+0x74>)
 8006c3c:	6812      	ldr	r2, [r2, #0]
 8006c3e:	f042 0281 	orr.w	r2, r2, #129	; 0x81
 8006c42:	601a      	str	r2, [r3, #0]
  
  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8006c44:	4b18      	ldr	r3, [pc, #96]	; (8006ca8 <HAL_RCC_DeInit+0x74>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	609a      	str	r2, [r3, #8]
  
  /* Reset HSEON, CSSON, PLLON, PLLI2S */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON| RCC_CR_PLLI2SON); 
 8006c4a:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <HAL_RCC_DeInit+0x74>)
 8006c4c:	4b16      	ldr	r3, [pc, #88]	; (8006ca8 <HAL_RCC_DeInit+0x74>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8006c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c58:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8006c5a:	4b13      	ldr	r3, [pc, #76]	; (8006ca8 <HAL_RCC_DeInit+0x74>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2); 
 8006c60:	4a11      	ldr	r2, [pc, #68]	; (8006ca8 <HAL_RCC_DeInit+0x74>)
 8006c62:	4b11      	ldr	r3, [pc, #68]	; (8006ca8 <HAL_RCC_DeInit+0x74>)
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	4b11      	ldr	r3, [pc, #68]	; (8006cac <HAL_RCC_DeInit+0x78>)
 8006c68:	430b      	orrs	r3, r1
 8006c6a:	6053      	str	r3, [r2, #4]
  
  /* Reset PLLI2SCFGR register */
  CLEAR_REG(RCC->PLLI2SCFGR);
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <HAL_RCC_DeInit+0x74>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  SET_BIT(RCC->PLLI2SCFGR,  RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1);
 8006c74:	4a0c      	ldr	r2, [pc, #48]	; (8006ca8 <HAL_RCC_DeInit+0x74>)
 8006c76:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <HAL_RCC_DeInit+0x74>)
 8006c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c80:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006c84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006c88:	4b07      	ldr	r3, [pc, #28]	; (8006ca8 <HAL_RCC_DeInit+0x74>)
 8006c8a:	4a07      	ldr	r2, [pc, #28]	; (8006ca8 <HAL_RCC_DeInit+0x74>)
 8006c8c:	6812      	ldr	r2, [r2, #0]
 8006c8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c92:	601a      	str	r2, [r3, #0]
  
  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8006c94:	4b04      	ldr	r3, [pc, #16]	; (8006ca8 <HAL_RCC_DeInit+0x74>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	60da      	str	r2, [r3, #12]
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8006c9a:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <HAL_RCC_DeInit+0x7c>)
 8006c9c:	4a05      	ldr	r2, [pc, #20]	; (8006cb4 <HAL_RCC_DeInit+0x80>)
 8006c9e:	601a      	str	r2, [r3, #0]
}
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	04003010 	.word	0x04003010
 8006cb0:	20000168 	.word	0x20000168
 8006cb4:	00f42400 	.word	0x00f42400

08006cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08a      	sub	sp, #40	; 0x28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d04a      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xb2>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)    
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006cd4:	4b6c      	ldr	r3, [pc, #432]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cda:	f006 f94f 	bl	800cf7c <HAL_GetTick>
 8006cde:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ce2:	f006 f94b 	bl	800cf7c <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e0c5      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cf4:	4b65      	ldr	r3, [pc, #404]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1f0      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006d00:	4b62      	ldr	r3, [pc, #392]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6851      	ldr	r1, [r2, #4]
 8006d06:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006d0a:	61fa      	str	r2, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	fa92 f2a2 	rbit	r2, r2
 8006d12:	61ba      	str	r2, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	fab2 f282 	clz	r2, r2
 8006d1a:	4091      	lsls	r1, r2
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6890      	ldr	r0, [r2, #8]
 8006d20:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8006d24:	617a      	str	r2, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	fa92 f2a2 	rbit	r2, r2
 8006d2c:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	fab2 f282 	clz	r2, r2
 8006d34:	fa00 f202 	lsl.w	r2, r0, r2
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F411xE */
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d3e:	4b52      	ldr	r3, [pc, #328]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d40:	2201      	movs	r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d44:	f006 f91a 	bl	800cf7c <HAL_GetTick>
 8006d48:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d4c:	f006 f916 	bl	800cf7c <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xa6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e090      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d5e:	4b4b      	ldr	r3, [pc, #300]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f0      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x94>
      }
    }
  }
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 8083 	beq.w	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	4b43      	ldr	r3, [pc, #268]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d7e:	4a43      	ldr	r2, [pc, #268]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40
 8006d88:	4b40      	ldr	r3, [pc, #256]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d94:	4b3e      	ldr	r3, [pc, #248]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006d96:	4a3e      	ldr	r2, [pc, #248]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006d98:	6812      	ldr	r2, [r2, #0]
 8006d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d9e:	601a      	str	r2, [r3, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8006da0:	f006 f8ec 	bl	800cf7c <HAL_GetTick>
 8006da4:	6278      	str	r0, [r7, #36]	; 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006da6:	e008      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x102>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006da8:	f006 f8e8 	bl	800cf7c <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d901      	bls.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x102>
      {
        return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e062      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    PWR->CR |= PWR_CR_DBP;
    
    /* Get tick */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006dba:	4b35      	ldr	r3, [pc, #212]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0f0      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006dc6:	4b31      	ldr	r3, [pc, #196]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dce:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d02f      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d028      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006de4:	4b29      	ldr	r3, [pc, #164]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dec:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dee:	4b29      	ldr	r3, [pc, #164]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006df4:	4b27      	ldr	r3, [pc, #156]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006dfa:	4b24      	ldr	r3, [pc, #144]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006dfc:	6a3a      	ldr	r2, [r7, #32]
 8006dfe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e00:	4b22      	ldr	r3, [pc, #136]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d014      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e0c:	f006 f8b6 	bl	800cf7c <HAL_GetTick>
 8006e10:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e12:	e00a      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e14:	f006 f8b2 	bl	800cf7c <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	1ad2      	subs	r2, r2, r3
 8006e1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d901      	bls.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x172>
          {
            return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e02a      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e2a:	4b18      	ldr	r3, [pc, #96]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0ee      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x15c>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e42:	d10d      	bne.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006e44:	4a11      	ldr	r2, [pc, #68]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e46:	4b11      	ldr	r3, [pc, #68]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e5a:	430b      	orrs	r3, r1
 8006e5c:	6093      	str	r3, [r2, #8]
 8006e5e:	e005      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006e60:	4b0a      	ldr	r3, [pc, #40]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e62:	4a0a      	ldr	r2, [pc, #40]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e64:	6892      	ldr	r2, [r2, #8]
 8006e66:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8006e6a:	609a      	str	r2, [r3, #8]
 8006e6c:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e6e:	4a07      	ldr	r2, [pc, #28]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e70:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	68d2      	ldr	r2, [r2, #12]
 8006e76:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	671a      	str	r2, [r3, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3728      	adds	r7, #40	; 0x28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	42470068 	.word	0x42470068
 8006e8c:	40023800 	.word	0x40023800
 8006e90:	40007000 	.word	0x40007000
 8006e94:	42470e40 	.word	0x42470e40

08006e98 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit: pointer to an RCC_PeriphCLKInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b089      	sub	sp, #36	; 0x24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;
  
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2203      	movs	r2, #3
 8006ea4:	601a      	str	r2, [r3, #0]
  
  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8006ea6:	4b1c      	ldr	r3, [pc, #112]	; (8006f18 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006ea8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006eac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006eb6:	61ba      	str	r2, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	fa92 f2a2 	rbit	r2, r2
 8006ebe:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	fab2 f282 	clz	r2, r2
 8006ec6:	fa23 f202 	lsr.w	r2, r3, r2
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8006ece:	4b12      	ldr	r3, [pc, #72]	; (8006f18 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ed8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006edc:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	fa93 f3a3 	rbit	r3, r3
 8006ee4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	fab3 f383 	clz	r3, r3
 8006eec:	40da      	lsrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006ef2:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006efa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006efc:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f00:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */  
}
 8006f0c:	3724      	adds	r7, #36	; 0x24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	40023800 	.word	0x40023800
  *            - Peripheral clocks  
  *            - LSI, LSE and RTC clocks 
  * @retval None
  */
__weak void HAL_RCC_DeInit(void)
{}
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08e      	sub	sp, #56	; 0x38
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 uint32_t tickstart = 0U;  
 8006f30:	2300      	movs	r3, #0
 8006f32:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d04e      	beq.n	8006fde <HAL_RCC_OscConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f40:	4ba4      	ldr	r3, [pc, #656]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f003 030c 	and.w	r3, r3, #12
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d00b      	beq.n	8006f64 <HAL_RCC_OscConfig+0x3c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f4c:	4ba1      	ldr	r3, [pc, #644]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d112      	bne.n	8006f7e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f58:	4b9e      	ldr	r3, [pc, #632]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00c      	beq.n	8006f7e <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f64:	4b9b      	ldr	r3, [pc, #620]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <HAL_RCC_OscConfig+0x54>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e1df      	b.n	800733c <HAL_RCC_OscConfig+0x414>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f7c:	e02f      	b.n	8006fde <HAL_RCC_OscConfig+0xb6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f7e:	4b96      	ldr	r3, [pc, #600]	; (80071d8 <HAL_RCC_OscConfig+0x2b0>)
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6852      	ldr	r2, [r2, #4]
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d013      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x90>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f90:	f005 fff4 	bl	800cf7c <HAL_GetTick>
 8006f94:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f96:	e008      	b.n	8006faa <HAL_RCC_OscConfig+0x82>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f98:	f005 fff0 	bl	800cf7c <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b64      	cmp	r3, #100	; 0x64
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x82>
          {
            return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e1c8      	b.n	800733c <HAL_RCC_OscConfig+0x414>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006faa:	4b8a      	ldr	r3, [pc, #552]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0f0      	beq.n	8006f98 <HAL_RCC_OscConfig+0x70>
 8006fb6:	e012      	b.n	8006fde <HAL_RCC_OscConfig+0xb6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb8:	f005 ffe0 	bl	800cf7c <HAL_GetTick>
 8006fbc:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCC_OscConfig+0xaa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fc0:	f005 ffdc 	bl	800cf7c <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b64      	cmp	r3, #100	; 0x64
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e1b4      	b.n	800733c <HAL_RCC_OscConfig+0x414>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fd2:	4b80      	ldr	r3, [pc, #512]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1f0      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x98>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d077      	beq.n	80070da <HAL_RCC_OscConfig+0x1b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fea:	4b7a      	ldr	r3, [pc, #488]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 030c 	and.w	r3, r3, #12
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00b      	beq.n	800700e <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ff6:	4b77      	ldr	r3, [pc, #476]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ffe:	2b08      	cmp	r3, #8
 8007000:	d126      	bne.n	8007050 <HAL_RCC_OscConfig+0x128>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007002:	4b74      	ldr	r3, [pc, #464]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d120      	bne.n	8007050 <HAL_RCC_OscConfig+0x128>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800700e:	4b71      	ldr	r3, [pc, #452]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d005      	beq.n	8007026 <HAL_RCC_OscConfig+0xfe>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d001      	beq.n	8007026 <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e18a      	b.n	800733c <HAL_RCC_OscConfig+0x414>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007026:	4b6b      	ldr	r3, [pc, #428]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8007028:	4a6a      	ldr	r2, [pc, #424]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	f022 01f8 	bic.w	r1, r2, #248	; 0xf8
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	6910      	ldr	r0, [r2, #16]
 8007034:	22f8      	movs	r2, #248	; 0xf8
 8007036:	633a      	str	r2, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800703a:	fa92 f2a2 	rbit	r2, r2
 800703e:	62fa      	str	r2, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007042:	fab2 f282 	clz	r2, r2
 8007046:	fa00 f202 	lsl.w	r2, r0, r2
 800704a:	430a      	orrs	r2, r1
 800704c:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800704e:	e044      	b.n	80070da <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d02a      	beq.n	80070ae <HAL_RCC_OscConfig+0x186>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007058:	4b60      	ldr	r3, [pc, #384]	; (80071dc <HAL_RCC_OscConfig+0x2b4>)
 800705a:	2201      	movs	r2, #1
 800705c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705e:	f005 ff8d 	bl	800cf7c <HAL_GetTick>
 8007062:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007064:	e008      	b.n	8007078 <HAL_RCC_OscConfig+0x150>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007066:	f005 ff89 	bl	800cf7c <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b02      	cmp	r3, #2
 8007072:	d901      	bls.n	8007078 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e161      	b.n	800733c <HAL_RCC_OscConfig+0x414>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007078:	4b56      	ldr	r3, [pc, #344]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0f0      	beq.n	8007066 <HAL_RCC_OscConfig+0x13e>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007084:	4b53      	ldr	r3, [pc, #332]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8007086:	4a53      	ldr	r2, [pc, #332]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	f022 01f8 	bic.w	r1, r2, #248	; 0xf8
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6910      	ldr	r0, [r2, #16]
 8007092:	22f8      	movs	r2, #248	; 0xf8
 8007094:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007098:	fa92 f2a2 	rbit	r2, r2
 800709c:	627a      	str	r2, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800709e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a0:	fab2 f282 	clz	r2, r2
 80070a4:	fa00 f202 	lsl.w	r2, r0, r2
 80070a8:	430a      	orrs	r2, r1
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	e015      	b.n	80070da <HAL_RCC_OscConfig+0x1b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070ae:	4b4b      	ldr	r3, [pc, #300]	; (80071dc <HAL_RCC_OscConfig+0x2b4>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b4:	f005 ff62 	bl	800cf7c <HAL_GetTick>
 80070b8:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0x1a6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070bc:	f005 ff5e 	bl	800cf7c <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e136      	b.n	800733c <HAL_RCC_OscConfig+0x414>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ce:	4b41      	ldr	r3, [pc, #260]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f0      	bne.n	80070bc <HAL_RCC_OscConfig+0x194>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d030      	beq.n	8007148 <HAL_RCC_OscConfig+0x220>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d016      	beq.n	800711c <HAL_RCC_OscConfig+0x1f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070ee:	4b3c      	ldr	r3, [pc, #240]	; (80071e0 <HAL_RCC_OscConfig+0x2b8>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f4:	f005 ff42 	bl	800cf7c <HAL_GetTick>
 80070f8:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070fa:	e008      	b.n	800710e <HAL_RCC_OscConfig+0x1e6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070fc:	f005 ff3e 	bl	800cf7c <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	2b02      	cmp	r3, #2
 8007108:	d901      	bls.n	800710e <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e116      	b.n	800733c <HAL_RCC_OscConfig+0x414>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800710e:	4b31      	ldr	r3, [pc, #196]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8007110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d0f0      	beq.n	80070fc <HAL_RCC_OscConfig+0x1d4>
 800711a:	e015      	b.n	8007148 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800711c:	4b30      	ldr	r3, [pc, #192]	; (80071e0 <HAL_RCC_OscConfig+0x2b8>)
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007122:	f005 ff2b 	bl	800cf7c <HAL_GetTick>
 8007126:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007128:	e008      	b.n	800713c <HAL_RCC_OscConfig+0x214>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800712a:	f005 ff27 	bl	800cf7c <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d901      	bls.n	800713c <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e0ff      	b.n	800733c <HAL_RCC_OscConfig+0x414>
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800713c:	4b25      	ldr	r3, [pc, #148]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 800713e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1f0      	bne.n	800712a <HAL_RCC_OscConfig+0x202>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b00      	cmp	r3, #0
 8007152:	d067      	beq.n	8007224 <HAL_RCC_OscConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007154:	2300      	movs	r3, #0
 8007156:	60bb      	str	r3, [r7, #8]
 8007158:	4b1e      	ldr	r3, [pc, #120]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 800715a:	4a1e      	ldr	r2, [pc, #120]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 800715c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800715e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007162:	641a      	str	r2, [r3, #64]	; 0x40
 8007164:	4b1b      	ldr	r3, [pc, #108]	; (80071d4 <HAL_RCC_OscConfig+0x2ac>)
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800716c:	60bb      	str	r3, [r7, #8]
 800716e:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007170:	4b1c      	ldr	r3, [pc, #112]	; (80071e4 <HAL_RCC_OscConfig+0x2bc>)
 8007172:	4a1c      	ldr	r2, [pc, #112]	; (80071e4 <HAL_RCC_OscConfig+0x2bc>)
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800717a:	601a      	str	r2, [r3, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800717c:	f005 fefe 	bl	800cf7c <HAL_GetTick>
 8007180:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007182:	e008      	b.n	8007196 <HAL_RCC_OscConfig+0x26e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007184:	f005 fefa 	bl	800cf7c <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b02      	cmp	r3, #2
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0x26e>
      {
        return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e0d2      	b.n	800733c <HAL_RCC_OscConfig+0x414>
    PWR->CR |= PWR_CR_DBP;
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007196:	4b13      	ldr	r3, [pc, #76]	; (80071e4 <HAL_RCC_OscConfig+0x2bc>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0f0      	beq.n	8007184 <HAL_RCC_OscConfig+0x25c>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071a2:	4b11      	ldr	r3, [pc, #68]	; (80071e8 <HAL_RCC_OscConfig+0x2c0>)
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6892      	ldr	r2, [r2, #8]
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d022      	beq.n	80071fa <HAL_RCC_OscConfig+0x2d2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b4:	f005 fee2 	bl	800cf7c <HAL_GetTick>
 80071b8:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ba:	e017      	b.n	80071ec <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071bc:	f005 fede 	bl	800cf7c <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c4:	1ad2      	subs	r2, r2, r3
 80071c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d90e      	bls.n	80071ec <HAL_RCC_OscConfig+0x2c4>
        {
          return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e0b4      	b.n	800733c <HAL_RCC_OscConfig+0x414>
 80071d2:	bf00      	nop
 80071d4:	40023800 	.word	0x40023800
 80071d8:	40023802 	.word	0x40023802
 80071dc:	42470000 	.word	0x42470000
 80071e0:	42470e80 	.word	0x42470e80
 80071e4:	40007000 	.word	0x40007000
 80071e8:	40023870 	.word	0x40023870
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ec:	4b55      	ldr	r3, [pc, #340]	; (8007344 <HAL_RCC_OscConfig+0x41c>)
 80071ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0e1      	beq.n	80071bc <HAL_RCC_OscConfig+0x294>
 80071f8:	e014      	b.n	8007224 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fa:	f005 febf 	bl	800cf7c <HAL_GetTick>
 80071fe:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007200:	e00a      	b.n	8007218 <HAL_RCC_OscConfig+0x2f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007202:	f005 febb 	bl	800cf7c <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720a:	1ad2      	subs	r2, r2, r3
 800720c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007210:	429a      	cmp	r2, r3
 8007212:	d901      	bls.n	8007218 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e091      	b.n	800733c <HAL_RCC_OscConfig+0x414>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007218:	4b4a      	ldr	r3, [pc, #296]	; (8007344 <HAL_RCC_OscConfig+0x41c>)
 800721a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1ee      	bne.n	8007202 <HAL_RCC_OscConfig+0x2da>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 8086 	beq.w	800733a <HAL_RCC_OscConfig+0x412>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800722e:	4b45      	ldr	r3, [pc, #276]	; (8007344 <HAL_RCC_OscConfig+0x41c>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 030c 	and.w	r3, r3, #12
 8007236:	2b08      	cmp	r3, #8
 8007238:	d07d      	beq.n	8007336 <HAL_RCC_OscConfig+0x40e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d162      	bne.n	8007308 <HAL_RCC_OscConfig+0x3e0>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007242:	4b41      	ldr	r3, [pc, #260]	; (8007348 <HAL_RCC_OscConfig+0x420>)
 8007244:	2200      	movs	r2, #0
 8007246:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007248:	f005 fe98 	bl	800cf7c <HAL_GetTick>
 800724c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007250:	f005 fe94 	bl	800cf7c <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e06c      	b.n	800733c <HAL_RCC_OscConfig+0x414>
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007262:	4b38      	ldr	r3, [pc, #224]	; (8007344 <HAL_RCC_OscConfig+0x41c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1f0      	bne.n	8007250 <HAL_RCC_OscConfig+0x328>
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800726e:	4b35      	ldr	r3, [pc, #212]	; (8007344 <HAL_RCC_OscConfig+0x41c>)
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	69d1      	ldr	r1, [r2, #28]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6a12      	ldr	r2, [r2, #32]
 8007278:	4311      	orrs	r1, r2
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800727e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8007282:	623a      	str	r2, [r7, #32]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007284:	6a3a      	ldr	r2, [r7, #32]
 8007286:	fa92 f2a2 	rbit	r2, r2
 800728a:	61fa      	str	r2, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	fab2 f282 	clz	r2, r2
 8007292:	fa00 f202 	lsl.w	r2, r0, r2
 8007296:	4311      	orrs	r1, r2
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800729c:	0852      	lsrs	r2, r2, #1
 800729e:	1e50      	subs	r0, r2, #1
 80072a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80072a4:	61ba      	str	r2, [r7, #24]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	fa92 f2a2 	rbit	r2, r2
 80072ac:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	fab2 f282 	clz	r2, r2
 80072b4:	fa00 f202 	lsl.w	r2, r0, r2
 80072b8:	4311      	orrs	r1, r2
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80072be:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80072c2:	613a      	str	r2, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	fa92 f2a2 	rbit	r2, r2
 80072ca:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	fab2 f282 	clz	r2, r2
 80072d2:	fa00 f202 	lsl.w	r2, r0, r2
 80072d6:	430a      	orrs	r2, r1
 80072d8:	605a      	str	r2, [r3, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072da:	4b1b      	ldr	r3, [pc, #108]	; (8007348 <HAL_RCC_OscConfig+0x420>)
 80072dc:	2201      	movs	r2, #1
 80072de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e0:	f005 fe4c 	bl	800cf7c <HAL_GetTick>
 80072e4:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072e8:	f005 fe48 	bl	800cf7c <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e020      	b.n	800733c <HAL_RCC_OscConfig+0x414>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072fa:	4b12      	ldr	r3, [pc, #72]	; (8007344 <HAL_RCC_OscConfig+0x41c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0f0      	beq.n	80072e8 <HAL_RCC_OscConfig+0x3c0>
 8007306:	e018      	b.n	800733a <HAL_RCC_OscConfig+0x412>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007308:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <HAL_RCC_OscConfig+0x420>)
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730e:	f005 fe35 	bl	800cf7c <HAL_GetTick>
 8007312:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007314:	e008      	b.n	8007328 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007316:	f005 fe31 	bl	800cf7c <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d901      	bls.n	8007328 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e009      	b.n	800733c <HAL_RCC_OscConfig+0x414>
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007328:	4b06      	ldr	r3, [pc, #24]	; (8007344 <HAL_RCC_OscConfig+0x41c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f0      	bne.n	8007316 <HAL_RCC_OscConfig+0x3ee>
 8007334:	e001      	b.n	800733a <HAL_RCC_OscConfig+0x412>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <HAL_RCC_OscConfig+0x414>
    }
  }
  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3738      	adds	r7, #56	; 0x38
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	40023800 	.word	0x40023800
 8007348:	42470060 	.word	0x42470060

0800734c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800735a:	4b82      	ldr	r3, [pc, #520]	; (8007564 <HAL_RCC_ClockConfig+0x218>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 020f 	and.w	r2, r3, #15
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d20c      	bcs.n	8007382 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007368:	4b7e      	ldr	r3, [pc, #504]	; (8007564 <HAL_RCC_ClockConfig+0x218>)
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	b2d2      	uxtb	r2, r2
 800736e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007370:	4b7c      	ldr	r3, [pc, #496]	; (8007564 <HAL_RCC_ClockConfig+0x218>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 020f 	and.w	r2, r3, #15
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	429a      	cmp	r2, r3
 800737c:	d001      	beq.n	8007382 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e0eb      	b.n	800755a <HAL_RCC_ClockConfig+0x20e>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d008      	beq.n	80073a0 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800738e:	4b76      	ldr	r3, [pc, #472]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 8007390:	4a75      	ldr	r2, [pc, #468]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 8007392:	6892      	ldr	r2, [r2, #8]
 8007394:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6892      	ldr	r2, [r2, #8]
 800739c:	430a      	orrs	r2, r1
 800739e:	609a      	str	r2, [r3, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 8088 	beq.w	80074be <HAL_RCC_ClockConfig+0x172>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d107      	bne.n	80073c6 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073b6:	4b6c      	ldr	r3, [pc, #432]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d11a      	bne.n	80073f8 <HAL_RCC_ClockConfig+0xac>
      {
        return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e0c9      	b.n	800755a <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d003      	beq.n	80073d6 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d108      	bne.n	80073e8 <HAL_RCC_ClockConfig+0x9c>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073d6:	4b64      	ldr	r3, [pc, #400]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e0b9      	b.n	800755a <HAL_RCC_ClockConfig+0x20e>
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073e6:	e007      	b.n	80073f8 <HAL_RCC_ClockConfig+0xac>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073e8:	4b5f      	ldr	r3, [pc, #380]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_RCC_ClockConfig+0xac>
      {
        return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e0b0      	b.n	800755a <HAL_RCC_ClockConfig+0x20e>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073f8:	4b5b      	ldr	r3, [pc, #364]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 80073fa:	4a5b      	ldr	r2, [pc, #364]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 80073fc:	6892      	ldr	r2, [r2, #8]
 80073fe:	f022 0103 	bic.w	r1, r2, #3
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	6852      	ldr	r2, [r2, #4]
 8007406:	430a      	orrs	r2, r1
 8007408:	609a      	str	r2, [r3, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800740a:	f005 fdb7 	bl	800cf7c <HAL_GetTick>
 800740e:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d112      	bne.n	800743e <HAL_RCC_ClockConfig+0xf2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007418:	e00a      	b.n	8007430 <HAL_RCC_ClockConfig+0xe4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800741a:	f005 fdaf 	bl	800cf7c <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	1ad2      	subs	r2, r2, r3
 8007424:	f241 3388 	movw	r3, #5000	; 0x1388
 8007428:	429a      	cmp	r2, r3
 800742a:	d901      	bls.n	8007430 <HAL_RCC_ClockConfig+0xe4>
        {
          return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e094      	b.n	800755a <HAL_RCC_ClockConfig+0x20e>
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007430:	4b4d      	ldr	r3, [pc, #308]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f003 030c 	and.w	r3, r3, #12
 8007438:	2b04      	cmp	r3, #4
 800743a:	d1ee      	bne.n	800741a <HAL_RCC_ClockConfig+0xce>
 800743c:	e03f      	b.n	80074be <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	2b02      	cmp	r3, #2
 8007444:	d112      	bne.n	800746c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007446:	e00a      	b.n	800745e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007448:	f005 fd98 	bl	800cf7c <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	1ad2      	subs	r2, r2, r3
 8007452:	f241 3388 	movw	r3, #5000	; 0x1388
 8007456:	429a      	cmp	r2, r3
 8007458:	d901      	bls.n	800745e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e07d      	b.n	800755a <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800745e:	4b42      	ldr	r3, [pc, #264]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f003 030c 	and.w	r3, r3, #12
 8007466:	2b08      	cmp	r3, #8
 8007468:	d1ee      	bne.n	8007448 <HAL_RCC_ClockConfig+0xfc>
 800746a:	e028      	b.n	80074be <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	2b03      	cmp	r3, #3
 8007472:	d112      	bne.n	800749a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8007474:	e00a      	b.n	800748c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007476:	f005 fd81 	bl	800cf7c <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	1ad2      	subs	r2, r2, r3
 8007480:	f241 3388 	movw	r3, #5000	; 0x1388
 8007484:	429a      	cmp	r2, r3
 8007486:	d901      	bls.n	800748c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e066      	b.n	800755a <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800748c:	4b36      	ldr	r3, [pc, #216]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f003 030c 	and.w	r3, r3, #12
 8007494:	2b0c      	cmp	r3, #12
 8007496:	d1ee      	bne.n	8007476 <HAL_RCC_ClockConfig+0x12a>
 8007498:	e011      	b.n	80074be <HAL_RCC_ClockConfig+0x172>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800749a:	e00a      	b.n	80074b2 <HAL_RCC_ClockConfig+0x166>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800749c:	f005 fd6e 	bl	800cf7c <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	1ad2      	subs	r2, r2, r3
 80074a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_ClockConfig+0x166>
        {
          return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e053      	b.n	800755a <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80074b2:	4b2d      	ldr	r3, [pc, #180]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f003 030c 	and.w	r3, r3, #12
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1ee      	bne.n	800749c <HAL_RCC_ClockConfig+0x150>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80074be:	4b29      	ldr	r3, [pc, #164]	; (8007564 <HAL_RCC_ClockConfig+0x218>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 020f 	and.w	r2, r3, #15
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d90c      	bls.n	80074e6 <HAL_RCC_ClockConfig+0x19a>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074cc:	4b25      	ldr	r3, [pc, #148]	; (8007564 <HAL_RCC_ClockConfig+0x218>)
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80074d4:	4b23      	ldr	r3, [pc, #140]	; (8007564 <HAL_RCC_ClockConfig+0x218>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 020f 	and.w	r2, r3, #15
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d001      	beq.n	80074e6 <HAL_RCC_ClockConfig+0x19a>
    {
      return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e039      	b.n	800755a <HAL_RCC_ClockConfig+0x20e>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0304 	and.w	r3, r3, #4
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d008      	beq.n	8007504 <HAL_RCC_ClockConfig+0x1b8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074f2:	4b1d      	ldr	r3, [pc, #116]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 80074f4:	4a1c      	ldr	r2, [pc, #112]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 80074f6:	6892      	ldr	r2, [r2, #8]
 80074f8:	f422 51e0 	bic.w	r1, r2, #7168	; 0x1c00
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	68d2      	ldr	r2, [r2, #12]
 8007500:	430a      	orrs	r2, r1
 8007502:	609a      	str	r2, [r3, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b00      	cmp	r3, #0
 800750e:	d009      	beq.n	8007524 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007510:	4b15      	ldr	r3, [pc, #84]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 8007512:	4a15      	ldr	r2, [pc, #84]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 8007514:	6892      	ldr	r2, [r2, #8]
 8007516:	f422 4160 	bic.w	r1, r2, #57344	; 0xe000
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6912      	ldr	r2, [r2, #16]
 800751e:	00d2      	lsls	r2, r2, #3
 8007520:	430a      	orrs	r2, r1
 8007522:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8007524:	f000 f8a4 	bl	8007670 <HAL_RCC_GetSysClockFreq>
 8007528:	4602      	mov	r2, r0
 800752a:	4b0f      	ldr	r3, [pc, #60]	; (8007568 <HAL_RCC_ClockConfig+0x21c>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8007532:	23f0      	movs	r3, #240	; 0xf0
 8007534:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	fa93 f3a3 	rbit	r3, r3
 800753c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	fab3 f383 	clz	r3, r3
 8007544:	fa21 f303 	lsr.w	r3, r1, r3
 8007548:	4908      	ldr	r1, [pc, #32]	; (800756c <HAL_RCC_ClockConfig+0x220>)
 800754a:	5ccb      	ldrb	r3, [r1, r3]
 800754c:	40da      	lsrs	r2, r3
 800754e:	4b08      	ldr	r3, [pc, #32]	; (8007570 <HAL_RCC_ClockConfig+0x224>)
 8007550:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007552:	2000      	movs	r0, #0
 8007554:	f005 fce8 	bl	800cf28 <HAL_InitTick>
  
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40023c00 	.word	0x40023c00
 8007568:	40023800 	.word	0x40023800
 800756c:	0800ecb4 	.word	0x0800ecb4
 8007570:	20000168 	.word	0x20000168

08007574 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08c      	sub	sp, #48	; 0x30
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d129      	bne.n	80075da <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    
    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8007586:	2300      	movs	r3, #0
 8007588:	61bb      	str	r3, [r7, #24]
 800758a:	4b2a      	ldr	r3, [pc, #168]	; (8007634 <HAL_RCC_MCOConfig+0xc0>)
 800758c:	4a29      	ldr	r2, [pc, #164]	; (8007634 <HAL_RCC_MCOConfig+0xc0>)
 800758e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007590:	f042 0201 	orr.w	r2, r2, #1
 8007594:	631a      	str	r2, [r3, #48]	; 0x30
 8007596:	4b27      	ldr	r3, [pc, #156]	; (8007634 <HAL_RCC_MCOConfig+0xc0>)
 8007598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	61bb      	str	r3, [r7, #24]
 80075a0:	69bb      	ldr	r3, [r7, #24]
    
    /* Configure the MCO1 pin in alternate function mode */    
    GPIO_InitStruct.Pin = MCO1_PIN;
 80075a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075a8:	2302      	movs	r3, #2
 80075aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075ac:	2303      	movs	r3, #3
 80075ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80075b4:	2300      	movs	r3, #0
 80075b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80075b8:	f107 031c 	add.w	r3, r7, #28
 80075bc:	481e      	ldr	r0, [pc, #120]	; (8007638 <HAL_RCC_MCOConfig+0xc4>)
 80075be:	4619      	mov	r1, r3
 80075c0:	f001 fef4 	bl	80093ac <HAL_GPIO_Init>
    
    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80075c4:	4b1b      	ldr	r3, [pc, #108]	; (8007634 <HAL_RCC_MCOConfig+0xc0>)
 80075c6:	4a1b      	ldr	r2, [pc, #108]	; (8007634 <HAL_RCC_MCOConfig+0xc0>)
 80075c8:	6892      	ldr	r2, [r2, #8]
 80075ca:	f022 61ec 	bic.w	r1, r2, #123731968	; 0x7600000
 80075ce:	68b8      	ldr	r0, [r7, #8]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	4302      	orrs	r2, r0
 80075d4:	430a      	orrs	r2, r1
 80075d6:	609a      	str	r2, [r3, #8]
 80075d8:	e029      	b.n	800762e <HAL_RCC_MCOConfig+0xba>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
    
    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	4b15      	ldr	r3, [pc, #84]	; (8007634 <HAL_RCC_MCOConfig+0xc0>)
 80075e0:	4a14      	ldr	r2, [pc, #80]	; (8007634 <HAL_RCC_MCOConfig+0xc0>)
 80075e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80075e4:	f042 0204 	orr.w	r2, r2, #4
 80075e8:	631a      	str	r2, [r3, #48]	; 0x30
 80075ea:	4b12      	ldr	r3, [pc, #72]	; (8007634 <HAL_RCC_MCOConfig+0xc0>)
 80075ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	697b      	ldr	r3, [r7, #20]
    
    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
 80075f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075fc:	2302      	movs	r3, #2
 80075fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007600:	2303      	movs	r3, #3
 8007602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007604:	2300      	movs	r3, #0
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007608:	2300      	movs	r3, #0
 800760a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800760c:	f107 031c 	add.w	r3, r7, #28
 8007610:	480a      	ldr	r0, [pc, #40]	; (800763c <HAL_RCC_MCOConfig+0xc8>)
 8007612:	4619      	mov	r1, r3
 8007614:	f001 feca 	bl	80093ac <HAL_GPIO_Init>
    
    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8007618:	4b06      	ldr	r3, [pc, #24]	; (8007634 <HAL_RCC_MCOConfig+0xc0>)
 800761a:	4a06      	ldr	r2, [pc, #24]	; (8007634 <HAL_RCC_MCOConfig+0xc0>)
 800761c:	6892      	ldr	r2, [r2, #8]
 800761e:	f022 4178 	bic.w	r1, r2, #4160749568	; 0xf8000000
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	00d0      	lsls	r0, r2, #3
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	4302      	orrs	r2, r0
 800762a:	430a      	orrs	r2, r1
 800762c:	609a      	str	r2, [r3, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800762e:	3730      	adds	r7, #48	; 0x30
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	40023800 	.word	0x40023800
 8007638:	40020000 	.word	0x40020000
 800763c:	40020800 	.word	0x40020800

08007640 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007644:	4b03      	ldr	r3, [pc, #12]	; (8007654 <HAL_RCC_EnableCSS+0x14>)
 8007646:	2201      	movs	r2, #1
 8007648:	601a      	str	r2, [r3, #0]
}
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	4247004c 	.word	0x4247004c

08007658 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8007658:	b480      	push	{r7}
 800765a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 800765c:	4b03      	ldr	r3, [pc, #12]	; (800766c <HAL_RCC_DisableCSS+0x14>)
 800765e:	2200      	movs	r2, #0
 8007660:	601a      	str	r2, [r3, #0]
}
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	4247004c 	.word	0x4247004c

08007670 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007670:	b480      	push	{r7}
 8007672:	b08b      	sub	sp, #44	; 0x2c
 8007674:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
 800767a:	2300      	movs	r3, #0
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
 800767e:	2300      	movs	r3, #0
 8007680:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007686:	4b36      	ldr	r3, [pc, #216]	; (8007760 <HAL_RCC_GetSysClockFreq+0xf0>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 030c 	and.w	r3, r3, #12
 800768e:	2b04      	cmp	r3, #4
 8007690:	d006      	beq.n	80076a0 <HAL_RCC_GetSysClockFreq+0x30>
 8007692:	2b08      	cmp	r3, #8
 8007694:	d007      	beq.n	80076a6 <HAL_RCC_GetSysClockFreq+0x36>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d158      	bne.n	800774c <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800769a:	4b32      	ldr	r3, [pc, #200]	; (8007764 <HAL_RCC_GetSysClockFreq+0xf4>)
 800769c:	623b      	str	r3, [r7, #32]
       break;
 800769e:	e058      	b.n	8007752 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076a0:	4b31      	ldr	r3, [pc, #196]	; (8007768 <HAL_RCC_GetSysClockFreq+0xf8>)
 80076a2:	623b      	str	r3, [r7, #32]
      break;
 80076a4:	e055      	b.n	8007752 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076a6:	4b2e      	ldr	r3, [pc, #184]	; (8007760 <HAL_RCC_GetSysClockFreq+0xf0>)
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076ae:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076b0:	4b2b      	ldr	r3, [pc, #172]	; (8007760 <HAL_RCC_GetSysClockFreq+0xf0>)
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d017      	beq.n	80076ec <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80076bc:	4a2a      	ldr	r2, [pc, #168]	; (8007768 <HAL_RCC_GetSysClockFreq+0xf8>)
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80076c4:	4b26      	ldr	r3, [pc, #152]	; (8007760 <HAL_RCC_GetSysClockFreq+0xf0>)
 80076c6:	6859      	ldr	r1, [r3, #4]
 80076c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076cc:	400b      	ands	r3, r1
 80076ce:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80076d2:	6179      	str	r1, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d4:	6979      	ldr	r1, [r7, #20]
 80076d6:	fa91 f1a1 	rbit	r1, r1
 80076da:	6139      	str	r1, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80076dc:	6939      	ldr	r1, [r7, #16]
 80076de:	fab1 f181 	clz	r1, r1
 80076e2:	40cb      	lsrs	r3, r1
 80076e4:	fb03 f302 	mul.w	r3, r3, r2
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
 80076ea:	e016      	b.n	800771a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80076ec:	4a1d      	ldr	r2, [pc, #116]	; (8007764 <HAL_RCC_GetSysClockFreq+0xf4>)
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80076f4:	4b1a      	ldr	r3, [pc, #104]	; (8007760 <HAL_RCC_GetSysClockFreq+0xf0>)
 80076f6:	6859      	ldr	r1, [r3, #4]
 80076f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076fc:	400b      	ands	r3, r1
 80076fe:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8007702:	60f9      	str	r1, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007704:	68f9      	ldr	r1, [r7, #12]
 8007706:	fa91 f1a1 	rbit	r1, r1
 800770a:	60b9      	str	r1, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800770c:	68b9      	ldr	r1, [r7, #8]
 800770e:	fab1 f181 	clz	r1, r1
 8007712:	40cb      	lsrs	r3, r1
 8007714:	fb03 f302 	mul.w	r3, r3, r2
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800771a:	4b11      	ldr	r3, [pc, #68]	; (8007760 <HAL_RCC_GetSysClockFreq+0xf0>)
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007722:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8007726:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	fa93 f3a3 	rbit	r3, r3
 800772e:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	fab3 f383 	clz	r3, r3
 8007736:	fa22 f303 	lsr.w	r3, r2, r3
 800773a:	3301      	adds	r3, #1
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8007740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	fbb2 f3f3 	udiv	r3, r2, r3
 8007748:	623b      	str	r3, [r7, #32]
      break;
 800774a:	e002      	b.n	8007752 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800774c:	4b05      	ldr	r3, [pc, #20]	; (8007764 <HAL_RCC_GetSysClockFreq+0xf4>)
 800774e:	623b      	str	r3, [r7, #32]
      break;
 8007750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007752:	6a3b      	ldr	r3, [r7, #32]
}
 8007754:	4618      	mov	r0, r3
 8007756:	372c      	adds	r7, #44	; 0x2c
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	40023800 	.word	0x40023800
 8007764:	00f42400 	.word	0x00f42400
 8007768:	017d7840 	.word	0x017d7840

0800776c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007770:	4b03      	ldr	r3, [pc, #12]	; (8007780 <HAL_RCC_GetHCLKFreq+0x14>)
 8007772:	681b      	ldr	r3, [r3, #0]
}
 8007774:	4618      	mov	r0, r3
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	20000168 	.word	0x20000168

08007784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800778a:	f7ff ffef 	bl	800776c <HAL_RCC_GetHCLKFreq>
 800778e:	4602      	mov	r2, r0
 8007790:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f403 51e0 	and.w	r1, r3, #7168	; 0x1c00
 8007798:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800779c:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	fa93 f3a3 	rbit	r3, r3
 80077a4:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	fab3 f383 	clz	r3, r3
 80077ac:	fa21 f303 	lsr.w	r3, r1, r3
 80077b0:	4904      	ldr	r1, [pc, #16]	; (80077c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80077b2:	5ccb      	ldrb	r3, [r1, r3]
 80077b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	40023800 	.word	0x40023800
 80077c4:	0800ecb4 	.word	0x0800ecb4

080077c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80077ce:	f7ff ffcd 	bl	800776c <HAL_RCC_GetHCLKFreq>
 80077d2:	4602      	mov	r2, r0
 80077d4:	4b0b      	ldr	r3, [pc, #44]	; (8007804 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f403 4160 	and.w	r1, r3, #57344	; 0xe000
 80077dc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80077e0:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	fa93 f3a3 	rbit	r3, r3
 80077e8:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	fab3 f383 	clz	r3, r3
 80077f0:	fa21 f303 	lsr.w	r3, r1, r3
 80077f4:	4904      	ldr	r1, [pc, #16]	; (8007808 <HAL_RCC_GetPCLK2Freq+0x40>)
 80077f6:	5ccb      	ldrb	r3, [r1, r3]
 80077f8:	fa22 f303 	lsr.w	r3, r2, r3
} 
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	40023800 	.word	0x40023800
 8007808:	0800ecb4 	.word	0x0800ecb4

0800780c <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800780c:	b480      	push	{r7}
 800780e:	b08b      	sub	sp, #44	; 0x2c
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	220f      	movs	r2, #15
 8007818:	601a      	str	r2, [r3, #0]
  
  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800781a:	4b57      	ldr	r3, [pc, #348]	; (8007978 <HAL_RCC_GetOscConfig+0x16c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_RCC_GetOscConfig+0x22>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2205      	movs	r2, #5
 800782a:	605a      	str	r2, [r3, #4]
 800782c:	e00c      	b.n	8007848 <HAL_RCC_GetOscConfig+0x3c>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 800782e:	4b52      	ldr	r3, [pc, #328]	; (8007978 <HAL_RCC_GetOscConfig+0x16c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_RCC_GetOscConfig+0x36>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	605a      	str	r2, [r3, #4]
 8007840:	e002      	b.n	8007848 <HAL_RCC_GetOscConfig+0x3c>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	605a      	str	r2, [r3, #4]
  }
  
  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8007848:	4b4b      	ldr	r3, [pc, #300]	; (8007978 <HAL_RCC_GetOscConfig+0x16c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <HAL_RCC_GetOscConfig+0x50>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	60da      	str	r2, [r3, #12]
 800785a:	e002      	b.n	8007862 <HAL_RCC_GetOscConfig+0x56>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	60da      	str	r2, [r3, #12]
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
 8007862:	4b45      	ldr	r3, [pc, #276]	; (8007978 <HAL_RCC_GetOscConfig+0x16c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 800786a:	23f8      	movs	r3, #248	; 0xf8
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	fa93 f3a3 	rbit	r3, r3
 8007874:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	fab3 f383 	clz	r3, r3
 800787c:	40da      	lsrs	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	611a      	str	r2, [r3, #16]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8007882:	4b3d      	ldr	r3, [pc, #244]	; (8007978 <HAL_RCC_GetOscConfig+0x16c>)
 8007884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007886:	f003 0304 	and.w	r3, r3, #4
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_RCC_GetOscConfig+0x8a>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2205      	movs	r2, #5
 8007892:	609a      	str	r2, [r3, #8]
 8007894:	e00c      	b.n	80078b0 <HAL_RCC_GetOscConfig+0xa4>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8007896:	4b38      	ldr	r3, [pc, #224]	; (8007978 <HAL_RCC_GetOscConfig+0x16c>)
 8007898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_RCC_GetOscConfig+0x9e>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	609a      	str	r2, [r3, #8]
 80078a8:	e002      	b.n	80078b0 <HAL_RCC_GetOscConfig+0xa4>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	609a      	str	r2, [r3, #8]
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 80078b0:	4b31      	ldr	r3, [pc, #196]	; (8007978 <HAL_RCC_GetOscConfig+0x16c>)
 80078b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <HAL_RCC_GetOscConfig+0xb8>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	615a      	str	r2, [r3, #20]
 80078c2:	e002      	b.n	80078ca <HAL_RCC_GetOscConfig+0xbe>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	615a      	str	r2, [r3, #20]
  }
  
  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 80078ca:	4b2b      	ldr	r3, [pc, #172]	; (8007978 <HAL_RCC_GetOscConfig+0x16c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <HAL_RCC_GetOscConfig+0xd2>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2202      	movs	r2, #2
 80078da:	619a      	str	r2, [r3, #24]
 80078dc:	e002      	b.n	80078e4 <HAL_RCC_GetOscConfig+0xd8>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80078e4:	4b24      	ldr	r3, [pc, #144]	; (8007978 <HAL_RCC_GetOscConfig+0x16c>)
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 80078f0:	4b21      	ldr	r3, [pc, #132]	; (8007978 <HAL_RCC_GetOscConfig+0x16c>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80078fc:	4b1e      	ldr	r3, [pc, #120]	; (8007978 <HAL_RCC_GetOscConfig+0x16c>)
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007904:	4013      	ands	r3, r2
 8007906:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800790a:	61fa      	str	r2, [r7, #28]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800790c:	69fa      	ldr	r2, [r7, #28]
 800790e:	fa92 f2a2 	rbit	r2, r2
 8007912:	61ba      	str	r2, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	fab2 f282 	clz	r2, r2
 800791a:	fa23 f202 	lsr.w	r2, r3, r2
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> POSITION_VAL(RCC_PLLCFGR_PLLP));
 8007922:	4b15      	ldr	r3, [pc, #84]	; (8007978 <HAL_RCC_GetOscConfig+0x16c>)
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800792a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800792e:	005a      	lsls	r2, r3, #1
 8007930:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8007934:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	fa93 f3a3 	rbit	r3, r3
 800793c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	fab3 f383 	clz	r3, r3
 8007944:	40da      	lsrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PLLCFGR_PLLQ));
 800794a:	4b0b      	ldr	r3, [pc, #44]	; (8007978 <HAL_RCC_GetOscConfig+0x16c>)
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007952:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8007956:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	fa93 f3a3 	rbit	r3, r3
 800795e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	fab3 f383 	clz	r3, r3
 8007966:	40da      	lsrs	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800796c:	372c      	adds	r7, #44	; 0x2c
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	40023800 	.word	0x40023800

0800797c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	220f      	movs	r2, #15
 800798a:	601a      	str	r2, [r3, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800798c:	4b11      	ldr	r3, [pc, #68]	; (80079d4 <HAL_RCC_GetClockConfig+0x58>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 0203 	and.w	r2, r3, #3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8007998:	4b0e      	ldr	r3, [pc, #56]	; (80079d4 <HAL_RCC_GetClockConfig+0x58>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80079a4:	4b0b      	ldr	r3, [pc, #44]	; (80079d4 <HAL_RCC_GetClockConfig+0x58>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80079b0:	4b08      	ldr	r3, [pc, #32]	; (80079d4 <HAL_RCC_GetClockConfig+0x58>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80079b8:	08da      	lsrs	r2, r3, #3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80079be:	4b06      	ldr	r3, [pc, #24]	; (80079d8 <HAL_RCC_GetClockConfig+0x5c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 020f 	and.w	r2, r3, #15
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	601a      	str	r2, [r3, #0]
}
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	40023800 	.word	0x40023800
 80079d8:	40023c00 	.word	0x40023c00

080079dc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80079e0:	4b05      	ldr	r3, [pc, #20]	; (80079f8 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80079ec:	f000 f808 	bl	8007a00 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80079f0:	4b02      	ldr	r3, [pc, #8]	; (80079fc <HAL_RCC_NMI_IRQHandler+0x20>)
 80079f2:	2280      	movs	r2, #128	; 0x80
 80079f4:	701a      	strb	r2, [r3, #0]
  }
}
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	40023800 	.word	0x40023800
 80079fc:	4002380e 	.word	0x4002380e

08007a00 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */ 
}
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a1a:	60bb      	str	r3, [r7, #8]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	fa93 f3a3 	rbit	r3, r3
 8007a22:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007a24:	687b      	ldr	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8007a26:	fab3 f383 	clz	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	4b0e      	ldr	r3, [pc, #56]	; (8007a68 <HAL_PWREx_EnableBkUpReg+0x5c>)
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	2201      	movs	r2, #1
 8007a34:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a36:	f005 faa1 	bl	800cf7c <HAL_GetTick>
 8007a3a:	60f8      	str	r0, [r7, #12]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8007a3c:	e009      	b.n	8007a52 <HAL_PWREx_EnableBkUpReg+0x46>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8007a3e:	f005 fa9d 	bl	800cf7c <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a4c:	d901      	bls.n	8007a52 <HAL_PWREx_EnableBkUpReg+0x46>
    {
      return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e006      	b.n	8007a60 <HAL_PWREx_EnableBkUpReg+0x54>

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8007a52:	4b06      	ldr	r3, [pc, #24]	; (8007a6c <HAL_PWREx_EnableBkUpReg+0x60>)
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f003 0308 	and.w	r3, r3, #8
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0ef      	beq.n	8007a3e <HAL_PWREx_EnableBkUpReg+0x32>
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    } 
  }
  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	10838020 	.word	0x10838020
 8007a6c:	40007000 	.word	0x40007000

08007a70 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a7e:	60bb      	str	r3, [r7, #8]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	fa93 f3a3 	rbit	r3, r3
 8007a86:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007a88:	687b      	ldr	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 8007a8a:	fab3 f383 	clz	r3, r3
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4b0e      	ldr	r3, [pc, #56]	; (8007acc <HAL_PWREx_DisableBkUpReg+0x5c>)
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a9a:	f005 fa6f 	bl	800cf7c <HAL_GetTick>
 8007a9e:	60f8      	str	r0, [r7, #12]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8007aa0:	e009      	b.n	8007ab6 <HAL_PWREx_DisableBkUpReg+0x46>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8007aa2:	f005 fa6b 	bl	800cf7c <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ab0:	d901      	bls.n	8007ab6 <HAL_PWREx_DisableBkUpReg+0x46>
    {
      return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e006      	b.n	8007ac4 <HAL_PWREx_DisableBkUpReg+0x54>

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8007ab6:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <HAL_PWREx_DisableBkUpReg+0x60>)
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f003 0308 	and.w	r3, r3, #8
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1ef      	bne.n	8007aa2 <HAL_PWREx_DisableBkUpReg+0x32>
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    } 
  }
  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	10838020 	.word	0x10838020
 8007ad0:	40007000 	.word	0x40007000

08007ad4 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ade:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	fa93 f3a3 	rbit	r3, r3
 8007ae6:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007ae8:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8007aea:	fab3 f383 	clz	r3, r3
 8007aee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007af2:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	2201      	movs	r2, #1
 8007afa:	601a      	str	r2, [r3, #0]
}
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop

08007b08 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b12:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	fa93 f3a3 	rbit	r3, r3
 8007b1a:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007b1c:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8007b1e:	fab3 f383 	clz	r3, r3
 8007b22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007b26:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]
}
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop

08007b3c <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
 8007b40:	4b04      	ldr	r3, [pc, #16]	; (8007b54 <HAL_PWREx_GetVoltageRange+0x18>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	40007000 	.word	0x40007000

08007b58 <HAL_PWREx_ControlVoltageScaling>:
  *        When moving from Range 2 to Range 1, the system frequency can be increased to
  *        a value up to 168 MHz after calling HAL_PWREx_ConfigVoltageScaling() API.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b64:	2300      	movs	r3, #0
 8007b66:	613b      	str	r3, [r7, #16]
 8007b68:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007b6a:	4a1a      	ldr	r2, [pc, #104]	; (8007bd4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007b6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007b6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007b72:	641a      	str	r2, [r3, #64]	; 0x40
 8007b74:	4b17      	ldr	r3, [pc, #92]	; (8007bd4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b7c:	613b      	str	r3, [r7, #16]
 8007b7e:	693b      	ldr	r3, [r7, #16]
  
  /* Set Range */
  __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 8007b80:	2300      	movs	r3, #0
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8007b86:	4a14      	ldr	r2, [pc, #80]	; (8007bd8 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8007b88:	6812      	ldr	r2, [r2, #0]
 8007b8a:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	4b10      	ldr	r3, [pc, #64]	; (8007bd8 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ba0:	f005 f9ec 	bl	800cf7c <HAL_GetTick>
 8007ba4:	6178      	str	r0, [r7, #20]
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 8007ba6:	e009      	b.n	8007bbc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 8007ba8:	f005 f9e8 	bl	800cf7c <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bb6:	d901      	bls.n	8007bbc <HAL_PWREx_ControlVoltageScaling+0x64>
    {
      return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e006      	b.n	8007bca <HAL_PWREx_ControlVoltageScaling+0x72>
  /* Set Range */
  __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 8007bbc:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0ef      	beq.n	8007ba8 <HAL_PWREx_ControlVoltageScaling+0x50>
    {
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	40007000 	.word	0x40007000

08007bdc <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 8007be0:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <HAL_PWR_DeInit+0x24>)
 8007be2:	4a07      	ldr	r2, [pc, #28]	; (8007c00 <HAL_PWR_DeInit+0x24>)
 8007be4:	6a12      	ldr	r2, [r2, #32]
 8007be6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007bea:	621a      	str	r2, [r3, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
 8007bec:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <HAL_PWR_DeInit+0x24>)
 8007bee:	4a04      	ldr	r2, [pc, #16]	; (8007c00 <HAL_PWR_DeInit+0x24>)
 8007bf0:	6a12      	ldr	r2, [r2, #32]
 8007bf2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007bf6:	621a      	str	r2, [r3, #32]
}
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	40023800 	.word	0x40023800

08007c04 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c0e:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	fa93 f3a3 	rbit	r3, r3
 8007c16:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007c18:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007c1a:	fab3 f383 	clz	r3, r3
 8007c1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007c22:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	2201      	movs	r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]
}
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop

08007c38 <HAL_PWR_DisableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c42:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	fa93 f3a3 	rbit	r3, r3
 8007c4a:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007c4c:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8007c4e:	fab3 f383 	clz	r3, r3
 8007c52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007c56:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	601a      	str	r2, [r3, #0]
}
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop

08007c6c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8007c74:	4b2a      	ldr	r3, [pc, #168]	; (8007d20 <HAL_PWR_ConfigPVD+0xb4>)
 8007c76:	4a2a      	ldr	r2, [pc, #168]	; (8007d20 <HAL_PWR_ConfigPVD+0xb4>)
 8007c78:	6812      	ldr	r2, [r2, #0]
 8007c7a:	f022 01e0 	bic.w	r1, r2, #224	; 0xe0
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8007c86:	4b27      	ldr	r3, [pc, #156]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007c88:	4a26      	ldr	r2, [pc, #152]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007c8a:	6852      	ldr	r2, [r2, #4]
 8007c8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c90:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8007c92:	4b24      	ldr	r3, [pc, #144]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007c94:	4a23      	ldr	r2, [pc, #140]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007c96:	6812      	ldr	r2, [r2, #0]
 8007c98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c9c:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8007c9e:	4b21      	ldr	r3, [pc, #132]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007ca0:	4a20      	ldr	r2, [pc, #128]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007ca2:	6892      	ldr	r2, [r2, #8]
 8007ca4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ca8:	609a      	str	r2, [r3, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8007caa:	4b1e      	ldr	r3, [pc, #120]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007cac:	4a1d      	ldr	r2, [pc, #116]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007cae:	68d2      	ldr	r2, [r2, #12]
 8007cb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007cb4:	60da      	str	r2, [r3, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d005      	beq.n	8007cce <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8007cc2:	4b18      	ldr	r3, [pc, #96]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007cc4:	4a17      	ldr	r2, [pc, #92]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007cc6:	6812      	ldr	r2, [r2, #0]
 8007cc8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007ccc:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d005      	beq.n	8007ce6 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8007cda:	4b12      	ldr	r3, [pc, #72]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007cdc:	4a11      	ldr	r2, [pc, #68]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007cde:	6852      	ldr	r2, [r2, #4]
 8007ce0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007ce4:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d005      	beq.n	8007cfe <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8007cf2:	4b0c      	ldr	r3, [pc, #48]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007cf4:	4a0b      	ldr	r2, [pc, #44]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007cf6:	6892      	ldr	r2, [r2, #8]
 8007cf8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007cfc:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8007d0a:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007d0c:	4a05      	ldr	r2, [pc, #20]	; (8007d24 <HAL_PWR_ConfigPVD+0xb8>)
 8007d0e:	68d2      	ldr	r2, [r2, #12]
 8007d10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d14:	60da      	str	r2, [r3, #12]
  }
}
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	40007000 	.word	0x40007000
 8007d24:	40013c00 	.word	0x40013c00

08007d28 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	2310      	movs	r3, #16
 8007d30:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	fa93 f3a3 	rbit	r3, r3
 8007d38:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007d3a:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 8007d3c:	fab3 f383 	clz	r3, r3
 8007d40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007d44:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]
}
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	2310      	movs	r3, #16
 8007d60:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	fa93 f3a3 	rbit	r3, r3
 8007d68:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8007d6a:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 8007d6c:	fab3 f383 	clz	r3, r3
 8007d70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007d74:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
}
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412Zx/STM32F412Rx/STM32F412Vx/STM32F412Cx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8007d90:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <HAL_PWR_EnableWakeUpPin+0x20>)
 8007d92:	4a05      	ldr	r2, [pc, #20]	; (8007da8 <HAL_PWR_EnableWakeUpPin+0x20>)
 8007d94:	6851      	ldr	r1, [r2, #4]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	605a      	str	r2, [r3, #4]
}
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40007000 	.word	0x40007000

08007dac <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412Zx/STM32F412Rx/STM32F412Vx/STM32F412Cx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412Zx/STM32F412Rx/STM32F412Vx/STM32F412Cx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8007db4:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <HAL_PWR_DisableWakeUpPin+0x20>)
 8007db6:	4a05      	ldr	r2, [pc, #20]	; (8007dcc <HAL_PWR_DisableWakeUpPin+0x20>)
 8007db8:	6851      	ldr	r1, [r2, #4]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	43d2      	mvns	r2, r2
 8007dbe:	400a      	ands	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
}
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	40007000 	.word	0x40007000

08007dd0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007ddc:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <HAL_PWR_EnterSLEEPMode+0x34>)
 8007dde:	4a09      	ldr	r2, [pc, #36]	; (8007e04 <HAL_PWR_EnterSLEEPMode+0x34>)
 8007de0:	6912      	ldr	r2, [r2, #16]
 8007de2:	f022 0204 	bic.w	r2, r2, #4
 8007de6:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d101      	bne.n	8007df2 <HAL_PWR_EnterSLEEPMode+0x22>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8007dee:	bf30      	wfi
 8007df0:	e002      	b.n	8007df8 <HAL_PWR_EnterSLEEPMode+0x28>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8007df2:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8007df4:	bf20      	wfe
 8007df6:	bf20      	wfe
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	e000ed00 	.word	0xe000ed00

08007e08 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8007e14:	4b10      	ldr	r3, [pc, #64]	; (8007e58 <HAL_PWR_EnterSTOPMode+0x50>)
 8007e16:	4a10      	ldr	r2, [pc, #64]	; (8007e58 <HAL_PWR_EnterSTOPMode+0x50>)
 8007e18:	6812      	ldr	r2, [r2, #0]
 8007e1a:	f022 0103 	bic.w	r1, r2, #3
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007e24:	4b0d      	ldr	r3, [pc, #52]	; (8007e5c <HAL_PWR_EnterSTOPMode+0x54>)
 8007e26:	4a0d      	ldr	r2, [pc, #52]	; (8007e5c <HAL_PWR_EnterSTOPMode+0x54>)
 8007e28:	6912      	ldr	r2, [r2, #16]
 8007e2a:	f042 0204 	orr.w	r2, r2, #4
 8007e2e:	611a      	str	r2, [r3, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d101      	bne.n	8007e3a <HAL_PWR_EnterSTOPMode+0x32>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8007e36:	bf30      	wfi
 8007e38:	e002      	b.n	8007e40 <HAL_PWR_EnterSTOPMode+0x38>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8007e3a:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8007e3c:	bf20      	wfe
 8007e3e:	bf20      	wfe
    __SEV();
    __WFE();
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8007e40:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <HAL_PWR_EnterSTOPMode+0x54>)
 8007e42:	4a06      	ldr	r2, [pc, #24]	; (8007e5c <HAL_PWR_EnterSTOPMode+0x54>)
 8007e44:	6912      	ldr	r2, [r2, #16]
 8007e46:	f022 0204 	bic.w	r2, r2, #4
 8007e4a:	611a      	str	r2, [r3, #16]
}
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	40007000 	.word	0x40007000
 8007e5c:	e000ed00 	.word	0xe000ed00

08007e60 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8007e64:	4b08      	ldr	r3, [pc, #32]	; (8007e88 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8007e66:	4a08      	ldr	r2, [pc, #32]	; (8007e88 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8007e68:	6812      	ldr	r2, [r2, #0]
 8007e6a:	f042 0202 	orr.w	r2, r2, #2
 8007e6e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007e70:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007e72:	4a06      	ldr	r2, [pc, #24]	; (8007e8c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007e74:	6912      	ldr	r2, [r2, #16]
 8007e76:	f042 0204 	orr.w	r2, r2, #4
 8007e7a:	611a      	str	r2, [r3, #16]
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8007e7c:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	40007000 	.word	0x40007000
 8007e8c:	e000ed00 	.word	0xe000ed00

08007e90 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8007e94:	4b06      	ldr	r3, [pc, #24]	; (8007eb0 <HAL_PWR_PVD_IRQHandler+0x20>)
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d005      	beq.n	8007eac <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8007ea0:	f000 f808 	bl	8007eb4 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8007ea4:	4b02      	ldr	r3, [pc, #8]	; (8007eb0 <HAL_PWR_PVD_IRQHandler+0x20>)
 8007ea6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007eaa:	615a      	str	r2, [r3, #20]
  }
}
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	40013c00 	.word	0x40013c00

08007eb4 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8007ec4:	4b04      	ldr	r3, [pc, #16]	; (8007ed8 <HAL_PWR_EnableSleepOnExit+0x18>)
 8007ec6:	4a04      	ldr	r2, [pc, #16]	; (8007ed8 <HAL_PWR_EnableSleepOnExit+0x18>)
 8007ec8:	6912      	ldr	r2, [r2, #16]
 8007eca:	f042 0202 	orr.w	r2, r2, #2
 8007ece:	611a      	str	r2, [r3, #16]
}
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	e000ed00 	.word	0xe000ed00

08007edc <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8007ee0:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <HAL_PWR_DisableSleepOnExit+0x18>)
 8007ee2:	4a04      	ldr	r2, [pc, #16]	; (8007ef4 <HAL_PWR_DisableSleepOnExit+0x18>)
 8007ee4:	6912      	ldr	r2, [r2, #16]
 8007ee6:	f022 0202 	bic.w	r2, r2, #2
 8007eea:	611a      	str	r2, [r3, #16]
}
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	e000ed00 	.word	0xe000ed00

08007ef8 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8007efc:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <HAL_PWR_EnableSEVOnPend+0x18>)
 8007efe:	4a04      	ldr	r2, [pc, #16]	; (8007f10 <HAL_PWR_EnableSEVOnPend+0x18>)
 8007f00:	6912      	ldr	r2, [r2, #16]
 8007f02:	f042 0210 	orr.w	r2, r2, #16
 8007f06:	611a      	str	r2, [r3, #16]
}
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	e000ed00 	.word	0xe000ed00

08007f14 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 8007f14:	b480      	push	{r7}
 8007f16:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8007f18:	4b04      	ldr	r3, [pc, #16]	; (8007f2c <HAL_PWR_DisableSEVOnPend+0x18>)
 8007f1a:	4a04      	ldr	r2, [pc, #16]	; (8007f2c <HAL_PWR_DisableSEVOnPend+0x18>)
 8007f1c:	6912      	ldr	r2, [r2, #16]
 8007f1e:	f022 0210 	bic.w	r2, r2, #16
 8007f22:	611a      	str	r2, [r3, #16]
}
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	e000ed00 	.word	0xe000ed00

08007f30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo: The number of Tx fifo
  * @param  size: Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	460a      	mov	r2, r1
 8007f3c:	70fa      	strb	r2, [r7, #3]
 8007f3e:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0U)
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d107      	bne.n	8007f66 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	883a      	ldrh	r2, [r7, #0]
 8007f5c:	0411      	lsls	r1, r2, #16
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	629a      	str	r2, [r3, #40]	; 0x28
 8007f64:	e028      	b.n	8007fb8 <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	0c1b      	lsrs	r3, r3, #16
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	4413      	add	r3, r2
 8007f72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]
 8007f78:	e00d      	b.n	8007f96 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	3340      	adds	r3, #64	; 0x40
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	0c1b      	lsrs	r3, r3, #16
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	60bb      	str	r3, [r7, #8]
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
    for (i = 0U; i < (fifo - 1U); i++)
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	3301      	adds	r3, #1
 8007f94:	73fb      	strb	r3, [r7, #15]
 8007f96:	7bfa      	ldrb	r2, [r7, #15]
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d3ec      	bcc.n	8007f7a <HAL_PCDEx_SetTxFiFo+0x4a>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6819      	ldr	r1, [r3, #0]
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	883a      	ldrh	r2, [r7, #0]
 8007faa:	0410      	lsls	r0, r2, #16
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	4302      	orrs	r2, r0
 8007fb0:	3340      	adds	r3, #64	; 0x40
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop

08007fc8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd: PCD handle
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	887a      	ldrh	r2, [r7, #2]
 8007fda:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop

08007fec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8007fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fee:	b08f      	sub	sp, #60	; 0x3c
 8007ff0:	af0a      	add	r7, sp, #40	; 0x28
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e0f7      	b.n	80081f2 <HAL_PCD_Init+0x206>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2203      	movs	r2, #3
 8008006:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7f8 f98c 	bl	8000328 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4618      	mov	r0, r3
 8008016:	f7fb f823 	bl	8003060 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 e000 	ldr.w	lr, [r3]
 8008020:	687e      	ldr	r6, [r7, #4]
 8008022:	466c      	mov	r4, sp
 8008024:	f106 0510 	add.w	r5, r6, #16
 8008028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800802a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800802c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800802e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008030:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008034:	e884 0003 	stmia.w	r4, {r0, r1}
 8008038:	1d33      	adds	r3, r6, #4
 800803a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800803c:	4670      	mov	r0, lr
 800803e:	f7fa ffb1 	bl	8002fa4 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4618      	mov	r0, r3
 8008048:	2100      	movs	r1, #0
 800804a:	f7fb f81b 	bl	8003084 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 800804e:	2300      	movs	r3, #0
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	e04c      	b.n	80080ee <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	4613      	mov	r3, r2
 800805a:	00db      	lsls	r3, r3, #3
 800805c:	1a9b      	subs	r3, r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	440b      	add	r3, r1
 8008062:	3338      	adds	r3, #56	; 0x38
 8008064:	2201      	movs	r2, #1
 8008066:	705a      	strb	r2, [r3, #1]
   hpcd->IN_ep[i].num = i;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	b2d9      	uxtb	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4613      	mov	r3, r2
 8008072:	00db      	lsls	r3, r3, #3
 8008074:	1a9b      	subs	r3, r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4403      	add	r3, r0
 800807a:	3338      	adds	r3, #56	; 0x38
 800807c:	460a      	mov	r2, r1
 800807e:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	b299      	uxth	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4613      	mov	r3, r2
 800808a:	00db      	lsls	r3, r3, #3
 800808c:	1a9b      	subs	r3, r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4403      	add	r3, r0
 8008092:	3338      	adds	r3, #56	; 0x38
 8008094:	460a      	mov	r2, r1
 8008096:	80da      	strh	r2, [r3, #6]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	4613      	mov	r3, r2
 800809e:	00db      	lsls	r3, r3, #3
 80080a0:	1a9b      	subs	r3, r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	440b      	add	r3, r1
 80080a6:	3338      	adds	r3, #56	; 0x38
 80080a8:	2200      	movs	r2, #0
 80080aa:	70da      	strb	r2, [r3, #3]
   hpcd->IN_ep[i].maxpacket = 0U;
 80080ac:	6879      	ldr	r1, [r7, #4]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4613      	mov	r3, r2
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	1a9b      	subs	r3, r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	440b      	add	r3, r1
 80080ba:	3340      	adds	r3, #64	; 0x40
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 80080c0:	6879      	ldr	r1, [r7, #4]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	4613      	mov	r3, r2
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	1a9b      	subs	r3, r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	440b      	add	r3, r1
 80080ce:	3340      	adds	r3, #64	; 0x40
 80080d0:	2200      	movs	r2, #0
 80080d2:	605a      	str	r2, [r3, #4]
   hpcd->IN_ep[i].xfer_len = 0U;
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	4613      	mov	r3, r2
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	1a9b      	subs	r3, r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	440b      	add	r3, r1
 80080e2:	3348      	adds	r3, #72	; 0x48
 80080e4:	2200      	movs	r2, #0
 80080e6:	605a      	str	r2, [r3, #4]
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3301      	adds	r3, #1
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2b0e      	cmp	r3, #14
 80080f2:	d9af      	bls.n	8008054 <HAL_PCD_Init+0x68>
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 80080f4:	2300      	movs	r3, #0
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	e05a      	b.n	80081b0 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4613      	mov	r3, r2
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	1a9b      	subs	r3, r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	440b      	add	r3, r1
 8008108:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800810c:	2200      	movs	r2, #0
 800810e:	715a      	strb	r2, [r3, #5]
   hpcd->OUT_ep[i].num = i;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	b2d9      	uxtb	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4613      	mov	r3, r2
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	1a9b      	subs	r3, r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4403      	add	r3, r0
 8008122:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8008126:	460a      	mov	r2, r1
 8008128:	711a      	strb	r2, [r3, #4]
   hpcd->IN_ep[i].tx_fifo_num = i;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	b299      	uxth	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4613      	mov	r3, r2
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	1a9b      	subs	r3, r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4403      	add	r3, r0
 800813c:	3338      	adds	r3, #56	; 0x38
 800813e:	460a      	mov	r2, r1
 8008140:	80da      	strh	r2, [r3, #6]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	4613      	mov	r3, r2
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	1a9b      	subs	r3, r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	440b      	add	r3, r1
 8008150:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8008154:	2200      	movs	r2, #0
 8008156:	71da      	strb	r2, [r3, #7]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	4613      	mov	r3, r2
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	1a9b      	subs	r3, r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	440b      	add	r3, r1
 8008166:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800816a:	2200      	movs	r2, #0
 800816c:	605a      	str	r2, [r3, #4]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	4613      	mov	r3, r2
 8008174:	00db      	lsls	r3, r3, #3
 8008176:	1a9b      	subs	r3, r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	440b      	add	r3, r1
 800817c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8008180:	2200      	movs	r2, #0
 8008182:	609a      	str	r2, [r3, #8]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8008184:	6879      	ldr	r1, [r7, #4]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4613      	mov	r3, r2
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	1a9b      	subs	r3, r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008196:	2200      	movs	r2, #0
 8008198:	609a      	str	r2, [r3, #8]
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3340      	adds	r3, #64	; 0x40
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	2200      	movs	r2, #0
 80081a8:	605a      	str	r2, [r3, #4]
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3301      	adds	r3, #1
 80081ae:	60fb      	str	r3, [r7, #12]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2b0e      	cmp	r3, #14
 80081b4:	d9a1      	bls.n	80080fa <HAL_PCD_Init+0x10e>
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 e000 	ldr.w	lr, [r3]
 80081bc:	687e      	ldr	r6, [r7, #4]
 80081be:	466c      	mov	r4, sp
 80081c0:	f106 0510 	add.w	r5, r6, #16
 80081c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80081d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80081d4:	1d33      	adds	r3, r6, #4
 80081d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081d8:	4670      	mov	r0, lr
 80081da:	f7fa ff7b 	bl	80030d4 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fc f868 	bl	80042c0 <USB_DevDisconnect>
 return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081fa:	bf00      	nop

080081fc <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral. 
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e00e      	b.n	800822c <HAL_PCD_DeInit+0x30>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2203      	movs	r2, #3
 8008212:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
  
  /* Stop Device */
  HAL_PCD_Stop(hpcd);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f842 	bl	80082a0 <HAL_PCD_Stop>
    
  /* DeInit the low level hardware */
  HAL_PCD_MspDeInit(hpcd);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7f8 f8c1 	bl	80003a4 <HAL_PCD_MspDeInit>
  
  hpcd->State = HAL_PCD_STATE_RESET; 
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
  
  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
__weak void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_MspInit could be implemented in the user file
   */
}
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
  * @brief  DeInitializes PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
__weak void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_MspDeInit could be implemented in the user file
   */
}
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop

0800825c <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 800826a:	2b01      	cmp	r3, #1
 800826c:	d101      	bne.n	8008272 <HAL_PCD_Start+0x16>
 800826e:	2302      	movs	r3, #2
 8008270:	e012      	b.n	8008298 <HAL_PCD_Start+0x3c>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  USB_DevConnect (hpcd->Instance);  
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f7fc f808 	bl	8004294 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4618      	mov	r0, r3
 800828a:	f7fa fed7 	bl	800303c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_PCD_Stop>:
  * @brief  Stop The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d101      	bne.n	80082b6 <HAL_PCD_Stop+0x16>
 80082b2:	2302      	movs	r3, #2
 80082b4:	e017      	b.n	80082e6 <HAL_PCD_Stop+0x46>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  __HAL_PCD_DISABLE(hpcd);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fa fecc 	bl	8003060 <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fb ff7f 	bl	80041d0 <USB_StopDevice>
  USB_DevDisconnect(hpcd->Instance);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fb fff2 	bl	80042c0 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop

080082f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08c      	sub	sp, #48	; 0x30
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008302:	2300      	movs	r3, #0
 8008304:	62bb      	str	r3, [r7, #40]	; 0x28
 8008306:	2300      	movs	r3, #0
 8008308:	61fb      	str	r3, [r7, #28]
 800830a:	2300      	movs	r3, #0
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	61bb      	str	r3, [r7, #24]
 8008312:	2300      	movs	r3, #0
 8008314:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000;
 8008316:	4b7b      	ldr	r3, [pc, #492]	; (8008504 <HAL_PCD_IRQHandler+0x214>)
 8008318:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4618      	mov	r0, r3
 8008320:	f7fc f880 	bl	8004424 <USB_GetMode>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	f040 8452 	bne.w	8008bd0 <HAL_PCD_IRQHandler+0x8e0>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4618      	mov	r0, r3
 8008332:	f7fb ffdb 	bl	80042ec <USB_ReadInterrupts>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <HAL_PCD_IRQHandler+0x50>
    {
      return;
 800833c:	f000 bc48 	b.w	8008bd0 <HAL_PCD_IRQHandler+0x8e0>
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4618      	mov	r0, r3
 8008346:	f7fb ffd1 	bl	80042ec <USB_ReadInterrupts>
 800834a:	4603      	mov	r3, r0
 800834c:	f003 0302 	and.w	r3, r3, #2
 8008350:	2b00      	cmp	r3, #0
 8008352:	d007      	beq.n	8008364 <HAL_PCD_IRQHandler+0x74>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	6812      	ldr	r2, [r2, #0]
 800835c:	6952      	ldr	r2, [r2, #20]
 800835e:	f002 0202 	and.w	r2, r2, #2
 8008362:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4618      	mov	r0, r3
 800836a:	f7fb ffbf 	bl	80042ec <USB_ReadInterrupts>
 800836e:	4603      	mov	r3, r0
 8008370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 80b0 	beq.w	80084da <HAL_PCD_IRQHandler+0x1ea>
    {
      epnum = 0U;
 800837a:	2300      	movs	r3, #0
 800837c:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4618      	mov	r0, r3
 8008384:	f7fb ffc8 	bl	8004318 <USB_ReadDevAllOutEpInterrupt>
 8008388:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 800838a:	e0a2      	b.n	80084d2 <HAL_PCD_IRQHandler+0x1e2>
      {
        if (ep_intr & 0x1U)
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 8097 	beq.w	80084c6 <HAL_PCD_IRQHandler+0x1d6>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	4610      	mov	r0, r2
 80083a2:	4619      	mov	r1, r3
 80083a4:	f7fb ffe8 	bl	8004378 <USB_ReadDevOutEPInterrupt>
 80083a8:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d06b      	beq.n	800848c <HAL_PCD_IRQHandler+0x19c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c0:	2201      	movs	r2, #1
 80083c2:	609a      	str	r2, [r3, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d13c      	bne.n	8008446 <HAL_PCD_IRQHandler+0x156>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d0:	4613      	mov	r3, r2
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	1a9b      	subs	r3, r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	440b      	add	r3, r1
 80083da:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	0159      	lsls	r1, r3, #5
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	440b      	add	r3, r1
 80083e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083f2:	1ad1      	subs	r1, r2, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f8:	4613      	mov	r3, r2
 80083fa:	00db      	lsls	r3, r3, #3
 80083fc:	1a9b      	subs	r3, r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4403      	add	r3, r0
 8008402:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8008406:	6059      	str	r1, [r3, #4]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8008408:	6879      	ldr	r1, [r7, #4]
 800840a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800840c:	4613      	mov	r3, r2
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	1a9b      	subs	r3, r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800841a:	6899      	ldr	r1, [r3, #8]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008420:	4613      	mov	r3, r2
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4403      	add	r3, r0
 800842a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	4419      	add	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008436:	4613      	mov	r3, r2
 8008438:	00db      	lsls	r3, r3, #3
 800843a:	1a9b      	subs	r3, r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4403      	add	r3, r0
 8008440:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8008444:	6099      	str	r1, [r3, #8]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	b2db      	uxtb	r3, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	4619      	mov	r1, r3
 800844e:	f7f7 ffd9 	bl	8000404 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d118      	bne.n	800848c <HAL_PCD_IRQHandler+0x19c>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	2b00      	cmp	r3, #0
 800845e:	d115      	bne.n	800848c <HAL_PCD_IRQHandler+0x19c>
 8008460:	6879      	ldr	r1, [r7, #4]
 8008462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008464:	4613      	mov	r3, r2
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	1a9b      	subs	r3, r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	440b      	add	r3, r1
 800846e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d109      	bne.n	800848c <HAL_PCD_IRQHandler+0x19c>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8008482:	4610      	mov	r0, r2
 8008484:	2101      	movs	r1, #1
 8008486:	461a      	mov	r2, r3
 8008488:	f7fc f80e 	bl	80044a8 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	f003 0308 	and.w	r3, r3, #8
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00a      	beq.n	80084ac <HAL_PCD_IRQHandler+0x1bc>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7f7 ffa2 	bl	80003e0 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a8:	2208      	movs	r2, #8
 80084aa:	609a      	str	r2, [r3, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	f003 0310 	and.w	r3, r3, #16
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d007      	beq.n	80084c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c2:	2210      	movs	r2, #16
 80084c4:	609a      	str	r2, [r3, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	3301      	adds	r3, #1
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	085b      	lsrs	r3, r3, #1
 80084d0:	62bb      	str	r3, [r7, #40]	; 0x28
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
      
      while ( ep_intr )
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f47f af59 	bne.w	800838c <HAL_PCD_IRQHandler+0x9c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fb ff04 	bl	80042ec <USB_ReadInterrupts>
 80084e4:	4603      	mov	r3, r0
 80084e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 80c1 	beq.w	8008672 <HAL_PCD_IRQHandler+0x382>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fb ff27 	bl	8004348 <USB_ReadDevAllInEpInterrupt>
 80084fa:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 8008500:	e0b3      	b.n	800866a <HAL_PCD_IRQHandler+0x37a>
 8008502:	bf00      	nop
 8008504:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 8008508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 80a5 	beq.w	800865e <HAL_PCD_IRQHandler+0x36e>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	b2db      	uxtb	r3, r3
 800851c:	4610      	mov	r0, r2
 800851e:	4619      	mov	r1, r3
 8008520:	f7fb ff46 	bl	80043b0 <USB_ReadDevInEPInterrupt>
 8008524:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d059      	beq.n	80085e4 <HAL_PCD_IRQHandler+0x2f4>
          {
            fifoemptymsk = 0x1U << epnum;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	2201      	movs	r2, #1
 8008534:	fa02 f303 	lsl.w	r3, r2, r3
 8008538:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008540:	6a3a      	ldr	r2, [r7, #32]
 8008542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008546:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	43d2      	mvns	r2, r2
 800854c:	400a      	ands	r2, r1
 800854e:	635a      	str	r2, [r3, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800855c:	2201      	movs	r2, #1
 800855e:	609a      	str	r2, [r3, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d11b      	bne.n	80085a0 <HAL_PCD_IRQHandler+0x2b0>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856c:	4613      	mov	r3, r2
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	1a9b      	subs	r3, r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	440b      	add	r3, r1
 8008576:	3340      	adds	r3, #64	; 0x40
 8008578:	6859      	ldr	r1, [r3, #4]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857e:	4613      	mov	r3, r2
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	1a9b      	subs	r3, r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4403      	add	r3, r0
 8008588:	3340      	adds	r3, #64	; 0x40
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4419      	add	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008592:	4613      	mov	r3, r2
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	1a9b      	subs	r3, r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4403      	add	r3, r0
 800859c:	3340      	adds	r3, #64	; 0x40
 800859e:	6059      	str	r1, [r3, #4]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	4619      	mov	r1, r3
 80085a8:	f7f7 ff48 	bl	800043c <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d117      	bne.n	80085e4 <HAL_PCD_IRQHandler+0x2f4>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d114      	bne.n	80085e4 <HAL_PCD_IRQHandler+0x2f4>
 80085ba:	6879      	ldr	r1, [r7, #4]
 80085bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085be:	4613      	mov	r3, r2
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	3348      	adds	r3, #72	; 0x48
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d109      	bne.n	80085e4 <HAL_PCD_IRQHandler+0x2f4>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f503 7361 	add.w	r3, r3, #900	; 0x384
 80085da:	4610      	mov	r0, r2
 80085dc:	2101      	movs	r1, #1
 80085de:	461a      	mov	r2, r3
 80085e0:	f7fb ff62 	bl	80044a8 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	f003 0308 	and.w	r3, r3, #8
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d007      	beq.n	80085fe <HAL_PCD_IRQHandler+0x30e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	015a      	lsls	r2, r3, #5
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085fa:	2208      	movs	r2, #8
 80085fc:	609a      	str	r2, [r3, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	f003 0310 	and.w	r3, r3, #16
 8008604:	2b00      	cmp	r3, #0
 8008606:	d007      	beq.n	8008618 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	4413      	add	r3, r2
 8008610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008614:	2210      	movs	r2, #16
 8008616:	609a      	str	r2, [r3, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800861e:	2b00      	cmp	r3, #0
 8008620:	d007      	beq.n	8008632 <HAL_PCD_IRQHandler+0x342>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862e:	2240      	movs	r2, #64	; 0x40
 8008630:	609a      	str	r2, [r3, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	f003 0302 	and.w	r3, r3, #2
 8008638:	2b00      	cmp	r3, #0
 800863a:	d007      	beq.n	800864c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008648:	2202      	movs	r2, #2
 800864a:	609a      	str	r2, [r3, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_PCD_IRQHandler+0x36e>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800865a:	f000 fe27 	bl	80092ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	3301      	adds	r3, #1
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
      
      epnum = 0U;
      
      while ( ep_intr )
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	2b00      	cmp	r3, #0
 800866e:	f47f af4b 	bne.w	8008508 <HAL_PCD_IRQHandler+0x218>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4618      	mov	r0, r3
 8008678:	f7fb fe38 	bl	80042ec <USB_ReadInterrupts>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	da14      	bge.n	80086ac <HAL_PCD_IRQHandler+0x3bc>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008688:	6a3a      	ldr	r2, [r7, #32]
 800868a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800868e:	6852      	ldr	r2, [r2, #4]
 8008690:	f022 0201 	bic.w	r2, r2, #1
 8008694:	605a      	str	r2, [r3, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7f7 ff48 	bl	800052c <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	6812      	ldr	r2, [r2, #0]
 80086a4:	6952      	ldr	r2, [r2, #20]
 80086a6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80086aa:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fb fe1b 	bl	80042ec <USB_ReadInterrupts>
 80086b6:	4603      	mov	r3, r0
 80086b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d012      	beq.n	80086e6 <HAL_PCD_IRQHandler+0x3f6>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <HAL_PCD_IRQHandler+0x3e6>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7f7 ff05 	bl	80004e0 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	6812      	ldr	r2, [r2, #0]
 80086de:	6952      	ldr	r2, [r2, #20]
 80086e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80086e4:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fb fdfe 	bl	80042ec <USB_ReadInterrupts>
 80086f0:	4603      	mov	r3, r0
 80086f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 8089 	beq.w	800880e <HAL_PCD_IRQHandler+0x51e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008702:	6a3a      	ldr	r2, [r7, #32]
 8008704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008708:	6852      	ldr	r2, [r2, #4]
 800870a:	f022 0201 	bic.w	r2, r2, #1
 800870e:	605a      	str	r2, [r3, #4]
      USB_FlushTxFifo(hpcd->Instance , 0U);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	2100      	movs	r1, #0
 8008718:	f7fa fdf8 	bl	800330c <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800871c:	2300      	movs	r3, #0
 800871e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008720:	e012      	b.n	8008748 <HAL_PCD_IRQHandler+0x458>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8008722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	4413      	add	r3, r2
 800872a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800872e:	22ff      	movs	r2, #255	; 0xff
 8008730:	609a      	str	r2, [r3, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8008732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	4413      	add	r3, r2
 800873a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800873e:	22ff      	movs	r2, #255	; 0xff
 8008740:	609a      	str	r2, [r3, #8]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008744:	3301      	adds	r3, #1
 8008746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874e:	429a      	cmp	r2, r3
 8008750:	d8e7      	bhi.n	8008722 <HAL_PCD_IRQHandler+0x432>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008758:	f04f 32ff 	mov.w	r2, #4294967295
 800875c:	619a      	str	r2, [r3, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008764:	6a3a      	ldr	r2, [r7, #32]
 8008766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800876a:	69d2      	ldr	r2, [r2, #28]
 800876c:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 8008770:	61da      	str	r2, [r3, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008776:	2b00      	cmp	r3, #0
 8008778:	d016      	beq.n	80087a8 <HAL_PCD_IRQHandler+0x4b8>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008780:	6a3a      	ldr	r2, [r7, #32]
 8008782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008786:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 800878a:	f042 020b 	orr.w	r2, r2, #11
 800878e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008798:	6a3a      	ldr	r2, [r7, #32]
 800879a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800879e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80087a0:	f042 020b 	orr.w	r2, r2, #11
 80087a4:	645a      	str	r2, [r3, #68]	; 0x44
 80087a6:	e013      	b.n	80087d0 <HAL_PCD_IRQHandler+0x4e0>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ae:	6a3a      	ldr	r2, [r7, #32]
 80087b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087b4:	6952      	ldr	r2, [r2, #20]
 80087b6:	f042 020b 	orr.w	r2, r2, #11
 80087ba:	615a      	str	r2, [r3, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c2:	6a3a      	ldr	r2, [r7, #32]
 80087c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087c8:	6912      	ldr	r2, [r2, #16]
 80087ca:	f042 020b 	orr.w	r2, r2, #11
 80087ce:	611a      	str	r2, [r3, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80087d0:	6a3b      	ldr	r3, [r7, #32]
 80087d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d6:	6a3a      	ldr	r2, [r7, #32]
 80087d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 80087e2:	601a      	str	r2, [r3, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6819      	ldr	r1, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f503 7361 	add.w	r3, r3, #900	; 0x384
 80087f4:	4608      	mov	r0, r1
 80087f6:	4611      	mov	r1, r2
 80087f8:	461a      	mov	r2, r3
 80087fa:	f7fb fe55 	bl	80044a8 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6812      	ldr	r2, [r2, #0]
 8008806:	6952      	ldr	r2, [r2, #20]
 8008808:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800880c:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4618      	mov	r0, r3
 8008814:	f7fb fd6a 	bl	80042ec <USB_ReadInterrupts>
 8008818:	4603      	mov	r3, r0
 800881a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 80da 	beq.w	80089d8 <HAL_PCD_IRQHandler+0x6e8>
    {
      USB_ActivateSetup(hpcd->Instance);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4618      	mov	r0, r3
 800882a:	f7fb fe09 	bl	8004440 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6812      	ldr	r2, [r2, #0]
 8008836:	68d2      	ldr	r2, [r2, #12]
 8008838:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800883c:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4618      	mov	r0, r3
 8008844:	f7fa fdc2 	bl	80033cc <USB_GetDevSpeed>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10f      	bne.n	800886e <HAL_PCD_IRQHandler+0x57e>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800885a:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	6812      	ldr	r2, [r2, #0]
 8008864:	68d2      	ldr	r2, [r2, #12]
 8008866:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800886a:	60da      	str	r2, [r3, #12]
 800886c:	e0a9      	b.n	80089c2 <HAL_PCD_IRQHandler+0x6d2>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2203      	movs	r2, #3
 8008872:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2240      	movs	r2, #64	; 0x40
 8008878:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 800887a:	f7fe ff77 	bl	800776c <HAL_RCC_GetHCLKFreq>
 800887e:	6138      	str	r0, [r7, #16]
		
        if((hclk >= 14200000)&&(hclk < 15000000))
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	4b7d      	ldr	r3, [pc, #500]	; (8008a78 <HAL_PCD_IRQHandler+0x788>)
 8008884:	429a      	cmp	r2, r3
 8008886:	d90c      	bls.n	80088a2 <HAL_PCD_IRQHandler+0x5b2>
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	4b7c      	ldr	r3, [pc, #496]	; (8008a7c <HAL_PCD_IRQHandler+0x78c>)
 800888c:	429a      	cmp	r2, r3
 800888e:	d808      	bhi.n	80088a2 <HAL_PCD_IRQHandler+0x5b2>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	6812      	ldr	r2, [r2, #0]
 8008898:	68d2      	ldr	r2, [r2, #12]
 800889a:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 800889e:	60da      	str	r2, [r3, #12]
 80088a0:	e08f      	b.n	80089c2 <HAL_PCD_IRQHandler+0x6d2>
        }
        
        else if((hclk >= 15000000)&&(hclk < 16000000))
 80088a2:	693a      	ldr	r2, [r7, #16]
 80088a4:	4b75      	ldr	r3, [pc, #468]	; (8008a7c <HAL_PCD_IRQHandler+0x78c>)
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d90c      	bls.n	80088c4 <HAL_PCD_IRQHandler+0x5d4>
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	4b74      	ldr	r3, [pc, #464]	; (8008a80 <HAL_PCD_IRQHandler+0x790>)
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d808      	bhi.n	80088c4 <HAL_PCD_IRQHandler+0x5d4>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	6812      	ldr	r2, [r2, #0]
 80088ba:	68d2      	ldr	r2, [r2, #12]
 80088bc:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80088c0:	60da      	str	r2, [r3, #12]
 80088c2:	e07e      	b.n	80089c2 <HAL_PCD_IRQHandler+0x6d2>
        }
        
        else if((hclk >= 16000000)&&(hclk < 17200000))
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	4b6e      	ldr	r3, [pc, #440]	; (8008a80 <HAL_PCD_IRQHandler+0x790>)
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d90c      	bls.n	80088e6 <HAL_PCD_IRQHandler+0x5f6>
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	4b6d      	ldr	r3, [pc, #436]	; (8008a84 <HAL_PCD_IRQHandler+0x794>)
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d808      	bhi.n	80088e6 <HAL_PCD_IRQHandler+0x5f6>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	6812      	ldr	r2, [r2, #0]
 80088dc:	68d2      	ldr	r2, [r2, #12]
 80088de:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80088e2:	60da      	str	r2, [r3, #12]
 80088e4:	e06d      	b.n	80089c2 <HAL_PCD_IRQHandler+0x6d2>
        }
        
        else if((hclk >= 17200000)&&(hclk < 18500000))
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	4b66      	ldr	r3, [pc, #408]	; (8008a84 <HAL_PCD_IRQHandler+0x794>)
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d90c      	bls.n	8008908 <HAL_PCD_IRQHandler+0x618>
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	4b65      	ldr	r3, [pc, #404]	; (8008a88 <HAL_PCD_IRQHandler+0x798>)
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d808      	bhi.n	8008908 <HAL_PCD_IRQHandler+0x618>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	6812      	ldr	r2, [r2, #0]
 80088fe:	68d2      	ldr	r2, [r2, #12]
 8008900:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8008904:	60da      	str	r2, [r3, #12]
 8008906:	e05c      	b.n	80089c2 <HAL_PCD_IRQHandler+0x6d2>
        }
        
        else if((hclk >= 18500000)&&(hclk < 20000000))
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	4b5f      	ldr	r3, [pc, #380]	; (8008a88 <HAL_PCD_IRQHandler+0x798>)
 800890c:	429a      	cmp	r2, r3
 800890e:	d90c      	bls.n	800892a <HAL_PCD_IRQHandler+0x63a>
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	4b5e      	ldr	r3, [pc, #376]	; (8008a8c <HAL_PCD_IRQHandler+0x79c>)
 8008914:	429a      	cmp	r2, r3
 8008916:	d808      	bhi.n	800892a <HAL_PCD_IRQHandler+0x63a>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	6812      	ldr	r2, [r2, #0]
 8008920:	68d2      	ldr	r2, [r2, #12]
 8008922:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8008926:	60da      	str	r2, [r3, #12]
 8008928:	e04b      	b.n	80089c2 <HAL_PCD_IRQHandler+0x6d2>
        }
        
        else if((hclk >= 20000000)&&(hclk < 21800000))
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	4b57      	ldr	r3, [pc, #348]	; (8008a8c <HAL_PCD_IRQHandler+0x79c>)
 800892e:	429a      	cmp	r2, r3
 8008930:	d90c      	bls.n	800894c <HAL_PCD_IRQHandler+0x65c>
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	4b56      	ldr	r3, [pc, #344]	; (8008a90 <HAL_PCD_IRQHandler+0x7a0>)
 8008936:	429a      	cmp	r2, r3
 8008938:	d808      	bhi.n	800894c <HAL_PCD_IRQHandler+0x65c>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	6812      	ldr	r2, [r2, #0]
 8008942:	68d2      	ldr	r2, [r2, #12]
 8008944:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8008948:	60da      	str	r2, [r3, #12]
 800894a:	e03a      	b.n	80089c2 <HAL_PCD_IRQHandler+0x6d2>
        }
        
        else if((hclk >= 21800000)&&(hclk < 24000000))
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	4b50      	ldr	r3, [pc, #320]	; (8008a90 <HAL_PCD_IRQHandler+0x7a0>)
 8008950:	429a      	cmp	r2, r3
 8008952:	d90c      	bls.n	800896e <HAL_PCD_IRQHandler+0x67e>
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	4b4f      	ldr	r3, [pc, #316]	; (8008a94 <HAL_PCD_IRQHandler+0x7a4>)
 8008958:	429a      	cmp	r2, r3
 800895a:	d808      	bhi.n	800896e <HAL_PCD_IRQHandler+0x67e>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	6812      	ldr	r2, [r2, #0]
 8008964:	68d2      	ldr	r2, [r2, #12]
 8008966:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800896a:	60da      	str	r2, [r3, #12]
 800896c:	e029      	b.n	80089c2 <HAL_PCD_IRQHandler+0x6d2>
        }
        
        else if((hclk >= 24000000)&&(hclk < 27700000))
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	4b48      	ldr	r3, [pc, #288]	; (8008a94 <HAL_PCD_IRQHandler+0x7a4>)
 8008972:	429a      	cmp	r2, r3
 8008974:	d90c      	bls.n	8008990 <HAL_PCD_IRQHandler+0x6a0>
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	4b47      	ldr	r3, [pc, #284]	; (8008a98 <HAL_PCD_IRQHandler+0x7a8>)
 800897a:	429a      	cmp	r2, r3
 800897c:	d808      	bhi.n	8008990 <HAL_PCD_IRQHandler+0x6a0>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	6812      	ldr	r2, [r2, #0]
 8008986:	68d2      	ldr	r2, [r2, #12]
 8008988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800898c:	60da      	str	r2, [r3, #12]
 800898e:	e018      	b.n	80089c2 <HAL_PCD_IRQHandler+0x6d2>
        }
        
        else if((hclk >= 27700000)&&(hclk < 32000000))
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	4b41      	ldr	r3, [pc, #260]	; (8008a98 <HAL_PCD_IRQHandler+0x7a8>)
 8008994:	429a      	cmp	r2, r3
 8008996:	d90c      	bls.n	80089b2 <HAL_PCD_IRQHandler+0x6c2>
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	4b40      	ldr	r3, [pc, #256]	; (8008a9c <HAL_PCD_IRQHandler+0x7ac>)
 800899c:	429a      	cmp	r2, r3
 800899e:	d808      	bhi.n	80089b2 <HAL_PCD_IRQHandler+0x6c2>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	6812      	ldr	r2, [r2, #0]
 80089a8:	68d2      	ldr	r2, [r2, #12]
 80089aa:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80089ae:	60da      	str	r2, [r3, #12]
 80089b0:	e007      	b.n	80089c2 <HAL_PCD_IRQHandler+0x6d2>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	6812      	ldr	r2, [r2, #0]
 80089ba:	68d2      	ldr	r2, [r2, #12]
 80089bc:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80089c0:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7f7 fd64 	bl	8000490 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6812      	ldr	r2, [r2, #0]
 80089d0:	6952      	ldr	r2, [r2, #20]
 80089d2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80089d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fb fc85 	bl	80042ec <USB_ReadInterrupts>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f003 0310 	and.w	r3, r3, #16
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d079      	beq.n	8008ae0 <HAL_PCD_IRQHandler+0x7f0>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	6812      	ldr	r2, [r2, #0]
 80089f4:	6992      	ldr	r2, [r2, #24]
 80089f6:	f022 0210 	bic.w	r2, r2, #16
 80089fa:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
 8008a00:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f003 020f 	and.w	r2, r3, #15
 8008a08:	4613      	mov	r3, r2
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	1a9b      	subs	r3, r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	4413      	add	r3, r2
 8008a18:	3304      	adds	r3, #4
 8008a1a:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f403 13f0 	and.w	r3, r3, #1966080	; 0x1e0000
 8008a22:	0c5b      	lsrs	r3, r3, #17
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d13b      	bne.n	8008aa0 <HAL_PCD_IRQHandler+0x7b0>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008a2e:	4013      	ands	r3, r2
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d04d      	beq.n	8008ad0 <HAL_PCD_IRQHandler+0x7e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	68da      	ldr	r2, [r3, #12]
 8008a38:	6979      	ldr	r1, [r7, #20]
 8008a3a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008a3e:	400b      	ands	r3, r1
 8008a40:	091b      	lsrs	r3, r3, #4
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	6a38      	ldr	r0, [r7, #32]
 8008a46:	4611      	mov	r1, r2
 8008a48:	461a      	mov	r2, r3
 8008a4a:	f7fb fac1 	bl	8003fd0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	6979      	ldr	r1, [r7, #20]
 8008a54:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008a58:	400b      	ands	r3, r1
 8008a5a:	091b      	lsrs	r3, r3, #4
 8008a5c:	441a      	add	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	699a      	ldr	r2, [r3, #24]
 8008a66:	6979      	ldr	r1, [r7, #20]
 8008a68:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008a6c:	400b      	ands	r3, r1
 8008a6e:	091b      	lsrs	r3, r3, #4
 8008a70:	441a      	add	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	619a      	str	r2, [r3, #24]
 8008a76:	e02b      	b.n	8008ad0 <HAL_PCD_IRQHandler+0x7e0>
 8008a78:	00d8acbf 	.word	0x00d8acbf
 8008a7c:	00e4e1bf 	.word	0x00e4e1bf
 8008a80:	00f423ff 	.word	0x00f423ff
 8008a84:	0106737f 	.word	0x0106737f
 8008a88:	011a499f 	.word	0x011a499f
 8008a8c:	01312cff 	.word	0x01312cff
 8008a90:	014ca43f 	.word	0x014ca43f
 8008a94:	016e35ff 	.word	0x016e35ff
 8008a98:	01a6ab1f 	.word	0x01a6ab1f
 8008a9c:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	f403 13f0 	and.w	r3, r3, #1966080	; 0x1e0000
 8008aa6:	0c5b      	lsrs	r3, r3, #17
 8008aa8:	2b06      	cmp	r3, #6
 8008aaa:	d111      	bne.n	8008ad0 <HAL_PCD_IRQHandler+0x7e0>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8008ab2:	6a38      	ldr	r0, [r7, #32]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	2208      	movs	r2, #8
 8008ab8:	f7fb fa8a 	bl	8003fd0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	699a      	ldr	r2, [r3, #24]
 8008ac0:	6979      	ldr	r1, [r7, #20]
 8008ac2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008ac6:	400b      	ands	r3, r1
 8008ac8:	091b      	lsrs	r3, r3, #4
 8008aca:	441a      	add	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	6812      	ldr	r2, [r2, #0]
 8008ad8:	6992      	ldr	r2, [r2, #24]
 8008ada:	f042 0210 	orr.w	r2, r2, #16
 8008ade:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fb fc01 	bl	80042ec <USB_ReadInterrupts>
 8008aea:	4603      	mov	r3, r0
 8008aec:	f003 0308 	and.w	r3, r3, #8
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00a      	beq.n	8008b0a <HAL_PCD_IRQHandler+0x81a>
    {
      HAL_PCD_SOFCallback(hpcd);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7f7 fcbd 	bl	8000474 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6812      	ldr	r2, [r2, #0]
 8008b02:	6952      	ldr	r2, [r2, #20]
 8008b04:	f002 0208 	and.w	r2, r2, #8
 8008b08:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fb fbec 	bl	80042ec <USB_ReadInterrupts>
 8008b14:	4603      	mov	r3, r0
 8008b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00d      	beq.n	8008b3a <HAL_PCD_IRQHandler+0x84a>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	4619      	mov	r1, r3
 8008b26:	f7f7 fd21 	bl	800056c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	6812      	ldr	r2, [r2, #0]
 8008b32:	6952      	ldr	r2, [r2, #20]
 8008b34:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008b38:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fb fbd4 	bl	80042ec <USB_ReadInterrupts>
 8008b44:	4603      	mov	r3, r0
 8008b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00d      	beq.n	8008b6a <HAL_PCD_IRQHandler+0x87a>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	4619      	mov	r1, r3
 8008b56:	f7f7 fcf7 	bl	8000548 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	6812      	ldr	r2, [r2, #0]
 8008b62:	6952      	ldr	r2, [r2, #20]
 8008b64:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008b68:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fb fbbc 	bl	80042ec <USB_ReadInterrupts>
 8008b74:	4603      	mov	r3, r0
 8008b76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00a      	beq.n	8008b94 <HAL_PCD_IRQHandler+0x8a4>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7f7 fd06 	bl	8000590 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6812      	ldr	r2, [r2, #0]
 8008b8c:	6952      	ldr	r2, [r2, #20]
 8008b8e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008b92:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fb fba7 	bl	80042ec <USB_ReadInterrupts>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d013      	beq.n	8008bd0 <HAL_PCD_IRQHandler+0x8e0>
    {
      temp = hpcd->Instance->GOTGINT;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f003 0304 	and.w	r3, r3, #4
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <HAL_PCD_IRQHandler+0x8d0>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7f7 fcf6 	bl	80005ac <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	6812      	ldr	r2, [r2, #0]
 8008bc8:	6851      	ldr	r1, [r2, #4]
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	605a      	str	r2, [r3, #4]
    }
  }
}
 8008bd0:	3730      	adds	r7, #48	; 0x30
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number  
  * @retval None
  */
 __weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */ 
}
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval None
  */
 __weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */ 
}
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
  * @brief  Setup stage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */ 
}
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
  * @brief  USB Start Of Frame callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */ 
}
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
  * @brief  USB Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */ 
}
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
  * @brief  Suspend event callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */ 
}
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
  * @brief  Resume event callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */ 
}
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval None
  */
 __weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	460b      	mov	r3, r1
 8008c76:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */ 
}
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number  
  * @retval None
  */
 __weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */ 
}
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
  * @brief  Connection event callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */ 
}
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
  * @brief  Disconnection event callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */ 
}
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop

08008cc4 <HAL_PCD_DevConnect>:
  * @brief  Connect the USB device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d101      	bne.n	8008cda <HAL_PCD_DevConnect+0x16>
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	e00d      	b.n	8008cf6 <HAL_PCD_DevConnect+0x32>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  USB_DevConnect(hpcd->Instance);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fb fad4 	bl	8004294 <USB_DevConnect>
  __HAL_UNLOCK(hpcd); 
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop

08008d00 <HAL_PCD_DevDisconnect>:
  * @brief  Disconnect the USB device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d101      	bne.n	8008d16 <HAL_PCD_DevDisconnect+0x16>
 8008d12:	2302      	movs	r3, #2
 8008d14:	e00d      	b.n	8008d32 <HAL_PCD_DevDisconnect+0x32>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  USB_DevDisconnect(hpcd->Instance);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fb facc 	bl	80042c0 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop

08008d3c <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d101      	bne.n	8008d56 <HAL_PCD_SetAddress+0x1a>
 8008d52:	2302      	movs	r3, #2
 8008d54:	e00f      	b.n	8008d76 <HAL_PCD_SetAddress+0x3a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  USB_SetDevAddress(hpcd->Instance, address);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	78fb      	ldrb	r3, [r7, #3]
 8008d64:	4610      	mov	r0, r2
 8008d66:	4619      	mov	r1, r3
 8008d68:	f7fb fa70 	bl	800424c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop

08008d80 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	70f9      	strb	r1, [r7, #3]
 8008d8a:	803a      	strh	r2, [r7, #0]
 8008d8c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8008d92:	78fb      	ldrb	r3, [r7, #3]
 8008d94:	b25b      	sxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	da0b      	bge.n	8008db2 <HAL_PCD_EP_Open+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8008d9a:	78fb      	ldrb	r3, [r7, #3]
 8008d9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008da0:	4613      	mov	r3, r2
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	1a9b      	subs	r3, r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	3338      	adds	r3, #56	; 0x38
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	4413      	add	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	e00c      	b.n	8008dcc <HAL_PCD_EP_Open+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8008db2:	78fb      	ldrb	r3, [r7, #3]
 8008db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008db8:	4613      	mov	r3, r2
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	1a9b      	subs	r3, r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	3304      	adds	r3, #4
 8008dca:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8008dcc:	78fb      	ldrb	r3, [r7, #3]
 8008dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8008dd8:	78fb      	ldrb	r3, [r7, #3]
 8008dda:	09db      	lsrs	r3, r3, #7
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	461a      	mov	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8008de4:	883a      	ldrh	r2, [r7, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	78ba      	ldrb	r2, [r7, #2]
 8008dee:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	785b      	ldrb	r3, [r3, #1]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d004      	beq.n	8008e02 <HAL_PCD_EP_Open+0x82>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8008e02:	78bb      	ldrb	r3, [r7, #2]
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d102      	bne.n	8008e0e <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d101      	bne.n	8008e1c <HAL_PCD_EP_Open+0x9c>
 8008e18:	2302      	movs	r3, #2
 8008e1a:	e00e      	b.n	8008e3a <HAL_PCD_EP_Open+0xba>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	68f9      	ldr	r1, [r7, #12]
 8008e2c:	f7fa fb04 	bl	8003438 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  return ret;
 8008e38:	7afb      	ldrb	r3, [r7, #11]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop

08008e44 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	b25b      	sxtb	r3, r3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	da0b      	bge.n	8008e70 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8008e58:	78fb      	ldrb	r3, [r7, #3]
 8008e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e5e:	4613      	mov	r3, r2
 8008e60:	00db      	lsls	r3, r3, #3
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	3338      	adds	r3, #56	; 0x38
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	e00c      	b.n	8008e8a <HAL_PCD_EP_Close+0x46>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e76:	4613      	mov	r3, r2
 8008e78:	00db      	lsls	r3, r3, #3
 8008e7a:	1a9b      	subs	r3, r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	4413      	add	r3, r2
 8008e86:	3304      	adds	r3, #4
 8008e88:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8008e8a:	78fb      	ldrb	r3, [r7, #3]
 8008e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8008e96:	78fb      	ldrb	r3, [r7, #3]
 8008e98:	09db      	lsrs	r3, r3, #7
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <HAL_PCD_EP_Close+0x6c>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e00e      	b.n	8008ece <HAL_PCD_EP_Close+0x8a>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	68f9      	ldr	r1, [r7, #12]
 8008ec0:	f7fa fc04 	bl	80036cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop

08008ed8 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	607a      	str	r2, [r7, #4]
 8008ee2:	603b      	str	r3, [r7, #0]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8008ee8:	7afb      	ldrb	r3, [r7, #11]
 8008eea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eee:	4613      	mov	r3, r2
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	1a9b      	subs	r3, r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	4413      	add	r3, r2
 8008efe:	3304      	adds	r3, #4
 8008f00:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	2200      	movs	r2, #0
 8008f12:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	2200      	movs	r2, #0
 8008f18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8008f1a:	7afb      	ldrb	r3, [r7, #11]
 8008f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d102      	bne.n	8008f34 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	611a      	str	r2, [r3, #16]
  }
  
  __HAL_LOCK(hpcd); 
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d101      	bne.n	8008f42 <HAL_PCD_EP_Receive+0x6a>
 8008f3e:	2302      	movs	r3, #2
 8008f40:	e022      	b.n	8008f88 <HAL_PCD_EP_Receive+0xb0>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  
  if ((ep_addr & 0x7FU) == 0U)
 8008f4a:	7afb      	ldrb	r3, [r7, #11]
 8008f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10a      	bne.n	8008f6a <HAL_PCD_EP_Receive+0x92>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	4610      	mov	r0, r2
 8008f60:	6979      	ldr	r1, [r7, #20]
 8008f62:	461a      	mov	r2, r3
 8008f64:	f7fa feb0 	bl	8003cc8 <USB_EP0StartXfer>
 8008f68:	e009      	b.n	8008f7e <HAL_PCD_EP_Receive+0xa6>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	4610      	mov	r0, r2
 8008f76:	6979      	ldr	r1, [r7, #20]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	f7fa fc73 	bl	8003864 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd); 
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  
  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0x7FU].xfer_count;
 8008f9c:	78fb      	ldrb	r3, [r7, #3]
 8008f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	00db      	lsls	r3, r3, #3
 8008fa8:	1a9b      	subs	r3, r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	440b      	add	r3, r1
 8008fae:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	b29b      	uxth	r3, r3
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop

08008fc4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	607a      	str	r2, [r7, #4]
 8008fce:	603b      	str	r3, [r7, #0]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8008fd4:	7afb      	ldrb	r3, [r7, #11]
 8008fd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fda:	4613      	mov	r3, r2
 8008fdc:	00db      	lsls	r3, r3, #3
 8008fde:	1a9b      	subs	r3, r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	3338      	adds	r3, #56	; 0x38
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2201      	movs	r2, #1
 8009000:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8009002:	7afb      	ldrb	r3, [r7, #11]
 8009004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009008:	b2da      	uxtb	r2, r3
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d102      	bne.n	800901c <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	611a      	str	r2, [r3, #16]
  }
  
  __HAL_LOCK(hpcd); 
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 8009022:	2b01      	cmp	r3, #1
 8009024:	d101      	bne.n	800902a <HAL_PCD_EP_Transmit+0x66>
 8009026:	2302      	movs	r3, #2
 8009028:	e022      	b.n	8009070 <HAL_PCD_EP_Transmit+0xac>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  
  if ((ep_addr & 0x7FU) == 0U)
 8009032:	7afb      	ldrb	r3, [r7, #11]
 8009034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10a      	bne.n	8009052 <HAL_PCD_EP_Transmit+0x8e>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	b2db      	uxtb	r3, r3
 8009046:	4610      	mov	r0, r2
 8009048:	6979      	ldr	r1, [r7, #20]
 800904a:	461a      	mov	r2, r3
 800904c:	f7fa fe3c 	bl	8003cc8 <USB_EP0StartXfer>
 8009050:	e009      	b.n	8009066 <HAL_PCD_EP_Transmit+0xa2>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	b2db      	uxtb	r3, r3
 800905c:	4610      	mov	r0, r2
 800905e:	6979      	ldr	r1, [r7, #20]
 8009060:	461a      	mov	r2, r3
 8009062:	f7fa fbff 	bl	8003864 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
     
  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	b25b      	sxtb	r3, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	da0b      	bge.n	80090a4 <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800908c:	78fb      	ldrb	r3, [r7, #3]
 800908e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009092:	4613      	mov	r3, r2
 8009094:	00db      	lsls	r3, r3, #3
 8009096:	1a9b      	subs	r3, r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	3338      	adds	r3, #56	; 0x38
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	4413      	add	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	e00a      	b.n	80090ba <HAL_PCD_EP_SetStall+0x42>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80090a4:	78fa      	ldrb	r2, [r7, #3]
 80090a6:	4613      	mov	r3, r2
 80090a8:	00db      	lsls	r3, r3, #3
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	4413      	add	r3, r2
 80090b6:	3304      	adds	r3, #4
 80090b8:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2201      	movs	r2, #1
 80090be:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80090c0:	78fb      	ldrb	r3, [r7, #3]
 80090c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80090cc:	78fb      	ldrb	r3, [r7, #3]
 80090ce:	09db      	lsrs	r3, r3, #7
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	461a      	mov	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d101      	bne.n	80090e6 <HAL_PCD_EP_SetStall+0x6e>
 80090e2:	2302      	movs	r3, #2
 80090e4:	e020      	b.n	8009128 <HAL_PCD_EP_SetStall+0xb0>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  USB_EPSetStall(hpcd->Instance , ep);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4618      	mov	r0, r3
 80090f4:	68f9      	ldr	r1, [r7, #12]
 80090f6:	f7fa ff93 	bl	8004020 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 80090fa:	78fb      	ldrb	r3, [r7, #3]
 80090fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10c      	bne.n	800911e <HAL_PCD_EP_SetStall+0xa6>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6819      	ldr	r1, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	b2da      	uxtb	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8009114:	4608      	mov	r0, r1
 8009116:	4611      	mov	r1, r2
 8009118:	461a      	mov	r2, r3
 800911a:	f7fb f9c5 	bl	80044a8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  
  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 800913c:	78fb      	ldrb	r3, [r7, #3]
 800913e:	b25b      	sxtb	r3, r3
 8009140:	2b00      	cmp	r3, #0
 8009142:	da0b      	bge.n	800915c <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800914a:	4613      	mov	r3, r2
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	1a9b      	subs	r3, r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	3338      	adds	r3, #56	; 0x38
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	4413      	add	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]
 800915a:	e00a      	b.n	8009172 <HAL_PCD_EP_ClrStall+0x42>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800915c:	78fa      	ldrb	r2, [r7, #3]
 800915e:	4613      	mov	r3, r2
 8009160:	00db      	lsls	r3, r3, #3
 8009162:	1a9b      	subs	r3, r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	4413      	add	r3, r2
 800916e:	3304      	adds	r3, #4
 8009170:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8009178:	78fb      	ldrb	r3, [r7, #3]
 800917a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800917e:	b2da      	uxtb	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8009184:	78fb      	ldrb	r3, [r7, #3]
 8009186:	09db      	lsrs	r3, r3, #7
 8009188:	b2db      	uxtb	r3, r3
 800918a:	461a      	mov	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 8009196:	2b01      	cmp	r3, #1
 8009198:	d101      	bne.n	800919e <HAL_PCD_EP_ClrStall+0x6e>
 800919a:	2302      	movs	r3, #2
 800919c:	e00e      	b.n	80091bc <HAL_PCD_EP_ClrStall+0x8c>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  USB_EPClearStall(hpcd->Instance , ep);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4618      	mov	r0, r3
 80091ac:	68f9      	ldr	r1, [r7, #12]
 80091ae:	f7fa ffa5 	bl	80040fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
    
  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <HAL_PCD_EP_Flush>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	460b      	mov	r3, r1
 80091ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d101      	bne.n	80091de <HAL_PCD_EP_Flush+0x1a>
 80091da:	2302      	movs	r3, #2
 80091dc:	e01b      	b.n	8009216 <HAL_PCD_EP_Flush+0x52>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
  
  if ((ep_addr & 0x80U) == 0x80U)
 80091e6:	78fb      	ldrb	r3, [r7, #3]
 80091e8:	b25b      	sxtb	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	da09      	bge.n	8009202 <HAL_PCD_EP_Flush+0x3e>
  {
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7FU);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	78fb      	ldrb	r3, [r7, #3]
 80091f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091f8:	4610      	mov	r0, r2
 80091fa:	4619      	mov	r1, r3
 80091fc:	f7fa f886 	bl	800330c <USB_FlushTxFifo>
 8009200:	e004      	b.n	800920c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    USB_FlushRxFifo(hpcd->Instance);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4618      	mov	r0, r3
 8009208:	f7fa f8a6 	bl	8003358 <USB_FlushRxFifo>
  }
  
  __HAL_UNLOCK(hpcd); 
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
    
  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop

08009220 <HAL_PCD_ActivateRemoteWakeup>:
  * @brief  Activate remote wakeup signalling.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	60fb      	str	r3, [r7, #12]
    
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d009      	beq.n	8009252 <HAL_PCD_ActivateRemoteWakeup+0x32>
  {
    /* Activate Remote wakeup signaling */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_RWUSIG;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800924a:	6852      	ldr	r2, [r2, #4]
 800924c:	f042 0201 	orr.w	r2, r2, #1
 8009250:	605a      	str	r2, [r3, #4]
  }
  return HAL_OK;  
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <HAL_PCD_DeActivateRemoteWakeup>:
  * @brief  De-activate remote wakeup signalling.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	60fb      	str	r3, [r7, #12]
  
  /* De-activate Remote wakeup signaling */
  USBx_DEVICE->DCTL &= ~(USB_OTG_DCTL_RWUSIG);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800927a:	6852      	ldr	r2, [r2, #4]
 800927c:	f022 0201 	bic.w	r2, r2, #1
 8009280:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <HAL_PCD_GetState>:
  * @brief  Return the PCD handle state.
  * @param  hpcd: PCD handle
  * @retval HAL state
  */
PCD_StateTypeDef HAL_PCD_GetState(PCD_HandleTypeDef *hpcd)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  return hpcd->State;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 3381 	ldrb.w	r3, [r3, #897]	; 0x381
 800929e:	b2db      	uxtb	r3, r3
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd: PCD handle
  * @param  epnum : endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08a      	sub	sp, #40	; 0x28
 80092b0:	af02      	add	r7, sp, #8
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	4613      	mov	r3, r2
 80092c8:	00db      	lsls	r3, r3, #3
 80092ca:	1a9b      	subs	r3, r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	3338      	adds	r3, #56	; 0x38
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	4413      	add	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	695a      	ldr	r2, [r3, #20]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 80092e2:	69fa      	ldr	r2, [r7, #28]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d902      	bls.n	80092f2 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	3303      	adds	r3, #3
 80092f6:	089b      	lsrs	r3, r3, #2
 80092f8:	61bb      	str	r3, [r7, #24]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80092fa:	e02a      	b.n	8009352 <PCD_WriteEmptyTxFifo+0xa6>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0U)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	695a      	ldr	r2, [r3, #20]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 8009308:	69fa      	ldr	r2, [r7, #28]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	429a      	cmp	r2, r3
 8009310:	d902      	bls.n	8009318 <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	3303      	adds	r3, #3
 800931c:	089b      	lsrs	r3, r3, #2
 800931e:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	68d9      	ldr	r1, [r3, #12]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	b2da      	uxtb	r2, r3
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	b29b      	uxth	r3, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	6900      	ldr	r0, [r0, #16]
 8009330:	b2c0      	uxtb	r0, r0
 8009332:	9000      	str	r0, [sp, #0]
 8009334:	6978      	ldr	r0, [r7, #20]
 8009336:	f7fa fe1b 	bl	8003f70 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	441a      	add	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	699a      	ldr	r2, [r3, #24]
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	441a      	add	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	619a      	str	r2, [r3, #24]
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	015a      	lsls	r2, r3, #5
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	4413      	add	r3, r2
 800935a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	b29a      	uxth	r2, r3
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	429a      	cmp	r2, r3
 8009366:	d909      	bls.n	800937c <PCD_WriteEmptyTxFifo+0xd0>
          ep->xfer_count < ep->xfer_len &&
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	699a      	ldr	r2, [r3, #24]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	695b      	ldr	r3, [r3, #20]
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8009370:	429a      	cmp	r2, r3
 8009372:	d203      	bcs.n	800937c <PCD_WriteEmptyTxFifo+0xd0>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0U)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	695b      	ldr	r3, [r3, #20]
  
  
  len32b = (len + 3U) / 4U;
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
          ep->xfer_count < ep->xfer_len &&
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1bf      	bne.n	80092fc <PCD_WriteEmptyTxFifo+0x50>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10f      	bne.n	80093a2 <PCD_WriteEmptyTxFifo+0xf6>
  {
    fifoemptymsk = 0x1U << epnum;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2201      	movs	r2, #1
 8009386:	fa02 f303 	lsl.w	r3, r2, r3
 800938a:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009398:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	43d2      	mvns	r2, r2
 800939e:	400a      	ands	r2, r1
 80093a0:	635a      	str	r2, [r3, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3720      	adds	r7, #32
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b089      	sub	sp, #36	; 0x24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80093be:	2300      	movs	r3, #0
 80093c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80093c2:	2300      	movs	r3, #0
 80093c4:	61fb      	str	r3, [r7, #28]
 80093c6:	e16b      	b.n	80096a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	2201      	movs	r2, #1
 80093cc:	fa02 f303 	lsl.w	r3, r2, r3
 80093d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	4013      	ands	r3, r2
 80093da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	f040 815a 	bne.w	800969a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d003      	beq.n	80093f6 <HAL_GPIO_Init+0x4a>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	2b12      	cmp	r3, #18
 80093f4:	d123      	bne.n	800943e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	08da      	lsrs	r2, r3, #3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	3208      	adds	r2, #8
 80093fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	220f      	movs	r2, #15
 800940e:	fa02 f303 	lsl.w	r3, r2, r3
 8009412:	43db      	mvns	r3, r3
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	4013      	ands	r3, r2
 8009418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	691a      	ldr	r2, [r3, #16]
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	f003 0307 	and.w	r3, r3, #7
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	fa02 f303 	lsl.w	r3, r2, r3
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	4313      	orrs	r3, r2
 800942e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	08da      	lsrs	r2, r3, #3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	3208      	adds	r2, #8
 8009438:	69b9      	ldr	r1, [r7, #24]
 800943a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	005b      	lsls	r3, r3, #1
 8009448:	2203      	movs	r2, #3
 800944a:	fa02 f303 	lsl.w	r3, r2, r3
 800944e:	43db      	mvns	r3, r3
 8009450:	69ba      	ldr	r2, [r7, #24]
 8009452:	4013      	ands	r3, r2
 8009454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f003 0203 	and.w	r2, r3, #3
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	005b      	lsls	r3, r3, #1
 8009462:	fa02 f303 	lsl.w	r3, r2, r3
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	4313      	orrs	r3, r2
 800946a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	69ba      	ldr	r2, [r7, #24]
 8009470:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d00b      	beq.n	8009492 <HAL_GPIO_Init+0xe6>
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	2b02      	cmp	r3, #2
 8009480:	d007      	beq.n	8009492 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009486:	2b11      	cmp	r3, #17
 8009488:	d003      	beq.n	8009492 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	2b12      	cmp	r3, #18
 8009490:	d130      	bne.n	80094f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	2203      	movs	r2, #3
 800949e:	fa02 f303 	lsl.w	r3, r2, r3
 80094a2:	43db      	mvns	r3, r3
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	4013      	ands	r3, r2
 80094a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	68da      	ldr	r2, [r3, #12]
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	005b      	lsls	r3, r3, #1
 80094b2:	fa02 f303 	lsl.w	r3, r2, r3
 80094b6:	69ba      	ldr	r2, [r7, #24]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	69ba      	ldr	r2, [r7, #24]
 80094c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	2201      	movs	r2, #1
 80094cc:	fa02 f303 	lsl.w	r3, r2, r3
 80094d0:	43db      	mvns	r3, r3
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	4013      	ands	r3, r2
 80094d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f003 0310 	and.w	r3, r3, #16
 80094e0:	091a      	lsrs	r2, r3, #4
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	fa02 f303 	lsl.w	r3, r2, r3
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	005b      	lsls	r3, r3, #1
 80094fe:	2203      	movs	r2, #3
 8009500:	fa02 f303 	lsl.w	r3, r2, r3
 8009504:	43db      	mvns	r3, r3
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	4013      	ands	r3, r2
 800950a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	689a      	ldr	r2, [r3, #8]
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	fa02 f303 	lsl.w	r3, r2, r3
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	4313      	orrs	r3, r2
 800951c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	69ba      	ldr	r2, [r7, #24]
 8009522:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 80b4 	beq.w	800969a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009532:	2300      	movs	r3, #0
 8009534:	60fb      	str	r3, [r7, #12]
 8009536:	4b5f      	ldr	r3, [pc, #380]	; (80096b4 <HAL_GPIO_Init+0x308>)
 8009538:	4a5e      	ldr	r2, [pc, #376]	; (80096b4 <HAL_GPIO_Init+0x308>)
 800953a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800953c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009540:	645a      	str	r2, [r3, #68]	; 0x44
 8009542:	4b5c      	ldr	r3, [pc, #368]	; (80096b4 <HAL_GPIO_Init+0x308>)
 8009544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800954e:	4b5a      	ldr	r3, [pc, #360]	; (80096b8 <HAL_GPIO_Init+0x30c>)
 8009550:	69fa      	ldr	r2, [r7, #28]
 8009552:	0892      	lsrs	r2, r2, #2
 8009554:	3202      	adds	r2, #2
 8009556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800955a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	f003 0303 	and.w	r3, r3, #3
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	220f      	movs	r2, #15
 8009566:	fa02 f303 	lsl.w	r3, r2, r3
 800956a:	43db      	mvns	r3, r3
 800956c:	69ba      	ldr	r2, [r7, #24]
 800956e:	4013      	ands	r3, r2
 8009570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	4b51      	ldr	r3, [pc, #324]	; (80096bc <HAL_GPIO_Init+0x310>)
 8009576:	429a      	cmp	r2, r3
 8009578:	d02b      	beq.n	80095d2 <HAL_GPIO_Init+0x226>
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	4b50      	ldr	r3, [pc, #320]	; (80096c0 <HAL_GPIO_Init+0x314>)
 800957e:	429a      	cmp	r2, r3
 8009580:	d025      	beq.n	80095ce <HAL_GPIO_Init+0x222>
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	4b4f      	ldr	r3, [pc, #316]	; (80096c4 <HAL_GPIO_Init+0x318>)
 8009586:	429a      	cmp	r2, r3
 8009588:	d01f      	beq.n	80095ca <HAL_GPIO_Init+0x21e>
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	4b4e      	ldr	r3, [pc, #312]	; (80096c8 <HAL_GPIO_Init+0x31c>)
 800958e:	429a      	cmp	r2, r3
 8009590:	d019      	beq.n	80095c6 <HAL_GPIO_Init+0x21a>
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	4b4d      	ldr	r3, [pc, #308]	; (80096cc <HAL_GPIO_Init+0x320>)
 8009596:	429a      	cmp	r2, r3
 8009598:	d013      	beq.n	80095c2 <HAL_GPIO_Init+0x216>
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	4b4c      	ldr	r3, [pc, #304]	; (80096d0 <HAL_GPIO_Init+0x324>)
 800959e:	429a      	cmp	r2, r3
 80095a0:	d00d      	beq.n	80095be <HAL_GPIO_Init+0x212>
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	4b4b      	ldr	r3, [pc, #300]	; (80096d4 <HAL_GPIO_Init+0x328>)
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d007      	beq.n	80095ba <HAL_GPIO_Init+0x20e>
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	4b4a      	ldr	r3, [pc, #296]	; (80096d8 <HAL_GPIO_Init+0x32c>)
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d101      	bne.n	80095b6 <HAL_GPIO_Init+0x20a>
 80095b2:	2307      	movs	r3, #7
 80095b4:	e00e      	b.n	80095d4 <HAL_GPIO_Init+0x228>
 80095b6:	2308      	movs	r3, #8
 80095b8:	e00c      	b.n	80095d4 <HAL_GPIO_Init+0x228>
 80095ba:	2306      	movs	r3, #6
 80095bc:	e00a      	b.n	80095d4 <HAL_GPIO_Init+0x228>
 80095be:	2305      	movs	r3, #5
 80095c0:	e008      	b.n	80095d4 <HAL_GPIO_Init+0x228>
 80095c2:	2304      	movs	r3, #4
 80095c4:	e006      	b.n	80095d4 <HAL_GPIO_Init+0x228>
 80095c6:	2303      	movs	r3, #3
 80095c8:	e004      	b.n	80095d4 <HAL_GPIO_Init+0x228>
 80095ca:	2302      	movs	r3, #2
 80095cc:	e002      	b.n	80095d4 <HAL_GPIO_Init+0x228>
 80095ce:	2301      	movs	r3, #1
 80095d0:	e000      	b.n	80095d4 <HAL_GPIO_Init+0x228>
 80095d2:	2300      	movs	r3, #0
 80095d4:	69fa      	ldr	r2, [r7, #28]
 80095d6:	f002 0203 	and.w	r2, r2, #3
 80095da:	0092      	lsls	r2, r2, #2
 80095dc:	4093      	lsls	r3, r2
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80095e4:	4b34      	ldr	r3, [pc, #208]	; (80096b8 <HAL_GPIO_Init+0x30c>)
 80095e6:	69fa      	ldr	r2, [r7, #28]
 80095e8:	0892      	lsrs	r2, r2, #2
 80095ea:	3202      	adds	r2, #2
 80095ec:	69b9      	ldr	r1, [r7, #24]
 80095ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80095f2:	4b3a      	ldr	r3, [pc, #232]	; (80096dc <HAL_GPIO_Init+0x330>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	43db      	mvns	r3, r3
 80095fc:	69ba      	ldr	r2, [r7, #24]
 80095fe:	4013      	ands	r3, r2
 8009600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800960a:	2b00      	cmp	r3, #0
 800960c:	d003      	beq.n	8009616 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800960e:	69ba      	ldr	r2, [r7, #24]
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	4313      	orrs	r3, r2
 8009614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009616:	4b31      	ldr	r3, [pc, #196]	; (80096dc <HAL_GPIO_Init+0x330>)
 8009618:	69ba      	ldr	r2, [r7, #24]
 800961a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800961c:	4b2f      	ldr	r3, [pc, #188]	; (80096dc <HAL_GPIO_Init+0x330>)
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	43db      	mvns	r3, r3
 8009626:	69ba      	ldr	r2, [r7, #24]
 8009628:	4013      	ands	r3, r2
 800962a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d003      	beq.n	8009640 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009638:	69ba      	ldr	r2, [r7, #24]
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	4313      	orrs	r3, r2
 800963e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009640:	4b26      	ldr	r3, [pc, #152]	; (80096dc <HAL_GPIO_Init+0x330>)
 8009642:	69ba      	ldr	r2, [r7, #24]
 8009644:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009646:	4b25      	ldr	r3, [pc, #148]	; (80096dc <HAL_GPIO_Init+0x330>)
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	43db      	mvns	r3, r3
 8009650:	69ba      	ldr	r2, [r7, #24]
 8009652:	4013      	ands	r3, r2
 8009654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800965e:	2b00      	cmp	r3, #0
 8009660:	d003      	beq.n	800966a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009662:	69ba      	ldr	r2, [r7, #24]
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	4313      	orrs	r3, r2
 8009668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800966a:	4b1c      	ldr	r3, [pc, #112]	; (80096dc <HAL_GPIO_Init+0x330>)
 800966c:	69ba      	ldr	r2, [r7, #24]
 800966e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8009670:	4b1a      	ldr	r3, [pc, #104]	; (80096dc <HAL_GPIO_Init+0x330>)
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	43db      	mvns	r3, r3
 800967a:	69ba      	ldr	r2, [r7, #24]
 800967c:	4013      	ands	r3, r2
 800967e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d003      	beq.n	8009694 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	4313      	orrs	r3, r2
 8009692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009694:	4b11      	ldr	r3, [pc, #68]	; (80096dc <HAL_GPIO_Init+0x330>)
 8009696:	69ba      	ldr	r2, [r7, #24]
 8009698:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	3301      	adds	r3, #1
 800969e:	61fb      	str	r3, [r7, #28]
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	2b0f      	cmp	r3, #15
 80096a4:	f67f ae90 	bls.w	80093c8 <HAL_GPIO_Init+0x1c>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80096a8:	3724      	adds	r7, #36	; 0x24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	40023800 	.word	0x40023800
 80096b8:	40013800 	.word	0x40013800
 80096bc:	40020000 	.word	0x40020000
 80096c0:	40020400 	.word	0x40020400
 80096c4:	40020800 	.word	0x40020800
 80096c8:	40020c00 	.word	0x40020c00
 80096cc:	40021000 	.word	0x40021000
 80096d0:	40021400 	.word	0x40021400
 80096d4:	40021800 	.word	0x40021800
 80096d8:	40021c00 	.word	0x40021c00
 80096dc:	40013c00 	.word	0x40013c00

080096e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80096ee:	2300      	movs	r3, #0
 80096f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80096f6:	2300      	movs	r3, #0
 80096f8:	617b      	str	r3, [r7, #20]
 80096fa:	e0ce      	b.n	800989a <HAL_GPIO_DeInit+0x1ba>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2201      	movs	r2, #1
 8009700:	fa02 f303 	lsl.w	r3, r2, r3
 8009704:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	4013      	ands	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	429a      	cmp	r2, r3
 8009714:	f040 80be 	bne.w	8009894 <HAL_GPIO_DeInit+0x1b4>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	2103      	movs	r1, #3
 8009722:	fa01 f303 	lsl.w	r3, r1, r3
 8009726:	43db      	mvns	r3, r3
 8009728:	401a      	ands	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	08da      	lsrs	r2, r3, #3
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	08d9      	lsrs	r1, r3, #3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	3108      	adds	r1, #8
 800973a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	f003 0307 	and.w	r3, r3, #7
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	200f      	movs	r0, #15
 8009748:	fa00 f303 	lsl.w	r3, r0, r3
 800974c:	43db      	mvns	r3, r3
 800974e:	4019      	ands	r1, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	3208      	adds	r2, #8
 8009754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	005b      	lsls	r3, r3, #1
 8009760:	2103      	movs	r1, #3
 8009762:	fa01 f303 	lsl.w	r3, r1, r3
 8009766:	43db      	mvns	r3, r3
 8009768:	401a      	ands	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2101      	movs	r1, #1
 8009776:	fa01 f303 	lsl.w	r3, r1, r3
 800977a:	43db      	mvns	r3, r3
 800977c:	401a      	ands	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68da      	ldr	r2, [r3, #12]
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	005b      	lsls	r3, r3, #1
 800978a:	2103      	movs	r1, #3
 800978c:	fa01 f303 	lsl.w	r3, r1, r3
 8009790:	43db      	mvns	r3, r3
 8009792:	401a      	ands	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009798:	4b44      	ldr	r3, [pc, #272]	; (80098ac <HAL_GPIO_DeInit+0x1cc>)
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	0892      	lsrs	r2, r2, #2
 800979e:	3202      	adds	r2, #2
 80097a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f003 0303 	and.w	r3, r3, #3
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	220f      	movs	r2, #15
 80097b0:	fa02 f303 	lsl.w	r3, r2, r3
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	4013      	ands	r3, r2
 80097b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	4b3c      	ldr	r3, [pc, #240]	; (80098b0 <HAL_GPIO_DeInit+0x1d0>)
 80097be:	429a      	cmp	r2, r3
 80097c0:	d02b      	beq.n	800981a <HAL_GPIO_DeInit+0x13a>
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	4b3b      	ldr	r3, [pc, #236]	; (80098b4 <HAL_GPIO_DeInit+0x1d4>)
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d025      	beq.n	8009816 <HAL_GPIO_DeInit+0x136>
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	4b3a      	ldr	r3, [pc, #232]	; (80098b8 <HAL_GPIO_DeInit+0x1d8>)
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d01f      	beq.n	8009812 <HAL_GPIO_DeInit+0x132>
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	4b39      	ldr	r3, [pc, #228]	; (80098bc <HAL_GPIO_DeInit+0x1dc>)
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d019      	beq.n	800980e <HAL_GPIO_DeInit+0x12e>
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	4b38      	ldr	r3, [pc, #224]	; (80098c0 <HAL_GPIO_DeInit+0x1e0>)
 80097de:	429a      	cmp	r2, r3
 80097e0:	d013      	beq.n	800980a <HAL_GPIO_DeInit+0x12a>
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	4b37      	ldr	r3, [pc, #220]	; (80098c4 <HAL_GPIO_DeInit+0x1e4>)
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d00d      	beq.n	8009806 <HAL_GPIO_DeInit+0x126>
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	4b36      	ldr	r3, [pc, #216]	; (80098c8 <HAL_GPIO_DeInit+0x1e8>)
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d007      	beq.n	8009802 <HAL_GPIO_DeInit+0x122>
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	4b35      	ldr	r3, [pc, #212]	; (80098cc <HAL_GPIO_DeInit+0x1ec>)
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d101      	bne.n	80097fe <HAL_GPIO_DeInit+0x11e>
 80097fa:	2307      	movs	r3, #7
 80097fc:	e00e      	b.n	800981c <HAL_GPIO_DeInit+0x13c>
 80097fe:	2308      	movs	r3, #8
 8009800:	e00c      	b.n	800981c <HAL_GPIO_DeInit+0x13c>
 8009802:	2306      	movs	r3, #6
 8009804:	e00a      	b.n	800981c <HAL_GPIO_DeInit+0x13c>
 8009806:	2305      	movs	r3, #5
 8009808:	e008      	b.n	800981c <HAL_GPIO_DeInit+0x13c>
 800980a:	2304      	movs	r3, #4
 800980c:	e006      	b.n	800981c <HAL_GPIO_DeInit+0x13c>
 800980e:	2303      	movs	r3, #3
 8009810:	e004      	b.n	800981c <HAL_GPIO_DeInit+0x13c>
 8009812:	2302      	movs	r3, #2
 8009814:	e002      	b.n	800981c <HAL_GPIO_DeInit+0x13c>
 8009816:	2301      	movs	r3, #1
 8009818:	e000      	b.n	800981c <HAL_GPIO_DeInit+0x13c>
 800981a:	2300      	movs	r3, #0
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	f002 0203 	and.w	r2, r2, #3
 8009822:	0092      	lsls	r2, r2, #2
 8009824:	fa03 f202 	lsl.w	r2, r3, r2
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	429a      	cmp	r2, r3
 800982c:	d132      	bne.n	8009894 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f003 0303 	and.w	r3, r3, #3
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	220f      	movs	r2, #15
 8009838:	fa02 f303 	lsl.w	r3, r2, r3
 800983c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800983e:	4b1b      	ldr	r3, [pc, #108]	; (80098ac <HAL_GPIO_DeInit+0x1cc>)
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	0892      	lsrs	r2, r2, #2
 8009844:	4919      	ldr	r1, [pc, #100]	; (80098ac <HAL_GPIO_DeInit+0x1cc>)
 8009846:	6978      	ldr	r0, [r7, #20]
 8009848:	0880      	lsrs	r0, r0, #2
 800984a:	3002      	adds	r0, #2
 800984c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8009850:	68b9      	ldr	r1, [r7, #8]
 8009852:	43c9      	mvns	r1, r1
 8009854:	4001      	ands	r1, r0
 8009856:	3202      	adds	r2, #2
 8009858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800985c:	4b1c      	ldr	r3, [pc, #112]	; (80098d0 <HAL_GPIO_DeInit+0x1f0>)
 800985e:	4a1c      	ldr	r2, [pc, #112]	; (80098d0 <HAL_GPIO_DeInit+0x1f0>)
 8009860:	6811      	ldr	r1, [r2, #0]
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	43d2      	mvns	r2, r2
 8009866:	400a      	ands	r2, r1
 8009868:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800986a:	4b19      	ldr	r3, [pc, #100]	; (80098d0 <HAL_GPIO_DeInit+0x1f0>)
 800986c:	4a18      	ldr	r2, [pc, #96]	; (80098d0 <HAL_GPIO_DeInit+0x1f0>)
 800986e:	6851      	ldr	r1, [r2, #4]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	43d2      	mvns	r2, r2
 8009874:	400a      	ands	r2, r1
 8009876:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009878:	4b15      	ldr	r3, [pc, #84]	; (80098d0 <HAL_GPIO_DeInit+0x1f0>)
 800987a:	4a15      	ldr	r2, [pc, #84]	; (80098d0 <HAL_GPIO_DeInit+0x1f0>)
 800987c:	6891      	ldr	r1, [r2, #8]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	43d2      	mvns	r2, r2
 8009882:	400a      	ands	r2, r1
 8009884:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009886:	4b12      	ldr	r3, [pc, #72]	; (80098d0 <HAL_GPIO_DeInit+0x1f0>)
 8009888:	4a11      	ldr	r2, [pc, #68]	; (80098d0 <HAL_GPIO_DeInit+0x1f0>)
 800988a:	68d1      	ldr	r1, [r2, #12]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	43d2      	mvns	r2, r2
 8009890:	400a      	ands	r2, r1
 8009892:	60da      	str	r2, [r3, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	3301      	adds	r3, #1
 8009898:	617b      	str	r3, [r7, #20]
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b0f      	cmp	r3, #15
 800989e:	f67f af2d 	bls.w	80096fc <HAL_GPIO_DeInit+0x1c>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
    }
  }
}
 80098a2:	371c      	adds	r7, #28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	40013800 	.word	0x40013800
 80098b0:	40020000 	.word	0x40020000
 80098b4:	40020400 	.word	0x40020400
 80098b8:	40020800 	.word	0x40020800
 80098bc:	40020c00 	.word	0x40020c00
 80098c0:	40021000 	.word	0x40021000
 80098c4:	40021400 	.word	0x40021400
 80098c8:	40021800 	.word	0x40021800
 80098cc:	40021c00 	.word	0x40021c00
 80098d0:	40013c00 	.word	0x40013c00

080098d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	691a      	ldr	r2, [r3, #16]
 80098e4:	887b      	ldrh	r3, [r7, #2]
 80098e6:	4013      	ands	r3, r2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d002      	beq.n	80098f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80098ec:	2301      	movs	r3, #1
 80098ee:	73fb      	strb	r3, [r7, #15]
 80098f0:	e001      	b.n	80098f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	4613      	mov	r3, r2
 800990e:	460a      	mov	r2, r1
 8009910:	807a      	strh	r2, [r7, #2]
 8009912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009914:	787b      	ldrb	r3, [r7, #1]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800991a:	887a      	ldrh	r2, [r7, #2]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	619a      	str	r2, [r3, #24]
 8009920:	e003      	b.n	800992a <HAL_GPIO_WritePin+0x26>
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009922:	887b      	ldrh	r3, [r7, #2]
 8009924:	041a      	lsls	r2, r3, #16
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	619a      	str	r2, [r3, #24]
  }
}
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	460b      	mov	r3, r1
 800993e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	695a      	ldr	r2, [r3, #20]
 8009944:	887b      	ldrh	r3, [r7, #2]
 8009946:	405a      	eors	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	615a      	str	r2, [r3, #20]
}
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop

08009958 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	460b      	mov	r3, r1
 8009962:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8009964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009968:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800996a:	887a      	ldrh	r2, [r7, #2]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4313      	orrs	r3, r2
 8009970:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8009978:	887a      	ldrh	r2, [r7, #2]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	60fb      	str	r3, [r7, #12]

 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	69db      	ldr	r3, [r3, #28]
 800998e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d001      	beq.n	800999a <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	e000      	b.n	800999c <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
  }
}
 800999c:	4618      	mov	r0, r3
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	4603      	mov	r3, r0
 80099b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80099b2:	4b08      	ldr	r3, [pc, #32]	; (80099d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80099b4:	695a      	ldr	r2, [r3, #20]
 80099b6:	88fb      	ldrh	r3, [r7, #6]
 80099b8:	4013      	ands	r3, r2
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d006      	beq.n	80099cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80099be:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80099c0:	88fa      	ldrh	r2, [r7, #6]
 80099c2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80099c4:	88fb      	ldrh	r3, [r7, #6]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 f806 	bl	80099d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	40013c00 	.word	0x40013c00

080099d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80099fe:	4b31      	ldr	r3, [pc, #196]	; (8009ac4 <HAL_FLASHEx_Erase+0xd8>)
 8009a00:	7e1b      	ldrb	r3, [r3, #24]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d101      	bne.n	8009a0a <HAL_FLASHEx_Erase+0x1e>
 8009a06:	2302      	movs	r3, #2
 8009a08:	e058      	b.n	8009abc <HAL_FLASHEx_Erase+0xd0>
 8009a0a:	4b2e      	ldr	r3, [pc, #184]	; (8009ac4 <HAL_FLASHEx_Erase+0xd8>)
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009a10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009a14:	f000 fcbc 	bl	800a390 <FLASH_WaitForLastOperation>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d148      	bne.n	8009ab4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	f04f 32ff 	mov.w	r2, #4294967295
 8009a28:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d115      	bne.n	8009a5e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	4619      	mov	r1, r3
 8009a40:	f000 f92c 	bl	8009c9c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009a44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009a48:	f000 fca2 	bl	800a390 <FLASH_WaitForLastOperation>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8009a50:	4b1d      	ldr	r3, [pc, #116]	; (8009ac8 <HAL_FLASHEx_Erase+0xdc>)
 8009a52:	4a1d      	ldr	r2, [pc, #116]	; (8009ac8 <HAL_FLASHEx_Erase+0xdc>)
 8009a54:	6912      	ldr	r2, [r2, #16]
 8009a56:	f022 0204 	bic.w	r2, r2, #4
 8009a5a:	611a      	str	r2, [r3, #16]
 8009a5c:	e028      	b.n	8009ab0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	60bb      	str	r3, [r7, #8]
 8009a64:	e01c      	b.n	8009aa0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	68b8      	ldr	r0, [r7, #8]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	f000 f936 	bl	8009ce0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009a74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009a78:	f000 fc8a 	bl	800a390 <FLASH_WaitForLastOperation>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8009a80:	4b11      	ldr	r3, [pc, #68]	; (8009ac8 <HAL_FLASHEx_Erase+0xdc>)
 8009a82:	4a11      	ldr	r2, [pc, #68]	; (8009ac8 <HAL_FLASHEx_Erase+0xdc>)
 8009a84:	6912      	ldr	r2, [r2, #16]
 8009a86:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
 8009a8a:	611a      	str	r2, [r3, #16]

        if(status != HAL_OK) 
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d003      	beq.n	8009a9a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	601a      	str	r2, [r3, #0]
          break;
 8009a98:	e00a      	b.n	8009ab0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	60bb      	str	r3, [r7, #8]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	68da      	ldr	r2, [r3, #12]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	441a      	add	r2, r3
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d8da      	bhi.n	8009a66 <HAL_FLASHEx_Erase+0x7a>
          break;
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8009ab0:	f000 fa5e 	bl	8009f70 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009ab4:	4b03      	ldr	r3, [pc, #12]	; (8009ac4 <HAL_FLASHEx_Erase+0xd8>)
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	761a      	strb	r2, [r3, #24]

  return status;
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20000fb8 	.word	0x20000fb8
 8009ac8:	40023c00 	.word	0x40023c00

08009acc <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009ad8:	4b25      	ldr	r3, [pc, #148]	; (8009b70 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009ada:	7e1b      	ldrb	r3, [r3, #24]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d101      	bne.n	8009ae4 <HAL_FLASHEx_Erase_IT+0x18>
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	e040      	b.n	8009b66 <HAL_FLASHEx_Erase_IT+0x9a>
 8009ae4:	4b22      	ldr	r3, [pc, #136]	; (8009b70 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 8009aea:	4b22      	ldr	r3, [pc, #136]	; (8009b74 <HAL_FLASHEx_Erase_IT+0xa8>)
 8009aec:	4a21      	ldr	r2, [pc, #132]	; (8009b74 <HAL_FLASHEx_Erase_IT+0xa8>)
 8009aee:	6912      	ldr	r2, [r2, #16]
 8009af0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8009af4:	611a      	str	r2, [r3, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 8009af6:	4b1f      	ldr	r3, [pc, #124]	; (8009b74 <HAL_FLASHEx_Erase_IT+0xa8>)
 8009af8:	4a1e      	ldr	r2, [pc, #120]	; (8009b74 <HAL_FLASHEx_Erase_IT+0xa8>)
 8009afa:	6912      	ldr	r2, [r2, #16]
 8009afc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009b00:	611a      	str	r2, [r3, #16]
  
  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
 8009b02:	4b1c      	ldr	r3, [pc, #112]	; (8009b74 <HAL_FLASHEx_Erase_IT+0xa8>)
 8009b04:	22f3      	movs	r2, #243	; 0xf3
 8009b06:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_PGSERR);  
  
  if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d110      	bne.n	8009b32 <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 8009b10:	4b17      	ldr	r3, [pc, #92]	; (8009b70 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009b12:	2202      	movs	r2, #2
 8009b14:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	4b15      	ldr	r3, [pc, #84]	; (8009b70 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009b1c:	611a      	str	r2, [r3, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	4610      	mov	r0, r2
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	f000 f8b6 	bl	8009c9c <FLASH_MassErase>
 8009b30:	e018      	b.n	8009b64 <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 8009b32:	4b0f      	ldr	r3, [pc, #60]	; (8009b70 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009b34:	2201      	movs	r2, #1
 8009b36:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	68da      	ldr	r2, [r3, #12]
 8009b3c:	4b0c      	ldr	r3, [pc, #48]	; (8009b70 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009b3e:	605a      	str	r2, [r3, #4]
    pFlash.Sector = pEraseInit->Sector;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	4b0a      	ldr	r3, [pc, #40]	; (8009b70 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009b46:	60da      	str	r2, [r3, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	b2da      	uxtb	r2, r3
 8009b4e:	4b08      	ldr	r3, [pc, #32]	; (8009b70 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009b50:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	689a      	ldr	r2, [r3, #8]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	4619      	mov	r1, r3
 8009b60:	f000 f8be 	bl	8009ce0 <FLASH_Erase_Sector>
  }

  return status;
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	20000fb8 	.word	0x20000fb8
 8009b74:	40023c00 	.word	0x40023c00

08009b78 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009b84:	4b33      	ldr	r3, [pc, #204]	; (8009c54 <HAL_FLASHEx_OBProgram+0xdc>)
 8009b86:	7e1b      	ldrb	r3, [r3, #24]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d101      	bne.n	8009b90 <HAL_FLASHEx_OBProgram+0x18>
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	e05d      	b.n	8009c4c <HAL_FLASHEx_OBProgram+0xd4>
 8009b90:	4b30      	ldr	r3, [pc, #192]	; (8009c54 <HAL_FLASHEx_OBProgram+0xdc>)
 8009b92:	2201      	movs	r2, #1
 8009b94:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d018      	beq.n	8009bd4 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d10a      	bne.n	8009bc0 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	689a      	ldr	r2, [r3, #8]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	f000 f8e5 	bl	8009d84 <FLASH_OB_EnableWRP>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	73fb      	strb	r3, [r7, #15]
 8009bbe:	e009      	b.n	8009bd4 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	689a      	ldr	r2, [r3, #8]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	4610      	mov	r0, r2
 8009bca:	4619      	mov	r1, r3
 8009bcc:	f000 f8fc 	bl	8009dc8 <FLASH_OB_DisableWRP>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 0302 	and.w	r3, r3, #2
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d007      	beq.n	8009bf0 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 f90e 	bl	8009e08 <FLASH_OB_RDP_LevelConfig>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 0304 	and.w	r3, r3, #4
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d015      	beq.n	8009c28 <HAL_FLASHEx_OBProgram+0xb0>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	7e1b      	ldrb	r3, [r3, #24]
 8009c00:	f003 0320 	and.w	r3, r3, #32
 8009c04:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	7e1b      	ldrb	r3, [r3, #24]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8009c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c0e:	b2da      	uxtb	r2, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	7e1b      	ldrb	r3, [r3, #24]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8009c14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	4608      	mov	r0, r1
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f000 f90c 	bl	8009e3c <FLASH_OB_UserConfig>
 8009c24:	4603      	mov	r3, r0
 8009c26:	73fb      	strb	r3, [r7, #15]
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0308 	and.w	r3, r3, #8
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d007      	beq.n	8009c44 <HAL_FLASHEx_OBProgram+0xcc>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 f92e 	bl	8009e9c <FLASH_OB_BOR_LevelConfig>
 8009c40:	4603      	mov	r3, r0
 8009c42:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009c44:	4b03      	ldr	r3, [pc, #12]	; (8009c54 <HAL_FLASHEx_OBProgram+0xdc>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	761a      	strb	r2, [r3, #24]

  return status;
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	20000fb8 	.word	0x20000fb8

08009c58 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	220f      	movs	r2, #15
 8009c64:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8009c66:	f000 f947 	bl	8009ef8 <FLASH_OB_GetWRP>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8009c72:	f000 f94d 	bl	8009f10 <FLASH_OB_GetRDP>
 8009c76:	4603      	mov	r3, r0
 8009c78:	461a      	mov	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8009c7e:	f000 f92b 	bl	8009ed8 <FLASH_OB_GetUser>
 8009c82:	4603      	mov	r3, r0
 8009c84:	461a      	mov	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8009c8a:	f000 f961 	bl	8009f50 <FLASH_OB_GetBOR>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	461a      	mov	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	615a      	str	r2, [r3, #20]
}
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	6039      	str	r1, [r7, #0]
 8009ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009ca8:	4b0c      	ldr	r3, [pc, #48]	; (8009cdc <FLASH_MassErase+0x40>)
 8009caa:	4a0c      	ldr	r2, [pc, #48]	; (8009cdc <FLASH_MassErase+0x40>)
 8009cac:	6912      	ldr	r2, [r2, #16]
 8009cae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009cb2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8009cb4:	4b09      	ldr	r3, [pc, #36]	; (8009cdc <FLASH_MassErase+0x40>)
 8009cb6:	4a09      	ldr	r2, [pc, #36]	; (8009cdc <FLASH_MassErase+0x40>)
 8009cb8:	6912      	ldr	r2, [r2, #16]
 8009cba:	f042 0204 	orr.w	r2, r2, #4
 8009cbe:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8009cc0:	4b06      	ldr	r3, [pc, #24]	; (8009cdc <FLASH_MassErase+0x40>)
 8009cc2:	4a06      	ldr	r2, [pc, #24]	; (8009cdc <FLASH_MassErase+0x40>)
 8009cc4:	6911      	ldr	r1, [r2, #16]
 8009cc6:	79fa      	ldrb	r2, [r7, #7]
 8009cc8:	0212      	lsls	r2, r2, #8
 8009cca:	430a      	orrs	r2, r1
 8009ccc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009cd0:	611a      	str	r2, [r3, #16]
}
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	40023c00 	.word	0x40023c00

08009ce0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	460b      	mov	r3, r1
 8009cea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8009cec:	2300      	movs	r3, #0
 8009cee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8009cf0:	78fb      	ldrb	r3, [r7, #3]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d102      	bne.n	8009cfc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	617b      	str	r3, [r7, #20]
 8009cfa:	e010      	b.n	8009d1e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8009cfc:	78fb      	ldrb	r3, [r7, #3]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d103      	bne.n	8009d0a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8009d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d06:	617b      	str	r3, [r7, #20]
 8009d08:	e009      	b.n	8009d1e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d103      	bne.n	8009d18 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8009d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d14:	617b      	str	r3, [r7, #20]
 8009d16:	e002      	b.n	8009d1e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009d18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009d1c:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009d1e:	4b18      	ldr	r3, [pc, #96]	; (8009d80 <FLASH_Erase_Sector+0xa0>)
 8009d20:	4a17      	ldr	r2, [pc, #92]	; (8009d80 <FLASH_Erase_Sector+0xa0>)
 8009d22:	6912      	ldr	r2, [r2, #16]
 8009d24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009d28:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8009d2a:	4b15      	ldr	r3, [pc, #84]	; (8009d80 <FLASH_Erase_Sector+0xa0>)
 8009d2c:	4a14      	ldr	r2, [pc, #80]	; (8009d80 <FLASH_Erase_Sector+0xa0>)
 8009d2e:	6911      	ldr	r1, [r2, #16]
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	430a      	orrs	r2, r1
 8009d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009d36:	4b12      	ldr	r3, [pc, #72]	; (8009d80 <FLASH_Erase_Sector+0xa0>)
 8009d38:	4a11      	ldr	r2, [pc, #68]	; (8009d80 <FLASH_Erase_Sector+0xa0>)
 8009d3a:	6912      	ldr	r2, [r2, #16]
 8009d3c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8009d40:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8009d42:	4b0f      	ldr	r3, [pc, #60]	; (8009d80 <FLASH_Erase_Sector+0xa0>)
 8009d44:	4a0e      	ldr	r2, [pc, #56]	; (8009d80 <FLASH_Erase_Sector+0xa0>)
 8009d46:	6911      	ldr	r1, [r2, #16]
 8009d48:	22f8      	movs	r2, #248	; 0xf8
 8009d4a:	613a      	str	r2, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	fa92 f2a2 	rbit	r2, r2
 8009d52:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	fab2 f282 	clz	r2, r2
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	fa00 f202 	lsl.w	r2, r0, r2
 8009d60:	430a      	orrs	r2, r1
 8009d62:	f042 0202 	orr.w	r2, r2, #2
 8009d66:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8009d68:	4b05      	ldr	r3, [pc, #20]	; (8009d80 <FLASH_Erase_Sector+0xa0>)
 8009d6a:	4a05      	ldr	r2, [pc, #20]	; (8009d80 <FLASH_Erase_Sector+0xa0>)
 8009d6c:	6912      	ldr	r2, [r2, #16]
 8009d6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009d72:	611a      	str	r2, [r3, #16]
}
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	40023c00 	.word	0x40023c00

08009d84 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009d92:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009d96:	f000 fafb 	bl	800a390 <FLASH_WaitForLastOperation>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10a      	bne.n	8009dba <FLASH_OB_EnableWRP+0x36>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 8009da4:	4b07      	ldr	r3, [pc, #28]	; (8009dc4 <FLASH_OB_EnableWRP+0x40>)
 8009da6:	4a07      	ldr	r2, [pc, #28]	; (8009dc4 <FLASH_OB_EnableWRP+0x40>)
 8009da8:	8812      	ldrh	r2, [r2, #0]
 8009daa:	b291      	uxth	r1, r2
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	b292      	uxth	r2, r2
 8009db0:	43d2      	mvns	r2, r2
 8009db2:	b292      	uxth	r2, r2
 8009db4:	400a      	ands	r2, r1
 8009db6:	b292      	uxth	r2, r2
 8009db8:	801a      	strh	r2, [r3, #0]
  }
  
  return status;
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	40023c16 	.word	0x40023c16

08009dc8 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009dd6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009dda:	f000 fad9 	bl	800a390 <FLASH_WaitForLastOperation>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d108      	bne.n	8009dfa <FLASH_OB_DisableWRP+0x32>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 8009de8:	4b06      	ldr	r3, [pc, #24]	; (8009e04 <FLASH_OB_DisableWRP+0x3c>)
 8009dea:	4a06      	ldr	r2, [pc, #24]	; (8009e04 <FLASH_OB_DisableWRP+0x3c>)
 8009dec:	8812      	ldrh	r2, [r2, #0]
 8009dee:	b291      	uxth	r1, r2
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	b292      	uxth	r2, r2
 8009df4:	430a      	orrs	r2, r1
 8009df6:	b292      	uxth	r2, r2
 8009df8:	801a      	strh	r2, [r3, #0]
  }
  
  return status;
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	40023c16 	.word	0x40023c16

08009e08 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009e16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009e1a:	f000 fab9 	bl	800a390 <FLASH_WaitForLastOperation>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8009e22:	7bfb      	ldrb	r3, [r7, #15]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d102      	bne.n	8009e2e <FLASH_OB_RDP_LevelConfig+0x26>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 8009e28:	4b03      	ldr	r3, [pc, #12]	; (8009e38 <FLASH_OB_RDP_LevelConfig+0x30>)
 8009e2a:	79fa      	ldrb	r2, [r7, #7]
 8009e2c:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	40023c15 	.word	0x40023c15

08009e3c <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	4613      	mov	r3, r2
 8009e44:	4602      	mov	r2, r0
 8009e46:	71fa      	strb	r2, [r7, #7]
 8009e48:	460a      	mov	r2, r1
 8009e4a:	71ba      	strb	r2, [r7, #6]
 8009e4c:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFFU;
 8009e4e:	23ff      	movs	r3, #255	; 0xff
 8009e50:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009e56:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009e5a:	f000 fa99 	bl	800a390 <FLASH_WaitForLastOperation>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
 8009e62:	7bbb      	ldrb	r3, [r7, #14]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d111      	bne.n	8009e8c <FLASH_OB_UserConfig+0x50>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1FU);
 8009e68:	4b0b      	ldr	r3, [pc, #44]	; (8009e98 <FLASH_OB_UserConfig+0x5c>)
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	f003 031f 	and.w	r3, r3, #31
 8009e72:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 8009e74:	4b08      	ldr	r3, [pc, #32]	; (8009e98 <FLASH_OB_UserConfig+0x5c>)
 8009e76:	79b9      	ldrb	r1, [r7, #6]
 8009e78:	7bfa      	ldrb	r2, [r7, #15]
 8009e7a:	430a      	orrs	r2, r1
 8009e7c:	b2d1      	uxtb	r1, r2
 8009e7e:	797a      	ldrb	r2, [r7, #5]
 8009e80:	430a      	orrs	r2, r1
 8009e82:	b2d1      	uxtb	r1, r2
 8009e84:	79fa      	ldrb	r2, [r7, #7]
 8009e86:	430a      	orrs	r2, r1
 8009e88:	b2d2      	uxtb	r2, r2
 8009e8a:	701a      	strb	r2, [r3, #0]
  }
  
  return status; 
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	40023c14 	.word	0x40023c14

08009e9c <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8009ea6:	4b0b      	ldr	r3, [pc, #44]	; (8009ed4 <FLASH_OB_BOR_LevelConfig+0x38>)
 8009ea8:	4a0a      	ldr	r2, [pc, #40]	; (8009ed4 <FLASH_OB_BOR_LevelConfig+0x38>)
 8009eaa:	7812      	ldrb	r2, [r2, #0]
 8009eac:	b2d2      	uxtb	r2, r2
 8009eae:	f022 020c 	bic.w	r2, r2, #12
 8009eb2:	b2d2      	uxtb	r2, r2
 8009eb4:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8009eb6:	4b07      	ldr	r3, [pc, #28]	; (8009ed4 <FLASH_OB_BOR_LevelConfig+0x38>)
 8009eb8:	4a06      	ldr	r2, [pc, #24]	; (8009ed4 <FLASH_OB_BOR_LevelConfig+0x38>)
 8009eba:	7812      	ldrb	r2, [r2, #0]
 8009ebc:	b2d1      	uxtb	r1, r2
 8009ebe:	79fa      	ldrb	r2, [r7, #7]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	701a      	strb	r2, [r3, #0]
  
  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
  
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	40023c14 	.word	0x40023c14

08009ed8 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0U));
 8009edc:	4b05      	ldr	r3, [pc, #20]	; (8009ef4 <FLASH_OB_GetUser+0x1c>)
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	f023 031f 	bic.w	r3, r3, #31
 8009ee6:	b2db      	uxtb	r3, r3
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	40023c00 	.word	0x40023c00

08009ef8 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8009efc:	4b03      	ldr	r3, [pc, #12]	; (8009f0c <FLASH_OB_GetWRP+0x14>)
 8009efe:	881b      	ldrh	r3, [r3, #0]
 8009f00:	b29b      	uxth	r3, r3
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	40023c16 	.word	0x40023c16

08009f10 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8009f16:	23aa      	movs	r3, #170	; 0xaa
 8009f18:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 8009f1a:	4b0c      	ldr	r3, [pc, #48]	; (8009f4c <FLASH_OB_GetRDP+0x3c>)
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2bcc      	cmp	r3, #204	; 0xcc
 8009f22:	d102      	bne.n	8009f2a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8009f24:	23cc      	movs	r3, #204	; 0xcc
 8009f26:	71fb      	strb	r3, [r7, #7]
 8009f28:	e009      	b.n	8009f3e <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_1))
 8009f2a:	4b08      	ldr	r3, [pc, #32]	; (8009f4c <FLASH_OB_GetRDP+0x3c>)
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b55      	cmp	r3, #85	; 0x55
 8009f32:	d102      	bne.n	8009f3a <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_1;
 8009f34:	2355      	movs	r3, #85	; 0x55
 8009f36:	71fb      	strb	r3, [r7, #7]
 8009f38:	e001      	b.n	8009f3e <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8009f3a:	23aa      	movs	r3, #170	; 0xaa
 8009f3c:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8009f3e:	79fb      	ldrb	r3, [r7, #7]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	40023c15 	.word	0x40023c15

08009f50 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8009f50:	b480      	push	{r7}
 8009f52:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0CU);
 8009f54:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <FLASH_OB_GetBOR+0x1c>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	f003 030c 	and.w	r3, r3, #12
 8009f5e:	b2db      	uxtb	r3, r3
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	40023c14 	.word	0x40023c14

08009f70 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8009f70:	b480      	push	{r7}
 8009f72:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8009f74:	4b1f      	ldr	r3, [pc, #124]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d017      	beq.n	8009fb0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009f80:	4b1c      	ldr	r3, [pc, #112]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009f82:	4a1c      	ldr	r2, [pc, #112]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009f84:	6812      	ldr	r2, [r2, #0]
 8009f86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009f8a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009f8c:	4b19      	ldr	r3, [pc, #100]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009f8e:	4a19      	ldr	r2, [pc, #100]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009f90:	6812      	ldr	r2, [r2, #0]
 8009f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	4b16      	ldr	r3, [pc, #88]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009f9a:	4a16      	ldr	r2, [pc, #88]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009f9c:	6812      	ldr	r2, [r2, #0]
 8009f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fa2:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009fa4:	4b13      	ldr	r3, [pc, #76]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009fa6:	4a13      	ldr	r2, [pc, #76]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009fa8:	6812      	ldr	r2, [r2, #0]
 8009faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fae:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009fb0:	4b10      	ldr	r3, [pc, #64]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d017      	beq.n	8009fec <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8009fbc:	4b0d      	ldr	r3, [pc, #52]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009fbe:	4a0d      	ldr	r2, [pc, #52]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009fc0:	6812      	ldr	r2, [r2, #0]
 8009fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fc6:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009fc8:	4b0a      	ldr	r3, [pc, #40]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009fca:	4a0a      	ldr	r2, [pc, #40]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009fcc:	6812      	ldr	r2, [r2, #0]
 8009fce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	4b07      	ldr	r3, [pc, #28]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009fd6:	4a07      	ldr	r2, [pc, #28]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009fd8:	6812      	ldr	r2, [r2, #0]
 8009fda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009fde:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009fe0:	4b04      	ldr	r3, [pc, #16]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009fe2:	4a04      	ldr	r2, [pc, #16]	; (8009ff4 <FLASH_FlushCaches+0x84>)
 8009fe4:	6812      	ldr	r2, [r2, #0]
 8009fe6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009fea:	601a      	str	r2, [r3, #0]
  }
}
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	40023c00 	.word	0x40023c00

08009ff8 <HAL_FLASH_Program>:
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a00a:	4b23      	ldr	r3, [pc, #140]	; (800a098 <HAL_FLASH_Program+0xa0>)
 800a00c:	7e1b      	ldrb	r3, [r3, #24]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d101      	bne.n	800a016 <HAL_FLASH_Program+0x1e>
 800a012:	2302      	movs	r3, #2
 800a014:	e03b      	b.n	800a08e <HAL_FLASH_Program+0x96>
 800a016:	4b20      	ldr	r3, [pc, #128]	; (800a098 <HAL_FLASH_Program+0xa0>)
 800a018:	2201      	movs	r2, #1
 800a01a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a01c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a020:	f000 f9b6 	bl	800a390 <FLASH_WaitForLastOperation>
 800a024:	4603      	mov	r3, r0
 800a026:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800a028:	7dfb      	ldrb	r3, [r7, #23]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d12b      	bne.n	800a086 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d105      	bne.n	800a040 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a034:	783b      	ldrb	r3, [r7, #0]
 800a036:	68b8      	ldr	r0, [r7, #8]
 800a038:	4619      	mov	r1, r3
 800a03a:	f000 fa53 	bl	800a4e4 <FLASH_Program_Byte>
 800a03e:	e016      	b.n	800a06e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b01      	cmp	r3, #1
 800a044:	d105      	bne.n	800a052 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a046:	883b      	ldrh	r3, [r7, #0]
 800a048:	68b8      	ldr	r0, [r7, #8]
 800a04a:	4619      	mov	r1, r3
 800a04c:	f000 fa28 	bl	800a4a0 <FLASH_Program_HalfWord>
 800a050:	e00d      	b.n	800a06e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2b02      	cmp	r3, #2
 800a056:	d105      	bne.n	800a064 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	68b8      	ldr	r0, [r7, #8]
 800a05c:	4619      	mov	r1, r3
 800a05e:	f000 f9fd 	bl	800a45c <FLASH_Program_Word>
 800a062:	e004      	b.n	800a06e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800a064:	68b8      	ldr	r0, [r7, #8]
 800a066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a06a:	f000 f9d3 	bl	800a414 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a06e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a072:	f000 f98d 	bl	800a390 <FLASH_WaitForLastOperation>
 800a076:	4603      	mov	r3, r0
 800a078:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800a07a:	4b08      	ldr	r3, [pc, #32]	; (800a09c <HAL_FLASH_Program+0xa4>)
 800a07c:	4a07      	ldr	r2, [pc, #28]	; (800a09c <HAL_FLASH_Program+0xa4>)
 800a07e:	6912      	ldr	r2, [r2, #16]
 800a080:	f022 0201 	bic.w	r2, r2, #1
 800a084:	611a      	str	r2, [r3, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a086:	4b04      	ldr	r3, [pc, #16]	; (800a098 <HAL_FLASH_Program+0xa0>)
 800a088:	2200      	movs	r2, #0
 800a08a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	20000fb8 	.word	0x20000fb8
 800a09c:	40023c00 	.word	0x40023c00

0800a0a0 <HAL_FLASH_Program_IT>:
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a0b2:	4b20      	ldr	r3, [pc, #128]	; (800a134 <HAL_FLASH_Program_IT+0x94>)
 800a0b4:	7e1b      	ldrb	r3, [r3, #24]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d101      	bne.n	800a0be <HAL_FLASH_Program_IT+0x1e>
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	e035      	b.n	800a12a <HAL_FLASH_Program_IT+0x8a>
 800a0be:	4b1d      	ldr	r3, [pc, #116]	; (800a134 <HAL_FLASH_Program_IT+0x94>)
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	; (800a138 <HAL_FLASH_Program_IT+0x98>)
 800a0c6:	4a1c      	ldr	r2, [pc, #112]	; (800a138 <HAL_FLASH_Program_IT+0x98>)
 800a0c8:	6912      	ldr	r2, [r2, #16]
 800a0ca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a0ce:	611a      	str	r2, [r3, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800a0d0:	4b19      	ldr	r3, [pc, #100]	; (800a138 <HAL_FLASH_Program_IT+0x98>)
 800a0d2:	4a19      	ldr	r2, [pc, #100]	; (800a138 <HAL_FLASH_Program_IT+0x98>)
 800a0d4:	6912      	ldr	r2, [r2, #16]
 800a0d6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800a0da:	611a      	str	r2, [r3, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 800a0dc:	4b15      	ldr	r3, [pc, #84]	; (800a134 <HAL_FLASH_Program_IT+0x94>)
 800a0de:	2203      	movs	r2, #3
 800a0e0:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
 800a0e2:	4b14      	ldr	r3, [pc, #80]	; (800a134 <HAL_FLASH_Program_IT+0x94>)
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	615a      	str	r2, [r3, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d105      	bne.n	800a0fa <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a0ee:	783b      	ldrb	r3, [r7, #0]
 800a0f0:	68b8      	ldr	r0, [r7, #8]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	f000 f9f6 	bl	800a4e4 <FLASH_Program_Byte>
 800a0f8:	e016      	b.n	800a128 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d105      	bne.n	800a10c <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a100:	883b      	ldrh	r3, [r7, #0]
 800a102:	68b8      	ldr	r0, [r7, #8]
 800a104:	4619      	mov	r1, r3
 800a106:	f000 f9cb 	bl	800a4a0 <FLASH_Program_HalfWord>
 800a10a:	e00d      	b.n	800a128 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2b02      	cmp	r3, #2
 800a110:	d105      	bne.n	800a11e <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	68b8      	ldr	r0, [r7, #8]
 800a116:	4619      	mov	r1, r3
 800a118:	f000 f9a0 	bl	800a45c <FLASH_Program_Word>
 800a11c:	e004      	b.n	800a128 <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
 800a11e:	68b8      	ldr	r0, [r7, #8]
 800a120:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a124:	f000 f976 	bl	800a414 <FLASH_Program_DoubleWord>
  }

  return status;
 800a128:	7dfb      	ldrb	r3, [r7, #23]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000fb8 	.word	0x20000fb8
 800a138:	40023c00 	.word	0x40023c00

0800a13c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800a142:	2300      	movs	r3, #0
 800a144:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a146:	4b4b      	ldr	r3, [pc, #300]	; (800a274 <HAL_FLASH_IRQHandler+0x138>)
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800a14e:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800a152:	d120      	bne.n	800a196 <HAL_FLASH_IRQHandler+0x5a>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a154:	4b48      	ldr	r3, [pc, #288]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d107      	bne.n	800a16e <HAL_FLASH_IRQHandler+0x32>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800a15e:	4b46      	ldr	r3, [pc, #280]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800a164:	4b44      	ldr	r3, [pc, #272]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a166:	f04f 32ff 	mov.w	r2, #4294967295
 800a16a:	60da      	str	r2, [r3, #12]
 800a16c:	e00b      	b.n	800a186 <HAL_FLASH_IRQHandler+0x4a>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800a16e:	4b42      	ldr	r3, [pc, #264]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2b02      	cmp	r3, #2
 800a176:	d103      	bne.n	800a180 <HAL_FLASH_IRQHandler+0x44>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800a178:	4b3f      	ldr	r3, [pc, #252]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	607b      	str	r3, [r7, #4]
 800a17e:	e002      	b.n	800a186 <HAL_FLASH_IRQHandler+0x4a>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800a180:	4b3d      	ldr	r3, [pc, #244]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800a186:	f000 f9cd 	bl	800a524 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f880 	bl	800a290 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a190:	4b39      	ldr	r3, [pc, #228]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a192:	2200      	movs	r2, #0
 800a194:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a196:	4b37      	ldr	r3, [pc, #220]	; (800a274 <HAL_FLASH_IRQHandler+0x138>)
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d04a      	beq.n	800a238 <HAL_FLASH_IRQHandler+0xfc>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a1a2:	4b34      	ldr	r3, [pc, #208]	; (800a274 <HAL_FLASH_IRQHandler+0x138>)
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a1a8:	4b33      	ldr	r3, [pc, #204]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d12d      	bne.n	800a20e <HAL_FLASH_IRQHandler+0xd2>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800a1b2:	4b31      	ldr	r3, [pc, #196]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	1e5a      	subs	r2, r3, #1
 800a1b8:	4b2f      	ldr	r3, [pc, #188]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a1ba:	605a      	str	r2, [r3, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800a1bc:	4b2e      	ldr	r3, [pc, #184]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d015      	beq.n	800a1f0 <HAL_FLASH_IRQHandler+0xb4>
      {
        addresstmp = pFlash.Sector;
 800a1c4:	4b2c      	ldr	r3, [pc, #176]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 f856 	bl	800a27c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800a1d0:	4b29      	ldr	r3, [pc, #164]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	4b28      	ldr	r3, [pc, #160]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a1d8:	60da      	str	r2, [r3, #12]
        addresstmp = pFlash.Sector;
 800a1da:	4b27      	ldr	r3, [pc, #156]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800a1e0:	4b25      	ldr	r3, [pc, #148]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a1e2:	7a1b      	ldrb	r3, [r3, #8]
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	f7ff fd79 	bl	8009ce0 <FLASH_Erase_Sector>
 800a1ee:	e023      	b.n	800a238 <HAL_FLASH_IRQHandler+0xfc>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800a1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f4:	607b      	str	r3, [r7, #4]
 800a1f6:	4b20      	ldr	r3, [pc, #128]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a1fc:	4b1e      	ldr	r3, [pc, #120]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a202:	f7ff feb5 	bl	8009f70 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f838 	bl	800a27c <HAL_FLASH_EndOfOperationCallback>
 800a20c:	e014      	b.n	800a238 <HAL_FLASH_IRQHandler+0xfc>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800a20e:	4b1a      	ldr	r3, [pc, #104]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	b2db      	uxtb	r3, r3
 800a214:	2b02      	cmp	r3, #2
 800a216:	d107      	bne.n	800a228 <HAL_FLASH_IRQHandler+0xec>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a218:	f7ff feaa 	bl	8009f70 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800a21c:	4b16      	ldr	r3, [pc, #88]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	4618      	mov	r0, r3
 800a222:	f000 f82b 	bl	800a27c <HAL_FLASH_EndOfOperationCallback>
 800a226:	e004      	b.n	800a232 <HAL_FLASH_IRQHandler+0xf6>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800a228:	4b13      	ldr	r3, [pc, #76]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f000 f825 	bl	800a27c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a232:	4b11      	ldr	r3, [pc, #68]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a234:	2200      	movs	r2, #0
 800a236:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800a238:	4b0f      	ldr	r3, [pc, #60]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d114      	bne.n	800a26c <HAL_FLASH_IRQHandler+0x130>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800a242:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <HAL_FLASH_IRQHandler+0x138>)
 800a244:	4a0b      	ldr	r2, [pc, #44]	; (800a274 <HAL_FLASH_IRQHandler+0x138>)
 800a246:	6912      	ldr	r2, [r2, #16]
 800a248:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a24c:	611a      	str	r2, [r3, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800a24e:	4b09      	ldr	r3, [pc, #36]	; (800a274 <HAL_FLASH_IRQHandler+0x138>)
 800a250:	4a08      	ldr	r2, [pc, #32]	; (800a274 <HAL_FLASH_IRQHandler+0x138>)
 800a252:	6912      	ldr	r2, [r2, #16]
 800a254:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a258:	611a      	str	r2, [r3, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800a25a:	4b06      	ldr	r3, [pc, #24]	; (800a274 <HAL_FLASH_IRQHandler+0x138>)
 800a25c:	4a05      	ldr	r2, [pc, #20]	; (800a274 <HAL_FLASH_IRQHandler+0x138>)
 800a25e:	6912      	ldr	r2, [r2, #16]
 800a260:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800a264:	611a      	str	r2, [r3, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800a266:	4b04      	ldr	r3, [pc, #16]	; (800a278 <HAL_FLASH_IRQHandler+0x13c>)
 800a268:	2200      	movs	r2, #0
 800a26a:	761a      	strb	r2, [r3, #24]
  }
}
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	40023c00 	.word	0x40023c00
 800a278:	20000fb8 	.word	0x20000fb8

0800a27c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop

0800a290 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop

0800a2a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 800a2a8:	4b08      	ldr	r3, [pc, #32]	; (800a2cc <HAL_FLASH_Unlock+0x28>)
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	da07      	bge.n	800a2c0 <HAL_FLASH_Unlock+0x1c>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800a2b0:	4b06      	ldr	r3, [pc, #24]	; (800a2cc <HAL_FLASH_Unlock+0x28>)
 800a2b2:	4a07      	ldr	r2, [pc, #28]	; (800a2d0 <HAL_FLASH_Unlock+0x2c>)
 800a2b4:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800a2b6:	4b05      	ldr	r3, [pc, #20]	; (800a2cc <HAL_FLASH_Unlock+0x28>)
 800a2b8:	4a06      	ldr	r2, [pc, #24]	; (800a2d4 <HAL_FLASH_Unlock+0x30>)
 800a2ba:	605a      	str	r2, [r3, #4]
  else
  {
    return HAL_ERROR;
  }
  
  return HAL_OK; 
 800a2bc:	2300      	movs	r3, #0
 800a2be:	e000      	b.n	800a2c2 <HAL_FLASH_Unlock+0x1e>
    FLASH->KEYR = FLASH_KEY1;
    FLASH->KEYR = FLASH_KEY2;
  }
  else
  {
    return HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
  }
  
  return HAL_OK; 
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	40023c00 	.word	0x40023c00
 800a2d0:	45670123 	.word	0x45670123
 800a2d4:	cdef89ab 	.word	0xcdef89ab

0800a2d8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a2dc:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <HAL_FLASH_Lock+0x1c>)
 800a2de:	4a05      	ldr	r2, [pc, #20]	; (800a2f4 <HAL_FLASH_Lock+0x1c>)
 800a2e0:	6912      	ldr	r2, [r2, #16]
 800a2e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a2e6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	40023c00 	.word	0x40023c00

0800a2f8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800a2fc:	4b09      	ldr	r3, [pc, #36]	; (800a324 <HAL_FLASH_OB_Unlock+0x2c>)
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	2b00      	cmp	r3, #0
 800a306:	d007      	beq.n	800a318 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800a308:	4b06      	ldr	r3, [pc, #24]	; (800a324 <HAL_FLASH_OB_Unlock+0x2c>)
 800a30a:	4a07      	ldr	r2, [pc, #28]	; (800a328 <HAL_FLASH_OB_Unlock+0x30>)
 800a30c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800a30e:	4b05      	ldr	r3, [pc, #20]	; (800a324 <HAL_FLASH_OB_Unlock+0x2c>)
 800a310:	4a06      	ldr	r2, [pc, #24]	; (800a32c <HAL_FLASH_OB_Unlock+0x34>)
 800a312:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800a314:	2300      	movs	r3, #0
 800a316:	e000      	b.n	800a31a <HAL_FLASH_OB_Unlock+0x22>
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
  }
  else
  {
    return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
  }  
  
  return HAL_OK;  
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	40023c00 	.word	0x40023c00
 800a328:	08192a3b 	.word	0x08192a3b
 800a32c:	4c5d6e7f 	.word	0x4c5d6e7f

0800a330 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800a330:	b480      	push	{r7}
 800a332:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800a334:	4b05      	ldr	r3, [pc, #20]	; (800a34c <HAL_FLASH_OB_Lock+0x1c>)
 800a336:	4a05      	ldr	r2, [pc, #20]	; (800a34c <HAL_FLASH_OB_Lock+0x1c>)
 800a338:	6952      	ldr	r2, [r2, #20]
 800a33a:	f042 0201 	orr.w	r2, r2, #1
 800a33e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;  
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	40023c00 	.word	0x40023c00

0800a350 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800a354:	4b07      	ldr	r3, [pc, #28]	; (800a374 <HAL_FLASH_OB_Launch+0x24>)
 800a356:	4a07      	ldr	r2, [pc, #28]	; (800a374 <HAL_FLASH_OB_Launch+0x24>)
 800a358:	7812      	ldrb	r2, [r2, #0]
 800a35a:	b2d2      	uxtb	r2, r2
 800a35c:	f042 0202 	orr.w	r2, r2, #2
 800a360:	b2d2      	uxtb	r2, r2
 800a362:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 800a364:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a368:	f000 f812 	bl	800a390 <FLASH_WaitForLastOperation>
 800a36c:	4603      	mov	r3, r0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	40023c14 	.word	0x40023c14

0800a378 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800a378:	b480      	push	{r7}
 800a37a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a37c:	4b03      	ldr	r3, [pc, #12]	; (800a38c <HAL_FLASH_GetError+0x14>)
 800a37e:	69db      	ldr	r3, [r3, #28]
}  
 800a380:	4618      	mov	r0, r3
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	20000fb8 	.word	0x20000fb8

0800a390 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a398:	2300      	movs	r3, #0
 800a39a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a39c:	4b1b      	ldr	r3, [pc, #108]	; (800a40c <FLASH_WaitForLastOperation+0x7c>)
 800a39e:	2200      	movs	r2, #0
 800a3a0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a3a2:	f002 fdeb 	bl	800cf7c <HAL_GetTick>
 800a3a6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a3a8:	e010      	b.n	800a3cc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b0:	d00c      	beq.n	800a3cc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d007      	beq.n	800a3c8 <FLASH_WaitForLastOperation+0x38>
 800a3b8:	f002 fde0 	bl	800cf7c <HAL_GetTick>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	1ad2      	subs	r2, r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d901      	bls.n	800a3cc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e01a      	b.n	800a402 <FLASH_WaitForLastOperation+0x72>
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a3cc:	4b10      	ldr	r3, [pc, #64]	; (800a410 <FLASH_WaitForLastOperation+0x80>)
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e8      	bne.n	800a3aa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a3d8:	4b0d      	ldr	r3, [pc, #52]	; (800a410 <FLASH_WaitForLastOperation+0x80>)
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	f003 0301 	and.w	r3, r3, #1
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d002      	beq.n	800a3ea <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a3e4:	4b0a      	ldr	r3, [pc, #40]	; (800a410 <FLASH_WaitForLastOperation+0x80>)
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a3ea:	4b09      	ldr	r3, [pc, #36]	; (800a410 <FLASH_WaitForLastOperation+0x80>)
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800a3f2:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800a3f6:	d103      	bne.n	800a400 <FLASH_WaitForLastOperation+0x70>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a3f8:	f000 f894 	bl	800a524 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e000      	b.n	800a402 <FLASH_WaitForLastOperation+0x72>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a400:	2300      	movs	r3, #0
  
}  
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	20000fb8 	.word	0x20000fb8
 800a410:	40023c00 	.word	0x40023c00

0800a414 <FLASH_Program_DoubleWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a420:	4b0d      	ldr	r3, [pc, #52]	; (800a458 <FLASH_Program_DoubleWord+0x44>)
 800a422:	4a0d      	ldr	r2, [pc, #52]	; (800a458 <FLASH_Program_DoubleWord+0x44>)
 800a424:	6912      	ldr	r2, [r2, #16]
 800a426:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a42a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800a42c:	4b0a      	ldr	r3, [pc, #40]	; (800a458 <FLASH_Program_DoubleWord+0x44>)
 800a42e:	4a0a      	ldr	r2, [pc, #40]	; (800a458 <FLASH_Program_DoubleWord+0x44>)
 800a430:	6912      	ldr	r2, [r2, #16]
 800a432:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800a436:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a438:	4b07      	ldr	r3, [pc, #28]	; (800a458 <FLASH_Program_DoubleWord+0x44>)
 800a43a:	4a07      	ldr	r2, [pc, #28]	; (800a458 <FLASH_Program_DoubleWord+0x44>)
 800a43c:	6912      	ldr	r2, [r2, #16]
 800a43e:	f042 0201 	orr.w	r2, r2, #1
 800a442:	611a      	str	r2, [r3, #16]

  *(__IO uint64_t*)Address = Data;
 800a444:	68f9      	ldr	r1, [r7, #12]
 800a446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a44a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr
 800a458:	40023c00 	.word	0x40023c00

0800a45c <FLASH_Program_Word>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a466:	4b0d      	ldr	r3, [pc, #52]	; (800a49c <FLASH_Program_Word+0x40>)
 800a468:	4a0c      	ldr	r2, [pc, #48]	; (800a49c <FLASH_Program_Word+0x40>)
 800a46a:	6912      	ldr	r2, [r2, #16]
 800a46c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a470:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800a472:	4b0a      	ldr	r3, [pc, #40]	; (800a49c <FLASH_Program_Word+0x40>)
 800a474:	4a09      	ldr	r2, [pc, #36]	; (800a49c <FLASH_Program_Word+0x40>)
 800a476:	6912      	ldr	r2, [r2, #16]
 800a478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a47c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a47e:	4b07      	ldr	r3, [pc, #28]	; (800a49c <FLASH_Program_Word+0x40>)
 800a480:	4a06      	ldr	r2, [pc, #24]	; (800a49c <FLASH_Program_Word+0x40>)
 800a482:	6912      	ldr	r2, [r2, #16]
 800a484:	f042 0201 	orr.w	r2, r2, #1
 800a488:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	601a      	str	r2, [r3, #0]
}
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	40023c00 	.word	0x40023c00

0800a4a0 <FLASH_Program_HalfWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a4ac:	4b0c      	ldr	r3, [pc, #48]	; (800a4e0 <FLASH_Program_HalfWord+0x40>)
 800a4ae:	4a0c      	ldr	r2, [pc, #48]	; (800a4e0 <FLASH_Program_HalfWord+0x40>)
 800a4b0:	6912      	ldr	r2, [r2, #16]
 800a4b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a4b6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a4b8:	4b09      	ldr	r3, [pc, #36]	; (800a4e0 <FLASH_Program_HalfWord+0x40>)
 800a4ba:	4a09      	ldr	r2, [pc, #36]	; (800a4e0 <FLASH_Program_HalfWord+0x40>)
 800a4bc:	6912      	ldr	r2, [r2, #16]
 800a4be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4c2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a4c4:	4b06      	ldr	r3, [pc, #24]	; (800a4e0 <FLASH_Program_HalfWord+0x40>)
 800a4c6:	4a06      	ldr	r2, [pc, #24]	; (800a4e0 <FLASH_Program_HalfWord+0x40>)
 800a4c8:	6912      	ldr	r2, [r2, #16]
 800a4ca:	f042 0201 	orr.w	r2, r2, #1
 800a4ce:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	887a      	ldrh	r2, [r7, #2]
 800a4d4:	801a      	strh	r2, [r3, #0]
}
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	40023c00 	.word	0x40023c00

0800a4e4 <FLASH_Program_Byte>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a4f0:	4b0b      	ldr	r3, [pc, #44]	; (800a520 <FLASH_Program_Byte+0x3c>)
 800a4f2:	4a0b      	ldr	r2, [pc, #44]	; (800a520 <FLASH_Program_Byte+0x3c>)
 800a4f4:	6912      	ldr	r2, [r2, #16]
 800a4f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a4fa:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800a4fc:	4b08      	ldr	r3, [pc, #32]	; (800a520 <FLASH_Program_Byte+0x3c>)
 800a4fe:	4a08      	ldr	r2, [pc, #32]	; (800a520 <FLASH_Program_Byte+0x3c>)
 800a500:	6912      	ldr	r2, [r2, #16]
 800a502:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a504:	4b06      	ldr	r3, [pc, #24]	; (800a520 <FLASH_Program_Byte+0x3c>)
 800a506:	4a06      	ldr	r2, [pc, #24]	; (800a520 <FLASH_Program_Byte+0x3c>)
 800a508:	6912      	ldr	r2, [r2, #16]
 800a50a:	f042 0201 	orr.w	r2, r2, #1
 800a50e:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	78fa      	ldrb	r2, [r7, #3]
 800a514:	701a      	strb	r2, [r3, #0]
}
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr
 800a520:	40023c00 	.word	0x40023c00

0800a524 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800a524:	b480      	push	{r7}
 800a526:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800a528:	4b2f      	ldr	r3, [pc, #188]	; (800a5e8 <FLASH_SetErrorCode+0xc4>)
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	f003 0310 	and.w	r3, r3, #16
 800a530:	2b00      	cmp	r3, #0
 800a532:	d008      	beq.n	800a546 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a534:	4b2d      	ldr	r3, [pc, #180]	; (800a5ec <FLASH_SetErrorCode+0xc8>)
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	f043 0210 	orr.w	r2, r3, #16
 800a53c:	4b2b      	ldr	r3, [pc, #172]	; (800a5ec <FLASH_SetErrorCode+0xc8>)
 800a53e:	61da      	str	r2, [r3, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800a540:	4b29      	ldr	r3, [pc, #164]	; (800a5e8 <FLASH_SetErrorCode+0xc4>)
 800a542:	2210      	movs	r2, #16
 800a544:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800a546:	4b28      	ldr	r3, [pc, #160]	; (800a5e8 <FLASH_SetErrorCode+0xc4>)
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	f003 0320 	and.w	r3, r3, #32
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d008      	beq.n	800a564 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800a552:	4b26      	ldr	r3, [pc, #152]	; (800a5ec <FLASH_SetErrorCode+0xc8>)
 800a554:	69db      	ldr	r3, [r3, #28]
 800a556:	f043 0208 	orr.w	r2, r3, #8
 800a55a:	4b24      	ldr	r3, [pc, #144]	; (800a5ec <FLASH_SetErrorCode+0xc8>)
 800a55c:	61da      	str	r2, [r3, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800a55e:	4b22      	ldr	r3, [pc, #136]	; (800a5e8 <FLASH_SetErrorCode+0xc4>)
 800a560:	2220      	movs	r2, #32
 800a562:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800a564:	4b20      	ldr	r3, [pc, #128]	; (800a5e8 <FLASH_SetErrorCode+0xc4>)
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d008      	beq.n	800a582 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800a570:	4b1e      	ldr	r3, [pc, #120]	; (800a5ec <FLASH_SetErrorCode+0xc8>)
 800a572:	69db      	ldr	r3, [r3, #28]
 800a574:	f043 0204 	orr.w	r2, r3, #4
 800a578:	4b1c      	ldr	r3, [pc, #112]	; (800a5ec <FLASH_SetErrorCode+0xc8>)
 800a57a:	61da      	str	r2, [r3, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800a57c:	4b1a      	ldr	r3, [pc, #104]	; (800a5e8 <FLASH_SetErrorCode+0xc4>)
 800a57e:	2240      	movs	r2, #64	; 0x40
 800a580:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800a582:	4b19      	ldr	r3, [pc, #100]	; (800a5e8 <FLASH_SetErrorCode+0xc4>)
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d008      	beq.n	800a5a0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800a58e:	4b17      	ldr	r3, [pc, #92]	; (800a5ec <FLASH_SetErrorCode+0xc8>)
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	f043 0202 	orr.w	r2, r3, #2
 800a596:	4b15      	ldr	r3, [pc, #84]	; (800a5ec <FLASH_SetErrorCode+0xc8>)
 800a598:	61da      	str	r2, [r3, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800a59a:	4b13      	ldr	r3, [pc, #76]	; (800a5e8 <FLASH_SetErrorCode+0xc4>)
 800a59c:	2280      	movs	r2, #128	; 0x80
 800a59e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800a5a0:	4b11      	ldr	r3, [pc, #68]	; (800a5e8 <FLASH_SetErrorCode+0xc4>)
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d009      	beq.n	800a5c0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800a5ac:	4b0f      	ldr	r3, [pc, #60]	; (800a5ec <FLASH_SetErrorCode+0xc8>)
 800a5ae:	69db      	ldr	r3, [r3, #28]
 800a5b0:	f043 0201 	orr.w	r2, r3, #1
 800a5b4:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <FLASH_SetErrorCode+0xc8>)
 800a5b6:	61da      	str	r2, [r3, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800a5b8:	4b0b      	ldr	r3, [pc, #44]	; (800a5e8 <FLASH_SetErrorCode+0xc4>)
 800a5ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5be:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800a5c0:	4b09      	ldr	r3, [pc, #36]	; (800a5e8 <FLASH_SetErrorCode+0xc4>)
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	f003 0302 	and.w	r3, r3, #2
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d008      	beq.n	800a5de <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800a5cc:	4b07      	ldr	r3, [pc, #28]	; (800a5ec <FLASH_SetErrorCode+0xc8>)
 800a5ce:	69db      	ldr	r3, [r3, #28]
 800a5d0:	f043 0220 	orr.w	r2, r3, #32
 800a5d4:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <FLASH_SetErrorCode+0xc8>)
 800a5d6:	61da      	str	r2, [r3, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800a5d8:	4b03      	ldr	r3, [pc, #12]	; (800a5e8 <FLASH_SetErrorCode+0xc4>)
 800a5da:	2202      	movs	r2, #2
 800a5dc:	60da      	str	r2, [r3, #12]
  }
}
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	40023c00 	.word	0x40023c00
 800a5ec:	20000fb8 	.word	0x20000fb8

0800a5f0 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
 800a5fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5fe:	2300      	movs	r3, #0
 800a600:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	2b80      	cmp	r3, #128	; 0x80
 800a608:	d106      	bne.n	800a618 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a610:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	75fb      	strb	r3, [r7, #23]
 800a616:	e031      	b.n	800a67c <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d101      	bne.n	800a626 <HAL_DMAEx_MultiBufferStart+0x36>
 800a622:	2302      	movs	r3, #2
 800a624:	e02b      	b.n	800a67e <HAL_DMAEx_MultiBufferStart+0x8e>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a634:	b2db      	uxtb	r3, r3
 800a636:	2b01      	cmp	r3, #1
 800a638:	d11e      	bne.n	800a678 <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2202      	movs	r2, #2
 800a63e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	6812      	ldr	r2, [r2, #0]
 800a64a:	6812      	ldr	r2, [r2, #0]
 800a64c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a650:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	68b9      	ldr	r1, [r7, #8]
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	f001 fab5 	bl	800bbd0 <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	6812      	ldr	r2, [r2, #0]
 800a66e:	6812      	ldr	r2, [r2, #0]
 800a670:	f042 0201 	orr.w	r2, r2, #1
 800a674:	601a      	str	r2, [r3, #0]
 800a676:	e001      	b.n	800a67c <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
 800a678:	2302      	movs	r3, #2
 800a67a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800a67c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3718      	adds	r7, #24
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop

0800a688 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
 800a694:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a696:	2300      	movs	r3, #0
 800a698:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	2b80      	cmp	r3, #128	; 0x80
 800a6a0:	d106      	bne.n	800a6b0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	f001 ba53 	b.w	800bb56 <HAL_DMAEx_MultiBufferStart_IT+0x14ce>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d007      	beq.n	800a6c8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d003      	beq.n	800a6c8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d105      	bne.n	800a6d4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2240      	movs	r2, #64	; 0x40
 800a6cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	f001 ba41 	b.w	800bb56 <HAL_DMAEx_MultiBufferStart_IT+0x14ce>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d102      	bne.n	800a6e4 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 800a6de:	2302      	movs	r3, #2
 800a6e0:	f001 ba39 	b.w	800bb56 <HAL_DMAEx_MultiBufferStart_IT+0x14ce>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	f041 8227 	bne.w	800bb48 <HAL_DMAEx_MultiBufferStart_IT+0x14c0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2202      	movs	r2, #2
 800a6fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	6812      	ldr	r2, [r2, #0]
 800a710:	6812      	ldr	r2, [r2, #0]
 800a712:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a716:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	683a      	ldr	r2, [r7, #0]
 800a71e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	68b9      	ldr	r1, [r7, #8]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	f001 fa52 	bl	800bbd0 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	461a      	mov	r2, r3
 800a732:	4b72      	ldr	r3, [pc, #456]	; (800a8fc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800a734:	429a      	cmp	r2, r3
 800a736:	d96c      	bls.n	800a812 <HAL_DMAEx_MultiBufferStart_IT+0x18a>
 800a738:	4a71      	ldr	r2, [pc, #452]	; (800a900 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4619      	mov	r1, r3
 800a740:	4b70      	ldr	r3, [pc, #448]	; (800a904 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800a742:	4299      	cmp	r1, r3
 800a744:	d062      	beq.n	800a80c <HAL_DMAEx_MultiBufferStart_IT+0x184>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4619      	mov	r1, r3
 800a74c:	4b6e      	ldr	r3, [pc, #440]	; (800a908 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800a74e:	4299      	cmp	r1, r3
 800a750:	d05a      	beq.n	800a808 <HAL_DMAEx_MultiBufferStart_IT+0x180>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4619      	mov	r1, r3
 800a758:	4b6c      	ldr	r3, [pc, #432]	; (800a90c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800a75a:	4299      	cmp	r1, r3
 800a75c:	d052      	beq.n	800a804 <HAL_DMAEx_MultiBufferStart_IT+0x17c>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4619      	mov	r1, r3
 800a764:	4b6a      	ldr	r3, [pc, #424]	; (800a910 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800a766:	4299      	cmp	r1, r3
 800a768:	d04a      	beq.n	800a800 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4619      	mov	r1, r3
 800a770:	4b68      	ldr	r3, [pc, #416]	; (800a914 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800a772:	4299      	cmp	r1, r3
 800a774:	d041      	beq.n	800a7fa <HAL_DMAEx_MultiBufferStart_IT+0x172>
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4619      	mov	r1, r3
 800a77c:	4b66      	ldr	r3, [pc, #408]	; (800a918 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800a77e:	4299      	cmp	r1, r3
 800a780:	d038      	beq.n	800a7f4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4619      	mov	r1, r3
 800a788:	4b64      	ldr	r3, [pc, #400]	; (800a91c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800a78a:	4299      	cmp	r1, r3
 800a78c:	d02f      	beq.n	800a7ee <HAL_DMAEx_MultiBufferStart_IT+0x166>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4619      	mov	r1, r3
 800a794:	4b62      	ldr	r3, [pc, #392]	; (800a920 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800a796:	4299      	cmp	r1, r3
 800a798:	d026      	beq.n	800a7e8 <HAL_DMAEx_MultiBufferStart_IT+0x160>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4b60      	ldr	r3, [pc, #384]	; (800a924 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800a7a2:	4299      	cmp	r1, r3
 800a7a4:	d01d      	beq.n	800a7e2 <HAL_DMAEx_MultiBufferStart_IT+0x15a>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	4b5e      	ldr	r3, [pc, #376]	; (800a928 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800a7ae:	4299      	cmp	r1, r3
 800a7b0:	d014      	beq.n	800a7dc <HAL_DMAEx_MultiBufferStart_IT+0x154>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	4b5c      	ldr	r3, [pc, #368]	; (800a92c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800a7ba:	4299      	cmp	r1, r3
 800a7bc:	d00b      	beq.n	800a7d6 <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	4b5a      	ldr	r3, [pc, #360]	; (800a930 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 800a7c6:	4299      	cmp	r1, r3
 800a7c8:	d102      	bne.n	800a7d0 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800a7ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a7ce:	e01e      	b.n	800a80e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 800a7d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a7d4:	e01b      	b.n	800a80e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 800a7d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a7da:	e018      	b.n	800a80e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 800a7dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a7e0:	e015      	b.n	800a80e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 800a7e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a7e6:	e012      	b.n	800a80e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 800a7e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7ec:	e00f      	b.n	800a80e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 800a7ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7f2:	e00c      	b.n	800a80e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 800a7f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7f8:	e009      	b.n	800a80e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 800a7fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7fe:	e006      	b.n	800a80e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 800a800:	2320      	movs	r3, #32
 800a802:	e004      	b.n	800a80e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 800a804:	2320      	movs	r3, #32
 800a806:	e002      	b.n	800a80e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 800a808:	2320      	movs	r3, #32
 800a80a:	e000      	b.n	800a80e <HAL_DMAEx_MultiBufferStart_IT+0x186>
 800a80c:	2320      	movs	r3, #32
 800a80e:	60d3      	str	r3, [r2, #12]
 800a810:	e18e      	b.n	800ab30 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	4b46      	ldr	r3, [pc, #280]	; (800a934 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800a81a:	429a      	cmp	r2, r3
 800a81c:	f240 808c 	bls.w	800a938 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>
 800a820:	4a37      	ldr	r2, [pc, #220]	; (800a900 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4619      	mov	r1, r3
 800a828:	4b36      	ldr	r3, [pc, #216]	; (800a904 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800a82a:	4299      	cmp	r1, r3
 800a82c:	d062      	beq.n	800a8f4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4619      	mov	r1, r3
 800a834:	4b34      	ldr	r3, [pc, #208]	; (800a908 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800a836:	4299      	cmp	r1, r3
 800a838:	d05a      	beq.n	800a8f0 <HAL_DMAEx_MultiBufferStart_IT+0x268>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4619      	mov	r1, r3
 800a840:	4b32      	ldr	r3, [pc, #200]	; (800a90c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800a842:	4299      	cmp	r1, r3
 800a844:	d052      	beq.n	800a8ec <HAL_DMAEx_MultiBufferStart_IT+0x264>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4619      	mov	r1, r3
 800a84c:	4b30      	ldr	r3, [pc, #192]	; (800a910 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800a84e:	4299      	cmp	r1, r3
 800a850:	d04a      	beq.n	800a8e8 <HAL_DMAEx_MultiBufferStart_IT+0x260>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4619      	mov	r1, r3
 800a858:	4b2e      	ldr	r3, [pc, #184]	; (800a914 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800a85a:	4299      	cmp	r1, r3
 800a85c:	d041      	beq.n	800a8e2 <HAL_DMAEx_MultiBufferStart_IT+0x25a>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4619      	mov	r1, r3
 800a864:	4b2c      	ldr	r3, [pc, #176]	; (800a918 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800a866:	4299      	cmp	r1, r3
 800a868:	d038      	beq.n	800a8dc <HAL_DMAEx_MultiBufferStart_IT+0x254>
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4619      	mov	r1, r3
 800a870:	4b2a      	ldr	r3, [pc, #168]	; (800a91c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800a872:	4299      	cmp	r1, r3
 800a874:	d02f      	beq.n	800a8d6 <HAL_DMAEx_MultiBufferStart_IT+0x24e>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4619      	mov	r1, r3
 800a87c:	4b28      	ldr	r3, [pc, #160]	; (800a920 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800a87e:	4299      	cmp	r1, r3
 800a880:	d026      	beq.n	800a8d0 <HAL_DMAEx_MultiBufferStart_IT+0x248>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4619      	mov	r1, r3
 800a888:	4b26      	ldr	r3, [pc, #152]	; (800a924 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800a88a:	4299      	cmp	r1, r3
 800a88c:	d01d      	beq.n	800a8ca <HAL_DMAEx_MultiBufferStart_IT+0x242>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4619      	mov	r1, r3
 800a894:	4b24      	ldr	r3, [pc, #144]	; (800a928 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800a896:	4299      	cmp	r1, r3
 800a898:	d014      	beq.n	800a8c4 <HAL_DMAEx_MultiBufferStart_IT+0x23c>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4619      	mov	r1, r3
 800a8a0:	4b22      	ldr	r3, [pc, #136]	; (800a92c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800a8a2:	4299      	cmp	r1, r3
 800a8a4:	d00b      	beq.n	800a8be <HAL_DMAEx_MultiBufferStart_IT+0x236>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	4b20      	ldr	r3, [pc, #128]	; (800a930 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 800a8ae:	4299      	cmp	r1, r3
 800a8b0:	d102      	bne.n	800a8b8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 800a8b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a8b6:	e01e      	b.n	800a8f6 <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 800a8b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a8bc:	e01b      	b.n	800a8f6 <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 800a8be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a8c2:	e018      	b.n	800a8f6 <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 800a8c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a8c8:	e015      	b.n	800a8f6 <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 800a8ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a8ce:	e012      	b.n	800a8f6 <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 800a8d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8d4:	e00f      	b.n	800a8f6 <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 800a8d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8da:	e00c      	b.n	800a8f6 <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 800a8dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8e0:	e009      	b.n	800a8f6 <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 800a8e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8e6:	e006      	b.n	800a8f6 <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 800a8e8:	2320      	movs	r3, #32
 800a8ea:	e004      	b.n	800a8f6 <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 800a8ec:	2320      	movs	r3, #32
 800a8ee:	e002      	b.n	800a8f6 <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 800a8f0:	2320      	movs	r3, #32
 800a8f2:	e000      	b.n	800a8f6 <HAL_DMAEx_MultiBufferStart_IT+0x26e>
 800a8f4:	2320      	movs	r3, #32
 800a8f6:	6093      	str	r3, [r2, #8]
 800a8f8:	e11a      	b.n	800ab30 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800a8fa:	bf00      	nop
 800a8fc:	40026458 	.word	0x40026458
 800a900:	40026400 	.word	0x40026400
 800a904:	40026010 	.word	0x40026010
 800a908:	40026410 	.word	0x40026410
 800a90c:	40026070 	.word	0x40026070
 800a910:	40026470 	.word	0x40026470
 800a914:	40026028 	.word	0x40026028
 800a918:	40026428 	.word	0x40026428
 800a91c:	40026088 	.word	0x40026088
 800a920:	40026488 	.word	0x40026488
 800a924:	40026040 	.word	0x40026040
 800a928:	40026440 	.word	0x40026440
 800a92c:	400260a0 	.word	0x400260a0
 800a930:	400264a0 	.word	0x400264a0
 800a934:	400260b8 	.word	0x400260b8
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	461a      	mov	r2, r3
 800a93e:	4b6d      	ldr	r3, [pc, #436]	; (800aaf4 <HAL_DMAEx_MultiBufferStart_IT+0x46c>)
 800a940:	429a      	cmp	r2, r3
 800a942:	d96c      	bls.n	800aa1e <HAL_DMAEx_MultiBufferStart_IT+0x396>
 800a944:	4a6c      	ldr	r2, [pc, #432]	; (800aaf8 <HAL_DMAEx_MultiBufferStart_IT+0x470>)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4619      	mov	r1, r3
 800a94c:	4b6b      	ldr	r3, [pc, #428]	; (800aafc <HAL_DMAEx_MultiBufferStart_IT+0x474>)
 800a94e:	4299      	cmp	r1, r3
 800a950:	d062      	beq.n	800aa18 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4619      	mov	r1, r3
 800a958:	4b69      	ldr	r3, [pc, #420]	; (800ab00 <HAL_DMAEx_MultiBufferStart_IT+0x478>)
 800a95a:	4299      	cmp	r1, r3
 800a95c:	d05a      	beq.n	800aa14 <HAL_DMAEx_MultiBufferStart_IT+0x38c>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4619      	mov	r1, r3
 800a964:	4b67      	ldr	r3, [pc, #412]	; (800ab04 <HAL_DMAEx_MultiBufferStart_IT+0x47c>)
 800a966:	4299      	cmp	r1, r3
 800a968:	d052      	beq.n	800aa10 <HAL_DMAEx_MultiBufferStart_IT+0x388>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4619      	mov	r1, r3
 800a970:	4b65      	ldr	r3, [pc, #404]	; (800ab08 <HAL_DMAEx_MultiBufferStart_IT+0x480>)
 800a972:	4299      	cmp	r1, r3
 800a974:	d04a      	beq.n	800aa0c <HAL_DMAEx_MultiBufferStart_IT+0x384>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4619      	mov	r1, r3
 800a97c:	4b63      	ldr	r3, [pc, #396]	; (800ab0c <HAL_DMAEx_MultiBufferStart_IT+0x484>)
 800a97e:	4299      	cmp	r1, r3
 800a980:	d041      	beq.n	800aa06 <HAL_DMAEx_MultiBufferStart_IT+0x37e>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4619      	mov	r1, r3
 800a988:	4b61      	ldr	r3, [pc, #388]	; (800ab10 <HAL_DMAEx_MultiBufferStart_IT+0x488>)
 800a98a:	4299      	cmp	r1, r3
 800a98c:	d038      	beq.n	800aa00 <HAL_DMAEx_MultiBufferStart_IT+0x378>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4619      	mov	r1, r3
 800a994:	4b5f      	ldr	r3, [pc, #380]	; (800ab14 <HAL_DMAEx_MultiBufferStart_IT+0x48c>)
 800a996:	4299      	cmp	r1, r3
 800a998:	d02f      	beq.n	800a9fa <HAL_DMAEx_MultiBufferStart_IT+0x372>
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	4b5d      	ldr	r3, [pc, #372]	; (800ab18 <HAL_DMAEx_MultiBufferStart_IT+0x490>)
 800a9a2:	4299      	cmp	r1, r3
 800a9a4:	d026      	beq.n	800a9f4 <HAL_DMAEx_MultiBufferStart_IT+0x36c>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	4b5b      	ldr	r3, [pc, #364]	; (800ab1c <HAL_DMAEx_MultiBufferStart_IT+0x494>)
 800a9ae:	4299      	cmp	r1, r3
 800a9b0:	d01d      	beq.n	800a9ee <HAL_DMAEx_MultiBufferStart_IT+0x366>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	4b59      	ldr	r3, [pc, #356]	; (800ab20 <HAL_DMAEx_MultiBufferStart_IT+0x498>)
 800a9ba:	4299      	cmp	r1, r3
 800a9bc:	d014      	beq.n	800a9e8 <HAL_DMAEx_MultiBufferStart_IT+0x360>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	4b57      	ldr	r3, [pc, #348]	; (800ab24 <HAL_DMAEx_MultiBufferStart_IT+0x49c>)
 800a9c6:	4299      	cmp	r1, r3
 800a9c8:	d00b      	beq.n	800a9e2 <HAL_DMAEx_MultiBufferStart_IT+0x35a>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4b55      	ldr	r3, [pc, #340]	; (800ab28 <HAL_DMAEx_MultiBufferStart_IT+0x4a0>)
 800a9d2:	4299      	cmp	r1, r3
 800a9d4:	d102      	bne.n	800a9dc <HAL_DMAEx_MultiBufferStart_IT+0x354>
 800a9d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a9da:	e01e      	b.n	800aa1a <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800a9dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9e0:	e01b      	b.n	800aa1a <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800a9e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a9e6:	e018      	b.n	800aa1a <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800a9e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a9ec:	e015      	b.n	800aa1a <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800a9ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a9f2:	e012      	b.n	800aa1a <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800a9f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9f8:	e00f      	b.n	800aa1a <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800a9fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9fe:	e00c      	b.n	800aa1a <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800aa00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa04:	e009      	b.n	800aa1a <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800aa06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa0a:	e006      	b.n	800aa1a <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800aa0c:	2320      	movs	r3, #32
 800aa0e:	e004      	b.n	800aa1a <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800aa10:	2320      	movs	r3, #32
 800aa12:	e002      	b.n	800aa1a <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800aa14:	2320      	movs	r3, #32
 800aa16:	e000      	b.n	800aa1a <HAL_DMAEx_MultiBufferStart_IT+0x392>
 800aa18:	2320      	movs	r3, #32
 800aa1a:	60d3      	str	r3, [r2, #12]
 800aa1c:	e088      	b.n	800ab30 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800aa1e:	4a36      	ldr	r2, [pc, #216]	; (800aaf8 <HAL_DMAEx_MultiBufferStart_IT+0x470>)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4619      	mov	r1, r3
 800aa26:	4b35      	ldr	r3, [pc, #212]	; (800aafc <HAL_DMAEx_MultiBufferStart_IT+0x474>)
 800aa28:	4299      	cmp	r1, r3
 800aa2a:	d07f      	beq.n	800ab2c <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4619      	mov	r1, r3
 800aa32:	4b33      	ldr	r3, [pc, #204]	; (800ab00 <HAL_DMAEx_MultiBufferStart_IT+0x478>)
 800aa34:	4299      	cmp	r1, r3
 800aa36:	d05a      	beq.n	800aaee <HAL_DMAEx_MultiBufferStart_IT+0x466>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4b31      	ldr	r3, [pc, #196]	; (800ab04 <HAL_DMAEx_MultiBufferStart_IT+0x47c>)
 800aa40:	4299      	cmp	r1, r3
 800aa42:	d052      	beq.n	800aaea <HAL_DMAEx_MultiBufferStart_IT+0x462>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4619      	mov	r1, r3
 800aa4a:	4b2f      	ldr	r3, [pc, #188]	; (800ab08 <HAL_DMAEx_MultiBufferStart_IT+0x480>)
 800aa4c:	4299      	cmp	r1, r3
 800aa4e:	d04a      	beq.n	800aae6 <HAL_DMAEx_MultiBufferStart_IT+0x45e>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4619      	mov	r1, r3
 800aa56:	4b2d      	ldr	r3, [pc, #180]	; (800ab0c <HAL_DMAEx_MultiBufferStart_IT+0x484>)
 800aa58:	4299      	cmp	r1, r3
 800aa5a:	d041      	beq.n	800aae0 <HAL_DMAEx_MultiBufferStart_IT+0x458>
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4619      	mov	r1, r3
 800aa62:	4b2b      	ldr	r3, [pc, #172]	; (800ab10 <HAL_DMAEx_MultiBufferStart_IT+0x488>)
 800aa64:	4299      	cmp	r1, r3
 800aa66:	d038      	beq.n	800aada <HAL_DMAEx_MultiBufferStart_IT+0x452>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	4b29      	ldr	r3, [pc, #164]	; (800ab14 <HAL_DMAEx_MultiBufferStart_IT+0x48c>)
 800aa70:	4299      	cmp	r1, r3
 800aa72:	d02f      	beq.n	800aad4 <HAL_DMAEx_MultiBufferStart_IT+0x44c>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4619      	mov	r1, r3
 800aa7a:	4b27      	ldr	r3, [pc, #156]	; (800ab18 <HAL_DMAEx_MultiBufferStart_IT+0x490>)
 800aa7c:	4299      	cmp	r1, r3
 800aa7e:	d026      	beq.n	800aace <HAL_DMAEx_MultiBufferStart_IT+0x446>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4619      	mov	r1, r3
 800aa86:	4b25      	ldr	r3, [pc, #148]	; (800ab1c <HAL_DMAEx_MultiBufferStart_IT+0x494>)
 800aa88:	4299      	cmp	r1, r3
 800aa8a:	d01d      	beq.n	800aac8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4619      	mov	r1, r3
 800aa92:	4b23      	ldr	r3, [pc, #140]	; (800ab20 <HAL_DMAEx_MultiBufferStart_IT+0x498>)
 800aa94:	4299      	cmp	r1, r3
 800aa96:	d014      	beq.n	800aac2 <HAL_DMAEx_MultiBufferStart_IT+0x43a>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	4b21      	ldr	r3, [pc, #132]	; (800ab24 <HAL_DMAEx_MultiBufferStart_IT+0x49c>)
 800aaa0:	4299      	cmp	r1, r3
 800aaa2:	d00b      	beq.n	800aabc <HAL_DMAEx_MultiBufferStart_IT+0x434>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	4b1f      	ldr	r3, [pc, #124]	; (800ab28 <HAL_DMAEx_MultiBufferStart_IT+0x4a0>)
 800aaac:	4299      	cmp	r1, r3
 800aaae:	d102      	bne.n	800aab6 <HAL_DMAEx_MultiBufferStart_IT+0x42e>
 800aab0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aab4:	e03b      	b.n	800ab2e <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 800aab6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aaba:	e038      	b.n	800ab2e <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 800aabc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aac0:	e035      	b.n	800ab2e <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 800aac2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aac6:	e032      	b.n	800ab2e <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 800aac8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aacc:	e02f      	b.n	800ab2e <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 800aace:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aad2:	e02c      	b.n	800ab2e <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 800aad4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aad8:	e029      	b.n	800ab2e <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 800aada:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aade:	e026      	b.n	800ab2e <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 800aae0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aae4:	e023      	b.n	800ab2e <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 800aae6:	2320      	movs	r3, #32
 800aae8:	e021      	b.n	800ab2e <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 800aaea:	2320      	movs	r3, #32
 800aaec:	e01f      	b.n	800ab2e <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 800aaee:	2320      	movs	r3, #32
 800aaf0:	e01d      	b.n	800ab2e <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 800aaf2:	bf00      	nop
 800aaf4:	40026058 	.word	0x40026058
 800aaf8:	40026000 	.word	0x40026000
 800aafc:	40026010 	.word	0x40026010
 800ab00:	40026410 	.word	0x40026410
 800ab04:	40026070 	.word	0x40026070
 800ab08:	40026470 	.word	0x40026470
 800ab0c:	40026028 	.word	0x40026028
 800ab10:	40026428 	.word	0x40026428
 800ab14:	40026088 	.word	0x40026088
 800ab18:	40026488 	.word	0x40026488
 800ab1c:	40026040 	.word	0x40026040
 800ab20:	40026440 	.word	0x40026440
 800ab24:	400260a0 	.word	0x400260a0
 800ab28:	400264a0 	.word	0x400264a0
 800ab2c:	2320      	movs	r3, #32
 800ab2e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	461a      	mov	r2, r3
 800ab36:	4b72      	ldr	r3, [pc, #456]	; (800ad00 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d96c      	bls.n	800ac16 <HAL_DMAEx_MultiBufferStart_IT+0x58e>
 800ab3c:	4a71      	ldr	r2, [pc, #452]	; (800ad04 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4619      	mov	r1, r3
 800ab44:	4b70      	ldr	r3, [pc, #448]	; (800ad08 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800ab46:	4299      	cmp	r1, r3
 800ab48:	d062      	beq.n	800ac10 <HAL_DMAEx_MultiBufferStart_IT+0x588>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4619      	mov	r1, r3
 800ab50:	4b6e      	ldr	r3, [pc, #440]	; (800ad0c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800ab52:	4299      	cmp	r1, r3
 800ab54:	d05a      	beq.n	800ac0c <HAL_DMAEx_MultiBufferStart_IT+0x584>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	4b6c      	ldr	r3, [pc, #432]	; (800ad10 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800ab5e:	4299      	cmp	r1, r3
 800ab60:	d052      	beq.n	800ac08 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4619      	mov	r1, r3
 800ab68:	4b6a      	ldr	r3, [pc, #424]	; (800ad14 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800ab6a:	4299      	cmp	r1, r3
 800ab6c:	d04a      	beq.n	800ac04 <HAL_DMAEx_MultiBufferStart_IT+0x57c>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4619      	mov	r1, r3
 800ab74:	4b68      	ldr	r3, [pc, #416]	; (800ad18 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800ab76:	4299      	cmp	r1, r3
 800ab78:	d041      	beq.n	800abfe <HAL_DMAEx_MultiBufferStart_IT+0x576>
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4b66      	ldr	r3, [pc, #408]	; (800ad1c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800ab82:	4299      	cmp	r1, r3
 800ab84:	d038      	beq.n	800abf8 <HAL_DMAEx_MultiBufferStart_IT+0x570>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4b64      	ldr	r3, [pc, #400]	; (800ad20 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800ab8e:	4299      	cmp	r1, r3
 800ab90:	d02f      	beq.n	800abf2 <HAL_DMAEx_MultiBufferStart_IT+0x56a>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4619      	mov	r1, r3
 800ab98:	4b62      	ldr	r3, [pc, #392]	; (800ad24 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800ab9a:	4299      	cmp	r1, r3
 800ab9c:	d026      	beq.n	800abec <HAL_DMAEx_MultiBufferStart_IT+0x564>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4619      	mov	r1, r3
 800aba4:	4b60      	ldr	r3, [pc, #384]	; (800ad28 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 800aba6:	4299      	cmp	r1, r3
 800aba8:	d01d      	beq.n	800abe6 <HAL_DMAEx_MultiBufferStart_IT+0x55e>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4619      	mov	r1, r3
 800abb0:	4b5e      	ldr	r3, [pc, #376]	; (800ad2c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800abb2:	4299      	cmp	r1, r3
 800abb4:	d014      	beq.n	800abe0 <HAL_DMAEx_MultiBufferStart_IT+0x558>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4619      	mov	r1, r3
 800abbc:	4b5c      	ldr	r3, [pc, #368]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 800abbe:	4299      	cmp	r1, r3
 800abc0:	d00b      	beq.n	800abda <HAL_DMAEx_MultiBufferStart_IT+0x552>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4619      	mov	r1, r3
 800abc8:	4b5a      	ldr	r3, [pc, #360]	; (800ad34 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800abca:	4299      	cmp	r1, r3
 800abcc:	d102      	bne.n	800abd4 <HAL_DMAEx_MultiBufferStart_IT+0x54c>
 800abce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800abd2:	e01e      	b.n	800ac12 <HAL_DMAEx_MultiBufferStart_IT+0x58a>
 800abd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800abd8:	e01b      	b.n	800ac12 <HAL_DMAEx_MultiBufferStart_IT+0x58a>
 800abda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800abde:	e018      	b.n	800ac12 <HAL_DMAEx_MultiBufferStart_IT+0x58a>
 800abe0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800abe4:	e015      	b.n	800ac12 <HAL_DMAEx_MultiBufferStart_IT+0x58a>
 800abe6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800abea:	e012      	b.n	800ac12 <HAL_DMAEx_MultiBufferStart_IT+0x58a>
 800abec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abf0:	e00f      	b.n	800ac12 <HAL_DMAEx_MultiBufferStart_IT+0x58a>
 800abf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abf6:	e00c      	b.n	800ac12 <HAL_DMAEx_MultiBufferStart_IT+0x58a>
 800abf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abfc:	e009      	b.n	800ac12 <HAL_DMAEx_MultiBufferStart_IT+0x58a>
 800abfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac02:	e006      	b.n	800ac12 <HAL_DMAEx_MultiBufferStart_IT+0x58a>
 800ac04:	2310      	movs	r3, #16
 800ac06:	e004      	b.n	800ac12 <HAL_DMAEx_MultiBufferStart_IT+0x58a>
 800ac08:	2310      	movs	r3, #16
 800ac0a:	e002      	b.n	800ac12 <HAL_DMAEx_MultiBufferStart_IT+0x58a>
 800ac0c:	2310      	movs	r3, #16
 800ac0e:	e000      	b.n	800ac12 <HAL_DMAEx_MultiBufferStart_IT+0x58a>
 800ac10:	2310      	movs	r3, #16
 800ac12:	60d3      	str	r3, [r2, #12]
 800ac14:	e18e      	b.n	800af34 <HAL_DMAEx_MultiBufferStart_IT+0x8ac>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	4b46      	ldr	r3, [pc, #280]	; (800ad38 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	f240 808c 	bls.w	800ad3c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800ac24:	4a37      	ldr	r2, [pc, #220]	; (800ad04 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4b36      	ldr	r3, [pc, #216]	; (800ad08 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800ac2e:	4299      	cmp	r1, r3
 800ac30:	d062      	beq.n	800acf8 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4619      	mov	r1, r3
 800ac38:	4b34      	ldr	r3, [pc, #208]	; (800ad0c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800ac3a:	4299      	cmp	r1, r3
 800ac3c:	d05a      	beq.n	800acf4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4619      	mov	r1, r3
 800ac44:	4b32      	ldr	r3, [pc, #200]	; (800ad10 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800ac46:	4299      	cmp	r1, r3
 800ac48:	d052      	beq.n	800acf0 <HAL_DMAEx_MultiBufferStart_IT+0x668>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4b30      	ldr	r3, [pc, #192]	; (800ad14 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800ac52:	4299      	cmp	r1, r3
 800ac54:	d04a      	beq.n	800acec <HAL_DMAEx_MultiBufferStart_IT+0x664>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4b2e      	ldr	r3, [pc, #184]	; (800ad18 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800ac5e:	4299      	cmp	r1, r3
 800ac60:	d041      	beq.n	800ace6 <HAL_DMAEx_MultiBufferStart_IT+0x65e>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4619      	mov	r1, r3
 800ac68:	4b2c      	ldr	r3, [pc, #176]	; (800ad1c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800ac6a:	4299      	cmp	r1, r3
 800ac6c:	d038      	beq.n	800ace0 <HAL_DMAEx_MultiBufferStart_IT+0x658>
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4619      	mov	r1, r3
 800ac74:	4b2a      	ldr	r3, [pc, #168]	; (800ad20 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800ac76:	4299      	cmp	r1, r3
 800ac78:	d02f      	beq.n	800acda <HAL_DMAEx_MultiBufferStart_IT+0x652>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	4b28      	ldr	r3, [pc, #160]	; (800ad24 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800ac82:	4299      	cmp	r1, r3
 800ac84:	d026      	beq.n	800acd4 <HAL_DMAEx_MultiBufferStart_IT+0x64c>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	4b26      	ldr	r3, [pc, #152]	; (800ad28 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 800ac8e:	4299      	cmp	r1, r3
 800ac90:	d01d      	beq.n	800acce <HAL_DMAEx_MultiBufferStart_IT+0x646>
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4619      	mov	r1, r3
 800ac98:	4b24      	ldr	r3, [pc, #144]	; (800ad2c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800ac9a:	4299      	cmp	r1, r3
 800ac9c:	d014      	beq.n	800acc8 <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4619      	mov	r1, r3
 800aca4:	4b22      	ldr	r3, [pc, #136]	; (800ad30 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 800aca6:	4299      	cmp	r1, r3
 800aca8:	d00b      	beq.n	800acc2 <HAL_DMAEx_MultiBufferStart_IT+0x63a>
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4619      	mov	r1, r3
 800acb0:	4b20      	ldr	r3, [pc, #128]	; (800ad34 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800acb2:	4299      	cmp	r1, r3
 800acb4:	d102      	bne.n	800acbc <HAL_DMAEx_MultiBufferStart_IT+0x634>
 800acb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800acba:	e01e      	b.n	800acfa <HAL_DMAEx_MultiBufferStart_IT+0x672>
 800acbc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800acc0:	e01b      	b.n	800acfa <HAL_DMAEx_MultiBufferStart_IT+0x672>
 800acc2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800acc6:	e018      	b.n	800acfa <HAL_DMAEx_MultiBufferStart_IT+0x672>
 800acc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800accc:	e015      	b.n	800acfa <HAL_DMAEx_MultiBufferStart_IT+0x672>
 800acce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800acd2:	e012      	b.n	800acfa <HAL_DMAEx_MultiBufferStart_IT+0x672>
 800acd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acd8:	e00f      	b.n	800acfa <HAL_DMAEx_MultiBufferStart_IT+0x672>
 800acda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acde:	e00c      	b.n	800acfa <HAL_DMAEx_MultiBufferStart_IT+0x672>
 800ace0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ace4:	e009      	b.n	800acfa <HAL_DMAEx_MultiBufferStart_IT+0x672>
 800ace6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acea:	e006      	b.n	800acfa <HAL_DMAEx_MultiBufferStart_IT+0x672>
 800acec:	2310      	movs	r3, #16
 800acee:	e004      	b.n	800acfa <HAL_DMAEx_MultiBufferStart_IT+0x672>
 800acf0:	2310      	movs	r3, #16
 800acf2:	e002      	b.n	800acfa <HAL_DMAEx_MultiBufferStart_IT+0x672>
 800acf4:	2310      	movs	r3, #16
 800acf6:	e000      	b.n	800acfa <HAL_DMAEx_MultiBufferStart_IT+0x672>
 800acf8:	2310      	movs	r3, #16
 800acfa:	6093      	str	r3, [r2, #8]
 800acfc:	e11a      	b.n	800af34 <HAL_DMAEx_MultiBufferStart_IT+0x8ac>
 800acfe:	bf00      	nop
 800ad00:	40026458 	.word	0x40026458
 800ad04:	40026400 	.word	0x40026400
 800ad08:	40026010 	.word	0x40026010
 800ad0c:	40026410 	.word	0x40026410
 800ad10:	40026070 	.word	0x40026070
 800ad14:	40026470 	.word	0x40026470
 800ad18:	40026028 	.word	0x40026028
 800ad1c:	40026428 	.word	0x40026428
 800ad20:	40026088 	.word	0x40026088
 800ad24:	40026488 	.word	0x40026488
 800ad28:	40026040 	.word	0x40026040
 800ad2c:	40026440 	.word	0x40026440
 800ad30:	400260a0 	.word	0x400260a0
 800ad34:	400264a0 	.word	0x400264a0
 800ad38:	400260b8 	.word	0x400260b8
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	461a      	mov	r2, r3
 800ad42:	4b6d      	ldr	r3, [pc, #436]	; (800aef8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d96c      	bls.n	800ae22 <HAL_DMAEx_MultiBufferStart_IT+0x79a>
 800ad48:	4a6c      	ldr	r2, [pc, #432]	; (800aefc <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4b6b      	ldr	r3, [pc, #428]	; (800af00 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800ad52:	4299      	cmp	r1, r3
 800ad54:	d062      	beq.n	800ae1c <HAL_DMAEx_MultiBufferStart_IT+0x794>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	4b69      	ldr	r3, [pc, #420]	; (800af04 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800ad5e:	4299      	cmp	r1, r3
 800ad60:	d05a      	beq.n	800ae18 <HAL_DMAEx_MultiBufferStart_IT+0x790>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4619      	mov	r1, r3
 800ad68:	4b67      	ldr	r3, [pc, #412]	; (800af08 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800ad6a:	4299      	cmp	r1, r3
 800ad6c:	d052      	beq.n	800ae14 <HAL_DMAEx_MultiBufferStart_IT+0x78c>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4619      	mov	r1, r3
 800ad74:	4b65      	ldr	r3, [pc, #404]	; (800af0c <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800ad76:	4299      	cmp	r1, r3
 800ad78:	d04a      	beq.n	800ae10 <HAL_DMAEx_MultiBufferStart_IT+0x788>
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	4b63      	ldr	r3, [pc, #396]	; (800af10 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 800ad82:	4299      	cmp	r1, r3
 800ad84:	d041      	beq.n	800ae0a <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	4b61      	ldr	r3, [pc, #388]	; (800af14 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 800ad8e:	4299      	cmp	r1, r3
 800ad90:	d038      	beq.n	800ae04 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4619      	mov	r1, r3
 800ad98:	4b5f      	ldr	r3, [pc, #380]	; (800af18 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 800ad9a:	4299      	cmp	r1, r3
 800ad9c:	d02f      	beq.n	800adfe <HAL_DMAEx_MultiBufferStart_IT+0x776>
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4619      	mov	r1, r3
 800ada4:	4b5d      	ldr	r3, [pc, #372]	; (800af1c <HAL_DMAEx_MultiBufferStart_IT+0x894>)
 800ada6:	4299      	cmp	r1, r3
 800ada8:	d026      	beq.n	800adf8 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4619      	mov	r1, r3
 800adb0:	4b5b      	ldr	r3, [pc, #364]	; (800af20 <HAL_DMAEx_MultiBufferStart_IT+0x898>)
 800adb2:	4299      	cmp	r1, r3
 800adb4:	d01d      	beq.n	800adf2 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4619      	mov	r1, r3
 800adbc:	4b59      	ldr	r3, [pc, #356]	; (800af24 <HAL_DMAEx_MultiBufferStart_IT+0x89c>)
 800adbe:	4299      	cmp	r1, r3
 800adc0:	d014      	beq.n	800adec <HAL_DMAEx_MultiBufferStart_IT+0x764>
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4619      	mov	r1, r3
 800adc8:	4b57      	ldr	r3, [pc, #348]	; (800af28 <HAL_DMAEx_MultiBufferStart_IT+0x8a0>)
 800adca:	4299      	cmp	r1, r3
 800adcc:	d00b      	beq.n	800ade6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4619      	mov	r1, r3
 800add4:	4b55      	ldr	r3, [pc, #340]	; (800af2c <HAL_DMAEx_MultiBufferStart_IT+0x8a4>)
 800add6:	4299      	cmp	r1, r3
 800add8:	d102      	bne.n	800ade0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800adda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800adde:	e01e      	b.n	800ae1e <HAL_DMAEx_MultiBufferStart_IT+0x796>
 800ade0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ade4:	e01b      	b.n	800ae1e <HAL_DMAEx_MultiBufferStart_IT+0x796>
 800ade6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800adea:	e018      	b.n	800ae1e <HAL_DMAEx_MultiBufferStart_IT+0x796>
 800adec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800adf0:	e015      	b.n	800ae1e <HAL_DMAEx_MultiBufferStart_IT+0x796>
 800adf2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800adf6:	e012      	b.n	800ae1e <HAL_DMAEx_MultiBufferStart_IT+0x796>
 800adf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adfc:	e00f      	b.n	800ae1e <HAL_DMAEx_MultiBufferStart_IT+0x796>
 800adfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae02:	e00c      	b.n	800ae1e <HAL_DMAEx_MultiBufferStart_IT+0x796>
 800ae04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae08:	e009      	b.n	800ae1e <HAL_DMAEx_MultiBufferStart_IT+0x796>
 800ae0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae0e:	e006      	b.n	800ae1e <HAL_DMAEx_MultiBufferStart_IT+0x796>
 800ae10:	2310      	movs	r3, #16
 800ae12:	e004      	b.n	800ae1e <HAL_DMAEx_MultiBufferStart_IT+0x796>
 800ae14:	2310      	movs	r3, #16
 800ae16:	e002      	b.n	800ae1e <HAL_DMAEx_MultiBufferStart_IT+0x796>
 800ae18:	2310      	movs	r3, #16
 800ae1a:	e000      	b.n	800ae1e <HAL_DMAEx_MultiBufferStart_IT+0x796>
 800ae1c:	2310      	movs	r3, #16
 800ae1e:	60d3      	str	r3, [r2, #12]
 800ae20:	e088      	b.n	800af34 <HAL_DMAEx_MultiBufferStart_IT+0x8ac>
 800ae22:	4a36      	ldr	r2, [pc, #216]	; (800aefc <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	4b35      	ldr	r3, [pc, #212]	; (800af00 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800ae2c:	4299      	cmp	r1, r3
 800ae2e:	d07f      	beq.n	800af30 <HAL_DMAEx_MultiBufferStart_IT+0x8a8>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4619      	mov	r1, r3
 800ae36:	4b33      	ldr	r3, [pc, #204]	; (800af04 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800ae38:	4299      	cmp	r1, r3
 800ae3a:	d05a      	beq.n	800aef2 <HAL_DMAEx_MultiBufferStart_IT+0x86a>
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4619      	mov	r1, r3
 800ae42:	4b31      	ldr	r3, [pc, #196]	; (800af08 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800ae44:	4299      	cmp	r1, r3
 800ae46:	d052      	beq.n	800aeee <HAL_DMAEx_MultiBufferStart_IT+0x866>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4b2f      	ldr	r3, [pc, #188]	; (800af0c <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800ae50:	4299      	cmp	r1, r3
 800ae52:	d04a      	beq.n	800aeea <HAL_DMAEx_MultiBufferStart_IT+0x862>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	4b2d      	ldr	r3, [pc, #180]	; (800af10 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 800ae5c:	4299      	cmp	r1, r3
 800ae5e:	d041      	beq.n	800aee4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4619      	mov	r1, r3
 800ae66:	4b2b      	ldr	r3, [pc, #172]	; (800af14 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 800ae68:	4299      	cmp	r1, r3
 800ae6a:	d038      	beq.n	800aede <HAL_DMAEx_MultiBufferStart_IT+0x856>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4619      	mov	r1, r3
 800ae72:	4b29      	ldr	r3, [pc, #164]	; (800af18 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 800ae74:	4299      	cmp	r1, r3
 800ae76:	d02f      	beq.n	800aed8 <HAL_DMAEx_MultiBufferStart_IT+0x850>
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	4b27      	ldr	r3, [pc, #156]	; (800af1c <HAL_DMAEx_MultiBufferStart_IT+0x894>)
 800ae80:	4299      	cmp	r1, r3
 800ae82:	d026      	beq.n	800aed2 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4619      	mov	r1, r3
 800ae8a:	4b25      	ldr	r3, [pc, #148]	; (800af20 <HAL_DMAEx_MultiBufferStart_IT+0x898>)
 800ae8c:	4299      	cmp	r1, r3
 800ae8e:	d01d      	beq.n	800aecc <HAL_DMAEx_MultiBufferStart_IT+0x844>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4619      	mov	r1, r3
 800ae96:	4b23      	ldr	r3, [pc, #140]	; (800af24 <HAL_DMAEx_MultiBufferStart_IT+0x89c>)
 800ae98:	4299      	cmp	r1, r3
 800ae9a:	d014      	beq.n	800aec6 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4619      	mov	r1, r3
 800aea2:	4b21      	ldr	r3, [pc, #132]	; (800af28 <HAL_DMAEx_MultiBufferStart_IT+0x8a0>)
 800aea4:	4299      	cmp	r1, r3
 800aea6:	d00b      	beq.n	800aec0 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4619      	mov	r1, r3
 800aeae:	4b1f      	ldr	r3, [pc, #124]	; (800af2c <HAL_DMAEx_MultiBufferStart_IT+0x8a4>)
 800aeb0:	4299      	cmp	r1, r3
 800aeb2:	d102      	bne.n	800aeba <HAL_DMAEx_MultiBufferStart_IT+0x832>
 800aeb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aeb8:	e03b      	b.n	800af32 <HAL_DMAEx_MultiBufferStart_IT+0x8aa>
 800aeba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800aebe:	e038      	b.n	800af32 <HAL_DMAEx_MultiBufferStart_IT+0x8aa>
 800aec0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aec4:	e035      	b.n	800af32 <HAL_DMAEx_MultiBufferStart_IT+0x8aa>
 800aec6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aeca:	e032      	b.n	800af32 <HAL_DMAEx_MultiBufferStart_IT+0x8aa>
 800aecc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aed0:	e02f      	b.n	800af32 <HAL_DMAEx_MultiBufferStart_IT+0x8aa>
 800aed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aed6:	e02c      	b.n	800af32 <HAL_DMAEx_MultiBufferStart_IT+0x8aa>
 800aed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aedc:	e029      	b.n	800af32 <HAL_DMAEx_MultiBufferStart_IT+0x8aa>
 800aede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aee2:	e026      	b.n	800af32 <HAL_DMAEx_MultiBufferStart_IT+0x8aa>
 800aee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aee8:	e023      	b.n	800af32 <HAL_DMAEx_MultiBufferStart_IT+0x8aa>
 800aeea:	2310      	movs	r3, #16
 800aeec:	e021      	b.n	800af32 <HAL_DMAEx_MultiBufferStart_IT+0x8aa>
 800aeee:	2310      	movs	r3, #16
 800aef0:	e01f      	b.n	800af32 <HAL_DMAEx_MultiBufferStart_IT+0x8aa>
 800aef2:	2310      	movs	r3, #16
 800aef4:	e01d      	b.n	800af32 <HAL_DMAEx_MultiBufferStart_IT+0x8aa>
 800aef6:	bf00      	nop
 800aef8:	40026058 	.word	0x40026058
 800aefc:	40026000 	.word	0x40026000
 800af00:	40026010 	.word	0x40026010
 800af04:	40026410 	.word	0x40026410
 800af08:	40026070 	.word	0x40026070
 800af0c:	40026470 	.word	0x40026470
 800af10:	40026028 	.word	0x40026028
 800af14:	40026428 	.word	0x40026428
 800af18:	40026088 	.word	0x40026088
 800af1c:	40026488 	.word	0x40026488
 800af20:	40026040 	.word	0x40026040
 800af24:	40026440 	.word	0x40026440
 800af28:	400260a0 	.word	0x400260a0
 800af2c:	400264a0 	.word	0x400264a0
 800af30:	2310      	movs	r3, #16
 800af32:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	461a      	mov	r2, r3
 800af3a:	4b72      	ldr	r3, [pc, #456]	; (800b104 <HAL_DMAEx_MultiBufferStart_IT+0xa7c>)
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d96c      	bls.n	800b01a <HAL_DMAEx_MultiBufferStart_IT+0x992>
 800af40:	4a71      	ldr	r2, [pc, #452]	; (800b108 <HAL_DMAEx_MultiBufferStart_IT+0xa80>)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4619      	mov	r1, r3
 800af48:	4b70      	ldr	r3, [pc, #448]	; (800b10c <HAL_DMAEx_MultiBufferStart_IT+0xa84>)
 800af4a:	4299      	cmp	r1, r3
 800af4c:	d062      	beq.n	800b014 <HAL_DMAEx_MultiBufferStart_IT+0x98c>
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4619      	mov	r1, r3
 800af54:	4b6e      	ldr	r3, [pc, #440]	; (800b110 <HAL_DMAEx_MultiBufferStart_IT+0xa88>)
 800af56:	4299      	cmp	r1, r3
 800af58:	d05a      	beq.n	800b010 <HAL_DMAEx_MultiBufferStart_IT+0x988>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4619      	mov	r1, r3
 800af60:	4b6c      	ldr	r3, [pc, #432]	; (800b114 <HAL_DMAEx_MultiBufferStart_IT+0xa8c>)
 800af62:	4299      	cmp	r1, r3
 800af64:	d052      	beq.n	800b00c <HAL_DMAEx_MultiBufferStart_IT+0x984>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4619      	mov	r1, r3
 800af6c:	4b6a      	ldr	r3, [pc, #424]	; (800b118 <HAL_DMAEx_MultiBufferStart_IT+0xa90>)
 800af6e:	4299      	cmp	r1, r3
 800af70:	d04a      	beq.n	800b008 <HAL_DMAEx_MultiBufferStart_IT+0x980>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4619      	mov	r1, r3
 800af78:	4b68      	ldr	r3, [pc, #416]	; (800b11c <HAL_DMAEx_MultiBufferStart_IT+0xa94>)
 800af7a:	4299      	cmp	r1, r3
 800af7c:	d041      	beq.n	800b002 <HAL_DMAEx_MultiBufferStart_IT+0x97a>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4619      	mov	r1, r3
 800af84:	4b66      	ldr	r3, [pc, #408]	; (800b120 <HAL_DMAEx_MultiBufferStart_IT+0xa98>)
 800af86:	4299      	cmp	r1, r3
 800af88:	d038      	beq.n	800affc <HAL_DMAEx_MultiBufferStart_IT+0x974>
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4619      	mov	r1, r3
 800af90:	4b64      	ldr	r3, [pc, #400]	; (800b124 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 800af92:	4299      	cmp	r1, r3
 800af94:	d02f      	beq.n	800aff6 <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4619      	mov	r1, r3
 800af9c:	4b62      	ldr	r3, [pc, #392]	; (800b128 <HAL_DMAEx_MultiBufferStart_IT+0xaa0>)
 800af9e:	4299      	cmp	r1, r3
 800afa0:	d026      	beq.n	800aff0 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4619      	mov	r1, r3
 800afa8:	4b60      	ldr	r3, [pc, #384]	; (800b12c <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 800afaa:	4299      	cmp	r1, r3
 800afac:	d01d      	beq.n	800afea <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4619      	mov	r1, r3
 800afb4:	4b5e      	ldr	r3, [pc, #376]	; (800b130 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 800afb6:	4299      	cmp	r1, r3
 800afb8:	d014      	beq.n	800afe4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4619      	mov	r1, r3
 800afc0:	4b5c      	ldr	r3, [pc, #368]	; (800b134 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 800afc2:	4299      	cmp	r1, r3
 800afc4:	d00b      	beq.n	800afde <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4619      	mov	r1, r3
 800afcc:	4b5a      	ldr	r3, [pc, #360]	; (800b138 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 800afce:	4299      	cmp	r1, r3
 800afd0:	d102      	bne.n	800afd8 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800afd2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800afd6:	e01e      	b.n	800b016 <HAL_DMAEx_MultiBufferStart_IT+0x98e>
 800afd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afdc:	e01b      	b.n	800b016 <HAL_DMAEx_MultiBufferStart_IT+0x98e>
 800afde:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800afe2:	e018      	b.n	800b016 <HAL_DMAEx_MultiBufferStart_IT+0x98e>
 800afe4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800afe8:	e015      	b.n	800b016 <HAL_DMAEx_MultiBufferStart_IT+0x98e>
 800afea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800afee:	e012      	b.n	800b016 <HAL_DMAEx_MultiBufferStart_IT+0x98e>
 800aff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aff4:	e00f      	b.n	800b016 <HAL_DMAEx_MultiBufferStart_IT+0x98e>
 800aff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800affa:	e00c      	b.n	800b016 <HAL_DMAEx_MultiBufferStart_IT+0x98e>
 800affc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b000:	e009      	b.n	800b016 <HAL_DMAEx_MultiBufferStart_IT+0x98e>
 800b002:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b006:	e006      	b.n	800b016 <HAL_DMAEx_MultiBufferStart_IT+0x98e>
 800b008:	2308      	movs	r3, #8
 800b00a:	e004      	b.n	800b016 <HAL_DMAEx_MultiBufferStart_IT+0x98e>
 800b00c:	2308      	movs	r3, #8
 800b00e:	e002      	b.n	800b016 <HAL_DMAEx_MultiBufferStart_IT+0x98e>
 800b010:	2308      	movs	r3, #8
 800b012:	e000      	b.n	800b016 <HAL_DMAEx_MultiBufferStart_IT+0x98e>
 800b014:	2308      	movs	r3, #8
 800b016:	60d3      	str	r3, [r2, #12]
 800b018:	e18e      	b.n	800b338 <HAL_DMAEx_MultiBufferStart_IT+0xcb0>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	461a      	mov	r2, r3
 800b020:	4b46      	ldr	r3, [pc, #280]	; (800b13c <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 800b022:	429a      	cmp	r2, r3
 800b024:	f240 808c 	bls.w	800b140 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 800b028:	4a37      	ldr	r2, [pc, #220]	; (800b108 <HAL_DMAEx_MultiBufferStart_IT+0xa80>)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4619      	mov	r1, r3
 800b030:	4b36      	ldr	r3, [pc, #216]	; (800b10c <HAL_DMAEx_MultiBufferStart_IT+0xa84>)
 800b032:	4299      	cmp	r1, r3
 800b034:	d062      	beq.n	800b0fc <HAL_DMAEx_MultiBufferStart_IT+0xa74>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4619      	mov	r1, r3
 800b03c:	4b34      	ldr	r3, [pc, #208]	; (800b110 <HAL_DMAEx_MultiBufferStart_IT+0xa88>)
 800b03e:	4299      	cmp	r1, r3
 800b040:	d05a      	beq.n	800b0f8 <HAL_DMAEx_MultiBufferStart_IT+0xa70>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4619      	mov	r1, r3
 800b048:	4b32      	ldr	r3, [pc, #200]	; (800b114 <HAL_DMAEx_MultiBufferStart_IT+0xa8c>)
 800b04a:	4299      	cmp	r1, r3
 800b04c:	d052      	beq.n	800b0f4 <HAL_DMAEx_MultiBufferStart_IT+0xa6c>
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4619      	mov	r1, r3
 800b054:	4b30      	ldr	r3, [pc, #192]	; (800b118 <HAL_DMAEx_MultiBufferStart_IT+0xa90>)
 800b056:	4299      	cmp	r1, r3
 800b058:	d04a      	beq.n	800b0f0 <HAL_DMAEx_MultiBufferStart_IT+0xa68>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4619      	mov	r1, r3
 800b060:	4b2e      	ldr	r3, [pc, #184]	; (800b11c <HAL_DMAEx_MultiBufferStart_IT+0xa94>)
 800b062:	4299      	cmp	r1, r3
 800b064:	d041      	beq.n	800b0ea <HAL_DMAEx_MultiBufferStart_IT+0xa62>
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4619      	mov	r1, r3
 800b06c:	4b2c      	ldr	r3, [pc, #176]	; (800b120 <HAL_DMAEx_MultiBufferStart_IT+0xa98>)
 800b06e:	4299      	cmp	r1, r3
 800b070:	d038      	beq.n	800b0e4 <HAL_DMAEx_MultiBufferStart_IT+0xa5c>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4619      	mov	r1, r3
 800b078:	4b2a      	ldr	r3, [pc, #168]	; (800b124 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 800b07a:	4299      	cmp	r1, r3
 800b07c:	d02f      	beq.n	800b0de <HAL_DMAEx_MultiBufferStart_IT+0xa56>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4619      	mov	r1, r3
 800b084:	4b28      	ldr	r3, [pc, #160]	; (800b128 <HAL_DMAEx_MultiBufferStart_IT+0xaa0>)
 800b086:	4299      	cmp	r1, r3
 800b088:	d026      	beq.n	800b0d8 <HAL_DMAEx_MultiBufferStart_IT+0xa50>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4619      	mov	r1, r3
 800b090:	4b26      	ldr	r3, [pc, #152]	; (800b12c <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 800b092:	4299      	cmp	r1, r3
 800b094:	d01d      	beq.n	800b0d2 <HAL_DMAEx_MultiBufferStart_IT+0xa4a>
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4619      	mov	r1, r3
 800b09c:	4b24      	ldr	r3, [pc, #144]	; (800b130 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 800b09e:	4299      	cmp	r1, r3
 800b0a0:	d014      	beq.n	800b0cc <HAL_DMAEx_MultiBufferStart_IT+0xa44>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	4b22      	ldr	r3, [pc, #136]	; (800b134 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 800b0aa:	4299      	cmp	r1, r3
 800b0ac:	d00b      	beq.n	800b0c6 <HAL_DMAEx_MultiBufferStart_IT+0xa3e>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	4b20      	ldr	r3, [pc, #128]	; (800b138 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 800b0b6:	4299      	cmp	r1, r3
 800b0b8:	d102      	bne.n	800b0c0 <HAL_DMAEx_MultiBufferStart_IT+0xa38>
 800b0ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b0be:	e01e      	b.n	800b0fe <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 800b0c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0c4:	e01b      	b.n	800b0fe <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 800b0c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b0ca:	e018      	b.n	800b0fe <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 800b0cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b0d0:	e015      	b.n	800b0fe <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 800b0d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b0d6:	e012      	b.n	800b0fe <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 800b0d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0dc:	e00f      	b.n	800b0fe <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 800b0de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0e2:	e00c      	b.n	800b0fe <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 800b0e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0e8:	e009      	b.n	800b0fe <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 800b0ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0ee:	e006      	b.n	800b0fe <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 800b0f0:	2308      	movs	r3, #8
 800b0f2:	e004      	b.n	800b0fe <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 800b0f4:	2308      	movs	r3, #8
 800b0f6:	e002      	b.n	800b0fe <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 800b0f8:	2308      	movs	r3, #8
 800b0fa:	e000      	b.n	800b0fe <HAL_DMAEx_MultiBufferStart_IT+0xa76>
 800b0fc:	2308      	movs	r3, #8
 800b0fe:	6093      	str	r3, [r2, #8]
 800b100:	e11a      	b.n	800b338 <HAL_DMAEx_MultiBufferStart_IT+0xcb0>
 800b102:	bf00      	nop
 800b104:	40026458 	.word	0x40026458
 800b108:	40026400 	.word	0x40026400
 800b10c:	40026010 	.word	0x40026010
 800b110:	40026410 	.word	0x40026410
 800b114:	40026070 	.word	0x40026070
 800b118:	40026470 	.word	0x40026470
 800b11c:	40026028 	.word	0x40026028
 800b120:	40026428 	.word	0x40026428
 800b124:	40026088 	.word	0x40026088
 800b128:	40026488 	.word	0x40026488
 800b12c:	40026040 	.word	0x40026040
 800b130:	40026440 	.word	0x40026440
 800b134:	400260a0 	.word	0x400260a0
 800b138:	400264a0 	.word	0x400264a0
 800b13c:	400260b8 	.word	0x400260b8
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	461a      	mov	r2, r3
 800b146:	4b6d      	ldr	r3, [pc, #436]	; (800b2fc <HAL_DMAEx_MultiBufferStart_IT+0xc74>)
 800b148:	429a      	cmp	r2, r3
 800b14a:	d96c      	bls.n	800b226 <HAL_DMAEx_MultiBufferStart_IT+0xb9e>
 800b14c:	4a6c      	ldr	r2, [pc, #432]	; (800b300 <HAL_DMAEx_MultiBufferStart_IT+0xc78>)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4619      	mov	r1, r3
 800b154:	4b6b      	ldr	r3, [pc, #428]	; (800b304 <HAL_DMAEx_MultiBufferStart_IT+0xc7c>)
 800b156:	4299      	cmp	r1, r3
 800b158:	d062      	beq.n	800b220 <HAL_DMAEx_MultiBufferStart_IT+0xb98>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4619      	mov	r1, r3
 800b160:	4b69      	ldr	r3, [pc, #420]	; (800b308 <HAL_DMAEx_MultiBufferStart_IT+0xc80>)
 800b162:	4299      	cmp	r1, r3
 800b164:	d05a      	beq.n	800b21c <HAL_DMAEx_MultiBufferStart_IT+0xb94>
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4619      	mov	r1, r3
 800b16c:	4b67      	ldr	r3, [pc, #412]	; (800b30c <HAL_DMAEx_MultiBufferStart_IT+0xc84>)
 800b16e:	4299      	cmp	r1, r3
 800b170:	d052      	beq.n	800b218 <HAL_DMAEx_MultiBufferStart_IT+0xb90>
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4619      	mov	r1, r3
 800b178:	4b65      	ldr	r3, [pc, #404]	; (800b310 <HAL_DMAEx_MultiBufferStart_IT+0xc88>)
 800b17a:	4299      	cmp	r1, r3
 800b17c:	d04a      	beq.n	800b214 <HAL_DMAEx_MultiBufferStart_IT+0xb8c>
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4619      	mov	r1, r3
 800b184:	4b63      	ldr	r3, [pc, #396]	; (800b314 <HAL_DMAEx_MultiBufferStart_IT+0xc8c>)
 800b186:	4299      	cmp	r1, r3
 800b188:	d041      	beq.n	800b20e <HAL_DMAEx_MultiBufferStart_IT+0xb86>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4619      	mov	r1, r3
 800b190:	4b61      	ldr	r3, [pc, #388]	; (800b318 <HAL_DMAEx_MultiBufferStart_IT+0xc90>)
 800b192:	4299      	cmp	r1, r3
 800b194:	d038      	beq.n	800b208 <HAL_DMAEx_MultiBufferStart_IT+0xb80>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4619      	mov	r1, r3
 800b19c:	4b5f      	ldr	r3, [pc, #380]	; (800b31c <HAL_DMAEx_MultiBufferStart_IT+0xc94>)
 800b19e:	4299      	cmp	r1, r3
 800b1a0:	d02f      	beq.n	800b202 <HAL_DMAEx_MultiBufferStart_IT+0xb7a>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	4b5d      	ldr	r3, [pc, #372]	; (800b320 <HAL_DMAEx_MultiBufferStart_IT+0xc98>)
 800b1aa:	4299      	cmp	r1, r3
 800b1ac:	d026      	beq.n	800b1fc <HAL_DMAEx_MultiBufferStart_IT+0xb74>
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	4b5b      	ldr	r3, [pc, #364]	; (800b324 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>)
 800b1b6:	4299      	cmp	r1, r3
 800b1b8:	d01d      	beq.n	800b1f6 <HAL_DMAEx_MultiBufferStart_IT+0xb6e>
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	4b59      	ldr	r3, [pc, #356]	; (800b328 <HAL_DMAEx_MultiBufferStart_IT+0xca0>)
 800b1c2:	4299      	cmp	r1, r3
 800b1c4:	d014      	beq.n	800b1f0 <HAL_DMAEx_MultiBufferStart_IT+0xb68>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	4b57      	ldr	r3, [pc, #348]	; (800b32c <HAL_DMAEx_MultiBufferStart_IT+0xca4>)
 800b1ce:	4299      	cmp	r1, r3
 800b1d0:	d00b      	beq.n	800b1ea <HAL_DMAEx_MultiBufferStart_IT+0xb62>
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	4b55      	ldr	r3, [pc, #340]	; (800b330 <HAL_DMAEx_MultiBufferStart_IT+0xca8>)
 800b1da:	4299      	cmp	r1, r3
 800b1dc:	d102      	bne.n	800b1e4 <HAL_DMAEx_MultiBufferStart_IT+0xb5c>
 800b1de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1e2:	e01e      	b.n	800b222 <HAL_DMAEx_MultiBufferStart_IT+0xb9a>
 800b1e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1e8:	e01b      	b.n	800b222 <HAL_DMAEx_MultiBufferStart_IT+0xb9a>
 800b1ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1ee:	e018      	b.n	800b222 <HAL_DMAEx_MultiBufferStart_IT+0xb9a>
 800b1f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1f4:	e015      	b.n	800b222 <HAL_DMAEx_MultiBufferStart_IT+0xb9a>
 800b1f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1fa:	e012      	b.n	800b222 <HAL_DMAEx_MultiBufferStart_IT+0xb9a>
 800b1fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b200:	e00f      	b.n	800b222 <HAL_DMAEx_MultiBufferStart_IT+0xb9a>
 800b202:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b206:	e00c      	b.n	800b222 <HAL_DMAEx_MultiBufferStart_IT+0xb9a>
 800b208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b20c:	e009      	b.n	800b222 <HAL_DMAEx_MultiBufferStart_IT+0xb9a>
 800b20e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b212:	e006      	b.n	800b222 <HAL_DMAEx_MultiBufferStart_IT+0xb9a>
 800b214:	2308      	movs	r3, #8
 800b216:	e004      	b.n	800b222 <HAL_DMAEx_MultiBufferStart_IT+0xb9a>
 800b218:	2308      	movs	r3, #8
 800b21a:	e002      	b.n	800b222 <HAL_DMAEx_MultiBufferStart_IT+0xb9a>
 800b21c:	2308      	movs	r3, #8
 800b21e:	e000      	b.n	800b222 <HAL_DMAEx_MultiBufferStart_IT+0xb9a>
 800b220:	2308      	movs	r3, #8
 800b222:	60d3      	str	r3, [r2, #12]
 800b224:	e088      	b.n	800b338 <HAL_DMAEx_MultiBufferStart_IT+0xcb0>
 800b226:	4a36      	ldr	r2, [pc, #216]	; (800b300 <HAL_DMAEx_MultiBufferStart_IT+0xc78>)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4619      	mov	r1, r3
 800b22e:	4b35      	ldr	r3, [pc, #212]	; (800b304 <HAL_DMAEx_MultiBufferStart_IT+0xc7c>)
 800b230:	4299      	cmp	r1, r3
 800b232:	d07f      	beq.n	800b334 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4619      	mov	r1, r3
 800b23a:	4b33      	ldr	r3, [pc, #204]	; (800b308 <HAL_DMAEx_MultiBufferStart_IT+0xc80>)
 800b23c:	4299      	cmp	r1, r3
 800b23e:	d05a      	beq.n	800b2f6 <HAL_DMAEx_MultiBufferStart_IT+0xc6e>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4619      	mov	r1, r3
 800b246:	4b31      	ldr	r3, [pc, #196]	; (800b30c <HAL_DMAEx_MultiBufferStart_IT+0xc84>)
 800b248:	4299      	cmp	r1, r3
 800b24a:	d052      	beq.n	800b2f2 <HAL_DMAEx_MultiBufferStart_IT+0xc6a>
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4619      	mov	r1, r3
 800b252:	4b2f      	ldr	r3, [pc, #188]	; (800b310 <HAL_DMAEx_MultiBufferStart_IT+0xc88>)
 800b254:	4299      	cmp	r1, r3
 800b256:	d04a      	beq.n	800b2ee <HAL_DMAEx_MultiBufferStart_IT+0xc66>
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4619      	mov	r1, r3
 800b25e:	4b2d      	ldr	r3, [pc, #180]	; (800b314 <HAL_DMAEx_MultiBufferStart_IT+0xc8c>)
 800b260:	4299      	cmp	r1, r3
 800b262:	d041      	beq.n	800b2e8 <HAL_DMAEx_MultiBufferStart_IT+0xc60>
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4619      	mov	r1, r3
 800b26a:	4b2b      	ldr	r3, [pc, #172]	; (800b318 <HAL_DMAEx_MultiBufferStart_IT+0xc90>)
 800b26c:	4299      	cmp	r1, r3
 800b26e:	d038      	beq.n	800b2e2 <HAL_DMAEx_MultiBufferStart_IT+0xc5a>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4619      	mov	r1, r3
 800b276:	4b29      	ldr	r3, [pc, #164]	; (800b31c <HAL_DMAEx_MultiBufferStart_IT+0xc94>)
 800b278:	4299      	cmp	r1, r3
 800b27a:	d02f      	beq.n	800b2dc <HAL_DMAEx_MultiBufferStart_IT+0xc54>
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4619      	mov	r1, r3
 800b282:	4b27      	ldr	r3, [pc, #156]	; (800b320 <HAL_DMAEx_MultiBufferStart_IT+0xc98>)
 800b284:	4299      	cmp	r1, r3
 800b286:	d026      	beq.n	800b2d6 <HAL_DMAEx_MultiBufferStart_IT+0xc4e>
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4619      	mov	r1, r3
 800b28e:	4b25      	ldr	r3, [pc, #148]	; (800b324 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>)
 800b290:	4299      	cmp	r1, r3
 800b292:	d01d      	beq.n	800b2d0 <HAL_DMAEx_MultiBufferStart_IT+0xc48>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4619      	mov	r1, r3
 800b29a:	4b23      	ldr	r3, [pc, #140]	; (800b328 <HAL_DMAEx_MultiBufferStart_IT+0xca0>)
 800b29c:	4299      	cmp	r1, r3
 800b29e:	d014      	beq.n	800b2ca <HAL_DMAEx_MultiBufferStart_IT+0xc42>
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4b21      	ldr	r3, [pc, #132]	; (800b32c <HAL_DMAEx_MultiBufferStart_IT+0xca4>)
 800b2a8:	4299      	cmp	r1, r3
 800b2aa:	d00b      	beq.n	800b2c4 <HAL_DMAEx_MultiBufferStart_IT+0xc3c>
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	4b1f      	ldr	r3, [pc, #124]	; (800b330 <HAL_DMAEx_MultiBufferStart_IT+0xca8>)
 800b2b4:	4299      	cmp	r1, r3
 800b2b6:	d102      	bne.n	800b2be <HAL_DMAEx_MultiBufferStart_IT+0xc36>
 800b2b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b2bc:	e03b      	b.n	800b336 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800b2be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2c2:	e038      	b.n	800b336 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800b2c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b2c8:	e035      	b.n	800b336 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800b2ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b2ce:	e032      	b.n	800b336 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800b2d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b2d4:	e02f      	b.n	800b336 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800b2d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2da:	e02c      	b.n	800b336 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800b2dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2e0:	e029      	b.n	800b336 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800b2e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2e6:	e026      	b.n	800b336 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800b2e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2ec:	e023      	b.n	800b336 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800b2ee:	2308      	movs	r3, #8
 800b2f0:	e021      	b.n	800b336 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800b2f2:	2308      	movs	r3, #8
 800b2f4:	e01f      	b.n	800b336 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800b2f6:	2308      	movs	r3, #8
 800b2f8:	e01d      	b.n	800b336 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800b2fa:	bf00      	nop
 800b2fc:	40026058 	.word	0x40026058
 800b300:	40026000 	.word	0x40026000
 800b304:	40026010 	.word	0x40026010
 800b308:	40026410 	.word	0x40026410
 800b30c:	40026070 	.word	0x40026070
 800b310:	40026470 	.word	0x40026470
 800b314:	40026028 	.word	0x40026028
 800b318:	40026428 	.word	0x40026428
 800b31c:	40026088 	.word	0x40026088
 800b320:	40026488 	.word	0x40026488
 800b324:	40026040 	.word	0x40026040
 800b328:	40026440 	.word	0x40026440
 800b32c:	400260a0 	.word	0x400260a0
 800b330:	400264a0 	.word	0x400264a0
 800b334:	2308      	movs	r3, #8
 800b336:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	461a      	mov	r2, r3
 800b33e:	4b72      	ldr	r3, [pc, #456]	; (800b508 <HAL_DMAEx_MultiBufferStart_IT+0xe80>)
 800b340:	429a      	cmp	r2, r3
 800b342:	d96c      	bls.n	800b41e <HAL_DMAEx_MultiBufferStart_IT+0xd96>
 800b344:	4a71      	ldr	r2, [pc, #452]	; (800b50c <HAL_DMAEx_MultiBufferStart_IT+0xe84>)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4619      	mov	r1, r3
 800b34c:	4b70      	ldr	r3, [pc, #448]	; (800b510 <HAL_DMAEx_MultiBufferStart_IT+0xe88>)
 800b34e:	4299      	cmp	r1, r3
 800b350:	d062      	beq.n	800b418 <HAL_DMAEx_MultiBufferStart_IT+0xd90>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4619      	mov	r1, r3
 800b358:	4b6e      	ldr	r3, [pc, #440]	; (800b514 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>)
 800b35a:	4299      	cmp	r1, r3
 800b35c:	d05a      	beq.n	800b414 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4619      	mov	r1, r3
 800b364:	4b6c      	ldr	r3, [pc, #432]	; (800b518 <HAL_DMAEx_MultiBufferStart_IT+0xe90>)
 800b366:	4299      	cmp	r1, r3
 800b368:	d052      	beq.n	800b410 <HAL_DMAEx_MultiBufferStart_IT+0xd88>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4619      	mov	r1, r3
 800b370:	4b6a      	ldr	r3, [pc, #424]	; (800b51c <HAL_DMAEx_MultiBufferStart_IT+0xe94>)
 800b372:	4299      	cmp	r1, r3
 800b374:	d04a      	beq.n	800b40c <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4619      	mov	r1, r3
 800b37c:	4b68      	ldr	r3, [pc, #416]	; (800b520 <HAL_DMAEx_MultiBufferStart_IT+0xe98>)
 800b37e:	4299      	cmp	r1, r3
 800b380:	d041      	beq.n	800b406 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4619      	mov	r1, r3
 800b388:	4b66      	ldr	r3, [pc, #408]	; (800b524 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>)
 800b38a:	4299      	cmp	r1, r3
 800b38c:	d038      	beq.n	800b400 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4619      	mov	r1, r3
 800b394:	4b64      	ldr	r3, [pc, #400]	; (800b528 <HAL_DMAEx_MultiBufferStart_IT+0xea0>)
 800b396:	4299      	cmp	r1, r3
 800b398:	d02f      	beq.n	800b3fa <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	4b62      	ldr	r3, [pc, #392]	; (800b52c <HAL_DMAEx_MultiBufferStart_IT+0xea4>)
 800b3a2:	4299      	cmp	r1, r3
 800b3a4:	d026      	beq.n	800b3f4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	4b60      	ldr	r3, [pc, #384]	; (800b530 <HAL_DMAEx_MultiBufferStart_IT+0xea8>)
 800b3ae:	4299      	cmp	r1, r3
 800b3b0:	d01d      	beq.n	800b3ee <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4b5e      	ldr	r3, [pc, #376]	; (800b534 <HAL_DMAEx_MultiBufferStart_IT+0xeac>)
 800b3ba:	4299      	cmp	r1, r3
 800b3bc:	d014      	beq.n	800b3e8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	4b5c      	ldr	r3, [pc, #368]	; (800b538 <HAL_DMAEx_MultiBufferStart_IT+0xeb0>)
 800b3c6:	4299      	cmp	r1, r3
 800b3c8:	d00b      	beq.n	800b3e2 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4b5a      	ldr	r3, [pc, #360]	; (800b53c <HAL_DMAEx_MultiBufferStart_IT+0xeb4>)
 800b3d2:	4299      	cmp	r1, r3
 800b3d4:	d102      	bne.n	800b3dc <HAL_DMAEx_MultiBufferStart_IT+0xd54>
 800b3d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b3da:	e01e      	b.n	800b41a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800b3dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b3e0:	e01b      	b.n	800b41a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800b3e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b3e6:	e018      	b.n	800b41a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800b3e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b3ec:	e015      	b.n	800b41a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800b3ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b3f2:	e012      	b.n	800b41a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800b3f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3f8:	e00f      	b.n	800b41a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800b3fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3fe:	e00c      	b.n	800b41a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800b400:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b404:	e009      	b.n	800b41a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800b406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b40a:	e006      	b.n	800b41a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800b40c:	4b4c      	ldr	r3, [pc, #304]	; (800b540 <HAL_DMAEx_MultiBufferStart_IT+0xeb8>)
 800b40e:	e004      	b.n	800b41a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800b410:	4b4b      	ldr	r3, [pc, #300]	; (800b540 <HAL_DMAEx_MultiBufferStart_IT+0xeb8>)
 800b412:	e002      	b.n	800b41a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800b414:	4b4a      	ldr	r3, [pc, #296]	; (800b540 <HAL_DMAEx_MultiBufferStart_IT+0xeb8>)
 800b416:	e000      	b.n	800b41a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800b418:	4b49      	ldr	r3, [pc, #292]	; (800b540 <HAL_DMAEx_MultiBufferStart_IT+0xeb8>)
 800b41a:	60d3      	str	r3, [r2, #12]
 800b41c:	e192      	b.n	800b744 <HAL_DMAEx_MultiBufferStart_IT+0x10bc>
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	461a      	mov	r2, r3
 800b424:	4b47      	ldr	r3, [pc, #284]	; (800b544 <HAL_DMAEx_MultiBufferStart_IT+0xebc>)
 800b426:	429a      	cmp	r2, r3
 800b428:	f240 808e 	bls.w	800b548 <HAL_DMAEx_MultiBufferStart_IT+0xec0>
 800b42c:	4a37      	ldr	r2, [pc, #220]	; (800b50c <HAL_DMAEx_MultiBufferStart_IT+0xe84>)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4619      	mov	r1, r3
 800b434:	4b36      	ldr	r3, [pc, #216]	; (800b510 <HAL_DMAEx_MultiBufferStart_IT+0xe88>)
 800b436:	4299      	cmp	r1, r3
 800b438:	d062      	beq.n	800b500 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4619      	mov	r1, r3
 800b440:	4b34      	ldr	r3, [pc, #208]	; (800b514 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>)
 800b442:	4299      	cmp	r1, r3
 800b444:	d05a      	beq.n	800b4fc <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4619      	mov	r1, r3
 800b44c:	4b32      	ldr	r3, [pc, #200]	; (800b518 <HAL_DMAEx_MultiBufferStart_IT+0xe90>)
 800b44e:	4299      	cmp	r1, r3
 800b450:	d052      	beq.n	800b4f8 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4619      	mov	r1, r3
 800b458:	4b30      	ldr	r3, [pc, #192]	; (800b51c <HAL_DMAEx_MultiBufferStart_IT+0xe94>)
 800b45a:	4299      	cmp	r1, r3
 800b45c:	d04a      	beq.n	800b4f4 <HAL_DMAEx_MultiBufferStart_IT+0xe6c>
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4619      	mov	r1, r3
 800b464:	4b2e      	ldr	r3, [pc, #184]	; (800b520 <HAL_DMAEx_MultiBufferStart_IT+0xe98>)
 800b466:	4299      	cmp	r1, r3
 800b468:	d041      	beq.n	800b4ee <HAL_DMAEx_MultiBufferStart_IT+0xe66>
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4619      	mov	r1, r3
 800b470:	4b2c      	ldr	r3, [pc, #176]	; (800b524 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>)
 800b472:	4299      	cmp	r1, r3
 800b474:	d038      	beq.n	800b4e8 <HAL_DMAEx_MultiBufferStart_IT+0xe60>
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4619      	mov	r1, r3
 800b47c:	4b2a      	ldr	r3, [pc, #168]	; (800b528 <HAL_DMAEx_MultiBufferStart_IT+0xea0>)
 800b47e:	4299      	cmp	r1, r3
 800b480:	d02f      	beq.n	800b4e2 <HAL_DMAEx_MultiBufferStart_IT+0xe5a>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4619      	mov	r1, r3
 800b488:	4b28      	ldr	r3, [pc, #160]	; (800b52c <HAL_DMAEx_MultiBufferStart_IT+0xea4>)
 800b48a:	4299      	cmp	r1, r3
 800b48c:	d026      	beq.n	800b4dc <HAL_DMAEx_MultiBufferStart_IT+0xe54>
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4619      	mov	r1, r3
 800b494:	4b26      	ldr	r3, [pc, #152]	; (800b530 <HAL_DMAEx_MultiBufferStart_IT+0xea8>)
 800b496:	4299      	cmp	r1, r3
 800b498:	d01d      	beq.n	800b4d6 <HAL_DMAEx_MultiBufferStart_IT+0xe4e>
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4619      	mov	r1, r3
 800b4a0:	4b24      	ldr	r3, [pc, #144]	; (800b534 <HAL_DMAEx_MultiBufferStart_IT+0xeac>)
 800b4a2:	4299      	cmp	r1, r3
 800b4a4:	d014      	beq.n	800b4d0 <HAL_DMAEx_MultiBufferStart_IT+0xe48>
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	4b22      	ldr	r3, [pc, #136]	; (800b538 <HAL_DMAEx_MultiBufferStart_IT+0xeb0>)
 800b4ae:	4299      	cmp	r1, r3
 800b4b0:	d00b      	beq.n	800b4ca <HAL_DMAEx_MultiBufferStart_IT+0xe42>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	4b20      	ldr	r3, [pc, #128]	; (800b53c <HAL_DMAEx_MultiBufferStart_IT+0xeb4>)
 800b4ba:	4299      	cmp	r1, r3
 800b4bc:	d102      	bne.n	800b4c4 <HAL_DMAEx_MultiBufferStart_IT+0xe3c>
 800b4be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b4c2:	e01e      	b.n	800b502 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800b4c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b4c8:	e01b      	b.n	800b502 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800b4ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b4ce:	e018      	b.n	800b502 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800b4d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b4d4:	e015      	b.n	800b502 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800b4d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b4da:	e012      	b.n	800b502 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800b4dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4e0:	e00f      	b.n	800b502 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800b4e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4e6:	e00c      	b.n	800b502 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800b4e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4ec:	e009      	b.n	800b502 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800b4ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4f2:	e006      	b.n	800b502 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800b4f4:	4b12      	ldr	r3, [pc, #72]	; (800b540 <HAL_DMAEx_MultiBufferStart_IT+0xeb8>)
 800b4f6:	e004      	b.n	800b502 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800b4f8:	4b11      	ldr	r3, [pc, #68]	; (800b540 <HAL_DMAEx_MultiBufferStart_IT+0xeb8>)
 800b4fa:	e002      	b.n	800b502 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800b4fc:	4b10      	ldr	r3, [pc, #64]	; (800b540 <HAL_DMAEx_MultiBufferStart_IT+0xeb8>)
 800b4fe:	e000      	b.n	800b502 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800b500:	4b0f      	ldr	r3, [pc, #60]	; (800b540 <HAL_DMAEx_MultiBufferStart_IT+0xeb8>)
 800b502:	6093      	str	r3, [r2, #8]
 800b504:	e11e      	b.n	800b744 <HAL_DMAEx_MultiBufferStart_IT+0x10bc>
 800b506:	bf00      	nop
 800b508:	40026458 	.word	0x40026458
 800b50c:	40026400 	.word	0x40026400
 800b510:	40026010 	.word	0x40026010
 800b514:	40026410 	.word	0x40026410
 800b518:	40026070 	.word	0x40026070
 800b51c:	40026470 	.word	0x40026470
 800b520:	40026028 	.word	0x40026028
 800b524:	40026428 	.word	0x40026428
 800b528:	40026088 	.word	0x40026088
 800b52c:	40026488 	.word	0x40026488
 800b530:	40026040 	.word	0x40026040
 800b534:	40026440 	.word	0x40026440
 800b538:	400260a0 	.word	0x400260a0
 800b53c:	400264a0 	.word	0x400264a0
 800b540:	00800004 	.word	0x00800004
 800b544:	400260b8 	.word	0x400260b8
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	461a      	mov	r2, r3
 800b54e:	4b6d      	ldr	r3, [pc, #436]	; (800b704 <HAL_DMAEx_MultiBufferStart_IT+0x107c>)
 800b550:	429a      	cmp	r2, r3
 800b552:	d96c      	bls.n	800b62e <HAL_DMAEx_MultiBufferStart_IT+0xfa6>
 800b554:	4a6c      	ldr	r2, [pc, #432]	; (800b708 <HAL_DMAEx_MultiBufferStart_IT+0x1080>)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4619      	mov	r1, r3
 800b55c:	4b6b      	ldr	r3, [pc, #428]	; (800b70c <HAL_DMAEx_MultiBufferStart_IT+0x1084>)
 800b55e:	4299      	cmp	r1, r3
 800b560:	d062      	beq.n	800b628 <HAL_DMAEx_MultiBufferStart_IT+0xfa0>
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4619      	mov	r1, r3
 800b568:	4b69      	ldr	r3, [pc, #420]	; (800b710 <HAL_DMAEx_MultiBufferStart_IT+0x1088>)
 800b56a:	4299      	cmp	r1, r3
 800b56c:	d05a      	beq.n	800b624 <HAL_DMAEx_MultiBufferStart_IT+0xf9c>
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4619      	mov	r1, r3
 800b574:	4b67      	ldr	r3, [pc, #412]	; (800b714 <HAL_DMAEx_MultiBufferStart_IT+0x108c>)
 800b576:	4299      	cmp	r1, r3
 800b578:	d052      	beq.n	800b620 <HAL_DMAEx_MultiBufferStart_IT+0xf98>
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4619      	mov	r1, r3
 800b580:	4b65      	ldr	r3, [pc, #404]	; (800b718 <HAL_DMAEx_MultiBufferStart_IT+0x1090>)
 800b582:	4299      	cmp	r1, r3
 800b584:	d04a      	beq.n	800b61c <HAL_DMAEx_MultiBufferStart_IT+0xf94>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4619      	mov	r1, r3
 800b58c:	4b63      	ldr	r3, [pc, #396]	; (800b71c <HAL_DMAEx_MultiBufferStart_IT+0x1094>)
 800b58e:	4299      	cmp	r1, r3
 800b590:	d041      	beq.n	800b616 <HAL_DMAEx_MultiBufferStart_IT+0xf8e>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4619      	mov	r1, r3
 800b598:	4b61      	ldr	r3, [pc, #388]	; (800b720 <HAL_DMAEx_MultiBufferStart_IT+0x1098>)
 800b59a:	4299      	cmp	r1, r3
 800b59c:	d038      	beq.n	800b610 <HAL_DMAEx_MultiBufferStart_IT+0xf88>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	4b5f      	ldr	r3, [pc, #380]	; (800b724 <HAL_DMAEx_MultiBufferStart_IT+0x109c>)
 800b5a6:	4299      	cmp	r1, r3
 800b5a8:	d02f      	beq.n	800b60a <HAL_DMAEx_MultiBufferStart_IT+0xf82>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	4b5d      	ldr	r3, [pc, #372]	; (800b728 <HAL_DMAEx_MultiBufferStart_IT+0x10a0>)
 800b5b2:	4299      	cmp	r1, r3
 800b5b4:	d026      	beq.n	800b604 <HAL_DMAEx_MultiBufferStart_IT+0xf7c>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	4b5b      	ldr	r3, [pc, #364]	; (800b72c <HAL_DMAEx_MultiBufferStart_IT+0x10a4>)
 800b5be:	4299      	cmp	r1, r3
 800b5c0:	d01d      	beq.n	800b5fe <HAL_DMAEx_MultiBufferStart_IT+0xf76>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	4b59      	ldr	r3, [pc, #356]	; (800b730 <HAL_DMAEx_MultiBufferStart_IT+0x10a8>)
 800b5ca:	4299      	cmp	r1, r3
 800b5cc:	d014      	beq.n	800b5f8 <HAL_DMAEx_MultiBufferStart_IT+0xf70>
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	4b57      	ldr	r3, [pc, #348]	; (800b734 <HAL_DMAEx_MultiBufferStart_IT+0x10ac>)
 800b5d6:	4299      	cmp	r1, r3
 800b5d8:	d00b      	beq.n	800b5f2 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	4b55      	ldr	r3, [pc, #340]	; (800b738 <HAL_DMAEx_MultiBufferStart_IT+0x10b0>)
 800b5e2:	4299      	cmp	r1, r3
 800b5e4:	d102      	bne.n	800b5ec <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800b5e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b5ea:	e01e      	b.n	800b62a <HAL_DMAEx_MultiBufferStart_IT+0xfa2>
 800b5ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b5f0:	e01b      	b.n	800b62a <HAL_DMAEx_MultiBufferStart_IT+0xfa2>
 800b5f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b5f6:	e018      	b.n	800b62a <HAL_DMAEx_MultiBufferStart_IT+0xfa2>
 800b5f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b5fc:	e015      	b.n	800b62a <HAL_DMAEx_MultiBufferStart_IT+0xfa2>
 800b5fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b602:	e012      	b.n	800b62a <HAL_DMAEx_MultiBufferStart_IT+0xfa2>
 800b604:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b608:	e00f      	b.n	800b62a <HAL_DMAEx_MultiBufferStart_IT+0xfa2>
 800b60a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b60e:	e00c      	b.n	800b62a <HAL_DMAEx_MultiBufferStart_IT+0xfa2>
 800b610:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b614:	e009      	b.n	800b62a <HAL_DMAEx_MultiBufferStart_IT+0xfa2>
 800b616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b61a:	e006      	b.n	800b62a <HAL_DMAEx_MultiBufferStart_IT+0xfa2>
 800b61c:	4b47      	ldr	r3, [pc, #284]	; (800b73c <HAL_DMAEx_MultiBufferStart_IT+0x10b4>)
 800b61e:	e004      	b.n	800b62a <HAL_DMAEx_MultiBufferStart_IT+0xfa2>
 800b620:	4b46      	ldr	r3, [pc, #280]	; (800b73c <HAL_DMAEx_MultiBufferStart_IT+0x10b4>)
 800b622:	e002      	b.n	800b62a <HAL_DMAEx_MultiBufferStart_IT+0xfa2>
 800b624:	4b45      	ldr	r3, [pc, #276]	; (800b73c <HAL_DMAEx_MultiBufferStart_IT+0x10b4>)
 800b626:	e000      	b.n	800b62a <HAL_DMAEx_MultiBufferStart_IT+0xfa2>
 800b628:	4b44      	ldr	r3, [pc, #272]	; (800b73c <HAL_DMAEx_MultiBufferStart_IT+0x10b4>)
 800b62a:	60d3      	str	r3, [r2, #12]
 800b62c:	e08a      	b.n	800b744 <HAL_DMAEx_MultiBufferStart_IT+0x10bc>
 800b62e:	4a36      	ldr	r2, [pc, #216]	; (800b708 <HAL_DMAEx_MultiBufferStart_IT+0x1080>)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4619      	mov	r1, r3
 800b636:	4b35      	ldr	r3, [pc, #212]	; (800b70c <HAL_DMAEx_MultiBufferStart_IT+0x1084>)
 800b638:	4299      	cmp	r1, r3
 800b63a:	f000 8081 	beq.w	800b740 <HAL_DMAEx_MultiBufferStart_IT+0x10b8>
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4619      	mov	r1, r3
 800b644:	4b32      	ldr	r3, [pc, #200]	; (800b710 <HAL_DMAEx_MultiBufferStart_IT+0x1088>)
 800b646:	4299      	cmp	r1, r3
 800b648:	d05a      	beq.n	800b700 <HAL_DMAEx_MultiBufferStart_IT+0x1078>
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4619      	mov	r1, r3
 800b650:	4b30      	ldr	r3, [pc, #192]	; (800b714 <HAL_DMAEx_MultiBufferStart_IT+0x108c>)
 800b652:	4299      	cmp	r1, r3
 800b654:	d052      	beq.n	800b6fc <HAL_DMAEx_MultiBufferStart_IT+0x1074>
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4619      	mov	r1, r3
 800b65c:	4b2e      	ldr	r3, [pc, #184]	; (800b718 <HAL_DMAEx_MultiBufferStart_IT+0x1090>)
 800b65e:	4299      	cmp	r1, r3
 800b660:	d04a      	beq.n	800b6f8 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4619      	mov	r1, r3
 800b668:	4b2c      	ldr	r3, [pc, #176]	; (800b71c <HAL_DMAEx_MultiBufferStart_IT+0x1094>)
 800b66a:	4299      	cmp	r1, r3
 800b66c:	d041      	beq.n	800b6f2 <HAL_DMAEx_MultiBufferStart_IT+0x106a>
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4619      	mov	r1, r3
 800b674:	4b2a      	ldr	r3, [pc, #168]	; (800b720 <HAL_DMAEx_MultiBufferStart_IT+0x1098>)
 800b676:	4299      	cmp	r1, r3
 800b678:	d038      	beq.n	800b6ec <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4619      	mov	r1, r3
 800b680:	4b28      	ldr	r3, [pc, #160]	; (800b724 <HAL_DMAEx_MultiBufferStart_IT+0x109c>)
 800b682:	4299      	cmp	r1, r3
 800b684:	d02f      	beq.n	800b6e6 <HAL_DMAEx_MultiBufferStart_IT+0x105e>
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4619      	mov	r1, r3
 800b68c:	4b26      	ldr	r3, [pc, #152]	; (800b728 <HAL_DMAEx_MultiBufferStart_IT+0x10a0>)
 800b68e:	4299      	cmp	r1, r3
 800b690:	d026      	beq.n	800b6e0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4619      	mov	r1, r3
 800b698:	4b24      	ldr	r3, [pc, #144]	; (800b72c <HAL_DMAEx_MultiBufferStart_IT+0x10a4>)
 800b69a:	4299      	cmp	r1, r3
 800b69c:	d01d      	beq.n	800b6da <HAL_DMAEx_MultiBufferStart_IT+0x1052>
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	4b22      	ldr	r3, [pc, #136]	; (800b730 <HAL_DMAEx_MultiBufferStart_IT+0x10a8>)
 800b6a6:	4299      	cmp	r1, r3
 800b6a8:	d014      	beq.n	800b6d4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	4b20      	ldr	r3, [pc, #128]	; (800b734 <HAL_DMAEx_MultiBufferStart_IT+0x10ac>)
 800b6b2:	4299      	cmp	r1, r3
 800b6b4:	d00b      	beq.n	800b6ce <HAL_DMAEx_MultiBufferStart_IT+0x1046>
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	4b1e      	ldr	r3, [pc, #120]	; (800b738 <HAL_DMAEx_MultiBufferStart_IT+0x10b0>)
 800b6be:	4299      	cmp	r1, r3
 800b6c0:	d102      	bne.n	800b6c8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>
 800b6c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b6c6:	e03c      	b.n	800b742 <HAL_DMAEx_MultiBufferStart_IT+0x10ba>
 800b6c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6cc:	e039      	b.n	800b742 <HAL_DMAEx_MultiBufferStart_IT+0x10ba>
 800b6ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b6d2:	e036      	b.n	800b742 <HAL_DMAEx_MultiBufferStart_IT+0x10ba>
 800b6d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b6d8:	e033      	b.n	800b742 <HAL_DMAEx_MultiBufferStart_IT+0x10ba>
 800b6da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b6de:	e030      	b.n	800b742 <HAL_DMAEx_MultiBufferStart_IT+0x10ba>
 800b6e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6e4:	e02d      	b.n	800b742 <HAL_DMAEx_MultiBufferStart_IT+0x10ba>
 800b6e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6ea:	e02a      	b.n	800b742 <HAL_DMAEx_MultiBufferStart_IT+0x10ba>
 800b6ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6f0:	e027      	b.n	800b742 <HAL_DMAEx_MultiBufferStart_IT+0x10ba>
 800b6f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6f6:	e024      	b.n	800b742 <HAL_DMAEx_MultiBufferStart_IT+0x10ba>
 800b6f8:	4b10      	ldr	r3, [pc, #64]	; (800b73c <HAL_DMAEx_MultiBufferStart_IT+0x10b4>)
 800b6fa:	e022      	b.n	800b742 <HAL_DMAEx_MultiBufferStart_IT+0x10ba>
 800b6fc:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <HAL_DMAEx_MultiBufferStart_IT+0x10b4>)
 800b6fe:	e020      	b.n	800b742 <HAL_DMAEx_MultiBufferStart_IT+0x10ba>
 800b700:	4b0e      	ldr	r3, [pc, #56]	; (800b73c <HAL_DMAEx_MultiBufferStart_IT+0x10b4>)
 800b702:	e01e      	b.n	800b742 <HAL_DMAEx_MultiBufferStart_IT+0x10ba>
 800b704:	40026058 	.word	0x40026058
 800b708:	40026000 	.word	0x40026000
 800b70c:	40026010 	.word	0x40026010
 800b710:	40026410 	.word	0x40026410
 800b714:	40026070 	.word	0x40026070
 800b718:	40026470 	.word	0x40026470
 800b71c:	40026028 	.word	0x40026028
 800b720:	40026428 	.word	0x40026428
 800b724:	40026088 	.word	0x40026088
 800b728:	40026488 	.word	0x40026488
 800b72c:	40026040 	.word	0x40026040
 800b730:	40026440 	.word	0x40026440
 800b734:	400260a0 	.word	0x400260a0
 800b738:	400264a0 	.word	0x400264a0
 800b73c:	00800004 	.word	0x00800004
 800b740:	4b70      	ldr	r3, [pc, #448]	; (800b904 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800b742:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	461a      	mov	r2, r3
 800b74a:	4b6f      	ldr	r3, [pc, #444]	; (800b908 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d968      	bls.n	800b822 <HAL_DMAEx_MultiBufferStart_IT+0x119a>
 800b750:	4a6e      	ldr	r2, [pc, #440]	; (800b90c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4619      	mov	r1, r3
 800b758:	4b6d      	ldr	r3, [pc, #436]	; (800b910 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800b75a:	4299      	cmp	r1, r3
 800b75c:	d05e      	beq.n	800b81c <HAL_DMAEx_MultiBufferStart_IT+0x1194>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4619      	mov	r1, r3
 800b764:	4b6b      	ldr	r3, [pc, #428]	; (800b914 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800b766:	4299      	cmp	r1, r3
 800b768:	d056      	beq.n	800b818 <HAL_DMAEx_MultiBufferStart_IT+0x1190>
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4619      	mov	r1, r3
 800b770:	4b69      	ldr	r3, [pc, #420]	; (800b918 <HAL_DMAEx_MultiBufferStart_IT+0x1290>)
 800b772:	4299      	cmp	r1, r3
 800b774:	d04e      	beq.n	800b814 <HAL_DMAEx_MultiBufferStart_IT+0x118c>
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4619      	mov	r1, r3
 800b77c:	4b67      	ldr	r3, [pc, #412]	; (800b91c <HAL_DMAEx_MultiBufferStart_IT+0x1294>)
 800b77e:	4299      	cmp	r1, r3
 800b780:	d046      	beq.n	800b810 <HAL_DMAEx_MultiBufferStart_IT+0x1188>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4619      	mov	r1, r3
 800b788:	4b65      	ldr	r3, [pc, #404]	; (800b920 <HAL_DMAEx_MultiBufferStart_IT+0x1298>)
 800b78a:	4299      	cmp	r1, r3
 800b78c:	d03e      	beq.n	800b80c <HAL_DMAEx_MultiBufferStart_IT+0x1184>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4619      	mov	r1, r3
 800b794:	4b63      	ldr	r3, [pc, #396]	; (800b924 <HAL_DMAEx_MultiBufferStart_IT+0x129c>)
 800b796:	4299      	cmp	r1, r3
 800b798:	d036      	beq.n	800b808 <HAL_DMAEx_MultiBufferStart_IT+0x1180>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4619      	mov	r1, r3
 800b7a0:	4b61      	ldr	r3, [pc, #388]	; (800b928 <HAL_DMAEx_MultiBufferStart_IT+0x12a0>)
 800b7a2:	4299      	cmp	r1, r3
 800b7a4:	d02e      	beq.n	800b804 <HAL_DMAEx_MultiBufferStart_IT+0x117c>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	4b5f      	ldr	r3, [pc, #380]	; (800b92c <HAL_DMAEx_MultiBufferStart_IT+0x12a4>)
 800b7ae:	4299      	cmp	r1, r3
 800b7b0:	d026      	beq.n	800b800 <HAL_DMAEx_MultiBufferStart_IT+0x1178>
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	4b5d      	ldr	r3, [pc, #372]	; (800b930 <HAL_DMAEx_MultiBufferStart_IT+0x12a8>)
 800b7ba:	4299      	cmp	r1, r3
 800b7bc:	d01d      	beq.n	800b7fa <HAL_DMAEx_MultiBufferStart_IT+0x1172>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	4b5b      	ldr	r3, [pc, #364]	; (800b934 <HAL_DMAEx_MultiBufferStart_IT+0x12ac>)
 800b7c6:	4299      	cmp	r1, r3
 800b7c8:	d014      	beq.n	800b7f4 <HAL_DMAEx_MultiBufferStart_IT+0x116c>
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	4b59      	ldr	r3, [pc, #356]	; (800b938 <HAL_DMAEx_MultiBufferStart_IT+0x12b0>)
 800b7d2:	4299      	cmp	r1, r3
 800b7d4:	d00b      	beq.n	800b7ee <HAL_DMAEx_MultiBufferStart_IT+0x1166>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4619      	mov	r1, r3
 800b7dc:	4b57      	ldr	r3, [pc, #348]	; (800b93c <HAL_DMAEx_MultiBufferStart_IT+0x12b4>)
 800b7de:	4299      	cmp	r1, r3
 800b7e0:	d102      	bne.n	800b7e8 <HAL_DMAEx_MultiBufferStart_IT+0x1160>
 800b7e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b7e6:	e01a      	b.n	800b81e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 800b7e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b7ec:	e017      	b.n	800b81e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 800b7ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b7f2:	e014      	b.n	800b81e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 800b7f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b7f8:	e011      	b.n	800b81e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 800b7fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b7fe:	e00e      	b.n	800b81e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 800b800:	2340      	movs	r3, #64	; 0x40
 800b802:	e00c      	b.n	800b81e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 800b804:	2340      	movs	r3, #64	; 0x40
 800b806:	e00a      	b.n	800b81e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 800b808:	2340      	movs	r3, #64	; 0x40
 800b80a:	e008      	b.n	800b81e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 800b80c:	2340      	movs	r3, #64	; 0x40
 800b80e:	e006      	b.n	800b81e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 800b810:	4b4b      	ldr	r3, [pc, #300]	; (800b940 <HAL_DMAEx_MultiBufferStart_IT+0x12b8>)
 800b812:	e004      	b.n	800b81e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 800b814:	4b4a      	ldr	r3, [pc, #296]	; (800b940 <HAL_DMAEx_MultiBufferStart_IT+0x12b8>)
 800b816:	e002      	b.n	800b81e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 800b818:	4b49      	ldr	r3, [pc, #292]	; (800b940 <HAL_DMAEx_MultiBufferStart_IT+0x12b8>)
 800b81a:	e000      	b.n	800b81e <HAL_DMAEx_MultiBufferStart_IT+0x1196>
 800b81c:	4b48      	ldr	r3, [pc, #288]	; (800b940 <HAL_DMAEx_MultiBufferStart_IT+0x12b8>)
 800b81e:	60d3      	str	r3, [r2, #12]
 800b820:	e169      	b.n	800baf6 <HAL_DMAEx_MultiBufferStart_IT+0x146e>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	461a      	mov	r2, r3
 800b828:	4b46      	ldr	r3, [pc, #280]	; (800b944 <HAL_DMAEx_MultiBufferStart_IT+0x12bc>)
 800b82a:	429a      	cmp	r2, r3
 800b82c:	f240 808c 	bls.w	800b948 <HAL_DMAEx_MultiBufferStart_IT+0x12c0>
 800b830:	4a36      	ldr	r2, [pc, #216]	; (800b90c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4619      	mov	r1, r3
 800b838:	4b35      	ldr	r3, [pc, #212]	; (800b910 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800b83a:	4299      	cmp	r1, r3
 800b83c:	d05e      	beq.n	800b8fc <HAL_DMAEx_MultiBufferStart_IT+0x1274>
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4619      	mov	r1, r3
 800b844:	4b33      	ldr	r3, [pc, #204]	; (800b914 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800b846:	4299      	cmp	r1, r3
 800b848:	d056      	beq.n	800b8f8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4619      	mov	r1, r3
 800b850:	4b31      	ldr	r3, [pc, #196]	; (800b918 <HAL_DMAEx_MultiBufferStart_IT+0x1290>)
 800b852:	4299      	cmp	r1, r3
 800b854:	d04e      	beq.n	800b8f4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4619      	mov	r1, r3
 800b85c:	4b2f      	ldr	r3, [pc, #188]	; (800b91c <HAL_DMAEx_MultiBufferStart_IT+0x1294>)
 800b85e:	4299      	cmp	r1, r3
 800b860:	d046      	beq.n	800b8f0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4619      	mov	r1, r3
 800b868:	4b2d      	ldr	r3, [pc, #180]	; (800b920 <HAL_DMAEx_MultiBufferStart_IT+0x1298>)
 800b86a:	4299      	cmp	r1, r3
 800b86c:	d03e      	beq.n	800b8ec <HAL_DMAEx_MultiBufferStart_IT+0x1264>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4619      	mov	r1, r3
 800b874:	4b2b      	ldr	r3, [pc, #172]	; (800b924 <HAL_DMAEx_MultiBufferStart_IT+0x129c>)
 800b876:	4299      	cmp	r1, r3
 800b878:	d036      	beq.n	800b8e8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4619      	mov	r1, r3
 800b880:	4b29      	ldr	r3, [pc, #164]	; (800b928 <HAL_DMAEx_MultiBufferStart_IT+0x12a0>)
 800b882:	4299      	cmp	r1, r3
 800b884:	d02e      	beq.n	800b8e4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4619      	mov	r1, r3
 800b88c:	4b27      	ldr	r3, [pc, #156]	; (800b92c <HAL_DMAEx_MultiBufferStart_IT+0x12a4>)
 800b88e:	4299      	cmp	r1, r3
 800b890:	d026      	beq.n	800b8e0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4619      	mov	r1, r3
 800b898:	4b25      	ldr	r3, [pc, #148]	; (800b930 <HAL_DMAEx_MultiBufferStart_IT+0x12a8>)
 800b89a:	4299      	cmp	r1, r3
 800b89c:	d01d      	beq.n	800b8da <HAL_DMAEx_MultiBufferStart_IT+0x1252>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	4b23      	ldr	r3, [pc, #140]	; (800b934 <HAL_DMAEx_MultiBufferStart_IT+0x12ac>)
 800b8a6:	4299      	cmp	r1, r3
 800b8a8:	d014      	beq.n	800b8d4 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4b21      	ldr	r3, [pc, #132]	; (800b938 <HAL_DMAEx_MultiBufferStart_IT+0x12b0>)
 800b8b2:	4299      	cmp	r1, r3
 800b8b4:	d00b      	beq.n	800b8ce <HAL_DMAEx_MultiBufferStart_IT+0x1246>
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	4b1f      	ldr	r3, [pc, #124]	; (800b93c <HAL_DMAEx_MultiBufferStart_IT+0x12b4>)
 800b8be:	4299      	cmp	r1, r3
 800b8c0:	d102      	bne.n	800b8c8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
 800b8c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b8c6:	e01a      	b.n	800b8fe <HAL_DMAEx_MultiBufferStart_IT+0x1276>
 800b8c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b8cc:	e017      	b.n	800b8fe <HAL_DMAEx_MultiBufferStart_IT+0x1276>
 800b8ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b8d2:	e014      	b.n	800b8fe <HAL_DMAEx_MultiBufferStart_IT+0x1276>
 800b8d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b8d8:	e011      	b.n	800b8fe <HAL_DMAEx_MultiBufferStart_IT+0x1276>
 800b8da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b8de:	e00e      	b.n	800b8fe <HAL_DMAEx_MultiBufferStart_IT+0x1276>
 800b8e0:	2340      	movs	r3, #64	; 0x40
 800b8e2:	e00c      	b.n	800b8fe <HAL_DMAEx_MultiBufferStart_IT+0x1276>
 800b8e4:	2340      	movs	r3, #64	; 0x40
 800b8e6:	e00a      	b.n	800b8fe <HAL_DMAEx_MultiBufferStart_IT+0x1276>
 800b8e8:	2340      	movs	r3, #64	; 0x40
 800b8ea:	e008      	b.n	800b8fe <HAL_DMAEx_MultiBufferStart_IT+0x1276>
 800b8ec:	2340      	movs	r3, #64	; 0x40
 800b8ee:	e006      	b.n	800b8fe <HAL_DMAEx_MultiBufferStart_IT+0x1276>
 800b8f0:	4b13      	ldr	r3, [pc, #76]	; (800b940 <HAL_DMAEx_MultiBufferStart_IT+0x12b8>)
 800b8f2:	e004      	b.n	800b8fe <HAL_DMAEx_MultiBufferStart_IT+0x1276>
 800b8f4:	4b12      	ldr	r3, [pc, #72]	; (800b940 <HAL_DMAEx_MultiBufferStart_IT+0x12b8>)
 800b8f6:	e002      	b.n	800b8fe <HAL_DMAEx_MultiBufferStart_IT+0x1276>
 800b8f8:	4b11      	ldr	r3, [pc, #68]	; (800b940 <HAL_DMAEx_MultiBufferStart_IT+0x12b8>)
 800b8fa:	e000      	b.n	800b8fe <HAL_DMAEx_MultiBufferStart_IT+0x1276>
 800b8fc:	4b10      	ldr	r3, [pc, #64]	; (800b940 <HAL_DMAEx_MultiBufferStart_IT+0x12b8>)
 800b8fe:	6093      	str	r3, [r2, #8]
 800b900:	e0f9      	b.n	800baf6 <HAL_DMAEx_MultiBufferStart_IT+0x146e>
 800b902:	bf00      	nop
 800b904:	00800004 	.word	0x00800004
 800b908:	40026458 	.word	0x40026458
 800b90c:	40026400 	.word	0x40026400
 800b910:	40026010 	.word	0x40026010
 800b914:	40026410 	.word	0x40026410
 800b918:	40026070 	.word	0x40026070
 800b91c:	40026470 	.word	0x40026470
 800b920:	40026028 	.word	0x40026028
 800b924:	40026428 	.word	0x40026428
 800b928:	40026088 	.word	0x40026088
 800b92c:	40026488 	.word	0x40026488
 800b930:	40026040 	.word	0x40026040
 800b934:	40026440 	.word	0x40026440
 800b938:	400260a0 	.word	0x400260a0
 800b93c:	400264a0 	.word	0x400264a0
 800b940:	00800001 	.word	0x00800001
 800b944:	400260b8 	.word	0x400260b8
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	461a      	mov	r2, r3
 800b94e:	4b84      	ldr	r3, [pc, #528]	; (800bb60 <HAL_DMAEx_MultiBufferStart_IT+0x14d8>)
 800b950:	429a      	cmp	r2, r3
 800b952:	d968      	bls.n	800ba26 <HAL_DMAEx_MultiBufferStart_IT+0x139e>
 800b954:	4a83      	ldr	r2, [pc, #524]	; (800bb64 <HAL_DMAEx_MultiBufferStart_IT+0x14dc>)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4619      	mov	r1, r3
 800b95c:	4b82      	ldr	r3, [pc, #520]	; (800bb68 <HAL_DMAEx_MultiBufferStart_IT+0x14e0>)
 800b95e:	4299      	cmp	r1, r3
 800b960:	d05e      	beq.n	800ba20 <HAL_DMAEx_MultiBufferStart_IT+0x1398>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4619      	mov	r1, r3
 800b968:	4b80      	ldr	r3, [pc, #512]	; (800bb6c <HAL_DMAEx_MultiBufferStart_IT+0x14e4>)
 800b96a:	4299      	cmp	r1, r3
 800b96c:	d056      	beq.n	800ba1c <HAL_DMAEx_MultiBufferStart_IT+0x1394>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4619      	mov	r1, r3
 800b974:	4b7e      	ldr	r3, [pc, #504]	; (800bb70 <HAL_DMAEx_MultiBufferStart_IT+0x14e8>)
 800b976:	4299      	cmp	r1, r3
 800b978:	d04e      	beq.n	800ba18 <HAL_DMAEx_MultiBufferStart_IT+0x1390>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4619      	mov	r1, r3
 800b980:	4b7c      	ldr	r3, [pc, #496]	; (800bb74 <HAL_DMAEx_MultiBufferStart_IT+0x14ec>)
 800b982:	4299      	cmp	r1, r3
 800b984:	d046      	beq.n	800ba14 <HAL_DMAEx_MultiBufferStart_IT+0x138c>
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4619      	mov	r1, r3
 800b98c:	4b7a      	ldr	r3, [pc, #488]	; (800bb78 <HAL_DMAEx_MultiBufferStart_IT+0x14f0>)
 800b98e:	4299      	cmp	r1, r3
 800b990:	d03e      	beq.n	800ba10 <HAL_DMAEx_MultiBufferStart_IT+0x1388>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4619      	mov	r1, r3
 800b998:	4b78      	ldr	r3, [pc, #480]	; (800bb7c <HAL_DMAEx_MultiBufferStart_IT+0x14f4>)
 800b99a:	4299      	cmp	r1, r3
 800b99c:	d036      	beq.n	800ba0c <HAL_DMAEx_MultiBufferStart_IT+0x1384>
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	4b76      	ldr	r3, [pc, #472]	; (800bb80 <HAL_DMAEx_MultiBufferStart_IT+0x14f8>)
 800b9a6:	4299      	cmp	r1, r3
 800b9a8:	d02e      	beq.n	800ba08 <HAL_DMAEx_MultiBufferStart_IT+0x1380>
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	4b74      	ldr	r3, [pc, #464]	; (800bb84 <HAL_DMAEx_MultiBufferStart_IT+0x14fc>)
 800b9b2:	4299      	cmp	r1, r3
 800b9b4:	d026      	beq.n	800ba04 <HAL_DMAEx_MultiBufferStart_IT+0x137c>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	4b72      	ldr	r3, [pc, #456]	; (800bb88 <HAL_DMAEx_MultiBufferStart_IT+0x1500>)
 800b9be:	4299      	cmp	r1, r3
 800b9c0:	d01d      	beq.n	800b9fe <HAL_DMAEx_MultiBufferStart_IT+0x1376>
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	4b70      	ldr	r3, [pc, #448]	; (800bb8c <HAL_DMAEx_MultiBufferStart_IT+0x1504>)
 800b9ca:	4299      	cmp	r1, r3
 800b9cc:	d014      	beq.n	800b9f8 <HAL_DMAEx_MultiBufferStart_IT+0x1370>
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	4b6e      	ldr	r3, [pc, #440]	; (800bb90 <HAL_DMAEx_MultiBufferStart_IT+0x1508>)
 800b9d6:	4299      	cmp	r1, r3
 800b9d8:	d00b      	beq.n	800b9f2 <HAL_DMAEx_MultiBufferStart_IT+0x136a>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	4b6c      	ldr	r3, [pc, #432]	; (800bb94 <HAL_DMAEx_MultiBufferStart_IT+0x150c>)
 800b9e2:	4299      	cmp	r1, r3
 800b9e4:	d102      	bne.n	800b9ec <HAL_DMAEx_MultiBufferStart_IT+0x1364>
 800b9e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b9ea:	e01a      	b.n	800ba22 <HAL_DMAEx_MultiBufferStart_IT+0x139a>
 800b9ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b9f0:	e017      	b.n	800ba22 <HAL_DMAEx_MultiBufferStart_IT+0x139a>
 800b9f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b9f6:	e014      	b.n	800ba22 <HAL_DMAEx_MultiBufferStart_IT+0x139a>
 800b9f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b9fc:	e011      	b.n	800ba22 <HAL_DMAEx_MultiBufferStart_IT+0x139a>
 800b9fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ba02:	e00e      	b.n	800ba22 <HAL_DMAEx_MultiBufferStart_IT+0x139a>
 800ba04:	2340      	movs	r3, #64	; 0x40
 800ba06:	e00c      	b.n	800ba22 <HAL_DMAEx_MultiBufferStart_IT+0x139a>
 800ba08:	2340      	movs	r3, #64	; 0x40
 800ba0a:	e00a      	b.n	800ba22 <HAL_DMAEx_MultiBufferStart_IT+0x139a>
 800ba0c:	2340      	movs	r3, #64	; 0x40
 800ba0e:	e008      	b.n	800ba22 <HAL_DMAEx_MultiBufferStart_IT+0x139a>
 800ba10:	2340      	movs	r3, #64	; 0x40
 800ba12:	e006      	b.n	800ba22 <HAL_DMAEx_MultiBufferStart_IT+0x139a>
 800ba14:	4b60      	ldr	r3, [pc, #384]	; (800bb98 <HAL_DMAEx_MultiBufferStart_IT+0x1510>)
 800ba16:	e004      	b.n	800ba22 <HAL_DMAEx_MultiBufferStart_IT+0x139a>
 800ba18:	4b5f      	ldr	r3, [pc, #380]	; (800bb98 <HAL_DMAEx_MultiBufferStart_IT+0x1510>)
 800ba1a:	e002      	b.n	800ba22 <HAL_DMAEx_MultiBufferStart_IT+0x139a>
 800ba1c:	4b5e      	ldr	r3, [pc, #376]	; (800bb98 <HAL_DMAEx_MultiBufferStart_IT+0x1510>)
 800ba1e:	e000      	b.n	800ba22 <HAL_DMAEx_MultiBufferStart_IT+0x139a>
 800ba20:	4b5d      	ldr	r3, [pc, #372]	; (800bb98 <HAL_DMAEx_MultiBufferStart_IT+0x1510>)
 800ba22:	60d3      	str	r3, [r2, #12]
 800ba24:	e067      	b.n	800baf6 <HAL_DMAEx_MultiBufferStart_IT+0x146e>
 800ba26:	4a4f      	ldr	r2, [pc, #316]	; (800bb64 <HAL_DMAEx_MultiBufferStart_IT+0x14dc>)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4b4e      	ldr	r3, [pc, #312]	; (800bb68 <HAL_DMAEx_MultiBufferStart_IT+0x14e0>)
 800ba30:	4299      	cmp	r1, r3
 800ba32:	d05e      	beq.n	800baf2 <HAL_DMAEx_MultiBufferStart_IT+0x146a>
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4b4c      	ldr	r3, [pc, #304]	; (800bb6c <HAL_DMAEx_MultiBufferStart_IT+0x14e4>)
 800ba3c:	4299      	cmp	r1, r3
 800ba3e:	d056      	beq.n	800baee <HAL_DMAEx_MultiBufferStart_IT+0x1466>
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4619      	mov	r1, r3
 800ba46:	4b4a      	ldr	r3, [pc, #296]	; (800bb70 <HAL_DMAEx_MultiBufferStart_IT+0x14e8>)
 800ba48:	4299      	cmp	r1, r3
 800ba4a:	d04e      	beq.n	800baea <HAL_DMAEx_MultiBufferStart_IT+0x1462>
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4619      	mov	r1, r3
 800ba52:	4b48      	ldr	r3, [pc, #288]	; (800bb74 <HAL_DMAEx_MultiBufferStart_IT+0x14ec>)
 800ba54:	4299      	cmp	r1, r3
 800ba56:	d046      	beq.n	800bae6 <HAL_DMAEx_MultiBufferStart_IT+0x145e>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	4b46      	ldr	r3, [pc, #280]	; (800bb78 <HAL_DMAEx_MultiBufferStart_IT+0x14f0>)
 800ba60:	4299      	cmp	r1, r3
 800ba62:	d03e      	beq.n	800bae2 <HAL_DMAEx_MultiBufferStart_IT+0x145a>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	4b44      	ldr	r3, [pc, #272]	; (800bb7c <HAL_DMAEx_MultiBufferStart_IT+0x14f4>)
 800ba6c:	4299      	cmp	r1, r3
 800ba6e:	d036      	beq.n	800bade <HAL_DMAEx_MultiBufferStart_IT+0x1456>
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4619      	mov	r1, r3
 800ba76:	4b42      	ldr	r3, [pc, #264]	; (800bb80 <HAL_DMAEx_MultiBufferStart_IT+0x14f8>)
 800ba78:	4299      	cmp	r1, r3
 800ba7a:	d02e      	beq.n	800bada <HAL_DMAEx_MultiBufferStart_IT+0x1452>
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4619      	mov	r1, r3
 800ba82:	4b40      	ldr	r3, [pc, #256]	; (800bb84 <HAL_DMAEx_MultiBufferStart_IT+0x14fc>)
 800ba84:	4299      	cmp	r1, r3
 800ba86:	d026      	beq.n	800bad6 <HAL_DMAEx_MultiBufferStart_IT+0x144e>
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	4b3e      	ldr	r3, [pc, #248]	; (800bb88 <HAL_DMAEx_MultiBufferStart_IT+0x1500>)
 800ba90:	4299      	cmp	r1, r3
 800ba92:	d01d      	beq.n	800bad0 <HAL_DMAEx_MultiBufferStart_IT+0x1448>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4619      	mov	r1, r3
 800ba9a:	4b3c      	ldr	r3, [pc, #240]	; (800bb8c <HAL_DMAEx_MultiBufferStart_IT+0x1504>)
 800ba9c:	4299      	cmp	r1, r3
 800ba9e:	d014      	beq.n	800baca <HAL_DMAEx_MultiBufferStart_IT+0x1442>
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4619      	mov	r1, r3
 800baa6:	4b3a      	ldr	r3, [pc, #232]	; (800bb90 <HAL_DMAEx_MultiBufferStart_IT+0x1508>)
 800baa8:	4299      	cmp	r1, r3
 800baaa:	d00b      	beq.n	800bac4 <HAL_DMAEx_MultiBufferStart_IT+0x143c>
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4619      	mov	r1, r3
 800bab2:	4b38      	ldr	r3, [pc, #224]	; (800bb94 <HAL_DMAEx_MultiBufferStart_IT+0x150c>)
 800bab4:	4299      	cmp	r1, r3
 800bab6:	d102      	bne.n	800babe <HAL_DMAEx_MultiBufferStart_IT+0x1436>
 800bab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800babc:	e01a      	b.n	800baf4 <HAL_DMAEx_MultiBufferStart_IT+0x146c>
 800babe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bac2:	e017      	b.n	800baf4 <HAL_DMAEx_MultiBufferStart_IT+0x146c>
 800bac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bac8:	e014      	b.n	800baf4 <HAL_DMAEx_MultiBufferStart_IT+0x146c>
 800baca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bace:	e011      	b.n	800baf4 <HAL_DMAEx_MultiBufferStart_IT+0x146c>
 800bad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bad4:	e00e      	b.n	800baf4 <HAL_DMAEx_MultiBufferStart_IT+0x146c>
 800bad6:	2340      	movs	r3, #64	; 0x40
 800bad8:	e00c      	b.n	800baf4 <HAL_DMAEx_MultiBufferStart_IT+0x146c>
 800bada:	2340      	movs	r3, #64	; 0x40
 800badc:	e00a      	b.n	800baf4 <HAL_DMAEx_MultiBufferStart_IT+0x146c>
 800bade:	2340      	movs	r3, #64	; 0x40
 800bae0:	e008      	b.n	800baf4 <HAL_DMAEx_MultiBufferStart_IT+0x146c>
 800bae2:	2340      	movs	r3, #64	; 0x40
 800bae4:	e006      	b.n	800baf4 <HAL_DMAEx_MultiBufferStart_IT+0x146c>
 800bae6:	4b2c      	ldr	r3, [pc, #176]	; (800bb98 <HAL_DMAEx_MultiBufferStart_IT+0x1510>)
 800bae8:	e004      	b.n	800baf4 <HAL_DMAEx_MultiBufferStart_IT+0x146c>
 800baea:	4b2b      	ldr	r3, [pc, #172]	; (800bb98 <HAL_DMAEx_MultiBufferStart_IT+0x1510>)
 800baec:	e002      	b.n	800baf4 <HAL_DMAEx_MultiBufferStart_IT+0x146c>
 800baee:	4b2a      	ldr	r3, [pc, #168]	; (800bb98 <HAL_DMAEx_MultiBufferStart_IT+0x1510>)
 800baf0:	e000      	b.n	800baf4 <HAL_DMAEx_MultiBufferStart_IT+0x146c>
 800baf2:	4b29      	ldr	r3, [pc, #164]	; (800bb98 <HAL_DMAEx_MultiBufferStart_IT+0x1510>)
 800baf4:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	6812      	ldr	r2, [r2, #0]
 800bafe:	6812      	ldr	r2, [r2, #0]
 800bb00:	f042 0216 	orr.w	r2, r2, #22
 800bb04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	6812      	ldr	r2, [r2, #0]
 800bb0e:	6952      	ldr	r2, [r2, #20]
 800bb10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bb14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d103      	bne.n	800bb26 <HAL_DMAEx_MultiBufferStart_IT+0x149e>
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d007      	beq.n	800bb36 <HAL_DMAEx_MultiBufferStart_IT+0x14ae>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	6812      	ldr	r2, [r2, #0]
 800bb2e:	6812      	ldr	r2, [r2, #0]
 800bb30:	f042 0208 	orr.w	r2, r2, #8
 800bb34:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68fa      	ldr	r2, [r7, #12]
 800bb3c:	6812      	ldr	r2, [r2, #0]
 800bb3e:	6812      	ldr	r2, [r2, #0]
 800bb40:	f042 0201 	orr.w	r2, r2, #1
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	e005      	b.n	800bb54 <HAL_DMAEx_MultiBufferStart_IT+0x14cc>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800bb50:	2302      	movs	r3, #2
 800bb52:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 800bb54:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3718      	adds	r7, #24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	40026058 	.word	0x40026058
 800bb64:	40026000 	.word	0x40026000
 800bb68:	40026010 	.word	0x40026010
 800bb6c:	40026410 	.word	0x40026410
 800bb70:	40026070 	.word	0x40026070
 800bb74:	40026470 	.word	0x40026470
 800bb78:	40026028 	.word	0x40026028
 800bb7c:	40026428 	.word	0x40026428
 800bb80:	40026088 	.word	0x40026088
 800bb84:	40026488 	.word	0x40026488
 800bb88:	40026040 	.word	0x40026040
 800bb8c:	40026440 	.word	0x40026440
 800bb90:	400260a0 	.word	0x400260a0
 800bb94:	400264a0 	.word	0x400264a0
 800bb98:	00800001 	.word	0x00800001

0800bb9c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	4613      	mov	r3, r2
 800bba8:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800bbaa:	79fb      	ldrb	r3, [r7, #7]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d104      	bne.n	800bbba <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68ba      	ldr	r2, [r7, #8]
 800bbb6:	60da      	str	r2, [r3, #12]
 800bbb8:	e003      	b.n	800bbc2 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3714      	adds	r7, #20
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
 800bbdc:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	2b40      	cmp	r3, #64	; 0x40
 800bbec:	d108      	bne.n	800bc00 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	60da      	str	r2, [r3, #12]
 800bbfe:	e007      	b.n	800bc10 <DMA_MultiBufferSetConfig+0x40>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	60da      	str	r2, [r3, #12]
  }
}
 800bc10:	3714      	adds	r7, #20
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop

0800bc1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b086      	sub	sp, #24
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800bc24:	2300      	movs	r3, #0
 800bc26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800bc28:	f001 f9a8 	bl	800cf7c <HAL_GetTick>
 800bc2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d101      	bne.n	800bc38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e095      	b.n	800bd64 <HAL_DMA_Init+0x148>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2202      	movs	r2, #2
 800bc44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	6812      	ldr	r2, [r2, #0]
 800bc50:	6812      	ldr	r2, [r2, #0]
 800bc52:	f022 0201 	bic.w	r2, r2, #1
 800bc56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bc58:	e00f      	b.n	800bc7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bc5a:	f001 f98f 	bl	800cf7c <HAL_GetTick>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	2b05      	cmp	r3, #5
 800bc66:	d908      	bls.n	800bc7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2220      	movs	r2, #32
 800bc6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2203      	movs	r2, #3
 800bc72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800bc76:	2303      	movs	r3, #3
 800bc78:	e074      	b.n	800bd64 <HAL_DMA_Init+0x148>
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1e8      	bne.n	800bc5a <HAL_DMA_Init+0x3e>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	4b36      	ldr	r3, [pc, #216]	; (800bd6c <HAL_DMA_Init+0x150>)
 800bc94:	4013      	ands	r3, r2
 800bc96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	685a      	ldr	r2, [r3, #4]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	68db      	ldr	r3, [r3, #12]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	695b      	ldr	r3, [r3, #20]
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bcb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	69db      	ldr	r3, [r3, #28]
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bcbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a1b      	ldr	r3, [r3, #32]
 800bcc4:	4313      	orrs	r3, r2
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bcc6:	697a      	ldr	r2, [r7, #20]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	617b      	str	r3, [r7, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd0:	2b04      	cmp	r3, #4
 800bcd2:	d107      	bne.n	800bce4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	4313      	orrs	r3, r2
 800bce2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	697a      	ldr	r2, [r7, #20]
 800bcea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	f023 0307 	bic.w	r3, r3, #7
 800bcfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd00:	697a      	ldr	r2, [r7, #20]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	617b      	str	r3, [r7, #20]

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0a:	2b04      	cmp	r3, #4
 800bd0c:	d113      	bne.n	800bd36 <HAL_DMA_Init+0x11a>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	617b      	str	r3, [r7, #20]
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 fd4f 	bl	800c7bc <DMA_CheckFifoParam>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d008      	beq.n	800bd36 <HAL_DMA_Init+0x11a>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2240      	movs	r2, #64	; 0x40
 800bd28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_ERROR; 
 800bd32:	2301      	movs	r3, #1
 800bd34:	e016      	b.n	800bd64 <HAL_DMA_Init+0x148>
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 fd06 	bl	800c750 <DMA_CalcBaseAndBitshift>
 800bd44:	4603      	mov	r3, r0
 800bd46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd4c:	223f      	movs	r2, #63	; 0x3f
 800bd4e:	409a      	lsls	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	f010803f 	.word	0xf010803f

0800bd70 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d101      	bne.n	800bd82 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e03e      	b.n	800be00 <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	2b02      	cmp	r3, #2
 800bd8c:	d101      	bne.n	800bd92 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800bd8e:	2302      	movs	r3, #2
 800bd90:	e036      	b.n	800be00 <HAL_DMA_DeInit+0x90>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	6812      	ldr	r2, [r2, #0]
 800bd9a:	6812      	ldr	r2, [r2, #0]
 800bd9c:	f022 0201 	bic.w	r2, r2, #1
 800bda0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2200      	movs	r2, #0
 800bda8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2221      	movs	r2, #33	; 0x21
 800bdd0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 fcbc 	bl	800c750 <DMA_CalcBaseAndBitshift>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bde0:	223f      	movs	r2, #63	; 0x3f
 800bde2:	409a      	lsls	r2, r3
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3710      	adds	r7, #16
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b086      	sub	sp, #24
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
 800be14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be20:	2b01      	cmp	r3, #1
 800be22:	d101      	bne.n	800be28 <HAL_DMA_Start+0x20>
 800be24:	2302      	movs	r3, #2
 800be26:	e026      	b.n	800be76 <HAL_DMA_Start+0x6e>
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2201      	movs	r2, #1
 800be2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800be36:	b2db      	uxtb	r3, r3
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d115      	bne.n	800be68 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2202      	movs	r2, #2
 800be40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2200      	movs	r2, #0
 800be48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	68b9      	ldr	r1, [r7, #8]
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	f000 fc4f 	bl	800c6f4 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	6812      	ldr	r2, [r2, #0]
 800be5e:	6812      	ldr	r2, [r2, #0]
 800be60:	f042 0201 	orr.w	r2, r2, #1
 800be64:	601a      	str	r2, [r3, #0]
 800be66:	e005      	b.n	800be74 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800be70:	2302      	movs	r3, #2
 800be72:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 800be74:	7dfb      	ldrb	r3, [r7, #23]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3718      	adds	r7, #24
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop

0800be80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d101      	bne.n	800bea6 <HAL_DMA_Start_IT+0x26>
 800bea2:	2302      	movs	r3, #2
 800bea4:	e048      	b.n	800bf38 <HAL_DMA_Start_IT+0xb8>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2201      	movs	r2, #1
 800beaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d137      	bne.n	800bf2a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2202      	movs	r2, #2
 800bebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	68b9      	ldr	r1, [r7, #8]
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	f000 fc10 	bl	800c6f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bed8:	223f      	movs	r2, #63	; 0x3f
 800beda:	409a      	lsls	r2, r3
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	6812      	ldr	r2, [r2, #0]
 800bee8:	6812      	ldr	r2, [r2, #0]
 800beea:	f042 0216 	orr.w	r2, r2, #22
 800beee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	6812      	ldr	r2, [r2, #0]
 800bef8:	6952      	ldr	r2, [r2, #20]
 800befa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800befe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d007      	beq.n	800bf18 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	6812      	ldr	r2, [r2, #0]
 800bf10:	6812      	ldr	r2, [r2, #0]
 800bf12:	f042 0208 	orr.w	r2, r2, #8
 800bf16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	6812      	ldr	r2, [r2, #0]
 800bf20:	6812      	ldr	r2, [r2, #0]
 800bf22:	f042 0201 	orr.w	r2, r2, #1
 800bf26:	601a      	str	r2, [r3, #0]
 800bf28:	e005      	b.n	800bf36 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800bf32:	2302      	movs	r3, #2
 800bf34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800bf36:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3718      	adds	r7, #24
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800bf4e:	f001 f815 	bl	800cf7c <HAL_GetTick>
 800bf52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d008      	beq.n	800bf72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2280      	movs	r2, #128	; 0x80
 800bf64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e052      	b.n	800c018 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	6812      	ldr	r2, [r2, #0]
 800bf7a:	6812      	ldr	r2, [r2, #0]
 800bf7c:	f022 0216 	bic.w	r2, r2, #22
 800bf80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	6812      	ldr	r2, [r2, #0]
 800bf8a:	6952      	ldr	r2, [r2, #20]
 800bf8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d103      	bne.n	800bfa2 <HAL_DMA_Abort+0x62>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d007      	beq.n	800bfb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	6812      	ldr	r2, [r2, #0]
 800bfaa:	6812      	ldr	r2, [r2, #0]
 800bfac:	f022 0208 	bic.w	r2, r2, #8
 800bfb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	6812      	ldr	r2, [r2, #0]
 800bfba:	6812      	ldr	r2, [r2, #0]
 800bfbc:	f022 0201 	bic.w	r2, r2, #1
 800bfc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bfc2:	e013      	b.n	800bfec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bfc4:	f000 ffda 	bl	800cf7c <HAL_GetTick>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	2b05      	cmp	r3, #5
 800bfd0:	d90c      	bls.n	800bfec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2220      	movs	r2, #32
 800bfd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2203      	movs	r2, #3
 800bfe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800bfe8:	2303      	movs	r3, #3
 800bfea:	e015      	b.n	800c018 <HAL_DMA_Abort+0xd8>
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f003 0301 	and.w	r3, r3, #1
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d1e4      	bne.n	800bfc4 <HAL_DMA_Abort+0x84>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bffe:	223f      	movs	r2, #63	; 0x3f
 800c000:	409a      	lsls	r2, r3
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2201      	movs	r2, #1
 800c012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	2b02      	cmp	r3, #2
 800c032:	d004      	beq.n	800c03e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2280      	movs	r2, #128	; 0x80
 800c038:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c03a:	2301      	movs	r3, #1
 800c03c:	e00c      	b.n	800c058 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2205      	movs	r2, #5
 800c042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	6812      	ldr	r2, [r2, #0]
 800c04e:	6812      	ldr	r2, [r2, #0]
 800c050:	f022 0201 	bic.w	r2, r2, #1
 800c054:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08a      	sub	sp, #40	; 0x28
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	460b      	mov	r3, r1
 800c06e:	607a      	str	r2, [r7, #4]
 800c070:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 800c072:	2300      	movs	r3, #0
 800c074:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 800c076:	f000 ff81 	bl	800cf7c <HAL_GetTick>
 800c07a:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b02      	cmp	r3, #2
 800c086:	d008      	beq.n	800c09a <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2280      	movs	r2, #128	; 0x80
 800c08c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2200      	movs	r2, #0
 800c092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	e0bf      	b.n	800c21a <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d005      	beq.n	800c0b4 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c0ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	e0b2      	b.n	800c21a <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800c0b4:	7afb      	ldrb	r3, [r7, #11]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d106      	bne.n	800c0c8 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0be:	2220      	movs	r2, #32
 800c0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800c0c6:	e005      	b.n	800c0d4 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0cc:	2210      	movs	r2, #16
 800c0ce:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d8:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 800c0e0:	e05a      	b.n	800c198 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e8:	d017      	beq.n	800c11a <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d007      	beq.n	800c100 <HAL_DMA_PollForTransfer+0x9c>
 800c0f0:	f000 ff44 	bl	800cf7c <HAL_GetTick>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	1ad2      	subs	r2, r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d90c      	bls.n	800c11a <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2220      	movs	r2, #32
 800c104:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2201      	movs	r2, #1
 800c112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800c116:	2303      	movs	r3, #3
 800c118:	e07f      	b.n	800c21a <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c124:	2208      	movs	r2, #8
 800c126:	409a      	lsls	r2, r3
 800c128:	6a3b      	ldr	r3, [r7, #32]
 800c12a:	4013      	ands	r3, r2
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00b      	beq.n	800c148 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c134:	f043 0201 	orr.w	r2, r3, #1
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c140:	2208      	movs	r2, #8
 800c142:	409a      	lsls	r2, r3
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c14c:	4a35      	ldr	r2, [pc, #212]	; (800c224 <HAL_DMA_PollForTransfer+0x1c0>)
 800c14e:	409a      	lsls	r2, r3
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	4013      	ands	r3, r2
 800c154:	2b00      	cmp	r3, #0
 800c156:	d00b      	beq.n	800c170 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c15c:	f043 0202 	orr.w	r2, r3, #2
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c168:	4a2e      	ldr	r2, [pc, #184]	; (800c224 <HAL_DMA_PollForTransfer+0x1c0>)
 800c16a:	409a      	lsls	r2, r3
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c174:	4a2c      	ldr	r2, [pc, #176]	; (800c228 <HAL_DMA_PollForTransfer+0x1c4>)
 800c176:	409a      	lsls	r2, r3
 800c178:	6a3b      	ldr	r3, [r7, #32]
 800c17a:	4013      	ands	r3, r2
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00b      	beq.n	800c198 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c184:	f043 0204 	orr.w	r2, r3, #4
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c190:	4a25      	ldr	r2, [pc, #148]	; (800c228 <HAL_DMA_PollForTransfer+0x1c4>)
 800c192:	409a      	lsls	r2, r3
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	609a      	str	r2, [r3, #8]
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  tmpisr = regs->ISR;
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 800c198:	6a3a      	ldr	r2, [r7, #32]
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	4013      	ands	r3, r2
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d105      	bne.n	800c1ae <HAL_DMA_PollForTransfer+0x14a>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a6:	f003 0301 	and.w	r3, r3, #1
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d099      	beq.n	800c0e2 <HAL_DMA_PollForTransfer+0x7e>
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d018      	beq.n	800c1e8 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ba:	f003 0301 	and.w	r3, r3, #1
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d012      	beq.n	800c1e8 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f7ff febc 	bl	800bf40 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1cc:	2230      	movs	r2, #48	; 0x30
 800c1ce:	409a      	lsls	r2, r3
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	609a      	str	r2, [r3, #8]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e018      	b.n	800c21a <HAL_DMA_PollForTransfer+0x1b6>
   }

  }

  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800c1e8:	7afb      	ldrb	r3, [r7, #11]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d10e      	bne.n	800c20c <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1f2:	2230      	movs	r2, #48	; 0x30
 800c1f4:	409a      	lsls	r2, r3
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800c20a:	e005      	b.n	800c218 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c210:	2210      	movs	r2, #16
 800c212:	409a      	lsls	r2, r3
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 800c218:	7ffb      	ldrb	r3, [r7, #31]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3728      	adds	r7, #40	; 0x28
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	00800001 	.word	0x00800001
 800c228:	00800004 	.word	0x00800004

0800c22c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800c234:	2300      	movs	r3, #0
 800c236:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800c238:	4b93      	ldr	r3, [pc, #588]	; (800c488 <HAL_DMA_IRQHandler+0x25c>)
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	4b93      	ldr	r3, [pc, #588]	; (800c48c <HAL_DMA_IRQHandler+0x260>)
 800c23e:	fba3 1302 	umull	r1, r3, r3, r2
 800c242:	0a9b      	lsrs	r3, r3, #10
 800c244:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c24a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c256:	2208      	movs	r2, #8
 800c258:	409a      	lsls	r2, r3
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	4013      	ands	r3, r2
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d01a      	beq.n	800c298 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f003 0304 	and.w	r3, r3, #4
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d013      	beq.n	800c298 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	6812      	ldr	r2, [r2, #0]
 800c278:	6812      	ldr	r2, [r2, #0]
 800c27a:	f022 0204 	bic.w	r2, r2, #4
 800c27e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c284:	2208      	movs	r2, #8
 800c286:	409a      	lsls	r2, r3
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c290:	f043 0201 	orr.w	r2, r3, #1
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c29c:	4a7c      	ldr	r2, [pc, #496]	; (800c490 <HAL_DMA_IRQHandler+0x264>)
 800c29e:	409a      	lsls	r2, r3
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	4013      	ands	r3, r2
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d012      	beq.n	800c2ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	695b      	ldr	r3, [r3, #20]
 800c2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d00b      	beq.n	800c2ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2ba:	4a75      	ldr	r2, [pc, #468]	; (800c490 <HAL_DMA_IRQHandler+0x264>)
 800c2bc:	409a      	lsls	r2, r3
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2c6:	f043 0202 	orr.w	r2, r3, #2
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2d2:	4a70      	ldr	r2, [pc, #448]	; (800c494 <HAL_DMA_IRQHandler+0x268>)
 800c2d4:	409a      	lsls	r2, r3
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	4013      	ands	r3, r2
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d012      	beq.n	800c304 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f003 0302 	and.w	r3, r3, #2
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00b      	beq.n	800c304 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2f0:	4a68      	ldr	r2, [pc, #416]	; (800c494 <HAL_DMA_IRQHandler+0x268>)
 800c2f2:	409a      	lsls	r2, r3
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fc:	f043 0204 	orr.w	r2, r3, #4
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c308:	2210      	movs	r2, #16
 800c30a:	409a      	lsls	r2, r3
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	4013      	ands	r3, r2
 800c310:	2b00      	cmp	r3, #0
 800c312:	d043      	beq.n	800c39c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f003 0308 	and.w	r3, r3, #8
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d03c      	beq.n	800c39c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c326:	2210      	movs	r2, #16
 800c328:	409a      	lsls	r2, r3
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d018      	beq.n	800c36e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c346:	2b00      	cmp	r3, #0
 800c348:	d108      	bne.n	800c35c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d024      	beq.n	800c39c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	4798      	blx	r3
 800c35a:	e01f      	b.n	800c39c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c360:	2b00      	cmp	r3, #0
 800c362:	d01b      	beq.n	800c39c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	4798      	blx	r3
 800c36c:	e016      	b.n	800c39c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d107      	bne.n	800c38c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	6812      	ldr	r2, [r2, #0]
 800c384:	6812      	ldr	r2, [r2, #0]
 800c386:	f022 0208 	bic.w	r2, r2, #8
 800c38a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c390:	2b00      	cmp	r3, #0
 800c392:	d003      	beq.n	800c39c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3a0:	2220      	movs	r2, #32
 800c3a2:	409a      	lsls	r2, r3
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	4013      	ands	r3, r2
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f000 8094 	beq.w	800c4d6 <HAL_DMA_IRQHandler+0x2aa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f003 0310 	and.w	r3, r3, #16
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	f000 808c 	beq.w	800c4d6 <HAL_DMA_IRQHandler+0x2aa>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3c2:	2220      	movs	r2, #32
 800c3c4:	409a      	lsls	r2, r3
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	2b05      	cmp	r3, #5
 800c3d4:	d137      	bne.n	800c446 <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	6812      	ldr	r2, [r2, #0]
 800c3de:	6812      	ldr	r2, [r2, #0]
 800c3e0:	f022 0216 	bic.w	r2, r2, #22
 800c3e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	6812      	ldr	r2, [r2, #0]
 800c3ee:	6952      	ldr	r2, [r2, #20]
 800c3f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c3f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d103      	bne.n	800c406 <HAL_DMA_IRQHandler+0x1da>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c402:	2b00      	cmp	r3, #0
 800c404:	d007      	beq.n	800c416 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	6812      	ldr	r2, [r2, #0]
 800c40e:	6812      	ldr	r2, [r2, #0]
 800c410:	f022 0208 	bic.w	r2, r2, #8
 800c414:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c41a:	223f      	movs	r2, #63	; 0x3f
 800c41c:	409a      	lsls	r2, r3
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2201      	movs	r2, #1
 800c42e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c436:	2b00      	cmp	r3, #0
 800c438:	d004      	beq.n	800c444 <HAL_DMA_IRQHandler+0x218>
        {
          hdma->XferAbortCallback(hdma);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	4798      	blx	r3
        }
        return;
 800c442:	e07c      	b.n	800c53e <HAL_DMA_IRQHandler+0x312>
 800c444:	e07b      	b.n	800c53e <HAL_DMA_IRQHandler+0x312>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c450:	2b00      	cmp	r3, #0
 800c452:	d021      	beq.n	800c498 <HAL_DMA_IRQHandler+0x26c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d108      	bne.n	800c474 <HAL_DMA_IRQHandler+0x248>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c466:	2b00      	cmp	r3, #0
 800c468:	d035      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	4798      	blx	r3
 800c472:	e030      	b.n	800c4d6 <HAL_DMA_IRQHandler+0x2aa>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d02c      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	4798      	blx	r3
 800c484:	e027      	b.n	800c4d6 <HAL_DMA_IRQHandler+0x2aa>
 800c486:	bf00      	nop
 800c488:	20000168 	.word	0x20000168
 800c48c:	1b4e81b5 	.word	0x1b4e81b5
 800c490:	00800001 	.word	0x00800001
 800c494:	00800004 	.word	0x00800004
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d10f      	bne.n	800c4c6 <HAL_DMA_IRQHandler+0x29a>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	6812      	ldr	r2, [r2, #0]
 800c4ae:	6812      	ldr	r2, [r2, #0]
 800c4b0:	f022 0210 	bic.w	r2, r2, #16
 800c4b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d003      	beq.n	800c4d6 <HAL_DMA_IRQHandler+0x2aa>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d02f      	beq.n	800c53e <HAL_DMA_IRQHandler+0x312>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4e2:	f003 0301 	and.w	r3, r3, #1
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d021      	beq.n	800c52e <HAL_DMA_IRQHandler+0x302>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2205      	movs	r2, #5
 800c4ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	6812      	ldr	r2, [r2, #0]
 800c4fa:	6812      	ldr	r2, [r2, #0]
 800c4fc:	f022 0201 	bic.w	r2, r2, #1
 800c500:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	3301      	adds	r3, #1
 800c506:	60bb      	str	r3, [r7, #8]
 800c508:	697a      	ldr	r2, [r7, #20]
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d900      	bls.n	800c510 <HAL_DMA_IRQHandler+0x2e4>
        {
          break;
 800c50e:	e006      	b.n	800c51e <HAL_DMA_IRQHandler+0x2f2>
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f003 0301 	and.w	r3, r3, #1
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1f1      	bne.n	800c502 <HAL_DMA_IRQHandler+0x2d6>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2201      	movs	r2, #1
 800c52a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c532:	2b00      	cmp	r3, #0
 800c534:	d003      	beq.n	800c53e <HAL_DMA_IRQHandler+0x312>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	4798      	blx	r3
    }
  }
}
 800c53e:	3718      	adds	r7, #24
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800c544:	b480      	push	{r7}
 800c546:	b087      	sub	sp, #28
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	460b      	mov	r3, r1
 800c54e:	607a      	str	r2, [r7, #4]
 800c550:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d101      	bne.n	800c564 <HAL_DMA_RegisterCallback+0x20>
 800c560:	2302      	movs	r3, #2
 800c562:	e03c      	b.n	800c5de <HAL_DMA_RegisterCallback+0x9a>
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2201      	movs	r2, #1
 800c568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c572:	b2db      	uxtb	r3, r3
 800c574:	2b01      	cmp	r3, #1
 800c576:	d12b      	bne.n	800c5d0 <HAL_DMA_RegisterCallback+0x8c>
  {
    switch (CallbackID)
 800c578:	7afb      	ldrb	r3, [r7, #11]
 800c57a:	2b05      	cmp	r3, #5
 800c57c:	d826      	bhi.n	800c5cc <HAL_DMA_RegisterCallback+0x88>
 800c57e:	a201      	add	r2, pc, #4	; (adr r2, 800c584 <HAL_DMA_RegisterCallback+0x40>)
 800c580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c584:	0800c59d 	.word	0x0800c59d
 800c588:	0800c5a5 	.word	0x0800c5a5
 800c58c:	0800c5ad 	.word	0x0800c5ad
 800c590:	0800c5b5 	.word	0x0800c5b5
 800c594:	0800c5bd 	.word	0x0800c5bd
 800c598:	0800c5c5 	.word	0x0800c5c5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800c5a2:	e014      	b.n	800c5ce <HAL_DMA_RegisterCallback+0x8a>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800c5aa:	e010      	b.n	800c5ce <HAL_DMA_RegisterCallback+0x8a>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 800c5b2:	e00c      	b.n	800c5ce <HAL_DMA_RegisterCallback+0x8a>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800c5ba:	e008      	b.n	800c5ce <HAL_DMA_RegisterCallback+0x8a>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800c5c2:	e004      	b.n	800c5ce <HAL_DMA_RegisterCallback+0x8a>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c5ca:	e000      	b.n	800c5ce <HAL_DMA_RegisterCallback+0x8a>

    default:
      break;
 800c5cc:	bf00      	nop
 800c5ce:	e001      	b.n	800c5d4 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800c5dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	371c      	adds	r7, #28
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop

0800c5ec <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b085      	sub	sp, #20
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c602:	2b01      	cmp	r3, #1
 800c604:	d101      	bne.n	800c60a <HAL_DMA_UnRegisterCallback+0x1e>
 800c606:	2302      	movs	r3, #2
 800c608:	e054      	b.n	800c6b4 <HAL_DMA_UnRegisterCallback+0xc8>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2201      	movs	r2, #1
 800c60e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d143      	bne.n	800c6a6 <HAL_DMA_UnRegisterCallback+0xba>
  {
    switch (CallbackID)
 800c61e:	78fb      	ldrb	r3, [r7, #3]
 800c620:	2b06      	cmp	r3, #6
 800c622:	d83c      	bhi.n	800c69e <HAL_DMA_UnRegisterCallback+0xb2>
 800c624:	a201      	add	r2, pc, #4	; (adr r2, 800c62c <HAL_DMA_UnRegisterCallback+0x40>)
 800c626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c62a:	bf00      	nop
 800c62c:	0800c649 	.word	0x0800c649
 800c630:	0800c651 	.word	0x0800c651
 800c634:	0800c659 	.word	0x0800c659
 800c638:	0800c661 	.word	0x0800c661
 800c63c:	0800c669 	.word	0x0800c669
 800c640:	0800c671 	.word	0x0800c671
 800c644:	0800c679 	.word	0x0800c679
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800c64e:	e029      	b.n	800c6a4 <HAL_DMA_UnRegisterCallback+0xb8>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800c656:	e025      	b.n	800c6a4 <HAL_DMA_UnRegisterCallback+0xb8>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 800c65e:	e021      	b.n	800c6a4 <HAL_DMA_UnRegisterCallback+0xb8>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800c666:	e01d      	b.n	800c6a4 <HAL_DMA_UnRegisterCallback+0xb8>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800c66e:	e019      	b.n	800c6a4 <HAL_DMA_UnRegisterCallback+0xb8>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2200      	movs	r2, #0
 800c674:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 800c676:	e015      	b.n	800c6a4 <HAL_DMA_UnRegisterCallback+0xb8>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2200      	movs	r2, #0
 800c68e:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 800c69c:	e002      	b.n	800c6a4 <HAL_DMA_UnRegisterCallback+0xb8>
      
    default:
      status = HAL_ERROR;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	73fb      	strb	r3, [r7, #15]
      break;
 800c6a2:	bf00      	nop
 800c6a4:	e001      	b.n	800c6aa <HAL_DMA_UnRegisterCallback+0xbe>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3714      	adds	r7, #20
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c6ce:	b2db      	uxtb	r3, r3
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	607a      	str	r2, [r7, #4]
 800c700:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68fa      	ldr	r2, [r7, #12]
 800c708:	6812      	ldr	r2, [r2, #0]
 800c70a:	6812      	ldr	r2, [r2, #0]
 800c70c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c710:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	683a      	ldr	r2, [r7, #0]
 800c718:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	2b40      	cmp	r3, #64	; 0x40
 800c720:	d108      	bne.n	800c734 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	68ba      	ldr	r2, [r7, #8]
 800c730:	60da      	str	r2, [r3, #12]
 800c732:	e007      	b.n	800c744 <DMA_SetConfig+0x50>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	60da      	str	r2, [r3, #12]
  }
}
 800c744:	3714      	adds	r7, #20
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop

0800c750 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c750:	b480      	push	{r7}
 800c752:	b085      	sub	sp, #20
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	f1a3 0210 	sub.w	r2, r3, #16
 800c762:	4b14      	ldr	r3, [pc, #80]	; (800c7b4 <DMA_CalcBaseAndBitshift+0x64>)
 800c764:	fba3 1302 	umull	r1, r3, r3, r2
 800c768:	091b      	lsrs	r3, r3, #4
 800c76a:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c76c:	4a12      	ldr	r2, [pc, #72]	; (800c7b8 <DMA_CalcBaseAndBitshift+0x68>)
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	4413      	add	r3, r2
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	461a      	mov	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2b03      	cmp	r3, #3
 800c77e:	d909      	bls.n	800c794 <DMA_CalcBaseAndBitshift+0x44>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c788:	f023 0303 	bic.w	r3, r3, #3
 800c78c:	1d1a      	adds	r2, r3, #4
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	659a      	str	r2, [r3, #88]	; 0x58
 800c792:	e007      	b.n	800c7a4 <DMA_CalcBaseAndBitshift+0x54>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c79c:	f023 0303 	bic.w	r3, r3, #3
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3714      	adds	r7, #20
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr
 800c7b4:	aaaaaaab 	.word	0xaaaaaaab
 800c7b8:	0800ecc4 	.word	0x0800ecc4

0800c7bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	699b      	ldr	r3, [r3, #24]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d12d      	bne.n	800c832 <DMA_CheckFifoParam+0x76>
  {
    switch (tmp)
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2b03      	cmp	r3, #3
 800c7da:	d828      	bhi.n	800c82e <DMA_CheckFifoParam+0x72>
 800c7dc:	a201      	add	r2, pc, #4	; (adr r2, 800c7e4 <DMA_CheckFifoParam+0x28>)
 800c7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e2:	bf00      	nop
 800c7e4:	0800c7f5 	.word	0x0800c7f5
 800c7e8:	0800c809 	.word	0x0800c809
 800c7ec:	0800c81b 	.word	0x0800c81b
 800c7f0:	0800c82f 	.word	0x0800c82f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        if((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d002      	beq.n	800c806 <DMA_CheckFifoParam+0x4a>
        {
          status = HAL_ERROR;
 800c800:	2301      	movs	r3, #1
 800c802:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c804:	e014      	b.n	800c830 <DMA_CheckFifoParam+0x74>
 800c806:	e013      	b.n	800c830 <DMA_CheckFifoParam+0x74>
      case DMA_FIFO_THRESHOLD_HALFFULL:
        if(hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c810:	d102      	bne.n	800c818 <DMA_CheckFifoParam+0x5c>
        {
          status = HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c816:	e00b      	b.n	800c830 <DMA_CheckFifoParam+0x74>
 800c818:	e00a      	b.n	800c830 <DMA_CheckFifoParam+0x74>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        if((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c822:	2b00      	cmp	r3, #0
 800c824:	d002      	beq.n	800c82c <DMA_CheckFifoParam+0x70>
        {
          status = HAL_ERROR;
 800c826:	2301      	movs	r3, #1
 800c828:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c82a:	e001      	b.n	800c830 <DMA_CheckFifoParam+0x74>
 800c82c:	e000      	b.n	800c830 <DMA_CheckFifoParam+0x74>
      case DMA_FIFO_THRESHOLD_FULL:
        break;
      default:
        break;
 800c82e:	bf00      	nop
 800c830:	e040      	b.n	800c8b4 <DMA_CheckFifoParam+0xf8>
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	699b      	ldr	r3, [r3, #24]
 800c836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c83a:	d128      	bne.n	800c88e <DMA_CheckFifoParam+0xd2>
  {
    switch (tmp)
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	2b03      	cmp	r3, #3
 800c840:	d823      	bhi.n	800c88a <DMA_CheckFifoParam+0xce>
 800c842:	a201      	add	r2, pc, #4	; (adr r2, 800c848 <DMA_CheckFifoParam+0x8c>)
 800c844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c848:	0800c859 	.word	0x0800c859
 800c84c:	0800c85f 	.word	0x0800c85f
 800c850:	0800c873 	.word	0x0800c873
 800c854:	0800c879 	.word	0x0800c879
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
        status = HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	73fb      	strb	r3, [r7, #15]
        break;
 800c85c:	e016      	b.n	800c88c <DMA_CheckFifoParam+0xd0>
      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c866:	2b00      	cmp	r3, #0
 800c868:	d002      	beq.n	800c870 <DMA_CheckFifoParam+0xb4>
        {
          status = HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c86e:	e00d      	b.n	800c88c <DMA_CheckFifoParam+0xd0>
 800c870:	e00c      	b.n	800c88c <DMA_CheckFifoParam+0xd0>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	73fb      	strb	r3, [r7, #15]
        break;
 800c876:	e009      	b.n	800c88c <DMA_CheckFifoParam+0xd0>
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c880:	d102      	bne.n	800c888 <DMA_CheckFifoParam+0xcc>
        {
          status = HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	73fb      	strb	r3, [r7, #15]
        }
        break;   
 800c886:	e001      	b.n	800c88c <DMA_CheckFifoParam+0xd0>
 800c888:	e000      	b.n	800c88c <DMA_CheckFifoParam+0xd0>
      default:
        break;
 800c88a:	bf00      	nop
 800c88c:	e012      	b.n	800c8b4 <DMA_CheckFifoParam+0xf8>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	2b02      	cmp	r3, #2
 800c892:	d902      	bls.n	800c89a <DMA_CheckFifoParam+0xde>
 800c894:	2b03      	cmp	r3, #3
 800c896:	d003      	beq.n	800c8a0 <DMA_CheckFifoParam+0xe4>
        {
          status = HAL_ERROR;
        }
		break;
      default:
        break;
 800c898:	e00c      	b.n	800c8b4 <DMA_CheckFifoParam+0xf8>
    switch (tmp)
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	73fb      	strb	r3, [r7, #15]
        break;
 800c89e:	e009      	b.n	800c8b4 <DMA_CheckFifoParam+0xf8>
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d002      	beq.n	800c8b2 <DMA_CheckFifoParam+0xf6>
        {
          status = HAL_ERROR;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	73fb      	strb	r3, [r7, #15]
        }
		break;
 800c8b0:	e7ff      	b.n	800c8b2 <DMA_CheckFifoParam+0xf6>
 800c8b2:	bf00      	nop
      default:
        break;
    }
  } 
  
  return status; 
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3714      	adds	r7, #20
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop

0800c8c4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f003 0307 	and.w	r3, r3, #7
 800c8d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c8d4:	4b0c      	ldr	r3, [pc, #48]	; (800c908 <NVIC_SetPriorityGrouping+0x44>)
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c8e0:	4013      	ands	r3, r2
 800c8e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800c8ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c8f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8f4:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800c8f6:	4b04      	ldr	r3, [pc, #16]	; (800c908 <NVIC_SetPriorityGrouping+0x44>)
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	60da      	str	r2, [r3, #12]
}
 800c8fc:	3714      	adds	r7, #20
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	e000ed00 	.word	0xe000ed00

0800c90c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800c90c:	b480      	push	{r7}
 800c90e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c910:	4b04      	ldr	r3, [pc, #16]	; (800c924 <NVIC_GetPriorityGrouping+0x18>)
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c918:	0a1b      	lsrs	r3, r3, #8
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr
 800c924:	e000ed00 	.word	0xe000ed00

0800c928 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	4603      	mov	r3, r0
 800c930:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800c932:	4b08      	ldr	r3, [pc, #32]	; (800c954 <NVIC_EnableIRQ+0x2c>)
 800c934:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800c938:	0952      	lsrs	r2, r2, #5
 800c93a:	79f9      	ldrb	r1, [r7, #7]
 800c93c:	f001 011f 	and.w	r1, r1, #31
 800c940:	2001      	movs	r0, #1
 800c942:	fa00 f101 	lsl.w	r1, r0, r1
 800c946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr
 800c954:	e000e100 	.word	0xe000e100

0800c958 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c958:	b480      	push	{r7}
 800c95a:	b083      	sub	sp, #12
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	4603      	mov	r3, r0
 800c960:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800c962:	4b09      	ldr	r3, [pc, #36]	; (800c988 <NVIC_DisableIRQ+0x30>)
 800c964:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800c968:	0952      	lsrs	r2, r2, #5
 800c96a:	79f9      	ldrb	r1, [r7, #7]
 800c96c:	f001 011f 	and.w	r1, r1, #31
 800c970:	2001      	movs	r0, #1
 800c972:	fa00 f101 	lsl.w	r1, r0, r1
 800c976:	3220      	adds	r2, #32
 800c978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800c97c:	370c      	adds	r7, #12
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr
 800c986:	bf00      	nop
 800c988:	e000e100 	.word	0xe000e100

0800c98c <NVIC_GetPendingIRQ>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
 */
__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	4603      	mov	r3, r0
 800c994:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800c996:	4b0a      	ldr	r3, [pc, #40]	; (800c9c0 <NVIC_GetPendingIRQ+0x34>)
 800c998:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800c99c:	0952      	lsrs	r2, r2, #5
 800c99e:	3240      	adds	r2, #64	; 0x40
 800c9a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c9a4:	79fb      	ldrb	r3, [r7, #7]
 800c9a6:	f003 031f 	and.w	r3, r3, #31
 800c9aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c9ae:	f003 0301 	and.w	r3, r3, #1
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	370c      	adds	r7, #12
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	e000e100 	.word	0xe000e100

0800c9c4 <NVIC_SetPendingIRQ>:
  \brief   Set Pending Interrupt
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800c9ce:	4b09      	ldr	r3, [pc, #36]	; (800c9f4 <NVIC_SetPendingIRQ+0x30>)
 800c9d0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800c9d4:	0952      	lsrs	r2, r2, #5
 800c9d6:	79f9      	ldrb	r1, [r7, #7]
 800c9d8:	f001 011f 	and.w	r1, r1, #31
 800c9dc:	2001      	movs	r0, #1
 800c9de:	fa00 f101 	lsl.w	r1, r0, r1
 800c9e2:	3240      	adds	r2, #64	; 0x40
 800c9e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800c9e8:	370c      	adds	r7, #12
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	e000e100 	.word	0xe000e100

0800c9f8 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	4603      	mov	r3, r0
 800ca00:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800ca02:	4b09      	ldr	r3, [pc, #36]	; (800ca28 <NVIC_ClearPendingIRQ+0x30>)
 800ca04:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ca08:	0952      	lsrs	r2, r2, #5
 800ca0a:	79f9      	ldrb	r1, [r7, #7]
 800ca0c:	f001 011f 	and.w	r1, r1, #31
 800ca10:	2001      	movs	r0, #1
 800ca12:	fa00 f101 	lsl.w	r1, r0, r1
 800ca16:	3260      	adds	r2, #96	; 0x60
 800ca18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800ca1c:	370c      	adds	r7, #12
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	e000e100 	.word	0xe000e100

0800ca2c <NVIC_GetActive>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
 */
__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	4603      	mov	r3, r0
 800ca34:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800ca36:	4b0a      	ldr	r3, [pc, #40]	; (800ca60 <NVIC_GetActive+0x34>)
 800ca38:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ca3c:	0952      	lsrs	r2, r2, #5
 800ca3e:	3280      	adds	r2, #128	; 0x80
 800ca40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca44:	79fb      	ldrb	r3, [r7, #7]
 800ca46:	f003 031f 	and.w	r3, r3, #31
 800ca4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ca4e:	f003 0301 	and.w	r3, r3, #1
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	370c      	adds	r7, #12
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	e000e100 	.word	0xe000e100

0800ca64 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	6039      	str	r1, [r7, #0]
 800ca6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800ca70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	da0b      	bge.n	800ca90 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca78:	490d      	ldr	r1, [pc, #52]	; (800cab0 <NVIC_SetPriority+0x4c>)
 800ca7a:	79fb      	ldrb	r3, [r7, #7]
 800ca7c:	f003 030f 	and.w	r3, r3, #15
 800ca80:	3b04      	subs	r3, #4
 800ca82:	683a      	ldr	r2, [r7, #0]
 800ca84:	b2d2      	uxtb	r2, r2
 800ca86:	0112      	lsls	r2, r2, #4
 800ca88:	b2d2      	uxtb	r2, r2
 800ca8a:	440b      	add	r3, r1
 800ca8c:	761a      	strb	r2, [r3, #24]
 800ca8e:	e009      	b.n	800caa4 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca90:	4908      	ldr	r1, [pc, #32]	; (800cab4 <NVIC_SetPriority+0x50>)
 800ca92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca96:	683a      	ldr	r2, [r7, #0]
 800ca98:	b2d2      	uxtb	r2, r2
 800ca9a:	0112      	lsls	r2, r2, #4
 800ca9c:	b2d2      	uxtb	r2, r2
 800ca9e:	440b      	add	r3, r1
 800caa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 800caa4:	370c      	adds	r7, #12
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	e000ed00 	.word	0xe000ed00
 800cab4:	e000e100 	.word	0xe000e100

0800cab8 <NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	4603      	mov	r3, r0
 800cac0:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) < 0)
 800cac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	da0a      	bge.n	800cae0 <NVIC_GetPriority+0x28>
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 800caca:	4a0d      	ldr	r2, [pc, #52]	; (800cb00 <NVIC_GetPriority+0x48>)
 800cacc:	79fb      	ldrb	r3, [r7, #7]
 800cace:	f003 030f 	and.w	r3, r3, #15
 800cad2:	3b04      	subs	r3, #4
 800cad4:	4413      	add	r3, r2
 800cad6:	7e1b      	ldrb	r3, [r3, #24]
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	091b      	lsrs	r3, r3, #4
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	e008      	b.n	800caf2 <NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 800cae0:	4a08      	ldr	r2, [pc, #32]	; (800cb04 <NVIC_GetPriority+0x4c>)
 800cae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cae6:	4413      	add	r3, r2
 800cae8:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800caec:	b2db      	uxtb	r3, r3
 800caee:	091b      	lsrs	r3, r3, #4
 800caf0:	b2db      	uxtb	r3, r3
  }
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	370c      	adds	r7, #12
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	e000ed00 	.word	0xe000ed00
 800cb04:	e000e100 	.word	0xe000e100

0800cb08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b089      	sub	sp, #36	; 0x24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f003 0307 	and.w	r3, r3, #7
 800cb1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	f1c3 0307 	rsb	r3, r3, #7
 800cb22:	2b04      	cmp	r3, #4
 800cb24:	bf28      	it	cs
 800cb26:	2304      	movcs	r3, #4
 800cb28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	3304      	adds	r3, #4
 800cb2e:	2b06      	cmp	r3, #6
 800cb30:	d902      	bls.n	800cb38 <NVIC_EncodePriority+0x30>
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	3b03      	subs	r3, #3
 800cb36:	e000      	b.n	800cb3a <NVIC_EncodePriority+0x32>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cb3c:	69bb      	ldr	r3, [r7, #24]
 800cb3e:	2201      	movs	r2, #1
 800cb40:	fa02 f303 	lsl.w	r3, r2, r3
 800cb44:	1e5a      	subs	r2, r3, #1
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	401a      	ands	r2, r3
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	2101      	movs	r1, #1
 800cb52:	fa01 f303 	lsl.w	r3, r1, r3
 800cb56:	1e59      	subs	r1, r3, #1
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800cb5c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3724      	adds	r7, #36	; 0x24
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop

0800cb6c <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b089      	sub	sp, #36	; 0x24
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	607a      	str	r2, [r7, #4]
 800cb78:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	f003 0307 	and.w	r3, r3, #7
 800cb80:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	f1c3 0307 	rsb	r3, r3, #7
 800cb88:	2b04      	cmp	r3, #4
 800cb8a:	bf28      	it	cs
 800cb8c:	2304      	movcs	r3, #4
 800cb8e:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	3304      	adds	r3, #4
 800cb94:	2b06      	cmp	r3, #6
 800cb96:	d902      	bls.n	800cb9e <NVIC_DecodePriority+0x32>
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	3b03      	subs	r3, #3
 800cb9c:	e000      	b.n	800cba0 <NVIC_DecodePriority+0x34>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	40da      	lsrs	r2, r3
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	2101      	movs	r1, #1
 800cbac:	fa01 f303 	lsl.w	r3, r1, r3
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	401a      	ands	r2, r3
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc0:	1e5a      	subs	r2, r3, #1
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	401a      	ands	r2, r3
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	601a      	str	r2, [r3, #0]
}
 800cbca:	3724      	adds	r7, #36	; 0x24
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cbd8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cbdc:	4a05      	ldr	r2, [pc, #20]	; (800cbf4 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cbde:	4b05      	ldr	r3, [pc, #20]	; (800cbf4 <NVIC_SystemReset+0x20>)
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cbe6:	4b04      	ldr	r3, [pc, #16]	; (800cbf8 <NVIC_SystemReset+0x24>)
 800cbe8:	430b      	orrs	r3, r1
 800cbea:	60d3      	str	r3, [r2, #12]
 800cbec:	f3bf 8f4f 	dsb	sy
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800cbf0:	bf00      	nop
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
  }
 800cbf2:	e7fd      	b.n	800cbf0 <NVIC_SystemReset+0x1c>
 800cbf4:	e000ed00 	.word	0xe000ed00
 800cbf8:	05fa0004 	.word	0x05fa0004

0800cbfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	3b01      	subs	r3, #1
 800cc08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc0c:	d301      	bcc.n	800cc12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e00f      	b.n	800cc32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cc12:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <SysTick_Config+0x40>)
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	3a01      	subs	r2, #1
 800cc18:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800cc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1e:	210f      	movs	r1, #15
 800cc20:	f7ff ff20 	bl	800ca64 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cc24:	4b05      	ldr	r3, [pc, #20]	; (800cc3c <SysTick_Config+0x40>)
 800cc26:	2200      	movs	r2, #0
 800cc28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cc2a:	4b04      	ldr	r3, [pc, #16]	; (800cc3c <SysTick_Config+0x40>)
 800cc2c:	2207      	movs	r2, #7
 800cc2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3708      	adds	r7, #8
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	e000e010 	.word	0xe000e010

0800cc40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f7ff fe3b 	bl	800c8c4 <NVIC_SetPriorityGrouping>
}
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
 800cc60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800cc62:	2300      	movs	r3, #0
 800cc64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cc66:	f7ff fe51 	bl	800c90c <NVIC_GetPriorityGrouping>
 800cc6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cc6c:	6978      	ldr	r0, [r7, #20]
 800cc6e:	68b9      	ldr	r1, [r7, #8]
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	f7ff ff49 	bl	800cb08 <NVIC_EncodePriority>
 800cc76:	4603      	mov	r3, r0
 800cc78:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800cc7c:	4610      	mov	r0, r2
 800cc7e:	4619      	mov	r1, r3
 800cc80:	f7ff fef0 	bl	800ca64 <NVIC_SetPriority>
}
 800cc84:	3718      	adds	r7, #24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop

0800cc8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	4603      	mov	r3, r0
 800cc94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cc96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7ff fe44 	bl	800c928 <NVIC_EnableIRQ>
}
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop

0800cca8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	4603      	mov	r3, r0
 800ccb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800ccb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7ff fe4e 	bl	800c958 <NVIC_DisableIRQ>
}
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop

0800ccc4 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800ccc8:	f7ff ff84 	bl	800cbd4 <NVIC_SystemReset>
}
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop

0800ccd0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f7ff ff8f 	bl	800cbfc <SysTick_Config>
 800ccde:	4603      	mov	r3, r0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800ccf0:	4b1d      	ldr	r3, [pc, #116]	; (800cd68 <HAL_MPU_ConfigRegion+0x80>)
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	7852      	ldrb	r2, [r2, #1]
 800ccf6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d028      	beq.n	800cd52 <HAL_MPU_ConfigRegion+0x6a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800cd00:	4b19      	ldr	r3, [pc, #100]	; (800cd68 <HAL_MPU_ConfigRegion+0x80>)
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	6852      	ldr	r2, [r2, #4]
 800cd06:	60da      	str	r2, [r3, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cd08:	4b17      	ldr	r3, [pc, #92]	; (800cd68 <HAL_MPU_ConfigRegion+0x80>)
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	7b12      	ldrb	r2, [r2, #12]
 800cd0e:	0711      	lsls	r1, r2, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	7ad2      	ldrb	r2, [r2, #11]
 800cd14:	0612      	lsls	r2, r2, #24
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cd16:	4311      	orrs	r1, r2
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	7a92      	ldrb	r2, [r2, #10]
 800cd1c:	04d2      	lsls	r2, r2, #19
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800cd1e:	4311      	orrs	r1, r2
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	7b52      	ldrb	r2, [r2, #13]
 800cd24:	0492      	lsls	r2, r2, #18
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800cd26:	4311      	orrs	r1, r2
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	7b92      	ldrb	r2, [r2, #14]
 800cd2c:	0452      	lsls	r2, r2, #17
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800cd2e:	4311      	orrs	r1, r2
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	7bd2      	ldrb	r2, [r2, #15]
 800cd34:	0412      	lsls	r2, r2, #16
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800cd36:	4311      	orrs	r1, r2
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	7a52      	ldrb	r2, [r2, #9]
 800cd3c:	0212      	lsls	r2, r2, #8
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800cd3e:	4311      	orrs	r1, r2
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	7a12      	ldrb	r2, [r2, #8]
 800cd44:	0052      	lsls	r2, r2, #1
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800cd46:	4311      	orrs	r1, r2
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800cd4c:	430a      	orrs	r2, r1
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cd4e:	611a      	str	r2, [r3, #16]
 800cd50:	e005      	b.n	800cd5e <HAL_MPU_ConfigRegion+0x76>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00U;
 800cd52:	4b05      	ldr	r3, [pc, #20]	; (800cd68 <HAL_MPU_ConfigRegion+0x80>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 800cd58:	4b03      	ldr	r3, [pc, #12]	; (800cd68 <HAL_MPU_ConfigRegion+0x80>)
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	611a      	str	r2, [r3, #16]
  }
}
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr
 800cd68:	e000ed90 	.word	0xe000ed90

0800cd6c <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 800cd70:	f7ff fdcc 	bl	800c90c <NVIC_GetPriorityGrouping>
 800cd74:	4603      	mov	r3, r0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop

0800cd7c <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60b9      	str	r1, [r7, #8]
 800cd84:	607a      	str	r2, [r7, #4]
 800cd86:	603b      	str	r3, [r7, #0]
 800cd88:	4603      	mov	r3, r0
 800cd8a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 800cd8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7ff fe91 	bl	800cab8 <NVIC_GetPriority>
 800cd96:	4603      	mov	r3, r0
 800cd98:	4618      	mov	r0, r3
 800cd9a:	68b9      	ldr	r1, [r7, #8]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	f7ff fee4 	bl	800cb6c <NVIC_DecodePriority>
}
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop

0800cdac <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800cdb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7ff fe02 	bl	800c9c4 <NVIC_SetPendingIRQ>
}
 800cdc0:	3708      	adds	r7, #8
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop

0800cdc8 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	4603      	mov	r3, r0
 800cdd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800cdd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7ff fdd8 	bl	800c98c <NVIC_GetPendingIRQ>
 800cddc:	4603      	mov	r3, r0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop

0800cde8 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	4603      	mov	r3, r0
 800cdf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800cdf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7ff fdfe 	bl	800c9f8 <NVIC_ClearPendingIRQ>
}
 800cdfc:	3708      	adds	r7, #8
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop

0800ce04 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 800ce0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7ff fe0a 	bl	800ca2c <NVIC_GetActive>
 800ce18:	4603      	mov	r3, r0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	bf00      	nop

0800ce24 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b083      	sub	sp, #12
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b04      	cmp	r3, #4
 800ce30:	d106      	bne.n	800ce40 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800ce32:	4b09      	ldr	r3, [pc, #36]	; (800ce58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800ce34:	4a08      	ldr	r2, [pc, #32]	; (800ce58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800ce36:	6812      	ldr	r2, [r2, #0]
 800ce38:	f042 0204 	orr.w	r2, r2, #4
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	e005      	b.n	800ce4c <HAL_SYSTICK_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800ce40:	4b05      	ldr	r3, [pc, #20]	; (800ce58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800ce42:	4a05      	ldr	r2, [pc, #20]	; (800ce58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800ce44:	6812      	ldr	r2, [r2, #0]
 800ce46:	f022 0204 	bic.w	r2, r2, #4
 800ce4a:	601a      	str	r2, [r3, #0]
  }
}
 800ce4c:	370c      	adds	r7, #12
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop
 800ce58:	e000e010 	.word	0xe000e010

0800ce5c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800ce60:	f000 f802 	bl	800ce68 <HAL_SYSTICK_Callback>
}
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop

0800ce68 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ce78:	4b0e      	ldr	r3, [pc, #56]	; (800ceb4 <HAL_Init+0x40>)
 800ce7a:	4a0e      	ldr	r2, [pc, #56]	; (800ceb4 <HAL_Init+0x40>)
 800ce7c:	6812      	ldr	r2, [r2, #0]
 800ce7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce82:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800ce84:	4b0b      	ldr	r3, [pc, #44]	; (800ceb4 <HAL_Init+0x40>)
 800ce86:	4a0b      	ldr	r2, [pc, #44]	; (800ceb4 <HAL_Init+0x40>)
 800ce88:	6812      	ldr	r2, [r2, #0]
 800ce8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce8e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ce90:	4b08      	ldr	r3, [pc, #32]	; (800ceb4 <HAL_Init+0x40>)
 800ce92:	4a08      	ldr	r2, [pc, #32]	; (800ceb4 <HAL_Init+0x40>)
 800ce94:	6812      	ldr	r2, [r2, #0]
 800ce96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce9a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ce9c:	2003      	movs	r0, #3
 800ce9e:	f7ff fecf 	bl	800cc40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800cea2:	2000      	movs	r0, #0
 800cea4:	f000 f840 	bl	800cf28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800cea8:	f7f3 fe74 	bl	8000b94 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	40023c00 	.word	0x40023c00

0800ceb8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800cebc:	4b13      	ldr	r3, [pc, #76]	; (800cf0c <HAL_DeInit+0x54>)
 800cebe:	f04f 32ff 	mov.w	r2, #4294967295
 800cec2:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800cec4:	4b11      	ldr	r3, [pc, #68]	; (800cf0c <HAL_DeInit+0x54>)
 800cec6:	2200      	movs	r2, #0
 800cec8:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800ceca:	4b10      	ldr	r3, [pc, #64]	; (800cf0c <HAL_DeInit+0x54>)
 800cecc:	f04f 32ff 	mov.w	r2, #4294967295
 800ced0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800ced2:	4b0e      	ldr	r3, [pc, #56]	; (800cf0c <HAL_DeInit+0x54>)
 800ced4:	2200      	movs	r2, #0
 800ced6:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800ced8:	4b0c      	ldr	r3, [pc, #48]	; (800cf0c <HAL_DeInit+0x54>)
 800ceda:	f04f 32ff 	mov.w	r2, #4294967295
 800cede:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800cee0:	4b0a      	ldr	r3, [pc, #40]	; (800cf0c <HAL_DeInit+0x54>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800cee6:	4b09      	ldr	r3, [pc, #36]	; (800cf0c <HAL_DeInit+0x54>)
 800cee8:	f04f 32ff 	mov.w	r2, #4294967295
 800ceec:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800ceee:	4b07      	ldr	r3, [pc, #28]	; (800cf0c <HAL_DeInit+0x54>)
 800cef0:	2200      	movs	r2, #0
 800cef2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800cef4:	4b05      	ldr	r3, [pc, #20]	; (800cf0c <HAL_DeInit+0x54>)
 800cef6:	f04f 32ff 	mov.w	r2, #4294967295
 800cefa:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800cefc:	4b03      	ldr	r3, [pc, #12]	; (800cf0c <HAL_DeInit+0x54>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800cf02:	f000 f80b 	bl	800cf1c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800cf06:	2300      	movs	r3, #0
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	40023800 	.word	0x40023800
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800cf10:	b480      	push	{r7}
 800cf12:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800cf30:	4b09      	ldr	r3, [pc, #36]	; (800cf58 <HAL_InitTick+0x30>)
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	4b09      	ldr	r3, [pc, #36]	; (800cf5c <HAL_InitTick+0x34>)
 800cf36:	fba3 1302 	umull	r1, r3, r3, r2
 800cf3a:	099b      	lsrs	r3, r3, #6
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7ff fec7 	bl	800ccd0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800cf42:	f04f 30ff 	mov.w	r0, #4294967295
 800cf46:	6879      	ldr	r1, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f7ff fe83 	bl	800cc54 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800cf4e:	2300      	movs	r3, #0
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3708      	adds	r7, #8
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}
 800cf58:	20000168 	.word	0x20000168
 800cf5c:	10624dd3 	.word	0x10624dd3

0800cf60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cf60:	b480      	push	{r7}
 800cf62:	af00      	add	r7, sp, #0
  uwTick++;
 800cf64:	4b04      	ldr	r3, [pc, #16]	; (800cf78 <HAL_IncTick+0x18>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	1c5a      	adds	r2, r3, #1
 800cf6a:	4b03      	ldr	r3, [pc, #12]	; (800cf78 <HAL_IncTick+0x18>)
 800cf6c:	601a      	str	r2, [r3, #0]
}
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	20000fd8 	.word	0x20000fd8

0800cf7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	af00      	add	r7, sp, #0
  return uwTick;
 800cf80:	4b03      	ldr	r3, [pc, #12]	; (800cf90 <HAL_GetTick+0x14>)
 800cf82:	681b      	ldr	r3, [r3, #0]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	20000fd8 	.word	0x20000fd8

0800cf94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 800cfa0:	f7ff ffec 	bl	800cf7c <HAL_GetTick>
 800cfa4:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800cfa6:	bf00      	nop
 800cfa8:	f7ff ffe8 	bl	800cf7c <HAL_GetTick>
 800cfac:	4602      	mov	r2, r0
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	1ad2      	subs	r2, r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d3f7      	bcc.n	800cfa8 <HAL_Delay+0x14>
  {
  }
}
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop

0800cfc0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800cfc4:	4b04      	ldr	r3, [pc, #16]	; (800cfd8 <HAL_SuspendTick+0x18>)
 800cfc6:	4a04      	ldr	r2, [pc, #16]	; (800cfd8 <HAL_SuspendTick+0x18>)
 800cfc8:	6812      	ldr	r2, [r2, #0]
 800cfca:	f022 0202 	bic.w	r2, r2, #2
 800cfce:	601a      	str	r2, [r3, #0]
}
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr
 800cfd8:	e000e010 	.word	0xe000e010

0800cfdc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800cfe0:	4b04      	ldr	r3, [pc, #16]	; (800cff4 <HAL_ResumeTick+0x18>)
 800cfe2:	4a04      	ldr	r2, [pc, #16]	; (800cff4 <HAL_ResumeTick+0x18>)
 800cfe4:	6812      	ldr	r2, [r2, #0]
 800cfe6:	f042 0202 	orr.w	r2, r2, #2
 800cfea:	601a      	str	r2, [r3, #0]
}
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr
 800cff4:	e000e010 	.word	0xe000e010

0800cff8 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800cff8:	b480      	push	{r7}
 800cffa:	af00      	add	r7, sp, #0
 return __STM32F4xx_HAL_VERSION;
 800cffc:	4b02      	ldr	r3, [pc, #8]	; (800d008 <HAL_GetHalVersion+0x10>)
}
 800cffe:	4618      	mov	r0, r3
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr
 800d008:	01050100 	.word	0x01050100

0800d00c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800d00c:	b480      	push	{r7}
 800d00e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 800d010:	4b03      	ldr	r3, [pc, #12]	; (800d020 <HAL_GetREVID+0x14>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	0c1b      	lsrs	r3, r3, #16
}
 800d016:	4618      	mov	r0, r3
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr
 800d020:	e0042000 	.word	0xe0042000

0800d024 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800d024:	b480      	push	{r7}
 800d026:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800d028:	4b04      	ldr	r3, [pc, #16]	; (800d03c <HAL_GetDEVID+0x18>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800d030:	4618      	mov	r0, r3
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	e0042000 	.word	0xe0042000

0800d040 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800d040:	b480      	push	{r7}
 800d042:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800d044:	4b04      	ldr	r3, [pc, #16]	; (800d058 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 800d046:	4a04      	ldr	r2, [pc, #16]	; (800d058 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 800d048:	6852      	ldr	r2, [r2, #4]
 800d04a:	f042 0201 	orr.w	r2, r2, #1
 800d04e:	605a      	str	r2, [r3, #4]
}
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr
 800d058:	e0042000 	.word	0xe0042000

0800d05c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800d05c:	b480      	push	{r7}
 800d05e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800d060:	4b04      	ldr	r3, [pc, #16]	; (800d074 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 800d062:	4a04      	ldr	r2, [pc, #16]	; (800d074 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 800d064:	6852      	ldr	r2, [r2, #4]
 800d066:	f022 0201 	bic.w	r2, r2, #1
 800d06a:	605a      	str	r2, [r3, #4]
}
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr
 800d074:	e0042000 	.word	0xe0042000

0800d078 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800d078:	b480      	push	{r7}
 800d07a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800d07c:	4b04      	ldr	r3, [pc, #16]	; (800d090 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 800d07e:	4a04      	ldr	r2, [pc, #16]	; (800d090 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 800d080:	6852      	ldr	r2, [r2, #4]
 800d082:	f042 0202 	orr.w	r2, r2, #2
 800d086:	605a      	str	r2, [r3, #4]
}
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr
 800d090:	e0042000 	.word	0xe0042000

0800d094 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 800d094:	b480      	push	{r7}
 800d096:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800d098:	4b04      	ldr	r3, [pc, #16]	; (800d0ac <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 800d09a:	4a04      	ldr	r2, [pc, #16]	; (800d0ac <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 800d09c:	6852      	ldr	r2, [r2, #4]
 800d09e:	f022 0202 	bic.w	r2, r2, #2
 800d0a2:	605a      	str	r2, [r3, #4]
}
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr
 800d0ac:	e0042000 	.word	0xe0042000

0800d0b0 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800d0b4:	4b04      	ldr	r3, [pc, #16]	; (800d0c8 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800d0b6:	4a04      	ldr	r2, [pc, #16]	; (800d0c8 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800d0b8:	6852      	ldr	r2, [r2, #4]
 800d0ba:	f042 0204 	orr.w	r2, r2, #4
 800d0be:	605a      	str	r2, [r3, #4]
}
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr
 800d0c8:	e0042000 	.word	0xe0042000

0800d0cc <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800d0d0:	4b04      	ldr	r3, [pc, #16]	; (800d0e4 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800d0d2:	4a04      	ldr	r2, [pc, #16]	; (800d0e4 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800d0d4:	6852      	ldr	r2, [r2, #4]
 800d0d6:	f022 0204 	bic.w	r2, r2, #4
 800d0da:	605a      	str	r2, [r3, #4]
}
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr
 800d0e4:	e0042000 	.word	0xe0042000

0800d0e8 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	fa93 f3a3 	rbit	r3, r3
 800d0f8:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800d0fa:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 800d0fc:	fab3 f383 	clz	r3, r3
 800d100:	461a      	mov	r2, r3
 800d102:	4b05      	ldr	r3, [pc, #20]	; (800d118 <HAL_EnableCompensationCell+0x30>)
 800d104:	4413      	add	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	2201      	movs	r2, #1
 800d10a:	601a      	str	r2, [r3, #0]
}
 800d10c:	370c      	adds	r7, #12
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	1089c100 	.word	0x1089c100

0800d11c <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	2301      	movs	r3, #1
 800d124:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	fa93 f3a3 	rbit	r3, r3
 800d12c:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800d12e:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 800d130:	fab3 f383 	clz	r3, r3
 800d134:	461a      	mov	r2, r3
 800d136:	4b05      	ldr	r3, [pc, #20]	; (800d14c <HAL_DisableCompensationCell+0x30>)
 800d138:	4413      	add	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	2200      	movs	r2, #0
 800d13e:	601a      	str	r2, [r3, #0]
}
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	1089c100 	.word	0x1089c100

0800d150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d150:	b480      	push	{r7}
 800d152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d154:	4b16      	ldr	r3, [pc, #88]	; (800d1b0 <SystemInit+0x60>)
 800d156:	4a16      	ldr	r2, [pc, #88]	; (800d1b0 <SystemInit+0x60>)
 800d158:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800d15c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800d160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d164:	4b13      	ldr	r3, [pc, #76]	; (800d1b4 <SystemInit+0x64>)
 800d166:	4a13      	ldr	r2, [pc, #76]	; (800d1b4 <SystemInit+0x64>)
 800d168:	6812      	ldr	r2, [r2, #0]
 800d16a:	f042 0201 	orr.w	r2, r2, #1
 800d16e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d170:	4b10      	ldr	r3, [pc, #64]	; (800d1b4 <SystemInit+0x64>)
 800d172:	2200      	movs	r2, #0
 800d174:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d176:	4a0f      	ldr	r2, [pc, #60]	; (800d1b4 <SystemInit+0x64>)
 800d178:	4b0e      	ldr	r3, [pc, #56]	; (800d1b4 <SystemInit+0x64>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800d180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d184:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800d186:	4b0b      	ldr	r3, [pc, #44]	; (800d1b4 <SystemInit+0x64>)
 800d188:	4a0b      	ldr	r2, [pc, #44]	; (800d1b8 <SystemInit+0x68>)
 800d18a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d18c:	4b09      	ldr	r3, [pc, #36]	; (800d1b4 <SystemInit+0x64>)
 800d18e:	4a09      	ldr	r2, [pc, #36]	; (800d1b4 <SystemInit+0x64>)
 800d190:	6812      	ldr	r2, [r2, #0]
 800d192:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d196:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d198:	4b06      	ldr	r3, [pc, #24]	; (800d1b4 <SystemInit+0x64>)
 800d19a:	2200      	movs	r2, #0
 800d19c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d19e:	4b04      	ldr	r3, [pc, #16]	; (800d1b0 <SystemInit+0x60>)
 800d1a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d1a4:	609a      	str	r2, [r3, #8]
#endif
}
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	e000ed00 	.word	0xe000ed00
 800d1b4:	40023800 	.word	0x40023800
 800d1b8:	24003010 	.word	0x24003010

0800d1bc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b087      	sub	sp, #28
 800d1c0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	613b      	str	r3, [r7, #16]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	617b      	str	r3, [r7, #20]
 800d1ca:	2302      	movs	r3, #2
 800d1cc:	60fb      	str	r3, [r7, #12]
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	60bb      	str	r3, [r7, #8]
 800d1d2:	2302      	movs	r3, #2
 800d1d4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800d1d6:	4b31      	ldr	r3, [pc, #196]	; (800d29c <SystemCoreClockUpdate+0xe0>)
 800d1d8:	689b      	ldr	r3, [r3, #8]
 800d1da:	f003 030c 	and.w	r3, r3, #12
 800d1de:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	2b04      	cmp	r3, #4
 800d1e4:	d007      	beq.n	800d1f6 <SystemCoreClockUpdate+0x3a>
 800d1e6:	2b08      	cmp	r3, #8
 800d1e8:	d009      	beq.n	800d1fe <SystemCoreClockUpdate+0x42>
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d13f      	bne.n	800d26e <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800d1ee:	4b2c      	ldr	r3, [pc, #176]	; (800d2a0 <SystemCoreClockUpdate+0xe4>)
 800d1f0:	4a2c      	ldr	r2, [pc, #176]	; (800d2a4 <SystemCoreClockUpdate+0xe8>)
 800d1f2:	601a      	str	r2, [r3, #0]
      break;
 800d1f4:	e03f      	b.n	800d276 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800d1f6:	4b2a      	ldr	r3, [pc, #168]	; (800d2a0 <SystemCoreClockUpdate+0xe4>)
 800d1f8:	4a2b      	ldr	r2, [pc, #172]	; (800d2a8 <SystemCoreClockUpdate+0xec>)
 800d1fa:	601a      	str	r2, [r3, #0]
      break;
 800d1fc:	e03b      	b.n	800d276 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800d1fe:	4b27      	ldr	r3, [pc, #156]	; (800d29c <SystemCoreClockUpdate+0xe0>)
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d206:	0d9b      	lsrs	r3, r3, #22
 800d208:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d20a:	4b24      	ldr	r3, [pc, #144]	; (800d29c <SystemCoreClockUpdate+0xe0>)
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d212:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00d      	beq.n	800d236 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800d21a:	4a23      	ldr	r2, [pc, #140]	; (800d2a8 <SystemCoreClockUpdate+0xec>)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	fbb2 f2f3 	udiv	r2, r2, r3
 800d222:	4b1e      	ldr	r3, [pc, #120]	; (800d29c <SystemCoreClockUpdate+0xe0>)
 800d224:	6859      	ldr	r1, [r3, #4]
 800d226:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d22a:	400b      	ands	r3, r1
 800d22c:	099b      	lsrs	r3, r3, #6
 800d22e:	fb03 f302 	mul.w	r3, r3, r2
 800d232:	617b      	str	r3, [r7, #20]
 800d234:	e00c      	b.n	800d250 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800d236:	4a1b      	ldr	r2, [pc, #108]	; (800d2a4 <SystemCoreClockUpdate+0xe8>)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	fbb2 f2f3 	udiv	r2, r2, r3
 800d23e:	4b17      	ldr	r3, [pc, #92]	; (800d29c <SystemCoreClockUpdate+0xe0>)
 800d240:	6859      	ldr	r1, [r3, #4]
 800d242:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d246:	400b      	ands	r3, r1
 800d248:	099b      	lsrs	r3, r3, #6
 800d24a:	fb03 f302 	mul.w	r3, r3, r2
 800d24e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800d250:	4b12      	ldr	r3, [pc, #72]	; (800d29c <SystemCoreClockUpdate+0xe0>)
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d258:	0c1b      	lsrs	r3, r3, #16
 800d25a:	3301      	adds	r3, #1
 800d25c:	005b      	lsls	r3, r3, #1
 800d25e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800d260:	697a      	ldr	r2, [r7, #20]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	fbb2 f2f3 	udiv	r2, r2, r3
 800d268:	4b0d      	ldr	r3, [pc, #52]	; (800d2a0 <SystemCoreClockUpdate+0xe4>)
 800d26a:	601a      	str	r2, [r3, #0]
      break;
 800d26c:	e003      	b.n	800d276 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 800d26e:	4b0c      	ldr	r3, [pc, #48]	; (800d2a0 <SystemCoreClockUpdate+0xe4>)
 800d270:	4a0c      	ldr	r2, [pc, #48]	; (800d2a4 <SystemCoreClockUpdate+0xe8>)
 800d272:	601a      	str	r2, [r3, #0]
      break;
 800d274:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800d276:	4b09      	ldr	r3, [pc, #36]	; (800d29c <SystemCoreClockUpdate+0xe0>)
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d27e:	091b      	lsrs	r3, r3, #4
 800d280:	4a0a      	ldr	r2, [pc, #40]	; (800d2ac <SystemCoreClockUpdate+0xf0>)
 800d282:	5cd3      	ldrb	r3, [r2, r3]
 800d284:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800d286:	4b06      	ldr	r3, [pc, #24]	; (800d2a0 <SystemCoreClockUpdate+0xe4>)
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	40da      	lsrs	r2, r3
 800d28e:	4b04      	ldr	r3, [pc, #16]	; (800d2a0 <SystemCoreClockUpdate+0xe4>)
 800d290:	601a      	str	r2, [r3, #0]
}
 800d292:	371c      	adds	r7, #28
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr
 800d29c:	40023800 	.word	0x40023800
 800d2a0:	20000168 	.word	0x20000168
 800d2a4:	00f42400 	.word	0x00f42400
 800d2a8:	017d7840 	.word	0x017d7840
 800d2ac:	0800eccc 	.word	0x0800eccc
 800d2b0:	0800ee00 	.word	0x0800ee00
 800d2b4:	20000000 	.word	0x20000000
 800d2b8:	20000674 	.word	0x20000674
 800d2bc:	20000674 	.word	0x20000674
 800d2c0:	20000fe0 	.word	0x20000fe0

0800d2c4 <selfrel_offset31>:
 800d2c4:	6803      	ldr	r3, [r0, #0]
 800d2c6:	005a      	lsls	r2, r3, #1
 800d2c8:	bf4c      	ite	mi
 800d2ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d2ce:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800d2d2:	4418      	add	r0, r3
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop

0800d2d8 <search_EIT_table>:
 800d2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2dc:	4606      	mov	r6, r0
 800d2de:	b083      	sub	sp, #12
 800d2e0:	4691      	mov	r9, r2
 800d2e2:	b321      	cbz	r1, 800d32e <search_EIT_table+0x56>
 800d2e4:	3901      	subs	r1, #1
 800d2e6:	9101      	str	r1, [sp, #4]
 800d2e8:	4688      	mov	r8, r1
 800d2ea:	2700      	movs	r7, #0
 800d2ec:	eb07 0408 	add.w	r4, r7, r8
 800d2f0:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800d2f4:	1064      	asrs	r4, r4, #1
 800d2f6:	00e5      	lsls	r5, r4, #3
 800d2f8:	eb06 0b05 	add.w	fp, r6, r5
 800d2fc:	4658      	mov	r0, fp
 800d2fe:	f7ff ffe1 	bl	800d2c4 <selfrel_offset31>
 800d302:	9b01      	ldr	r3, [sp, #4]
 800d304:	4682      	mov	sl, r0
 800d306:	42a3      	cmp	r3, r4
 800d308:	f105 0008 	add.w	r0, r5, #8
 800d30c:	4430      	add	r0, r6
 800d30e:	d019      	beq.n	800d344 <search_EIT_table+0x6c>
 800d310:	f7ff ffd8 	bl	800d2c4 <selfrel_offset31>
 800d314:	45ca      	cmp	sl, r9
 800d316:	f100 30ff 	add.w	r0, r0, #4294967295
 800d31a:	d904      	bls.n	800d326 <search_EIT_table+0x4e>
 800d31c:	42bc      	cmp	r4, r7
 800d31e:	d00b      	beq.n	800d338 <search_EIT_table+0x60>
 800d320:	f104 38ff 	add.w	r8, r4, #4294967295
 800d324:	e7e2      	b.n	800d2ec <search_EIT_table+0x14>
 800d326:	4548      	cmp	r0, r9
 800d328:	d202      	bcs.n	800d330 <search_EIT_table+0x58>
 800d32a:	1c67      	adds	r7, r4, #1
 800d32c:	e7de      	b.n	800d2ec <search_EIT_table+0x14>
 800d32e:	468b      	mov	fp, r1
 800d330:	4658      	mov	r0, fp
 800d332:	b003      	add	sp, #12
 800d334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d338:	f04f 0b00 	mov.w	fp, #0
 800d33c:	4658      	mov	r0, fp
 800d33e:	b003      	add	sp, #12
 800d340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d344:	45ca      	cmp	sl, r9
 800d346:	d8e9      	bhi.n	800d31c <search_EIT_table+0x44>
 800d348:	e7f2      	b.n	800d330 <search_EIT_table+0x58>
 800d34a:	bf00      	nop

0800d34c <__gnu_unwind_get_pr_addr>:
 800d34c:	2801      	cmp	r0, #1
 800d34e:	d007      	beq.n	800d360 <__gnu_unwind_get_pr_addr+0x14>
 800d350:	2802      	cmp	r0, #2
 800d352:	d007      	beq.n	800d364 <__gnu_unwind_get_pr_addr+0x18>
 800d354:	4b04      	ldr	r3, [pc, #16]	; (800d368 <__gnu_unwind_get_pr_addr+0x1c>)
 800d356:	2800      	cmp	r0, #0
 800d358:	bf0c      	ite	eq
 800d35a:	4618      	moveq	r0, r3
 800d35c:	2000      	movne	r0, #0
 800d35e:	4770      	bx	lr
 800d360:	4802      	ldr	r0, [pc, #8]	; (800d36c <__gnu_unwind_get_pr_addr+0x20>)
 800d362:	4770      	bx	lr
 800d364:	4802      	ldr	r0, [pc, #8]	; (800d370 <__gnu_unwind_get_pr_addr+0x24>)
 800d366:	4770      	bx	lr
 800d368:	0800da7d 	.word	0x0800da7d
 800d36c:	0800da85 	.word	0x0800da85
 800d370:	0800da8d 	.word	0x0800da8d

0800d374 <get_eit_entry>:
 800d374:	b530      	push	{r4, r5, lr}
 800d376:	4b27      	ldr	r3, [pc, #156]	; (800d414 <get_eit_entry+0xa0>)
 800d378:	b083      	sub	sp, #12
 800d37a:	4604      	mov	r4, r0
 800d37c:	1e8d      	subs	r5, r1, #2
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d042      	beq.n	800d408 <get_eit_entry+0x94>
 800d382:	4628      	mov	r0, r5
 800d384:	a901      	add	r1, sp, #4
 800d386:	f3af 8000 	nop.w
 800d38a:	4603      	mov	r3, r0
 800d38c:	b323      	cbz	r3, 800d3d8 <get_eit_entry+0x64>
 800d38e:	462a      	mov	r2, r5
 800d390:	9901      	ldr	r1, [sp, #4]
 800d392:	f7ff ffa1 	bl	800d2d8 <search_EIT_table>
 800d396:	4605      	mov	r5, r0
 800d398:	b318      	cbz	r0, 800d3e2 <get_eit_entry+0x6e>
 800d39a:	f7ff ff93 	bl	800d2c4 <selfrel_offset31>
 800d39e:	686b      	ldr	r3, [r5, #4]
 800d3a0:	64a0      	str	r0, [r4, #72]	; 0x48
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d012      	beq.n	800d3cc <get_eit_entry+0x58>
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f105 0004 	add.w	r0, r5, #4
 800d3ac:	db28      	blt.n	800d400 <get_eit_entry+0x8c>
 800d3ae:	f7ff ff89 	bl	800d2c4 <selfrel_offset31>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	64e0      	str	r0, [r4, #76]	; 0x4c
 800d3b6:	6523      	str	r3, [r4, #80]	; 0x50
 800d3b8:	6803      	ldr	r3, [r0, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	db16      	blt.n	800d3ec <get_eit_entry+0x78>
 800d3be:	f7ff ff81 	bl	800d2c4 <selfrel_offset31>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	6120      	str	r0, [r4, #16]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	b003      	add	sp, #12
 800d3ca:	bd30      	pop	{r4, r5, pc}
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	6123      	str	r3, [r4, #16]
 800d3d0:	2305      	movs	r3, #5
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	b003      	add	sp, #12
 800d3d6:	bd30      	pop	{r4, r5, pc}
 800d3d8:	6123      	str	r3, [r4, #16]
 800d3da:	2309      	movs	r3, #9
 800d3dc:	4618      	mov	r0, r3
 800d3de:	b003      	add	sp, #12
 800d3e0:	bd30      	pop	{r4, r5, pc}
 800d3e2:	2309      	movs	r3, #9
 800d3e4:	6120      	str	r0, [r4, #16]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	b003      	add	sp, #12
 800d3ea:	bd30      	pop	{r4, r5, pc}
 800d3ec:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800d3f0:	f7ff ffac 	bl	800d34c <__gnu_unwind_get_pr_addr>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	6120      	str	r0, [r4, #16]
 800d3f8:	bf14      	ite	ne
 800d3fa:	2300      	movne	r3, #0
 800d3fc:	2309      	moveq	r3, #9
 800d3fe:	e7e2      	b.n	800d3c6 <get_eit_entry+0x52>
 800d400:	2301      	movs	r3, #1
 800d402:	64e0      	str	r0, [r4, #76]	; 0x4c
 800d404:	6523      	str	r3, [r4, #80]	; 0x50
 800d406:	e7d7      	b.n	800d3b8 <get_eit_entry+0x44>
 800d408:	4b03      	ldr	r3, [pc, #12]	; (800d418 <get_eit_entry+0xa4>)
 800d40a:	4804      	ldr	r0, [pc, #16]	; (800d41c <get_eit_entry+0xa8>)
 800d40c:	1a1b      	subs	r3, r3, r0
 800d40e:	10db      	asrs	r3, r3, #3
 800d410:	9301      	str	r3, [sp, #4]
 800d412:	e7bc      	b.n	800d38e <get_eit_entry+0x1a>
 800d414:	00000000 	.word	0x00000000
 800d418:	0800edf8 	.word	0x0800edf8
 800d41c:	0800ed20 	.word	0x0800ed20

0800d420 <restore_non_core_regs>:
 800d420:	6803      	ldr	r3, [r0, #0]
 800d422:	07da      	lsls	r2, r3, #31
 800d424:	b510      	push	{r4, lr}
 800d426:	4604      	mov	r4, r0
 800d428:	d406      	bmi.n	800d438 <restore_non_core_regs+0x18>
 800d42a:	079b      	lsls	r3, r3, #30
 800d42c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800d430:	d509      	bpl.n	800d446 <restore_non_core_regs+0x26>
 800d432:	f000 fc69 	bl	800dd08 <__gnu_Unwind_Restore_VFP_D>
 800d436:	6823      	ldr	r3, [r4, #0]
 800d438:	0759      	lsls	r1, r3, #29
 800d43a:	d509      	bpl.n	800d450 <restore_non_core_regs+0x30>
 800d43c:	071a      	lsls	r2, r3, #28
 800d43e:	d50e      	bpl.n	800d45e <restore_non_core_regs+0x3e>
 800d440:	06db      	lsls	r3, r3, #27
 800d442:	d513      	bpl.n	800d46c <restore_non_core_regs+0x4c>
 800d444:	bd10      	pop	{r4, pc}
 800d446:	f000 fc57 	bl	800dcf8 <__gnu_Unwind_Restore_VFP>
 800d44a:	6823      	ldr	r3, [r4, #0]
 800d44c:	0759      	lsls	r1, r3, #29
 800d44e:	d4f5      	bmi.n	800d43c <restore_non_core_regs+0x1c>
 800d450:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d454:	f000 fc60 	bl	800dd18 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800d458:	6823      	ldr	r3, [r4, #0]
 800d45a:	071a      	lsls	r2, r3, #28
 800d45c:	d4f0      	bmi.n	800d440 <restore_non_core_regs+0x20>
 800d45e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800d462:	f000 fc61 	bl	800dd28 <__gnu_Unwind_Restore_WMMXD>
 800d466:	6823      	ldr	r3, [r4, #0]
 800d468:	06db      	lsls	r3, r3, #27
 800d46a:	d4eb      	bmi.n	800d444 <restore_non_core_regs+0x24>
 800d46c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800d470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d474:	f000 bc9c 	b.w	800ddb0 <__gnu_Unwind_Restore_WMMXC>

0800d478 <_Unwind_decode_typeinfo_ptr.isra.0>:
 800d478:	6803      	ldr	r3, [r0, #0]
 800d47a:	b10b      	cbz	r3, 800d480 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 800d47c:	4418      	add	r0, r3
 800d47e:	4770      	bx	lr
 800d480:	4618      	mov	r0, r3
 800d482:	4770      	bx	lr

0800d484 <__gnu_unwind_24bit.isra.1>:
 800d484:	2009      	movs	r0, #9
 800d486:	4770      	bx	lr

0800d488 <_Unwind_DebugHook>:
 800d488:	4770      	bx	lr
 800d48a:	bf00      	nop

0800d48c <unwind_phase2>:
 800d48c:	b570      	push	{r4, r5, r6, lr}
 800d48e:	4604      	mov	r4, r0
 800d490:	460d      	mov	r5, r1
 800d492:	e008      	b.n	800d4a6 <unwind_phase2+0x1a>
 800d494:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800d496:	6163      	str	r3, [r4, #20]
 800d498:	2001      	movs	r0, #1
 800d49a:	6923      	ldr	r3, [r4, #16]
 800d49c:	4621      	mov	r1, r4
 800d49e:	462a      	mov	r2, r5
 800d4a0:	4798      	blx	r3
 800d4a2:	2808      	cmp	r0, #8
 800d4a4:	d108      	bne.n	800d4b8 <unwind_phase2+0x2c>
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800d4aa:	f7ff ff63 	bl	800d374 <get_eit_entry>
 800d4ae:	4606      	mov	r6, r0
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d0ef      	beq.n	800d494 <unwind_phase2+0x8>
 800d4b4:	f001 fb04 	bl	800eac0 <abort>
 800d4b8:	2807      	cmp	r0, #7
 800d4ba:	d1fb      	bne.n	800d4b4 <unwind_phase2+0x28>
 800d4bc:	4630      	mov	r0, r6
 800d4be:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800d4c0:	f7ff ffe2 	bl	800d488 <_Unwind_DebugHook>
 800d4c4:	1d28      	adds	r0, r5, #4
 800d4c6:	f000 fc0b 	bl	800dce0 <__restore_core_regs>
 800d4ca:	bf00      	nop

0800d4cc <unwind_phase2_forced>:
 800d4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d0:	1d0c      	adds	r4, r1, #4
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	4617      	mov	r7, r2
 800d4d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d4d8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800d4dc:	ae03      	add	r6, sp, #12
 800d4de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d4e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d4e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d4e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d4e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d4e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d4ec:	ac02      	add	r4, sp, #8
 800d4ee:	f04f 0e00 	mov.w	lr, #0
 800d4f2:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800d4f6:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800d4fa:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800d4fe:	4628      	mov	r0, r5
 800d500:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d502:	f8c4 e000 	str.w	lr, [r4]
 800d506:	f7ff ff35 	bl	800d374 <get_eit_entry>
 800d50a:	2f00      	cmp	r7, #0
 800d50c:	4606      	mov	r6, r0
 800d50e:	bf14      	ite	ne
 800d510:	270a      	movne	r7, #10
 800d512:	2709      	moveq	r7, #9
 800d514:	b186      	cbz	r6, 800d538 <unwind_phase2_forced+0x6c>
 800d516:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800d518:	462a      	mov	r2, r5
 800d51a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800d51e:	f047 0110 	orr.w	r1, r7, #16
 800d522:	6460      	str	r0, [r4, #68]	; 0x44
 800d524:	462b      	mov	r3, r5
 800d526:	2001      	movs	r0, #1
 800d528:	47c0      	blx	r8
 800d52a:	2800      	cmp	r0, #0
 800d52c:	d12f      	bne.n	800d58e <unwind_phase2_forced+0xc2>
 800d52e:	4630      	mov	r0, r6
 800d530:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800d534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d538:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d53a:	616b      	str	r3, [r5, #20]
 800d53c:	4621      	mov	r1, r4
 800d53e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d542:	a87a      	add	r0, sp, #488	; 0x1e8
 800d544:	f001 fac3 	bl	800eace <memcpy>
 800d548:	692b      	ldr	r3, [r5, #16]
 800d54a:	4629      	mov	r1, r5
 800d54c:	aa7a      	add	r2, sp, #488	; 0x1e8
 800d54e:	4638      	mov	r0, r7
 800d550:	4798      	blx	r3
 800d552:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800d554:	4682      	mov	sl, r0
 800d556:	e88d 0210 	stmia.w	sp, {r4, r9}
 800d55a:	4639      	mov	r1, r7
 800d55c:	6463      	str	r3, [r4, #68]	; 0x44
 800d55e:	2001      	movs	r0, #1
 800d560:	462a      	mov	r2, r5
 800d562:	462b      	mov	r3, r5
 800d564:	47c0      	blx	r8
 800d566:	b990      	cbnz	r0, 800d58e <unwind_phase2_forced+0xc2>
 800d568:	4620      	mov	r0, r4
 800d56a:	a97a      	add	r1, sp, #488	; 0x1e8
 800d56c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d570:	f001 faad 	bl	800eace <memcpy>
 800d574:	f1ba 0f08 	cmp.w	sl, #8
 800d578:	d106      	bne.n	800d588 <unwind_phase2_forced+0xbc>
 800d57a:	4628      	mov	r0, r5
 800d57c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d57e:	f7ff fef9 	bl	800d374 <get_eit_entry>
 800d582:	2709      	movs	r7, #9
 800d584:	4606      	mov	r6, r0
 800d586:	e7c5      	b.n	800d514 <unwind_phase2_forced+0x48>
 800d588:	f1ba 0f07 	cmp.w	sl, #7
 800d58c:	d004      	beq.n	800d598 <unwind_phase2_forced+0xcc>
 800d58e:	2009      	movs	r0, #9
 800d590:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800d594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d598:	4630      	mov	r0, r6
 800d59a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d59c:	f7ff ff74 	bl	800d488 <_Unwind_DebugHook>
 800d5a0:	a803      	add	r0, sp, #12
 800d5a2:	f000 fb9d 	bl	800dce0 <__restore_core_regs>
 800d5a6:	bf00      	nop

0800d5a8 <_Unwind_GetCFA>:
 800d5a8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800d5aa:	4770      	bx	lr

0800d5ac <__gnu_Unwind_RaiseException>:
 800d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ae:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800d5b0:	640b      	str	r3, [r1, #64]	; 0x40
 800d5b2:	1d0e      	adds	r6, r1, #4
 800d5b4:	460f      	mov	r7, r1
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d5ba:	b0f9      	sub	sp, #484	; 0x1e4
 800d5bc:	ad01      	add	r5, sp, #4
 800d5be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d5c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d5c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d5c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d5c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d5c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800d5cc:	f04f 36ff 	mov.w	r6, #4294967295
 800d5d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800d5d4:	9600      	str	r6, [sp, #0]
 800d5d6:	e006      	b.n	800d5e6 <__gnu_Unwind_RaiseException+0x3a>
 800d5d8:	6923      	ldr	r3, [r4, #16]
 800d5da:	4621      	mov	r1, r4
 800d5dc:	466a      	mov	r2, sp
 800d5de:	4798      	blx	r3
 800d5e0:	2808      	cmp	r0, #8
 800d5e2:	4605      	mov	r5, r0
 800d5e4:	d108      	bne.n	800d5f8 <__gnu_Unwind_RaiseException+0x4c>
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d5ea:	f7ff fec3 	bl	800d374 <get_eit_entry>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d0f2      	beq.n	800d5d8 <__gnu_Unwind_RaiseException+0x2c>
 800d5f2:	2009      	movs	r0, #9
 800d5f4:	b079      	add	sp, #484	; 0x1e4
 800d5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5f8:	4668      	mov	r0, sp
 800d5fa:	f7ff ff11 	bl	800d420 <restore_non_core_regs>
 800d5fe:	2d06      	cmp	r5, #6
 800d600:	d1f7      	bne.n	800d5f2 <__gnu_Unwind_RaiseException+0x46>
 800d602:	4620      	mov	r0, r4
 800d604:	4639      	mov	r1, r7
 800d606:	f7ff ff41 	bl	800d48c <unwind_phase2>
 800d60a:	bf00      	nop

0800d60c <__gnu_Unwind_ForcedUnwind>:
 800d60c:	b430      	push	{r4, r5}
 800d60e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800d610:	60c1      	str	r1, [r0, #12]
 800d612:	6182      	str	r2, [r0, #24]
 800d614:	4619      	mov	r1, r3
 800d616:	641d      	str	r5, [r3, #64]	; 0x40
 800d618:	2200      	movs	r2, #0
 800d61a:	bc30      	pop	{r4, r5}
 800d61c:	f7ff bf56 	b.w	800d4cc <unwind_phase2_forced>

0800d620 <__gnu_Unwind_Resume>:
 800d620:	b570      	push	{r4, r5, r6, lr}
 800d622:	68c6      	ldr	r6, [r0, #12]
 800d624:	6943      	ldr	r3, [r0, #20]
 800d626:	640b      	str	r3, [r1, #64]	; 0x40
 800d628:	4604      	mov	r4, r0
 800d62a:	460d      	mov	r5, r1
 800d62c:	b126      	cbz	r6, 800d638 <__gnu_Unwind_Resume+0x18>
 800d62e:	2201      	movs	r2, #1
 800d630:	f7ff ff4c 	bl	800d4cc <unwind_phase2_forced>
 800d634:	f001 fa44 	bl	800eac0 <abort>
 800d638:	6903      	ldr	r3, [r0, #16]
 800d63a:	4621      	mov	r1, r4
 800d63c:	2002      	movs	r0, #2
 800d63e:	462a      	mov	r2, r5
 800d640:	4798      	blx	r3
 800d642:	2807      	cmp	r0, #7
 800d644:	d007      	beq.n	800d656 <__gnu_Unwind_Resume+0x36>
 800d646:	2808      	cmp	r0, #8
 800d648:	d103      	bne.n	800d652 <__gnu_Unwind_Resume+0x32>
 800d64a:	4620      	mov	r0, r4
 800d64c:	4629      	mov	r1, r5
 800d64e:	f7ff ff1d 	bl	800d48c <unwind_phase2>
 800d652:	f001 fa35 	bl	800eac0 <abort>
 800d656:	4630      	mov	r0, r6
 800d658:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800d65a:	f7ff ff15 	bl	800d488 <_Unwind_DebugHook>
 800d65e:	1d28      	adds	r0, r5, #4
 800d660:	f000 fb3e 	bl	800dce0 <__restore_core_regs>

0800d664 <__gnu_Unwind_Resume_or_Rethrow>:
 800d664:	68c2      	ldr	r2, [r0, #12]
 800d666:	b122      	cbz	r2, 800d672 <__gnu_Unwind_Resume_or_Rethrow+0xe>
 800d668:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800d66a:	640a      	str	r2, [r1, #64]	; 0x40
 800d66c:	2200      	movs	r2, #0
 800d66e:	f7ff bf2d 	b.w	800d4cc <unwind_phase2_forced>
 800d672:	e79b      	b.n	800d5ac <__gnu_Unwind_RaiseException>

0800d674 <_Unwind_Complete>:
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop

0800d678 <_Unwind_DeleteException>:
 800d678:	b508      	push	{r3, lr}
 800d67a:	6883      	ldr	r3, [r0, #8]
 800d67c:	b113      	cbz	r3, 800d684 <_Unwind_DeleteException+0xc>
 800d67e:	4601      	mov	r1, r0
 800d680:	2001      	movs	r0, #1
 800d682:	4798      	blx	r3
 800d684:	bd08      	pop	{r3, pc}
 800d686:	bf00      	nop

0800d688 <_Unwind_VRS_Get>:
 800d688:	b410      	push	{r4}
 800d68a:	2904      	cmp	r1, #4
 800d68c:	d809      	bhi.n	800d6a2 <_Unwind_VRS_Get+0x1a>
 800d68e:	e8df f001 	tbb	[pc, r1]
 800d692:	0307      	.short	0x0307
 800d694:	0308      	.short	0x0308
 800d696:	03          	.byte	0x03
 800d697:	00          	.byte	0x00
 800d698:	2001      	movs	r0, #1
 800d69a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d69e:	4770      	bx	lr
 800d6a0:	b11b      	cbz	r3, 800d6aa <_Unwind_VRS_Get+0x22>
 800d6a2:	2002      	movs	r0, #2
 800d6a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6a8:	4770      	bx	lr
 800d6aa:	2a0f      	cmp	r2, #15
 800d6ac:	d8f9      	bhi.n	800d6a2 <_Unwind_VRS_Get+0x1a>
 800d6ae:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	6853      	ldr	r3, [r2, #4]
 800d6b6:	9a01      	ldr	r2, [sp, #4]
 800d6b8:	6013      	str	r3, [r2, #0]
 800d6ba:	e7ee      	b.n	800d69a <_Unwind_VRS_Get+0x12>

0800d6bc <_Unwind_GetGR>:
 800d6bc:	b500      	push	{lr}
 800d6be:	b085      	sub	sp, #20
 800d6c0:	460a      	mov	r2, r1
 800d6c2:	ab03      	add	r3, sp, #12
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	f7ff ffdd 	bl	800d688 <_Unwind_VRS_Get>
 800d6ce:	9803      	ldr	r0, [sp, #12]
 800d6d0:	b005      	add	sp, #20
 800d6d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6d6:	bf00      	nop

0800d6d8 <_Unwind_VRS_Set>:
 800d6d8:	b410      	push	{r4}
 800d6da:	2904      	cmp	r1, #4
 800d6dc:	d809      	bhi.n	800d6f2 <_Unwind_VRS_Set+0x1a>
 800d6de:	e8df f001 	tbb	[pc, r1]
 800d6e2:	0307      	.short	0x0307
 800d6e4:	0308      	.short	0x0308
 800d6e6:	03          	.byte	0x03
 800d6e7:	00          	.byte	0x00
 800d6e8:	2001      	movs	r0, #1
 800d6ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6ee:	4770      	bx	lr
 800d6f0:	b11b      	cbz	r3, 800d6fa <_Unwind_VRS_Set+0x22>
 800d6f2:	2002      	movs	r0, #2
 800d6f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6f8:	4770      	bx	lr
 800d6fa:	2a0f      	cmp	r2, #15
 800d6fc:	d8f9      	bhi.n	800d6f2 <_Unwind_VRS_Set+0x1a>
 800d6fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d702:	9801      	ldr	r0, [sp, #4]
 800d704:	6801      	ldr	r1, [r0, #0]
 800d706:	6051      	str	r1, [r2, #4]
 800d708:	4618      	mov	r0, r3
 800d70a:	e7ee      	b.n	800d6ea <_Unwind_VRS_Set+0x12>

0800d70c <_Unwind_SetGR>:
 800d70c:	b510      	push	{r4, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	ab04      	add	r3, sp, #16
 800d712:	460c      	mov	r4, r1
 800d714:	f843 2d04 	str.w	r2, [r3, #-4]!
 800d718:	2100      	movs	r1, #0
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	4622      	mov	r2, r4
 800d71e:	460b      	mov	r3, r1
 800d720:	f7ff ffda 	bl	800d6d8 <_Unwind_VRS_Set>
 800d724:	b004      	add	sp, #16
 800d726:	bd10      	pop	{r4, pc}

0800d728 <__gnu_Unwind_Backtrace>:
 800d728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d72a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800d72c:	6413      	str	r3, [r2, #64]	; 0x40
 800d72e:	1d15      	adds	r5, r2, #4
 800d730:	4607      	mov	r7, r0
 800d732:	460e      	mov	r6, r1
 800d734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d736:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800d73a:	ac17      	add	r4, sp, #92	; 0x5c
 800d73c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d73e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d746:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d74a:	f04f 35ff 	mov.w	r5, #4294967295
 800d74e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d752:	9516      	str	r5, [sp, #88]	; 0x58
 800d754:	e010      	b.n	800d778 <__gnu_Unwind_Backtrace+0x50>
 800d756:	a816      	add	r0, sp, #88	; 0x58
 800d758:	f7ff ffd8 	bl	800d70c <_Unwind_SetGR>
 800d75c:	4631      	mov	r1, r6
 800d75e:	a816      	add	r0, sp, #88	; 0x58
 800d760:	47b8      	blx	r7
 800d762:	4669      	mov	r1, sp
 800d764:	aa16      	add	r2, sp, #88	; 0x58
 800d766:	b978      	cbnz	r0, 800d788 <__gnu_Unwind_Backtrace+0x60>
 800d768:	9b04      	ldr	r3, [sp, #16]
 800d76a:	2008      	movs	r0, #8
 800d76c:	4798      	blx	r3
 800d76e:	2805      	cmp	r0, #5
 800d770:	4604      	mov	r4, r0
 800d772:	d00a      	beq.n	800d78a <__gnu_Unwind_Backtrace+0x62>
 800d774:	2809      	cmp	r0, #9
 800d776:	d007      	beq.n	800d788 <__gnu_Unwind_Backtrace+0x60>
 800d778:	9926      	ldr	r1, [sp, #152]	; 0x98
 800d77a:	4668      	mov	r0, sp
 800d77c:	f7ff fdfa 	bl	800d374 <get_eit_entry>
 800d780:	466a      	mov	r2, sp
 800d782:	210c      	movs	r1, #12
 800d784:	2800      	cmp	r0, #0
 800d786:	d0e6      	beq.n	800d756 <__gnu_Unwind_Backtrace+0x2e>
 800d788:	2409      	movs	r4, #9
 800d78a:	a816      	add	r0, sp, #88	; 0x58
 800d78c:	f7ff fe48 	bl	800d420 <restore_non_core_regs>
 800d790:	4620      	mov	r0, r4
 800d792:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800d796:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d798 <__gnu_unwind_pr_common>:
 800d798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d79c:	460c      	mov	r4, r1
 800d79e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800d7a0:	b08b      	sub	sp, #44	; 0x2c
 800d7a2:	461d      	mov	r5, r3
 800d7a4:	1d0e      	adds	r6, r1, #4
 800d7a6:	680b      	ldr	r3, [r1, #0]
 800d7a8:	9307      	str	r3, [sp, #28]
 800d7aa:	4690      	mov	r8, r2
 800d7ac:	9608      	str	r6, [sp, #32]
 800d7ae:	f000 0903 	and.w	r9, r0, #3
 800d7b2:	2d00      	cmp	r5, #0
 800d7b4:	f040 8089 	bne.w	800d8ca <__gnu_unwind_pr_common+0x132>
 800d7b8:	021b      	lsls	r3, r3, #8
 800d7ba:	2203      	movs	r2, #3
 800d7bc:	9307      	str	r3, [sp, #28]
 800d7be:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800d7c2:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800d7c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d7c8:	f1b9 0f02 	cmp.w	r9, #2
 800d7cc:	bf08      	it	eq
 800d7ce:	6ba6      	ldreq	r6, [r4, #56]	; 0x38
 800d7d0:	f013 0301 	ands.w	r3, r3, #1
 800d7d4:	d142      	bne.n	800d85c <__gnu_unwind_pr_common+0xc4>
 800d7d6:	f000 0008 	and.w	r0, r0, #8
 800d7da:	b2c0      	uxtb	r0, r0
 800d7dc:	9003      	str	r0, [sp, #12]
 800d7de:	9302      	str	r3, [sp, #8]
 800d7e0:	6837      	ldr	r7, [r6, #0]
 800d7e2:	2f00      	cmp	r7, #0
 800d7e4:	d03c      	beq.n	800d860 <__gnu_unwind_pr_common+0xc8>
 800d7e6:	2d02      	cmp	r5, #2
 800d7e8:	d06b      	beq.n	800d8c2 <__gnu_unwind_pr_common+0x12a>
 800d7ea:	8837      	ldrh	r7, [r6, #0]
 800d7ec:	f8b6 a002 	ldrh.w	sl, [r6, #2]
 800d7f0:	3604      	adds	r6, #4
 800d7f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d7f4:	f02a 0b01 	bic.w	fp, sl, #1
 800d7f8:	4640      	mov	r0, r8
 800d7fa:	210f      	movs	r1, #15
 800d7fc:	449b      	add	fp, r3
 800d7fe:	f7ff ff5d 	bl	800d6bc <_Unwind_GetGR>
 800d802:	4583      	cmp	fp, r0
 800d804:	d836      	bhi.n	800d874 <__gnu_unwind_pr_common+0xdc>
 800d806:	f027 0301 	bic.w	r3, r7, #1
 800d80a:	449b      	add	fp, r3
 800d80c:	f00a 0a01 	and.w	sl, sl, #1
 800d810:	f007 0701 	and.w	r7, r7, #1
 800d814:	4558      	cmp	r0, fp
 800d816:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
 800d81a:	bf2c      	ite	cs
 800d81c:	2000      	movcs	r0, #0
 800d81e:	2001      	movcc	r0, #1
 800d820:	2f01      	cmp	r7, #1
 800d822:	d031      	beq.n	800d888 <__gnu_unwind_pr_common+0xf0>
 800d824:	d360      	bcc.n	800d8e8 <__gnu_unwind_pr_common+0x150>
 800d826:	2f02      	cmp	r7, #2
 800d828:	d120      	bne.n	800d86c <__gnu_unwind_pr_common+0xd4>
 800d82a:	6833      	ldr	r3, [r6, #0]
 800d82c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d830:	9101      	str	r1, [sp, #4]
 800d832:	f1b9 0f00 	cmp.w	r9, #0
 800d836:	f040 8085 	bne.w	800d944 <__gnu_unwind_pr_common+0x1ac>
 800d83a:	b130      	cbz	r0, 800d84a <__gnu_unwind_pr_common+0xb2>
 800d83c:	9a03      	ldr	r2, [sp, #12]
 800d83e:	2a00      	cmp	r2, #0
 800d840:	f000 808d 	beq.w	800d95e <__gnu_unwind_pr_common+0x1c6>
 800d844:	2900      	cmp	r1, #0
 800d846:	f000 80b0 	beq.w	800d9aa <__gnu_unwind_pr_common+0x212>
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f2c0 8085 	blt.w	800d95a <__gnu_unwind_pr_common+0x1c2>
 800d850:	9b01      	ldr	r3, [sp, #4]
 800d852:	f103 0a01 	add.w	sl, r3, #1
 800d856:	eb06 068a 	add.w	r6, r6, sl, lsl #2
 800d85a:	e7c1      	b.n	800d7e0 <__gnu_unwind_pr_common+0x48>
 800d85c:	2100      	movs	r1, #0
 800d85e:	9102      	str	r1, [sp, #8]
 800d860:	2d02      	cmp	r5, #2
 800d862:	dd49      	ble.n	800d8f8 <__gnu_unwind_pr_common+0x160>
 800d864:	f7ff fe0e 	bl	800d484 <__gnu_unwind_24bit.isra.1>
 800d868:	2800      	cmp	r0, #0
 800d86a:	d04b      	beq.n	800d904 <__gnu_unwind_pr_common+0x16c>
 800d86c:	2009      	movs	r0, #9
 800d86e:	b00b      	add	sp, #44	; 0x2c
 800d870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d874:	f00a 0a01 	and.w	sl, sl, #1
 800d878:	f007 0701 	and.w	r7, r7, #1
 800d87c:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
 800d880:	2f01      	cmp	r7, #1
 800d882:	f04f 0000 	mov.w	r0, #0
 800d886:	d1cd      	bne.n	800d824 <__gnu_unwind_pr_common+0x8c>
 800d888:	f1b9 0f00 	cmp.w	r9, #0
 800d88c:	d141      	bne.n	800d912 <__gnu_unwind_pr_common+0x17a>
 800d88e:	b1b0      	cbz	r0, 800d8be <__gnu_unwind_pr_common+0x126>
 800d890:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d894:	0fd7      	lsrs	r7, r2, #31
 800d896:	1c9a      	adds	r2, r3, #2
 800d898:	d0e8      	beq.n	800d86c <__gnu_unwind_pr_common+0xd4>
 800d89a:	f104 0158 	add.w	r1, r4, #88	; 0x58
 800d89e:	3301      	adds	r3, #1
 800d8a0:	9106      	str	r1, [sp, #24]
 800d8a2:	f000 80ad 	beq.w	800da00 <__gnu_unwind_pr_common+0x268>
 800d8a6:	1d30      	adds	r0, r6, #4
 800d8a8:	f7ff fde6 	bl	800d478 <_Unwind_decode_typeinfo_ptr.isra.0>
 800d8ac:	463a      	mov	r2, r7
 800d8ae:	4601      	mov	r1, r0
 800d8b0:	ab06      	add	r3, sp, #24
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	f3af 8000 	nop.w
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	f040 80cf 	bne.w	800da5c <__gnu_unwind_pr_common+0x2c4>
 800d8be:	3608      	adds	r6, #8
 800d8c0:	e78e      	b.n	800d7e0 <__gnu_unwind_pr_common+0x48>
 800d8c2:	f8d6 a004 	ldr.w	sl, [r6, #4]
 800d8c6:	3608      	adds	r6, #8
 800d8c8:	e793      	b.n	800d7f2 <__gnu_unwind_pr_common+0x5a>
 800d8ca:	2d02      	cmp	r5, #2
 800d8cc:	f73f af7b 	bgt.w	800d7c6 <__gnu_unwind_pr_common+0x2e>
 800d8d0:	0c1a      	lsrs	r2, r3, #16
 800d8d2:	b2d7      	uxtb	r7, r2
 800d8d4:	041b      	lsls	r3, r3, #16
 800d8d6:	2102      	movs	r1, #2
 800d8d8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 800d8dc:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800d8e0:	9307      	str	r3, [sp, #28]
 800d8e2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800d8e6:	e76e      	b.n	800d7c6 <__gnu_unwind_pr_common+0x2e>
 800d8e8:	f1b9 0f00 	cmp.w	r9, #0
 800d8ec:	d002      	beq.n	800d8f4 <__gnu_unwind_pr_common+0x15c>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	f040 8090 	bne.w	800da14 <__gnu_unwind_pr_common+0x27c>
 800d8f4:	3604      	adds	r6, #4
 800d8f6:	e773      	b.n	800d7e0 <__gnu_unwind_pr_common+0x48>
 800d8f8:	4640      	mov	r0, r8
 800d8fa:	a907      	add	r1, sp, #28
 800d8fc:	f000 faf0 	bl	800dee0 <__gnu_unwind_execute>
 800d900:	2800      	cmp	r0, #0
 800d902:	d1b3      	bne.n	800d86c <__gnu_unwind_pr_common+0xd4>
 800d904:	9a02      	ldr	r2, [sp, #8]
 800d906:	2a00      	cmp	r2, #0
 800d908:	d159      	bne.n	800d9be <__gnu_unwind_pr_common+0x226>
 800d90a:	2008      	movs	r0, #8
 800d90c:	b00b      	add	sp, #44	; 0x2c
 800d90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d912:	4640      	mov	r0, r8
 800d914:	210d      	movs	r1, #13
 800d916:	6a27      	ldr	r7, [r4, #32]
 800d918:	f7ff fed0 	bl	800d6bc <_Unwind_GetGR>
 800d91c:	4287      	cmp	r7, r0
 800d91e:	d1ce      	bne.n	800d8be <__gnu_unwind_pr_common+0x126>
 800d920:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d922:	429e      	cmp	r6, r3
 800d924:	d1cb      	bne.n	800d8be <__gnu_unwind_pr_common+0x126>
 800d926:	4630      	mov	r0, r6
 800d928:	f7ff fccc 	bl	800d2c4 <selfrel_offset31>
 800d92c:	210f      	movs	r1, #15
 800d92e:	4602      	mov	r2, r0
 800d930:	4640      	mov	r0, r8
 800d932:	f7ff feeb 	bl	800d70c <_Unwind_SetGR>
 800d936:	4640      	mov	r0, r8
 800d938:	4622      	mov	r2, r4
 800d93a:	2100      	movs	r1, #0
 800d93c:	f7ff fee6 	bl	800d70c <_Unwind_SetGR>
 800d940:	2007      	movs	r0, #7
 800d942:	e794      	b.n	800d86e <__gnu_unwind_pr_common+0xd6>
 800d944:	4640      	mov	r0, r8
 800d946:	210d      	movs	r1, #13
 800d948:	6a27      	ldr	r7, [r4, #32]
 800d94a:	f7ff feb7 	bl	800d6bc <_Unwind_GetGR>
 800d94e:	4287      	cmp	r7, r0
 800d950:	d045      	beq.n	800d9de <__gnu_unwind_pr_common+0x246>
 800d952:	6833      	ldr	r3, [r6, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	f6bf af7b 	bge.w	800d850 <__gnu_unwind_pr_common+0xb8>
 800d95a:	3604      	adds	r6, #4
 800d95c:	e778      	b.n	800d850 <__gnu_unwind_pr_common+0xb8>
 800d95e:	9901      	ldr	r1, [sp, #4]
 800d960:	b319      	cbz	r1, 800d9aa <__gnu_unwind_pr_common+0x212>
 800d962:	f104 0c58 	add.w	ip, r4, #88	; 0x58
 800d966:	f8cd 9010 	str.w	r9, [sp, #16]
 800d96a:	9505      	str	r5, [sp, #20]
 800d96c:	1d37      	adds	r7, r6, #4
 800d96e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d972:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d976:	4665      	mov	r5, ip
 800d978:	e002      	b.n	800d980 <__gnu_unwind_pr_common+0x1e8>
 800d97a:	45ca      	cmp	sl, r9
 800d97c:	d015      	beq.n	800d9aa <__gnu_unwind_pr_common+0x212>
 800d97e:	46d3      	mov	fp, sl
 800d980:	4638      	mov	r0, r7
 800d982:	9506      	str	r5, [sp, #24]
 800d984:	f7ff fd78 	bl	800d478 <_Unwind_decode_typeinfo_ptr.isra.0>
 800d988:	2200      	movs	r2, #0
 800d98a:	4601      	mov	r1, r0
 800d98c:	ab06      	add	r3, sp, #24
 800d98e:	4620      	mov	r0, r4
 800d990:	f3af 8000 	nop.w
 800d994:	f10b 0a01 	add.w	sl, fp, #1
 800d998:	3704      	adds	r7, #4
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d0ed      	beq.n	800d97a <__gnu_unwind_pr_common+0x1e2>
 800d99e:	9b01      	ldr	r3, [sp, #4]
 800d9a0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800d9a4:	9d05      	ldr	r5, [sp, #20]
 800d9a6:	455b      	cmp	r3, fp
 800d9a8:	d1d3      	bne.n	800d952 <__gnu_unwind_pr_common+0x1ba>
 800d9aa:	4640      	mov	r0, r8
 800d9ac:	210d      	movs	r1, #13
 800d9ae:	f7ff fe85 	bl	800d6bc <_Unwind_GetGR>
 800d9b2:	9b06      	ldr	r3, [sp, #24]
 800d9b4:	6220      	str	r0, [r4, #32]
 800d9b6:	62a6      	str	r6, [r4, #40]	; 0x28
 800d9b8:	6263      	str	r3, [r4, #36]	; 0x24
 800d9ba:	2006      	movs	r0, #6
 800d9bc:	e757      	b.n	800d86e <__gnu_unwind_pr_common+0xd6>
 800d9be:	210f      	movs	r1, #15
 800d9c0:	4640      	mov	r0, r8
 800d9c2:	f7ff fe7b 	bl	800d6bc <_Unwind_GetGR>
 800d9c6:	210e      	movs	r1, #14
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	4640      	mov	r0, r8
 800d9cc:	f7ff fe9e 	bl	800d70c <_Unwind_SetGR>
 800d9d0:	4640      	mov	r0, r8
 800d9d2:	210f      	movs	r1, #15
 800d9d4:	4a28      	ldr	r2, [pc, #160]	; (800da78 <__gnu_unwind_pr_common+0x2e0>)
 800d9d6:	f7ff fe99 	bl	800d70c <_Unwind_SetGR>
 800d9da:	2007      	movs	r0, #7
 800d9dc:	e747      	b.n	800d86e <__gnu_unwind_pr_common+0xd6>
 800d9de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d9e0:	429e      	cmp	r6, r3
 800d9e2:	d1b6      	bne.n	800d952 <__gnu_unwind_pr_common+0x1ba>
 800d9e4:	2204      	movs	r2, #4
 800d9e6:	2700      	movs	r7, #0
 800d9e8:	18b3      	adds	r3, r6, r2
 800d9ea:	9901      	ldr	r1, [sp, #4]
 800d9ec:	62a1      	str	r1, [r4, #40]	; 0x28
 800d9ee:	62e7      	str	r7, [r4, #44]	; 0x2c
 800d9f0:	6322      	str	r2, [r4, #48]	; 0x30
 800d9f2:	6363      	str	r3, [r4, #52]	; 0x34
 800d9f4:	6833      	ldr	r3, [r6, #0]
 800d9f6:	42bb      	cmp	r3, r7
 800d9f8:	db1f      	blt.n	800da3a <__gnu_unwind_pr_common+0x2a2>
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	9202      	str	r2, [sp, #8]
 800d9fe:	e727      	b.n	800d850 <__gnu_unwind_pr_common+0xb8>
 800da00:	4640      	mov	r0, r8
 800da02:	210d      	movs	r1, #13
 800da04:	f7ff fe5a 	bl	800d6bc <_Unwind_GetGR>
 800da08:	6220      	str	r0, [r4, #32]
 800da0a:	9b06      	ldr	r3, [sp, #24]
 800da0c:	6263      	str	r3, [r4, #36]	; 0x24
 800da0e:	62a6      	str	r6, [r4, #40]	; 0x28
 800da10:	2006      	movs	r0, #6
 800da12:	e72c      	b.n	800d86e <__gnu_unwind_pr_common+0xd6>
 800da14:	4630      	mov	r0, r6
 800da16:	f7ff fc55 	bl	800d2c4 <selfrel_offset31>
 800da1a:	3604      	adds	r6, #4
 800da1c:	4605      	mov	r5, r0
 800da1e:	63a6      	str	r6, [r4, #56]	; 0x38
 800da20:	4620      	mov	r0, r4
 800da22:	f3af 8000 	nop.w
 800da26:	2800      	cmp	r0, #0
 800da28:	f43f af20 	beq.w	800d86c <__gnu_unwind_pr_common+0xd4>
 800da2c:	4640      	mov	r0, r8
 800da2e:	462a      	mov	r2, r5
 800da30:	210f      	movs	r1, #15
 800da32:	f7ff fe6b 	bl	800d70c <_Unwind_SetGR>
 800da36:	2007      	movs	r0, #7
 800da38:	e719      	b.n	800d86e <__gnu_unwind_pr_common+0xd6>
 800da3a:	1c48      	adds	r0, r1, #1
 800da3c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800da40:	f7ff fc40 	bl	800d2c4 <selfrel_offset31>
 800da44:	210f      	movs	r1, #15
 800da46:	4602      	mov	r2, r0
 800da48:	4640      	mov	r0, r8
 800da4a:	f7ff fe5f 	bl	800d70c <_Unwind_SetGR>
 800da4e:	4640      	mov	r0, r8
 800da50:	4639      	mov	r1, r7
 800da52:	4622      	mov	r2, r4
 800da54:	f7ff fe5a 	bl	800d70c <_Unwind_SetGR>
 800da58:	2007      	movs	r0, #7
 800da5a:	e708      	b.n	800d86e <__gnu_unwind_pr_common+0xd6>
 800da5c:	4607      	mov	r7, r0
 800da5e:	210d      	movs	r1, #13
 800da60:	4640      	mov	r0, r8
 800da62:	f7ff fe2b 	bl	800d6bc <_Unwind_GetGR>
 800da66:	2f02      	cmp	r7, #2
 800da68:	6220      	str	r0, [r4, #32]
 800da6a:	d1ce      	bne.n	800da0a <__gnu_unwind_pr_common+0x272>
 800da6c:	4623      	mov	r3, r4
 800da6e:	9a06      	ldr	r2, [sp, #24]
 800da70:	f843 2f2c 	str.w	r2, [r3, #44]!
 800da74:	6263      	str	r3, [r4, #36]	; 0x24
 800da76:	e7ca      	b.n	800da0e <__gnu_unwind_pr_common+0x276>
 800da78:	00000000 	.word	0x00000000

0800da7c <__aeabi_unwind_cpp_pr0>:
 800da7c:	2300      	movs	r3, #0
 800da7e:	f7ff be8b 	b.w	800d798 <__gnu_unwind_pr_common>
 800da82:	bf00      	nop

0800da84 <__aeabi_unwind_cpp_pr1>:
 800da84:	2301      	movs	r3, #1
 800da86:	f7ff be87 	b.w	800d798 <__gnu_unwind_pr_common>
 800da8a:	bf00      	nop

0800da8c <__aeabi_unwind_cpp_pr2>:
 800da8c:	2302      	movs	r3, #2
 800da8e:	f7ff be83 	b.w	800d798 <__gnu_unwind_pr_common>
 800da92:	bf00      	nop

0800da94 <_Unwind_VRS_Pop>:
 800da94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da98:	4604      	mov	r4, r0
 800da9a:	b0c4      	sub	sp, #272	; 0x110
 800da9c:	2904      	cmp	r1, #4
 800da9e:	d80b      	bhi.n	800dab8 <_Unwind_VRS_Pop+0x24>
 800daa0:	e8df f001 	tbb	[pc, r1]
 800daa4:	300a0359 	.word	0x300a0359
 800daa8:	0e          	.byte	0x0e
 800daa9:	00          	.byte	0x00
 800daaa:	2b01      	cmp	r3, #1
 800daac:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800dab0:	b296      	uxth	r6, r2
 800dab2:	d066      	beq.n	800db82 <_Unwind_VRS_Pop+0xee>
 800dab4:	2b05      	cmp	r3, #5
 800dab6:	d06b      	beq.n	800db90 <_Unwind_VRS_Pop+0xfc>
 800dab8:	2002      	movs	r0, #2
 800daba:	b044      	add	sp, #272	; 0x110
 800dabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d1f9      	bne.n	800dab8 <_Unwind_VRS_Pop+0x24>
 800dac4:	2a10      	cmp	r2, #16
 800dac6:	d8f7      	bhi.n	800dab8 <_Unwind_VRS_Pop+0x24>
 800dac8:	6823      	ldr	r3, [r4, #0]
 800daca:	06d9      	lsls	r1, r3, #27
 800dacc:	f100 80d3 	bmi.w	800dc76 <_Unwind_VRS_Pop+0x1e2>
 800dad0:	ae22      	add	r6, sp, #136	; 0x88
 800dad2:	4630      	mov	r0, r6
 800dad4:	9201      	str	r2, [sp, #4]
 800dad6:	f000 f975 	bl	800ddc4 <__gnu_Unwind_Save_WMMXC>
 800dada:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800dadc:	9a01      	ldr	r2, [sp, #4]
 800dade:	2300      	movs	r3, #0
 800dae0:	2001      	movs	r0, #1
 800dae2:	fa00 f103 	lsl.w	r1, r0, r3
 800dae6:	4211      	tst	r1, r2
 800dae8:	d003      	beq.n	800daf2 <_Unwind_VRS_Pop+0x5e>
 800daea:	6829      	ldr	r1, [r5, #0]
 800daec:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800daf0:	3504      	adds	r5, #4
 800daf2:	3301      	adds	r3, #1
 800daf4:	2b04      	cmp	r3, #4
 800daf6:	d1f4      	bne.n	800dae2 <_Unwind_VRS_Pop+0x4e>
 800daf8:	4630      	mov	r0, r6
 800dafa:	63a5      	str	r5, [r4, #56]	; 0x38
 800dafc:	f000 f958 	bl	800ddb0 <__gnu_Unwind_Restore_WMMXC>
 800db00:	2000      	movs	r0, #0
 800db02:	e7da      	b.n	800daba <_Unwind_VRS_Pop+0x26>
 800db04:	2b03      	cmp	r3, #3
 800db06:	d1d7      	bne.n	800dab8 <_Unwind_VRS_Pop+0x24>
 800db08:	0c15      	lsrs	r5, r2, #16
 800db0a:	b297      	uxth	r7, r2
 800db0c:	197b      	adds	r3, r7, r5
 800db0e:	2b10      	cmp	r3, #16
 800db10:	d8d2      	bhi.n	800dab8 <_Unwind_VRS_Pop+0x24>
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	071e      	lsls	r6, r3, #28
 800db16:	f100 80bf 	bmi.w	800dc98 <_Unwind_VRS_Pop+0x204>
 800db1a:	ae22      	add	r6, sp, #136	; 0x88
 800db1c:	4630      	mov	r0, r6
 800db1e:	f000 f925 	bl	800dd6c <__gnu_Unwind_Save_WMMXD>
 800db22:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 800db26:	007f      	lsls	r7, r7, #1
 800db28:	eb06 00c5 	add.w	r0, r6, r5, lsl #3
 800db2c:	1e7b      	subs	r3, r7, #1
 800db2e:	4672      	mov	r2, lr
 800db30:	b15f      	cbz	r7, 800db4a <_Unwind_VRS_Pop+0xb6>
 800db32:	ebce 0000 	rsb	r0, lr, r0
 800db36:	f1ae 0204 	sub.w	r2, lr, #4
 800db3a:	3b01      	subs	r3, #1
 800db3c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800db40:	5081      	str	r1, [r0, r2]
 800db42:	1c5d      	adds	r5, r3, #1
 800db44:	d1f9      	bne.n	800db3a <_Unwind_VRS_Pop+0xa6>
 800db46:	eb0e 0287 	add.w	r2, lr, r7, lsl #2
 800db4a:	4630      	mov	r0, r6
 800db4c:	63a2      	str	r2, [r4, #56]	; 0x38
 800db4e:	f000 f8eb 	bl	800dd28 <__gnu_Unwind_Restore_WMMXD>
 800db52:	2000      	movs	r0, #0
 800db54:	e7b1      	b.n	800daba <_Unwind_VRS_Pop+0x26>
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1ae      	bne.n	800dab8 <_Unwind_VRS_Pop+0x24>
 800db5a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800db5c:	b296      	uxth	r6, r2
 800db5e:	2001      	movs	r0, #1
 800db60:	fa00 f103 	lsl.w	r1, r0, r3
 800db64:	4231      	tst	r1, r6
 800db66:	d004      	beq.n	800db72 <_Unwind_VRS_Pop+0xde>
 800db68:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 800db6c:	6829      	ldr	r1, [r5, #0]
 800db6e:	6079      	str	r1, [r7, #4]
 800db70:	3504      	adds	r5, #4
 800db72:	3301      	adds	r3, #1
 800db74:	2b10      	cmp	r3, #16
 800db76:	d1f3      	bne.n	800db60 <_Unwind_VRS_Pop+0xcc>
 800db78:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 800db7c:	d175      	bne.n	800dc6a <_Unwind_VRS_Pop+0x1d6>
 800db7e:	63a5      	str	r5, [r4, #56]	; 0x38
 800db80:	e79b      	b.n	800daba <_Unwind_VRS_Pop+0x26>
 800db82:	1972      	adds	r2, r6, r5
 800db84:	2a10      	cmp	r2, #16
 800db86:	d897      	bhi.n	800dab8 <_Unwind_VRS_Pop+0x24>
 800db88:	2d0f      	cmp	r5, #15
 800db8a:	d895      	bhi.n	800dab8 <_Unwind_VRS_Pop+0x24>
 800db8c:	2700      	movs	r7, #0
 800db8e:	e008      	b.n	800dba2 <_Unwind_VRS_Pop+0x10e>
 800db90:	1977      	adds	r7, r6, r5
 800db92:	2f20      	cmp	r7, #32
 800db94:	d890      	bhi.n	800dab8 <_Unwind_VRS_Pop+0x24>
 800db96:	2d0f      	cmp	r5, #15
 800db98:	d969      	bls.n	800dc6e <_Unwind_VRS_Pop+0x1da>
 800db9a:	4637      	mov	r7, r6
 800db9c:	b346      	cbz	r6, 800dbf0 <_Unwind_VRS_Pop+0x15c>
 800db9e:	2d0f      	cmp	r5, #15
 800dba0:	d811      	bhi.n	800dbc6 <_Unwind_VRS_Pop+0x132>
 800dba2:	6822      	ldr	r2, [r4, #0]
 800dba4:	07d0      	lsls	r0, r2, #31
 800dba6:	d50e      	bpl.n	800dbc6 <_Unwind_VRS_Pop+0x132>
 800dba8:	f022 0101 	bic.w	r1, r2, #1
 800dbac:	2b05      	cmp	r3, #5
 800dbae:	6021      	str	r1, [r4, #0]
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f000 808b 	beq.w	800dccc <_Unwind_VRS_Pop+0x238>
 800dbb6:	f022 0203 	bic.w	r2, r2, #3
 800dbba:	f840 2b48 	str.w	r2, [r0], #72
 800dbbe:	9301      	str	r3, [sp, #4]
 800dbc0:	f000 f89e 	bl	800dd00 <__gnu_Unwind_Save_VFP>
 800dbc4:	9b01      	ldr	r3, [sp, #4]
 800dbc6:	b117      	cbz	r7, 800dbce <_Unwind_VRS_Pop+0x13a>
 800dbc8:	6822      	ldr	r2, [r4, #0]
 800dbca:	0751      	lsls	r1, r2, #29
 800dbcc:	d46c      	bmi.n	800dca8 <_Unwind_VRS_Pop+0x214>
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d074      	beq.n	800dcbc <_Unwind_VRS_Pop+0x228>
 800dbd2:	2d0f      	cmp	r5, #15
 800dbd4:	d804      	bhi.n	800dbe0 <_Unwind_VRS_Pop+0x14c>
 800dbd6:	a822      	add	r0, sp, #136	; 0x88
 800dbd8:	9301      	str	r3, [sp, #4]
 800dbda:	f000 f899 	bl	800dd10 <__gnu_Unwind_Save_VFP_D>
 800dbde:	9b01      	ldr	r3, [sp, #4]
 800dbe0:	b137      	cbz	r7, 800dbf0 <_Unwind_VRS_Pop+0x15c>
 800dbe2:	a802      	add	r0, sp, #8
 800dbe4:	9301      	str	r3, [sp, #4]
 800dbe6:	f000 f89b 	bl	800dd20 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800dbea:	9b01      	ldr	r3, [sp, #4]
 800dbec:	f1c5 0610 	rsb	r6, r5, #16
 800dbf0:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 800dbf4:	2e00      	cmp	r6, #0
 800dbf6:	46c4      	mov	ip, r8
 800dbf8:	dd12      	ble.n	800dc20 <_Unwind_VRS_Pop+0x18c>
 800dbfa:	aa22      	add	r2, sp, #136	; 0x88
 800dbfc:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 800dc00:	eb02 06c5 	add.w	r6, r2, r5, lsl #3
 800dc04:	ebc8 0606 	rsb	r6, r8, r6
 800dc08:	f10c 31ff 	add.w	r1, ip, #4294967295
 800dc0c:	f1a8 0204 	sub.w	r2, r8, #4
 800dc10:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800dc14:	50b0      	str	r0, [r6, r2]
 800dc16:	3901      	subs	r1, #1
 800dc18:	1c48      	adds	r0, r1, #1
 800dc1a:	d1f9      	bne.n	800dc10 <_Unwind_VRS_Pop+0x17c>
 800dc1c:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
 800dc20:	b1b7      	cbz	r7, 800dc50 <_Unwind_VRS_Pop+0x1bc>
 800dc22:	aa44      	add	r2, sp, #272	; 0x110
 800dc24:	2d10      	cmp	r5, #16
 800dc26:	bf2c      	ite	cs
 800dc28:	4628      	movcs	r0, r5
 800dc2a:	2010      	movcc	r0, #16
 800dc2c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800dc30:	ea4f 0847 	mov.w	r8, r7, lsl #1
 800dc34:	f5a0 70c4 	sub.w	r0, r0, #392	; 0x188
 800dc38:	f108 32ff 	add.w	r2, r8, #4294967295
 800dc3c:	4661      	mov	r1, ip
 800dc3e:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc42:	f840 6b04 	str.w	r6, [r0], #4
 800dc46:	3a01      	subs	r2, #1
 800dc48:	1c56      	adds	r6, r2, #1
 800dc4a:	d1f8      	bne.n	800dc3e <_Unwind_VRS_Pop+0x1aa>
 800dc4c:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d01a      	beq.n	800dc8a <_Unwind_VRS_Pop+0x1f6>
 800dc54:	2d0f      	cmp	r5, #15
 800dc56:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
 800dc5a:	d802      	bhi.n	800dc62 <_Unwind_VRS_Pop+0x1ce>
 800dc5c:	a822      	add	r0, sp, #136	; 0x88
 800dc5e:	f000 f853 	bl	800dd08 <__gnu_Unwind_Restore_VFP_D>
 800dc62:	b117      	cbz	r7, 800dc6a <_Unwind_VRS_Pop+0x1d6>
 800dc64:	a802      	add	r0, sp, #8
 800dc66:	f000 f857 	bl	800dd18 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	e725      	b.n	800daba <_Unwind_VRS_Pop+0x26>
 800dc6e:	2f10      	cmp	r7, #16
 800dc70:	d98c      	bls.n	800db8c <_Unwind_VRS_Pop+0xf8>
 800dc72:	3f10      	subs	r7, #16
 800dc74:	e793      	b.n	800db9e <_Unwind_VRS_Pop+0x10a>
 800dc76:	f023 0310 	bic.w	r3, r3, #16
 800dc7a:	6023      	str	r3, [r4, #0]
 800dc7c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800dc80:	9201      	str	r2, [sp, #4]
 800dc82:	f000 f89f 	bl	800ddc4 <__gnu_Unwind_Save_WMMXC>
 800dc86:	9a01      	ldr	r2, [sp, #4]
 800dc88:	e722      	b.n	800dad0 <_Unwind_VRS_Pop+0x3c>
 800dc8a:	f10c 0304 	add.w	r3, ip, #4
 800dc8e:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc90:	a822      	add	r0, sp, #136	; 0x88
 800dc92:	f000 f831 	bl	800dcf8 <__gnu_Unwind_Restore_VFP>
 800dc96:	e7e8      	b.n	800dc6a <_Unwind_VRS_Pop+0x1d6>
 800dc98:	f023 0308 	bic.w	r3, r3, #8
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800dca2:	f000 f863 	bl	800dd6c <__gnu_Unwind_Save_WMMXD>
 800dca6:	e738      	b.n	800db1a <_Unwind_VRS_Pop+0x86>
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f022 0204 	bic.w	r2, r2, #4
 800dcae:	f840 2bd0 	str.w	r2, [r0], #208
 800dcb2:	9301      	str	r3, [sp, #4]
 800dcb4:	f000 f834 	bl	800dd20 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800dcb8:	9b01      	ldr	r3, [sp, #4]
 800dcba:	e788      	b.n	800dbce <_Unwind_VRS_Pop+0x13a>
 800dcbc:	a822      	add	r0, sp, #136	; 0x88
 800dcbe:	9301      	str	r3, [sp, #4]
 800dcc0:	f000 f81e 	bl	800dd00 <__gnu_Unwind_Save_VFP>
 800dcc4:	9b01      	ldr	r3, [sp, #4]
 800dcc6:	2f00      	cmp	r7, #0
 800dcc8:	d190      	bne.n	800dbec <_Unwind_VRS_Pop+0x158>
 800dcca:	e791      	b.n	800dbf0 <_Unwind_VRS_Pop+0x15c>
 800dccc:	f041 0102 	orr.w	r1, r1, #2
 800dcd0:	f840 1b48 	str.w	r1, [r0], #72
 800dcd4:	9301      	str	r3, [sp, #4]
 800dcd6:	f000 f81b 	bl	800dd10 <__gnu_Unwind_Save_VFP_D>
 800dcda:	9b01      	ldr	r3, [sp, #4]
 800dcdc:	e773      	b.n	800dbc6 <_Unwind_VRS_Pop+0x132>
 800dcde:	bf00      	nop

0800dce0 <__restore_core_regs>:
 800dce0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800dce4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 800dce8:	469c      	mov	ip, r3
 800dcea:	46a6      	mov	lr, r4
 800dcec:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800dcf0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800dcf4:	46e5      	mov	sp, ip
 800dcf6:	bd00      	pop	{pc}

0800dcf8 <__gnu_Unwind_Restore_VFP>:
 800dcf8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 800dcfc:	4770      	bx	lr
 800dcfe:	bf00      	nop

0800dd00 <__gnu_Unwind_Save_VFP>:
 800dd00:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 800dd04:	4770      	bx	lr
 800dd06:	bf00      	nop

0800dd08 <__gnu_Unwind_Restore_VFP_D>:
 800dd08:	ec90 0b20 	vldmia	r0, {d0-d15}
 800dd0c:	4770      	bx	lr
 800dd0e:	bf00      	nop

0800dd10 <__gnu_Unwind_Save_VFP_D>:
 800dd10:	ec80 0b20 	vstmia	r0, {d0-d15}
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop

0800dd18 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800dd18:	ecd0 0b20 	vldmia	r0, {d16-d31}
 800dd1c:	4770      	bx	lr
 800dd1e:	bf00      	nop

0800dd20 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 800dd20:	ecc0 0b20 	vstmia	r0, {d16-d31}
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop

0800dd28 <__gnu_Unwind_Restore_WMMXD>:
 800dd28:	ecf0 0102 	ldfe	f0, [r0], #8
 800dd2c:	ecf0 1102 	ldfe	f1, [r0], #8
 800dd30:	ecf0 2102 	ldfe	f2, [r0], #8
 800dd34:	ecf0 3102 	ldfe	f3, [r0], #8
 800dd38:	ecf0 4102 	ldfe	f4, [r0], #8
 800dd3c:	ecf0 5102 	ldfe	f5, [r0], #8
 800dd40:	ecf0 6102 	ldfe	f6, [r0], #8
 800dd44:	ecf0 7102 	ldfe	f7, [r0], #8
 800dd48:	ecf0 8102 	ldfp	f0, [r0], #8
 800dd4c:	ecf0 9102 	ldfp	f1, [r0], #8
 800dd50:	ecf0 a102 	ldfp	f2, [r0], #8
 800dd54:	ecf0 b102 	ldfp	f3, [r0], #8
 800dd58:	ecf0 c102 	ldfp	f4, [r0], #8
 800dd5c:	ecf0 d102 	ldfp	f5, [r0], #8
 800dd60:	ecf0 e102 	ldfp	f6, [r0], #8
 800dd64:	ecf0 f102 	ldfp	f7, [r0], #8
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop

0800dd6c <__gnu_Unwind_Save_WMMXD>:
 800dd6c:	ece0 0102 	stfe	f0, [r0], #8
 800dd70:	ece0 1102 	stfe	f1, [r0], #8
 800dd74:	ece0 2102 	stfe	f2, [r0], #8
 800dd78:	ece0 3102 	stfe	f3, [r0], #8
 800dd7c:	ece0 4102 	stfe	f4, [r0], #8
 800dd80:	ece0 5102 	stfe	f5, [r0], #8
 800dd84:	ece0 6102 	stfe	f6, [r0], #8
 800dd88:	ece0 7102 	stfe	f7, [r0], #8
 800dd8c:	ece0 8102 	stfp	f0, [r0], #8
 800dd90:	ece0 9102 	stfp	f1, [r0], #8
 800dd94:	ece0 a102 	stfp	f2, [r0], #8
 800dd98:	ece0 b102 	stfp	f3, [r0], #8
 800dd9c:	ece0 c102 	stfp	f4, [r0], #8
 800dda0:	ece0 d102 	stfp	f5, [r0], #8
 800dda4:	ece0 e102 	stfp	f6, [r0], #8
 800dda8:	ece0 f102 	stfp	f7, [r0], #8
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop

0800ddb0 <__gnu_Unwind_Restore_WMMXC>:
 800ddb0:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800ddb4:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800ddb8:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800ddbc:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop

0800ddc4 <__gnu_Unwind_Save_WMMXC>:
 800ddc4:	fca0 8101 	stc2	1, cr8, [r0], #4
 800ddc8:	fca0 9101 	stc2	1, cr9, [r0], #4
 800ddcc:	fca0 a101 	stc2	1, cr10, [r0], #4
 800ddd0:	fca0 b101 	stc2	1, cr11, [r0], #4
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop

0800ddd8 <_Unwind_RaiseException>:
 800ddd8:	46ec      	mov	ip, sp
 800ddda:	b500      	push	{lr}
 800dddc:	e92d 5000 	stmdb	sp!, {ip, lr}
 800dde0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800dde4:	f04f 0300 	mov.w	r3, #0
 800dde8:	e92d 000c 	stmdb	sp!, {r2, r3}
 800ddec:	a901      	add	r1, sp, #4
 800ddee:	f7ff fbdd 	bl	800d5ac <__gnu_Unwind_RaiseException>
 800ddf2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800ddf6:	b012      	add	sp, #72	; 0x48
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop

0800ddfc <_Unwind_Resume>:
 800ddfc:	46ec      	mov	ip, sp
 800ddfe:	b500      	push	{lr}
 800de00:	e92d 5000 	stmdb	sp!, {ip, lr}
 800de04:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800de08:	f04f 0300 	mov.w	r3, #0
 800de0c:	e92d 000c 	stmdb	sp!, {r2, r3}
 800de10:	a901      	add	r1, sp, #4
 800de12:	f7ff fc05 	bl	800d620 <__gnu_Unwind_Resume>
 800de16:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800de1a:	b012      	add	sp, #72	; 0x48
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop

0800de20 <_Unwind_Resume_or_Rethrow>:
 800de20:	46ec      	mov	ip, sp
 800de22:	b500      	push	{lr}
 800de24:	e92d 5000 	stmdb	sp!, {ip, lr}
 800de28:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800de2c:	f04f 0300 	mov.w	r3, #0
 800de30:	e92d 000c 	stmdb	sp!, {r2, r3}
 800de34:	a901      	add	r1, sp, #4
 800de36:	f7ff fc15 	bl	800d664 <__gnu_Unwind_Resume_or_Rethrow>
 800de3a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800de3e:	b012      	add	sp, #72	; 0x48
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop

0800de44 <_Unwind_ForcedUnwind>:
 800de44:	46ec      	mov	ip, sp
 800de46:	b500      	push	{lr}
 800de48:	e92d 5000 	stmdb	sp!, {ip, lr}
 800de4c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800de50:	f04f 0300 	mov.w	r3, #0
 800de54:	e92d 000c 	stmdb	sp!, {r2, r3}
 800de58:	ab01      	add	r3, sp, #4
 800de5a:	f7ff fbd7 	bl	800d60c <__gnu_Unwind_ForcedUnwind>
 800de5e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800de62:	b012      	add	sp, #72	; 0x48
 800de64:	4770      	bx	lr
 800de66:	bf00      	nop

0800de68 <_Unwind_Backtrace>:
 800de68:	46ec      	mov	ip, sp
 800de6a:	b500      	push	{lr}
 800de6c:	e92d 5000 	stmdb	sp!, {ip, lr}
 800de70:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800de74:	f04f 0300 	mov.w	r3, #0
 800de78:	e92d 000c 	stmdb	sp!, {r2, r3}
 800de7c:	aa01      	add	r2, sp, #4
 800de7e:	f7ff fc53 	bl	800d728 <__gnu_Unwind_Backtrace>
 800de82:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800de86:	b012      	add	sp, #72	; 0x48
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop

0800de8c <next_unwind_byte>:
 800de8c:	7a03      	ldrb	r3, [r0, #8]
 800de8e:	b91b      	cbnz	r3, 800de98 <next_unwind_byte+0xc>
 800de90:	7a43      	ldrb	r3, [r0, #9]
 800de92:	b943      	cbnz	r3, 800dea6 <next_unwind_byte+0x1a>
 800de94:	20b0      	movs	r0, #176	; 0xb0
 800de96:	4770      	bx	lr
 800de98:	6802      	ldr	r2, [r0, #0]
 800de9a:	3b01      	subs	r3, #1
 800de9c:	7203      	strb	r3, [r0, #8]
 800de9e:	0213      	lsls	r3, r2, #8
 800dea0:	6003      	str	r3, [r0, #0]
 800dea2:	0e10      	lsrs	r0, r2, #24
 800dea4:	4770      	bx	lr
 800dea6:	6842      	ldr	r2, [r0, #4]
 800dea8:	3b01      	subs	r3, #1
 800deaa:	7243      	strb	r3, [r0, #9]
 800deac:	1d11      	adds	r1, r2, #4
 800deae:	6812      	ldr	r2, [r2, #0]
 800deb0:	6041      	str	r1, [r0, #4]
 800deb2:	2303      	movs	r3, #3
 800deb4:	7203      	strb	r3, [r0, #8]
 800deb6:	0213      	lsls	r3, r2, #8
 800deb8:	6003      	str	r3, [r0, #0]
 800deba:	0e10      	lsrs	r0, r2, #24
 800debc:	4770      	bx	lr
 800debe:	bf00      	nop

0800dec0 <_Unwind_GetGR.constprop.0>:
 800dec0:	b500      	push	{lr}
 800dec2:	b085      	sub	sp, #20
 800dec4:	ab03      	add	r3, sp, #12
 800dec6:	2100      	movs	r1, #0
 800dec8:	9300      	str	r3, [sp, #0]
 800deca:	220c      	movs	r2, #12
 800decc:	460b      	mov	r3, r1
 800dece:	f7ff fbdb 	bl	800d688 <_Unwind_VRS_Get>
 800ded2:	9803      	ldr	r0, [sp, #12]
 800ded4:	b005      	add	sp, #20
 800ded6:	f85d fb04 	ldr.w	pc, [sp], #4
 800deda:	bf00      	nop

0800dedc <unwind_UCB_from_context>:
 800dedc:	f7ff bff0 	b.w	800dec0 <_Unwind_GetGR.constprop.0>

0800dee0 <__gnu_unwind_execute>:
 800dee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dee4:	4606      	mov	r6, r0
 800dee6:	b085      	sub	sp, #20
 800dee8:	460d      	mov	r5, r1
 800deea:	f04f 0800 	mov.w	r8, #0
 800deee:	4628      	mov	r0, r5
 800def0:	f7ff ffcc 	bl	800de8c <next_unwind_byte>
 800def4:	28b0      	cmp	r0, #176	; 0xb0
 800def6:	4604      	mov	r4, r0
 800def8:	f000 80ac 	beq.w	800e054 <__gnu_unwind_execute+0x174>
 800defc:	f020 027f 	bic.w	r2, r0, #127	; 0x7f
 800df00:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
 800df04:	d020      	beq.n	800df48 <__gnu_unwind_execute+0x68>
 800df06:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800df0a:	2a80      	cmp	r2, #128	; 0x80
 800df0c:	d073      	beq.n	800dff6 <__gnu_unwind_execute+0x116>
 800df0e:	2a90      	cmp	r2, #144	; 0x90
 800df10:	d036      	beq.n	800df80 <__gnu_unwind_execute+0xa0>
 800df12:	2aa0      	cmp	r2, #160	; 0xa0
 800df14:	d042      	beq.n	800df9c <__gnu_unwind_execute+0xbc>
 800df16:	2ab0      	cmp	r2, #176	; 0xb0
 800df18:	d056      	beq.n	800dfc8 <__gnu_unwind_execute+0xe8>
 800df1a:	2ac0      	cmp	r2, #192	; 0xc0
 800df1c:	f000 8082 	beq.w	800e024 <__gnu_unwind_execute+0x144>
 800df20:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800df24:	2bd0      	cmp	r3, #208	; 0xd0
 800df26:	d10b      	bne.n	800df40 <__gnu_unwind_execute+0x60>
 800df28:	f000 0407 	and.w	r4, r0, #7
 800df2c:	1c62      	adds	r2, r4, #1
 800df2e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800df32:	4630      	mov	r0, r6
 800df34:	2101      	movs	r1, #1
 800df36:	2305      	movs	r3, #5
 800df38:	f7ff fdac 	bl	800da94 <_Unwind_VRS_Pop>
 800df3c:	2800      	cmp	r0, #0
 800df3e:	d0d6      	beq.n	800deee <__gnu_unwind_execute+0xe>
 800df40:	2009      	movs	r0, #9
 800df42:	b005      	add	sp, #20
 800df44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df48:	af03      	add	r7, sp, #12
 800df4a:	ea4f 0980 	mov.w	r9, r0, lsl #2
 800df4e:	460b      	mov	r3, r1
 800df50:	9700      	str	r7, [sp, #0]
 800df52:	4630      	mov	r0, r6
 800df54:	220d      	movs	r2, #13
 800df56:	f7ff fb97 	bl	800d688 <_Unwind_VRS_Get>
 800df5a:	fa5f f989 	uxtb.w	r9, r9
 800df5e:	9b03      	ldr	r3, [sp, #12]
 800df60:	f109 0904 	add.w	r9, r9, #4
 800df64:	0660      	lsls	r0, r4, #25
 800df66:	bf4c      	ite	mi
 800df68:	ebc9 0303 	rsbmi	r3, r9, r3
 800df6c:	444b      	addpl	r3, r9
 800df6e:	9303      	str	r3, [sp, #12]
 800df70:	2100      	movs	r1, #0
 800df72:	9700      	str	r7, [sp, #0]
 800df74:	460b      	mov	r3, r1
 800df76:	4630      	mov	r0, r6
 800df78:	220d      	movs	r2, #13
 800df7a:	f7ff fbad 	bl	800d6d8 <_Unwind_VRS_Set>
 800df7e:	e7b6      	b.n	800deee <__gnu_unwind_execute+0xe>
 800df80:	f000 030d 	and.w	r3, r0, #13
 800df84:	2b0d      	cmp	r3, #13
 800df86:	d0db      	beq.n	800df40 <__gnu_unwind_execute+0x60>
 800df88:	af03      	add	r7, sp, #12
 800df8a:	2100      	movs	r1, #0
 800df8c:	f000 020f 	and.w	r2, r0, #15
 800df90:	9700      	str	r7, [sp, #0]
 800df92:	460b      	mov	r3, r1
 800df94:	4630      	mov	r0, r6
 800df96:	f7ff fb77 	bl	800d688 <_Unwind_VRS_Get>
 800df9a:	e7e9      	b.n	800df70 <__gnu_unwind_execute+0x90>
 800df9c:	43c2      	mvns	r2, r0
 800df9e:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 800dfa2:	f002 0207 	and.w	r2, r2, #7
 800dfa6:	fa43 f202 	asr.w	r2, r3, r2
 800dfaa:	0701      	lsls	r1, r0, #28
 800dfac:	ea02 0203 	and.w	r2, r2, r3
 800dfb0:	f04f 0100 	mov.w	r1, #0
 800dfb4:	bf48      	it	mi
 800dfb6:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 800dfba:	460b      	mov	r3, r1
 800dfbc:	4630      	mov	r0, r6
 800dfbe:	f7ff fd69 	bl	800da94 <_Unwind_VRS_Pop>
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	d1bc      	bne.n	800df40 <__gnu_unwind_execute+0x60>
 800dfc6:	e792      	b.n	800deee <__gnu_unwind_execute+0xe>
 800dfc8:	28b1      	cmp	r0, #177	; 0xb1
 800dfca:	d048      	beq.n	800e05e <__gnu_unwind_execute+0x17e>
 800dfcc:	28b2      	cmp	r0, #178	; 0xb2
 800dfce:	d051      	beq.n	800e074 <__gnu_unwind_execute+0x194>
 800dfd0:	28b3      	cmp	r0, #179	; 0xb3
 800dfd2:	d07c      	beq.n	800e0ce <__gnu_unwind_execute+0x1ee>
 800dfd4:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800dfd8:	2bb4      	cmp	r3, #180	; 0xb4
 800dfda:	d0b1      	beq.n	800df40 <__gnu_unwind_execute+0x60>
 800dfdc:	f000 0207 	and.w	r2, r0, #7
 800dfe0:	3201      	adds	r2, #1
 800dfe2:	2101      	movs	r1, #1
 800dfe4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800dfe8:	460b      	mov	r3, r1
 800dfea:	4630      	mov	r0, r6
 800dfec:	f7ff fd52 	bl	800da94 <_Unwind_VRS_Pop>
 800dff0:	2800      	cmp	r0, #0
 800dff2:	d1a5      	bne.n	800df40 <__gnu_unwind_execute+0x60>
 800dff4:	e77b      	b.n	800deee <__gnu_unwind_execute+0xe>
 800dff6:	4628      	mov	r0, r5
 800dff8:	f7ff ff48 	bl	800de8c <next_unwind_byte>
 800dffc:	0224      	lsls	r4, r4, #8
 800dffe:	4320      	orrs	r0, r4
 800e000:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e004:	d09c      	beq.n	800df40 <__gnu_unwind_execute+0x60>
 800e006:	0104      	lsls	r4, r0, #4
 800e008:	2100      	movs	r1, #0
 800e00a:	b2a2      	uxth	r2, r4
 800e00c:	460b      	mov	r3, r1
 800e00e:	4630      	mov	r0, r6
 800e010:	f7ff fd40 	bl	800da94 <_Unwind_VRS_Pop>
 800e014:	2800      	cmp	r0, #0
 800e016:	d193      	bne.n	800df40 <__gnu_unwind_execute+0x60>
 800e018:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800e01c:	bf18      	it	ne
 800e01e:	f04f 0801 	movne.w	r8, #1
 800e022:	e764      	b.n	800deee <__gnu_unwind_execute+0xe>
 800e024:	28c6      	cmp	r0, #198	; 0xc6
 800e026:	d05e      	beq.n	800e0e6 <__gnu_unwind_execute+0x206>
 800e028:	28c7      	cmp	r0, #199	; 0xc7
 800e02a:	d068      	beq.n	800e0fe <__gnu_unwind_execute+0x21e>
 800e02c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800e030:	2bc0      	cmp	r3, #192	; 0xc0
 800e032:	d077      	beq.n	800e124 <__gnu_unwind_execute+0x244>
 800e034:	28c8      	cmp	r0, #200	; 0xc8
 800e036:	f000 808d 	beq.w	800e154 <__gnu_unwind_execute+0x274>
 800e03a:	28c9      	cmp	r0, #201	; 0xc9
 800e03c:	d180      	bne.n	800df40 <__gnu_unwind_execute+0x60>
 800e03e:	4628      	mov	r0, r5
 800e040:	f7ff ff24 	bl	800de8c <next_unwind_byte>
 800e044:	f000 030f 	and.w	r3, r0, #15
 800e048:	3301      	adds	r3, #1
 800e04a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800e04e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800e052:	e76e      	b.n	800df32 <__gnu_unwind_execute+0x52>
 800e054:	f1b8 0f00 	cmp.w	r8, #0
 800e058:	d06b      	beq.n	800e132 <__gnu_unwind_execute+0x252>
 800e05a:	2000      	movs	r0, #0
 800e05c:	e771      	b.n	800df42 <__gnu_unwind_execute+0x62>
 800e05e:	4628      	mov	r0, r5
 800e060:	f7ff ff14 	bl	800de8c <next_unwind_byte>
 800e064:	4602      	mov	r2, r0
 800e066:	2800      	cmp	r0, #0
 800e068:	f43f af6a 	beq.w	800df40 <__gnu_unwind_execute+0x60>
 800e06c:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
 800e070:	d0ba      	beq.n	800dfe8 <__gnu_unwind_execute+0x108>
 800e072:	e765      	b.n	800df40 <__gnu_unwind_execute+0x60>
 800e074:	2100      	movs	r1, #0
 800e076:	af03      	add	r7, sp, #12
 800e078:	220d      	movs	r2, #13
 800e07a:	460b      	mov	r3, r1
 800e07c:	9700      	str	r7, [sp, #0]
 800e07e:	4630      	mov	r0, r6
 800e080:	f7ff fb02 	bl	800d688 <_Unwind_VRS_Get>
 800e084:	4628      	mov	r0, r5
 800e086:	f7ff ff01 	bl	800de8c <next_unwind_byte>
 800e08a:	0602      	lsls	r2, r0, #24
 800e08c:	f04f 0402 	mov.w	r4, #2
 800e090:	d50c      	bpl.n	800e0ac <__gnu_unwind_execute+0x1cc>
 800e092:	9b03      	ldr	r3, [sp, #12]
 800e094:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e098:	40a0      	lsls	r0, r4
 800e09a:	4403      	add	r3, r0
 800e09c:	4628      	mov	r0, r5
 800e09e:	9303      	str	r3, [sp, #12]
 800e0a0:	f7ff fef4 	bl	800de8c <next_unwind_byte>
 800e0a4:	0603      	lsls	r3, r0, #24
 800e0a6:	f104 0407 	add.w	r4, r4, #7
 800e0aa:	d4f2      	bmi.n	800e092 <__gnu_unwind_execute+0x1b2>
 800e0ac:	9b03      	ldr	r3, [sp, #12]
 800e0ae:	9700      	str	r7, [sp, #0]
 800e0b0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e0b4:	fa00 f404 	lsl.w	r4, r0, r4
 800e0b8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800e0bc:	2100      	movs	r1, #0
 800e0be:	441c      	add	r4, r3
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	220d      	movs	r2, #13
 800e0c6:	9403      	str	r4, [sp, #12]
 800e0c8:	f7ff fb06 	bl	800d6d8 <_Unwind_VRS_Set>
 800e0cc:	e70f      	b.n	800deee <__gnu_unwind_execute+0xe>
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	f7ff fedc 	bl	800de8c <next_unwind_byte>
 800e0d4:	f000 030f 	and.w	r3, r0, #15
 800e0d8:	3301      	adds	r3, #1
 800e0da:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800e0de:	2101      	movs	r1, #1
 800e0e0:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800e0e4:	e780      	b.n	800dfe8 <__gnu_unwind_execute+0x108>
 800e0e6:	4628      	mov	r0, r5
 800e0e8:	f7ff fed0 	bl	800de8c <next_unwind_byte>
 800e0ec:	f000 030f 	and.w	r3, r0, #15
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800e0f6:	2103      	movs	r1, #3
 800e0f8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800e0fc:	e774      	b.n	800dfe8 <__gnu_unwind_execute+0x108>
 800e0fe:	4628      	mov	r0, r5
 800e100:	f7ff fec4 	bl	800de8c <next_unwind_byte>
 800e104:	4602      	mov	r2, r0
 800e106:	2800      	cmp	r0, #0
 800e108:	f43f af1a 	beq.w	800df40 <__gnu_unwind_execute+0x60>
 800e10c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800e110:	f47f af16 	bne.w	800df40 <__gnu_unwind_execute+0x60>
 800e114:	4630      	mov	r0, r6
 800e116:	2104      	movs	r1, #4
 800e118:	f7ff fcbc 	bl	800da94 <_Unwind_VRS_Pop>
 800e11c:	2800      	cmp	r0, #0
 800e11e:	f47f af0f 	bne.w	800df40 <__gnu_unwind_execute+0x60>
 800e122:	e6e4      	b.n	800deee <__gnu_unwind_execute+0xe>
 800e124:	f000 020f 	and.w	r2, r0, #15
 800e128:	3201      	adds	r2, #1
 800e12a:	2103      	movs	r1, #3
 800e12c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800e130:	e75a      	b.n	800dfe8 <__gnu_unwind_execute+0x108>
 800e132:	ac03      	add	r4, sp, #12
 800e134:	4641      	mov	r1, r8
 800e136:	220e      	movs	r2, #14
 800e138:	4643      	mov	r3, r8
 800e13a:	9400      	str	r4, [sp, #0]
 800e13c:	4630      	mov	r0, r6
 800e13e:	f7ff faa3 	bl	800d688 <_Unwind_VRS_Get>
 800e142:	9400      	str	r4, [sp, #0]
 800e144:	4630      	mov	r0, r6
 800e146:	4641      	mov	r1, r8
 800e148:	220f      	movs	r2, #15
 800e14a:	4643      	mov	r3, r8
 800e14c:	f7ff fac4 	bl	800d6d8 <_Unwind_VRS_Set>
 800e150:	4640      	mov	r0, r8
 800e152:	e6f6      	b.n	800df42 <__gnu_unwind_execute+0x62>
 800e154:	4628      	mov	r0, r5
 800e156:	f7ff fe99 	bl	800de8c <next_unwind_byte>
 800e15a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800e15e:	f000 030f 	and.w	r3, r0, #15
 800e162:	3210      	adds	r2, #16
 800e164:	3301      	adds	r3, #1
 800e166:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800e16a:	e6e2      	b.n	800df32 <__gnu_unwind_execute+0x52>

0800e16c <__gnu_unwind_frame>:
 800e16c:	b500      	push	{lr}
 800e16e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800e170:	b085      	sub	sp, #20
 800e172:	685a      	ldr	r2, [r3, #4]
 800e174:	2003      	movs	r0, #3
 800e176:	f88d 000c 	strb.w	r0, [sp, #12]
 800e17a:	4608      	mov	r0, r1
 800e17c:	0211      	lsls	r1, r2, #8
 800e17e:	9101      	str	r1, [sp, #4]
 800e180:	79da      	ldrb	r2, [r3, #7]
 800e182:	f88d 200d 	strb.w	r2, [sp, #13]
 800e186:	3308      	adds	r3, #8
 800e188:	a901      	add	r1, sp, #4
 800e18a:	9302      	str	r3, [sp, #8]
 800e18c:	f7ff fea8 	bl	800dee0 <__gnu_unwind_execute>
 800e190:	b005      	add	sp, #20
 800e192:	f85d fb04 	ldr.w	pc, [sp], #4
 800e196:	bf00      	nop

0800e198 <_Unwind_GetRegionStart>:
 800e198:	b508      	push	{r3, lr}
 800e19a:	f7ff fe9f 	bl	800dedc <unwind_UCB_from_context>
 800e19e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800e1a0:	bd08      	pop	{r3, pc}
 800e1a2:	bf00      	nop

0800e1a4 <_Unwind_GetLanguageSpecificData>:
 800e1a4:	b508      	push	{r3, lr}
 800e1a6:	f7ff fe99 	bl	800dedc <unwind_UCB_from_context>
 800e1aa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800e1ac:	79da      	ldrb	r2, [r3, #7]
 800e1ae:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800e1b2:	3008      	adds	r0, #8
 800e1b4:	bd08      	pop	{r3, pc}
 800e1b6:	bf00      	nop

0800e1b8 <_Unwind_GetDataRelBase>:
 800e1b8:	b508      	push	{r3, lr}
 800e1ba:	f000 fc81 	bl	800eac0 <abort>
 800e1be:	bf00      	nop

0800e1c0 <_Unwind_GetTextRelBase>:
 800e1c0:	b508      	push	{r3, lr}
 800e1c2:	f000 fc7d 	bl	800eac0 <abort>
 800e1c6:	bf00      	nop

0800e1c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e1c8:	f8df d03c 	ldr.w	sp, [pc, #60]	; 800e208 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e1cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e1ce:	f000 b804 	b.w	800e1da <LoopCopyDataInit>

0800e1d2 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e1d2:	4b0e      	ldr	r3, [pc, #56]	; (800e20c <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 800e1d4:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e1d6:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e1d8:	3104      	adds	r1, #4

0800e1da <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e1da:	480d      	ldr	r0, [pc, #52]	; (800e210 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 800e1dc:	4b0d      	ldr	r3, [pc, #52]	; (800e214 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 800e1de:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e1e0:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e1e2:	f4ff aff6 	bcc.w	800e1d2 <CopyDataInit>
  ldr  r2, =_sbss
 800e1e6:	4a0c      	ldr	r2, [pc, #48]	; (800e218 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 800e1e8:	f000 b803 	b.w	800e1f2 <LoopFillZerobss>

0800e1ec <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e1ec:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e1ee:	f842 3b04 	str.w	r3, [r2], #4

0800e1f2 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e1f2:	4b0a      	ldr	r3, [pc, #40]	; (800e21c <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 800e1f4:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e1f6:	f4ff aff9 	bcc.w	800e1ec <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800e1fa:	f7fe ffa9 	bl	800d150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e1fe:	f000 f811 	bl	800e224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e202:	f7f2 fe11 	bl	8000e28 <main>
  bx  lr    
 800e206:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e208:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800e20c:	0800ee00 	.word	0x0800ee00
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e210:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e214:	20000674 	.word	0x20000674
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800e218:	20000674 	.word	0x20000674
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e21c:	20000fe0 	.word	0x20000fe0

0800e220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e220:	f7ff bffe 	b.w	800e220 <ADC_IRQHandler>

0800e224 <__libc_init_array>:
 800e224:	b570      	push	{r4, r5, r6, lr}
 800e226:	4b0e      	ldr	r3, [pc, #56]	; (800e260 <__libc_init_array+0x3c>)
 800e228:	4d0e      	ldr	r5, [pc, #56]	; (800e264 <__libc_init_array+0x40>)
 800e22a:	1aed      	subs	r5, r5, r3
 800e22c:	10ad      	asrs	r5, r5, #2
 800e22e:	2400      	movs	r4, #0
 800e230:	461e      	mov	r6, r3
 800e232:	42ac      	cmp	r4, r5
 800e234:	d004      	beq.n	800e240 <__libc_init_array+0x1c>
 800e236:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e23a:	4790      	blx	r2
 800e23c:	3401      	adds	r4, #1
 800e23e:	e7f8      	b.n	800e232 <__libc_init_array+0xe>
 800e240:	f000 fd00 	bl	800ec44 <_init>
 800e244:	4d08      	ldr	r5, [pc, #32]	; (800e268 <__libc_init_array+0x44>)
 800e246:	4b09      	ldr	r3, [pc, #36]	; (800e26c <__libc_init_array+0x48>)
 800e248:	1aed      	subs	r5, r5, r3
 800e24a:	10ad      	asrs	r5, r5, #2
 800e24c:	2400      	movs	r4, #0
 800e24e:	461e      	mov	r6, r3
 800e250:	42ac      	cmp	r4, r5
 800e252:	d004      	beq.n	800e25e <__libc_init_array+0x3a>
 800e254:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e258:	4790      	blx	r2
 800e25a:	3401      	adds	r4, #1
 800e25c:	e7f8      	b.n	800e250 <__libc_init_array+0x2c>
 800e25e:	bd70      	pop	{r4, r5, r6, pc}
 800e260:	0800edf8 	.word	0x0800edf8
 800e264:	0800edf8 	.word	0x0800edf8
 800e268:	0800edfc 	.word	0x0800edfc
 800e26c:	0800edf8 	.word	0x0800edf8

0800e270 <malloc>:
 800e270:	4b02      	ldr	r3, [pc, #8]	; (800e27c <malloc+0xc>)
 800e272:	4601      	mov	r1, r0
 800e274:	6818      	ldr	r0, [r3, #0]
 800e276:	f000 b80b 	b.w	800e290 <_malloc_r>
 800e27a:	bf00      	nop
 800e27c:	20000670 	.word	0x20000670

0800e280 <free>:
 800e280:	4b02      	ldr	r3, [pc, #8]	; (800e28c <free+0xc>)
 800e282:	4601      	mov	r1, r0
 800e284:	6818      	ldr	r0, [r3, #0]
 800e286:	f000 baed 	b.w	800e864 <_free_r>
 800e28a:	bf00      	nop
 800e28c:	20000670 	.word	0x20000670

0800e290 <_malloc_r>:
 800e290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e294:	f101 040b 	add.w	r4, r1, #11
 800e298:	2c16      	cmp	r4, #22
 800e29a:	b085      	sub	sp, #20
 800e29c:	4607      	mov	r7, r0
 800e29e:	d903      	bls.n	800e2a8 <_malloc_r+0x18>
 800e2a0:	f034 0407 	bics.w	r4, r4, #7
 800e2a4:	d501      	bpl.n	800e2aa <_malloc_r+0x1a>
 800e2a6:	e002      	b.n	800e2ae <_malloc_r+0x1e>
 800e2a8:	2410      	movs	r4, #16
 800e2aa:	428c      	cmp	r4, r1
 800e2ac:	d202      	bcs.n	800e2b4 <_malloc_r+0x24>
 800e2ae:	230c      	movs	r3, #12
 800e2b0:	603b      	str	r3, [r7, #0]
 800e2b2:	e1dd      	b.n	800e670 <_malloc_r+0x3e0>
 800e2b4:	4638      	mov	r0, r7
 800e2b6:	f000 f9fd 	bl	800e6b4 <__malloc_lock>
 800e2ba:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800e2be:	4d97      	ldr	r5, [pc, #604]	; (800e51c <_malloc_r+0x28c>)
 800e2c0:	d214      	bcs.n	800e2ec <_malloc_r+0x5c>
 800e2c2:	08e2      	lsrs	r2, r4, #3
 800e2c4:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 800e2c8:	68de      	ldr	r6, [r3, #12]
 800e2ca:	429e      	cmp	r6, r3
 800e2cc:	d106      	bne.n	800e2dc <_malloc_r+0x4c>
 800e2ce:	f106 0308 	add.w	r3, r6, #8
 800e2d2:	6976      	ldr	r6, [r6, #20]
 800e2d4:	429e      	cmp	r6, r3
 800e2d6:	bf08      	it	eq
 800e2d8:	3202      	addeq	r2, #2
 800e2da:	d043      	beq.n	800e364 <_malloc_r+0xd4>
 800e2dc:	6873      	ldr	r3, [r6, #4]
 800e2de:	68f2      	ldr	r2, [r6, #12]
 800e2e0:	68b1      	ldr	r1, [r6, #8]
 800e2e2:	f023 0303 	bic.w	r3, r3, #3
 800e2e6:	60ca      	str	r2, [r1, #12]
 800e2e8:	6091      	str	r1, [r2, #8]
 800e2ea:	e05d      	b.n	800e3a8 <_malloc_r+0x118>
 800e2ec:	0a62      	lsrs	r2, r4, #9
 800e2ee:	d01a      	beq.n	800e326 <_malloc_r+0x96>
 800e2f0:	2a04      	cmp	r2, #4
 800e2f2:	d802      	bhi.n	800e2fa <_malloc_r+0x6a>
 800e2f4:	09a2      	lsrs	r2, r4, #6
 800e2f6:	3238      	adds	r2, #56	; 0x38
 800e2f8:	e018      	b.n	800e32c <_malloc_r+0x9c>
 800e2fa:	2a14      	cmp	r2, #20
 800e2fc:	d801      	bhi.n	800e302 <_malloc_r+0x72>
 800e2fe:	325b      	adds	r2, #91	; 0x5b
 800e300:	e014      	b.n	800e32c <_malloc_r+0x9c>
 800e302:	2a54      	cmp	r2, #84	; 0x54
 800e304:	d802      	bhi.n	800e30c <_malloc_r+0x7c>
 800e306:	0b22      	lsrs	r2, r4, #12
 800e308:	326e      	adds	r2, #110	; 0x6e
 800e30a:	e00f      	b.n	800e32c <_malloc_r+0x9c>
 800e30c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800e310:	d802      	bhi.n	800e318 <_malloc_r+0x88>
 800e312:	0be2      	lsrs	r2, r4, #15
 800e314:	3277      	adds	r2, #119	; 0x77
 800e316:	e009      	b.n	800e32c <_malloc_r+0x9c>
 800e318:	f240 5354 	movw	r3, #1364	; 0x554
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d804      	bhi.n	800e32a <_malloc_r+0x9a>
 800e320:	0ca2      	lsrs	r2, r4, #18
 800e322:	327c      	adds	r2, #124	; 0x7c
 800e324:	e002      	b.n	800e32c <_malloc_r+0x9c>
 800e326:	223f      	movs	r2, #63	; 0x3f
 800e328:	e000      	b.n	800e32c <_malloc_r+0x9c>
 800e32a:	227e      	movs	r2, #126	; 0x7e
 800e32c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 800e330:	68de      	ldr	r6, [r3, #12]
 800e332:	429e      	cmp	r6, r3
 800e334:	d015      	beq.n	800e362 <_malloc_r+0xd2>
 800e336:	6871      	ldr	r1, [r6, #4]
 800e338:	f021 0103 	bic.w	r1, r1, #3
 800e33c:	1b08      	subs	r0, r1, r4
 800e33e:	280f      	cmp	r0, #15
 800e340:	dd01      	ble.n	800e346 <_malloc_r+0xb6>
 800e342:	3a01      	subs	r2, #1
 800e344:	e00d      	b.n	800e362 <_malloc_r+0xd2>
 800e346:	2800      	cmp	r0, #0
 800e348:	db09      	blt.n	800e35e <_malloc_r+0xce>
 800e34a:	68f3      	ldr	r3, [r6, #12]
 800e34c:	68b2      	ldr	r2, [r6, #8]
 800e34e:	60d3      	str	r3, [r2, #12]
 800e350:	609a      	str	r2, [r3, #8]
 800e352:	1873      	adds	r3, r6, r1
 800e354:	685a      	ldr	r2, [r3, #4]
 800e356:	f042 0201 	orr.w	r2, r2, #1
 800e35a:	605a      	str	r2, [r3, #4]
 800e35c:	e193      	b.n	800e686 <_malloc_r+0x3f6>
 800e35e:	68f6      	ldr	r6, [r6, #12]
 800e360:	e7e7      	b.n	800e332 <_malloc_r+0xa2>
 800e362:	3201      	adds	r2, #1
 800e364:	496d      	ldr	r1, [pc, #436]	; (800e51c <_malloc_r+0x28c>)
 800e366:	692e      	ldr	r6, [r5, #16]
 800e368:	f101 0008 	add.w	r0, r1, #8
 800e36c:	4286      	cmp	r6, r0
 800e36e:	4686      	mov	lr, r0
 800e370:	d06d      	beq.n	800e44e <_malloc_r+0x1be>
 800e372:	6873      	ldr	r3, [r6, #4]
 800e374:	f023 0303 	bic.w	r3, r3, #3
 800e378:	ebc4 0c03 	rsb	ip, r4, r3
 800e37c:	f1bc 0f0f 	cmp.w	ip, #15
 800e380:	dd0d      	ble.n	800e39e <_malloc_r+0x10e>
 800e382:	1933      	adds	r3, r6, r4
 800e384:	f04c 0201 	orr.w	r2, ip, #1
 800e388:	f044 0401 	orr.w	r4, r4, #1
 800e38c:	6074      	str	r4, [r6, #4]
 800e38e:	614b      	str	r3, [r1, #20]
 800e390:	610b      	str	r3, [r1, #16]
 800e392:	60d8      	str	r0, [r3, #12]
 800e394:	6098      	str	r0, [r3, #8]
 800e396:	605a      	str	r2, [r3, #4]
 800e398:	f843 c00c 	str.w	ip, [r3, ip]
 800e39c:	e173      	b.n	800e686 <_malloc_r+0x3f6>
 800e39e:	f1bc 0f00 	cmp.w	ip, #0
 800e3a2:	6148      	str	r0, [r1, #20]
 800e3a4:	6108      	str	r0, [r1, #16]
 800e3a6:	db01      	blt.n	800e3ac <_malloc_r+0x11c>
 800e3a8:	4433      	add	r3, r6
 800e3aa:	e7d3      	b.n	800e354 <_malloc_r+0xc4>
 800e3ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3b0:	d211      	bcs.n	800e3d6 <_malloc_r+0x146>
 800e3b2:	08db      	lsrs	r3, r3, #3
 800e3b4:	1098      	asrs	r0, r3, #2
 800e3b6:	f04f 0c01 	mov.w	ip, #1
 800e3ba:	fa0c fc00 	lsl.w	ip, ip, r0
 800e3be:	6848      	ldr	r0, [r1, #4]
 800e3c0:	ea4c 0000 	orr.w	r0, ip, r0
 800e3c4:	6048      	str	r0, [r1, #4]
 800e3c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e3ca:	688b      	ldr	r3, [r1, #8]
 800e3cc:	60b3      	str	r3, [r6, #8]
 800e3ce:	60f1      	str	r1, [r6, #12]
 800e3d0:	608e      	str	r6, [r1, #8]
 800e3d2:	60de      	str	r6, [r3, #12]
 800e3d4:	e03b      	b.n	800e44e <_malloc_r+0x1be>
 800e3d6:	0a58      	lsrs	r0, r3, #9
 800e3d8:	2804      	cmp	r0, #4
 800e3da:	d802      	bhi.n	800e3e2 <_malloc_r+0x152>
 800e3dc:	0998      	lsrs	r0, r3, #6
 800e3de:	3038      	adds	r0, #56	; 0x38
 800e3e0:	e015      	b.n	800e40e <_malloc_r+0x17e>
 800e3e2:	2814      	cmp	r0, #20
 800e3e4:	d801      	bhi.n	800e3ea <_malloc_r+0x15a>
 800e3e6:	305b      	adds	r0, #91	; 0x5b
 800e3e8:	e011      	b.n	800e40e <_malloc_r+0x17e>
 800e3ea:	2854      	cmp	r0, #84	; 0x54
 800e3ec:	d802      	bhi.n	800e3f4 <_malloc_r+0x164>
 800e3ee:	0b18      	lsrs	r0, r3, #12
 800e3f0:	306e      	adds	r0, #110	; 0x6e
 800e3f2:	e00c      	b.n	800e40e <_malloc_r+0x17e>
 800e3f4:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 800e3f8:	d802      	bhi.n	800e400 <_malloc_r+0x170>
 800e3fa:	0bd8      	lsrs	r0, r3, #15
 800e3fc:	3077      	adds	r0, #119	; 0x77
 800e3fe:	e006      	b.n	800e40e <_malloc_r+0x17e>
 800e400:	f240 5154 	movw	r1, #1364	; 0x554
 800e404:	4288      	cmp	r0, r1
 800e406:	bf9a      	itte	ls
 800e408:	0c98      	lsrls	r0, r3, #18
 800e40a:	307c      	addls	r0, #124	; 0x7c
 800e40c:	207e      	movhi	r0, #126	; 0x7e
 800e40e:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
 800e412:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800e51c <_malloc_r+0x28c>
 800e416:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800e41a:	4561      	cmp	r1, ip
 800e41c:	d10d      	bne.n	800e43a <_malloc_r+0x1aa>
 800e41e:	2301      	movs	r3, #1
 800e420:	1080      	asrs	r0, r0, #2
 800e422:	fa03 f000 	lsl.w	r0, r3, r0
 800e426:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e42a:	4303      	orrs	r3, r0
 800e42c:	f8c8 3004 	str.w	r3, [r8, #4]
 800e430:	460b      	mov	r3, r1
 800e432:	e008      	b.n	800e446 <_malloc_r+0x1b6>
 800e434:	6889      	ldr	r1, [r1, #8]
 800e436:	4561      	cmp	r1, ip
 800e438:	d004      	beq.n	800e444 <_malloc_r+0x1b4>
 800e43a:	6848      	ldr	r0, [r1, #4]
 800e43c:	f020 0003 	bic.w	r0, r0, #3
 800e440:	4283      	cmp	r3, r0
 800e442:	d3f7      	bcc.n	800e434 <_malloc_r+0x1a4>
 800e444:	68cb      	ldr	r3, [r1, #12]
 800e446:	60f3      	str	r3, [r6, #12]
 800e448:	60b1      	str	r1, [r6, #8]
 800e44a:	609e      	str	r6, [r3, #8]
 800e44c:	60ce      	str	r6, [r1, #12]
 800e44e:	2101      	movs	r1, #1
 800e450:	1093      	asrs	r3, r2, #2
 800e452:	fa01 f303 	lsl.w	r3, r1, r3
 800e456:	6869      	ldr	r1, [r5, #4]
 800e458:	428b      	cmp	r3, r1
 800e45a:	d861      	bhi.n	800e520 <_malloc_r+0x290>
 800e45c:	420b      	tst	r3, r1
 800e45e:	d106      	bne.n	800e46e <_malloc_r+0x1de>
 800e460:	f022 0203 	bic.w	r2, r2, #3
 800e464:	005b      	lsls	r3, r3, #1
 800e466:	420b      	tst	r3, r1
 800e468:	f102 0204 	add.w	r2, r2, #4
 800e46c:	d0fa      	beq.n	800e464 <_malloc_r+0x1d4>
 800e46e:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 800e472:	4680      	mov	r8, r0
 800e474:	4694      	mov	ip, r2
 800e476:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800e47a:	4546      	cmp	r6, r8
 800e47c:	d02d      	beq.n	800e4da <_malloc_r+0x24a>
 800e47e:	6871      	ldr	r1, [r6, #4]
 800e480:	f021 0903 	bic.w	r9, r1, #3
 800e484:	ebc4 0109 	rsb	r1, r4, r9
 800e488:	290f      	cmp	r1, #15
 800e48a:	dd13      	ble.n	800e4b4 <_malloc_r+0x224>
 800e48c:	1933      	adds	r3, r6, r4
 800e48e:	f044 0401 	orr.w	r4, r4, #1
 800e492:	68f2      	ldr	r2, [r6, #12]
 800e494:	6074      	str	r4, [r6, #4]
 800e496:	f856 0f08 	ldr.w	r0, [r6, #8]!
 800e49a:	60c2      	str	r2, [r0, #12]
 800e49c:	6090      	str	r0, [r2, #8]
 800e49e:	f041 0201 	orr.w	r2, r1, #1
 800e4a2:	616b      	str	r3, [r5, #20]
 800e4a4:	612b      	str	r3, [r5, #16]
 800e4a6:	f8c3 e00c 	str.w	lr, [r3, #12]
 800e4aa:	f8c3 e008 	str.w	lr, [r3, #8]
 800e4ae:	605a      	str	r2, [r3, #4]
 800e4b0:	5059      	str	r1, [r3, r1]
 800e4b2:	e00c      	b.n	800e4ce <_malloc_r+0x23e>
 800e4b4:	2900      	cmp	r1, #0
 800e4b6:	db0e      	blt.n	800e4d6 <_malloc_r+0x246>
 800e4b8:	eb06 0109 	add.w	r1, r6, r9
 800e4bc:	684b      	ldr	r3, [r1, #4]
 800e4be:	f043 0301 	orr.w	r3, r3, #1
 800e4c2:	604b      	str	r3, [r1, #4]
 800e4c4:	68f3      	ldr	r3, [r6, #12]
 800e4c6:	f856 2f08 	ldr.w	r2, [r6, #8]!
 800e4ca:	60d3      	str	r3, [r2, #12]
 800e4cc:	609a      	str	r2, [r3, #8]
 800e4ce:	4638      	mov	r0, r7
 800e4d0:	f000 f8f1 	bl	800e6b6 <__malloc_unlock>
 800e4d4:	e0db      	b.n	800e68e <_malloc_r+0x3fe>
 800e4d6:	68f6      	ldr	r6, [r6, #12]
 800e4d8:	e7cf      	b.n	800e47a <_malloc_r+0x1ea>
 800e4da:	f10c 0c01 	add.w	ip, ip, #1
 800e4de:	f01c 0f03 	tst.w	ip, #3
 800e4e2:	f108 0808 	add.w	r8, r8, #8
 800e4e6:	d1c6      	bne.n	800e476 <_malloc_r+0x1e6>
 800e4e8:	0791      	lsls	r1, r2, #30
 800e4ea:	d104      	bne.n	800e4f6 <_malloc_r+0x266>
 800e4ec:	686a      	ldr	r2, [r5, #4]
 800e4ee:	ea22 0203 	bic.w	r2, r2, r3
 800e4f2:	606a      	str	r2, [r5, #4]
 800e4f4:	e006      	b.n	800e504 <_malloc_r+0x274>
 800e4f6:	f1a0 0108 	sub.w	r1, r0, #8
 800e4fa:	6800      	ldr	r0, [r0, #0]
 800e4fc:	4288      	cmp	r0, r1
 800e4fe:	f102 32ff 	add.w	r2, r2, #4294967295
 800e502:	d0f1      	beq.n	800e4e8 <_malloc_r+0x258>
 800e504:	6869      	ldr	r1, [r5, #4]
 800e506:	005b      	lsls	r3, r3, #1
 800e508:	428b      	cmp	r3, r1
 800e50a:	d809      	bhi.n	800e520 <_malloc_r+0x290>
 800e50c:	b143      	cbz	r3, 800e520 <_malloc_r+0x290>
 800e50e:	4662      	mov	r2, ip
 800e510:	420b      	tst	r3, r1
 800e512:	d1ac      	bne.n	800e46e <_malloc_r+0x1de>
 800e514:	3204      	adds	r2, #4
 800e516:	005b      	lsls	r3, r3, #1
 800e518:	e7fa      	b.n	800e510 <_malloc_r+0x280>
 800e51a:	bf00      	nop
 800e51c:	2000016c 	.word	0x2000016c
 800e520:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800e524:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e528:	f023 0903 	bic.w	r9, r3, #3
 800e52c:	45a1      	cmp	r9, r4
 800e52e:	d304      	bcc.n	800e53a <_malloc_r+0x2aa>
 800e530:	ebc4 0309 	rsb	r3, r4, r9
 800e534:	2b0f      	cmp	r3, #15
 800e536:	f300 809d 	bgt.w	800e674 <_malloc_r+0x3e4>
 800e53a:	4b57      	ldr	r3, [pc, #348]	; (800e698 <_malloc_r+0x408>)
 800e53c:	4a57      	ldr	r2, [pc, #348]	; (800e69c <_malloc_r+0x40c>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	6811      	ldr	r1, [r2, #0]
 800e542:	f103 0a10 	add.w	sl, r3, #16
 800e546:	3101      	adds	r1, #1
 800e548:	eb08 0c09 	add.w	ip, r8, r9
 800e54c:	44a2      	add	sl, r4
 800e54e:	4b54      	ldr	r3, [pc, #336]	; (800e6a0 <_malloc_r+0x410>)
 800e550:	d004      	beq.n	800e55c <_malloc_r+0x2cc>
 800e552:	1e59      	subs	r1, r3, #1
 800e554:	448a      	add	sl, r1
 800e556:	4259      	negs	r1, r3
 800e558:	ea0a 0a01 	and.w	sl, sl, r1
 800e55c:	4638      	mov	r0, r7
 800e55e:	4651      	mov	r1, sl
 800e560:	9201      	str	r2, [sp, #4]
 800e562:	9302      	str	r3, [sp, #8]
 800e564:	f8cd c00c 	str.w	ip, [sp, #12]
 800e568:	f000 f8a6 	bl	800e6b8 <_sbrk_r>
 800e56c:	1c42      	adds	r2, r0, #1
 800e56e:	aa01      	add	r2, sp, #4
 800e570:	4606      	mov	r6, r0
 800e572:	e892 100c 	ldmia.w	r2, {r2, r3, ip}
 800e576:	d06e      	beq.n	800e656 <_malloc_r+0x3c6>
 800e578:	4560      	cmp	r0, ip
 800e57a:	d201      	bcs.n	800e580 <_malloc_r+0x2f0>
 800e57c:	45a8      	cmp	r8, r5
 800e57e:	d16a      	bne.n	800e656 <_malloc_r+0x3c6>
 800e580:	4948      	ldr	r1, [pc, #288]	; (800e6a4 <_malloc_r+0x414>)
 800e582:	6808      	ldr	r0, [r1, #0]
 800e584:	4566      	cmp	r6, ip
 800e586:	eb0a 0e00 	add.w	lr, sl, r0
 800e58a:	f8c1 e000 	str.w	lr, [r1]
 800e58e:	4846      	ldr	r0, [pc, #280]	; (800e6a8 <_malloc_r+0x418>)
 800e590:	468b      	mov	fp, r1
 800e592:	d107      	bne.n	800e5a4 <_malloc_r+0x314>
 800e594:	4206      	tst	r6, r0
 800e596:	d105      	bne.n	800e5a4 <_malloc_r+0x314>
 800e598:	68ab      	ldr	r3, [r5, #8]
 800e59a:	44d1      	add	r9, sl
 800e59c:	f049 0201 	orr.w	r2, r9, #1
 800e5a0:	605a      	str	r2, [r3, #4]
 800e5a2:	e04c      	b.n	800e63e <_malloc_r+0x3ae>
 800e5a4:	6812      	ldr	r2, [r2, #0]
 800e5a6:	3201      	adds	r2, #1
 800e5a8:	d102      	bne.n	800e5b0 <_malloc_r+0x320>
 800e5aa:	4a3c      	ldr	r2, [pc, #240]	; (800e69c <_malloc_r+0x40c>)
 800e5ac:	6016      	str	r6, [r2, #0]
 800e5ae:	e005      	b.n	800e5bc <_malloc_r+0x32c>
 800e5b0:	ebcc 0c06 	rsb	ip, ip, r6
 800e5b4:	eb0e 020c 	add.w	r2, lr, ip
 800e5b8:	f8cb 2000 	str.w	r2, [fp]
 800e5bc:	f016 0207 	ands.w	r2, r6, #7
 800e5c0:	bf1c      	itt	ne
 800e5c2:	f1c2 0208 	rsbne	r2, r2, #8
 800e5c6:	18b6      	addne	r6, r6, r2
 800e5c8:	44b2      	add	sl, r6
 800e5ca:	4413      	add	r3, r2
 800e5cc:	ea0a 0000 	and.w	r0, sl, r0
 800e5d0:	ebc0 0a03 	rsb	sl, r0, r3
 800e5d4:	4651      	mov	r1, sl
 800e5d6:	4638      	mov	r0, r7
 800e5d8:	f000 f86e 	bl	800e6b8 <_sbrk_r>
 800e5dc:	1c43      	adds	r3, r0, #1
 800e5de:	bf04      	itt	eq
 800e5e0:	4630      	moveq	r0, r6
 800e5e2:	f04f 0a00 	moveq.w	sl, #0
 800e5e6:	f8db 3000 	ldr.w	r3, [fp]
 800e5ea:	60ae      	str	r6, [r5, #8]
 800e5ec:	1b80      	subs	r0, r0, r6
 800e5ee:	4450      	add	r0, sl
 800e5f0:	4453      	add	r3, sl
 800e5f2:	f040 0001 	orr.w	r0, r0, #1
 800e5f6:	45a8      	cmp	r8, r5
 800e5f8:	f8cb 3000 	str.w	r3, [fp]
 800e5fc:	6070      	str	r0, [r6, #4]
 800e5fe:	d01e      	beq.n	800e63e <_malloc_r+0x3ae>
 800e600:	f1b9 0f0f 	cmp.w	r9, #15
 800e604:	d802      	bhi.n	800e60c <_malloc_r+0x37c>
 800e606:	2301      	movs	r3, #1
 800e608:	6073      	str	r3, [r6, #4]
 800e60a:	e024      	b.n	800e656 <_malloc_r+0x3c6>
 800e60c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e610:	f1a9 090c 	sub.w	r9, r9, #12
 800e614:	f029 0907 	bic.w	r9, r9, #7
 800e618:	f003 0301 	and.w	r3, r3, #1
 800e61c:	ea49 0303 	orr.w	r3, r9, r3
 800e620:	f8c8 3004 	str.w	r3, [r8, #4]
 800e624:	eb08 0309 	add.w	r3, r8, r9
 800e628:	2205      	movs	r2, #5
 800e62a:	f1b9 0f0f 	cmp.w	r9, #15
 800e62e:	605a      	str	r2, [r3, #4]
 800e630:	609a      	str	r2, [r3, #8]
 800e632:	d904      	bls.n	800e63e <_malloc_r+0x3ae>
 800e634:	4638      	mov	r0, r7
 800e636:	f108 0108 	add.w	r1, r8, #8
 800e63a:	f000 f913 	bl	800e864 <_free_r>
 800e63e:	4a1b      	ldr	r2, [pc, #108]	; (800e6ac <_malloc_r+0x41c>)
 800e640:	f8db 3000 	ldr.w	r3, [fp]
 800e644:	6811      	ldr	r1, [r2, #0]
 800e646:	428b      	cmp	r3, r1
 800e648:	bf88      	it	hi
 800e64a:	6013      	strhi	r3, [r2, #0]
 800e64c:	4a18      	ldr	r2, [pc, #96]	; (800e6b0 <_malloc_r+0x420>)
 800e64e:	6811      	ldr	r1, [r2, #0]
 800e650:	428b      	cmp	r3, r1
 800e652:	bf88      	it	hi
 800e654:	6013      	strhi	r3, [r2, #0]
 800e656:	68ab      	ldr	r3, [r5, #8]
 800e658:	685a      	ldr	r2, [r3, #4]
 800e65a:	f022 0203 	bic.w	r2, r2, #3
 800e65e:	42a2      	cmp	r2, r4
 800e660:	ebc4 0302 	rsb	r3, r4, r2
 800e664:	d301      	bcc.n	800e66a <_malloc_r+0x3da>
 800e666:	2b0f      	cmp	r3, #15
 800e668:	dc04      	bgt.n	800e674 <_malloc_r+0x3e4>
 800e66a:	4638      	mov	r0, r7
 800e66c:	f000 f823 	bl	800e6b6 <__malloc_unlock>
 800e670:	2600      	movs	r6, #0
 800e672:	e00c      	b.n	800e68e <_malloc_r+0x3fe>
 800e674:	68ae      	ldr	r6, [r5, #8]
 800e676:	f044 0201 	orr.w	r2, r4, #1
 800e67a:	4434      	add	r4, r6
 800e67c:	f043 0301 	orr.w	r3, r3, #1
 800e680:	6072      	str	r2, [r6, #4]
 800e682:	60ac      	str	r4, [r5, #8]
 800e684:	6063      	str	r3, [r4, #4]
 800e686:	4638      	mov	r0, r7
 800e688:	f000 f815 	bl	800e6b6 <__malloc_unlock>
 800e68c:	3608      	adds	r6, #8
 800e68e:	4630      	mov	r0, r6
 800e690:	b005      	add	sp, #20
 800e692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e696:	bf00      	nop
 800e698:	200006a0 	.word	0x200006a0
 800e69c:	20000578 	.word	0x20000578
 800e6a0:	00001000 	.word	0x00001000
 800e6a4:	200006a4 	.word	0x200006a4
 800e6a8:	00000fff 	.word	0x00000fff
 800e6ac:	2000069c 	.word	0x2000069c
 800e6b0:	20000698 	.word	0x20000698

0800e6b4 <__malloc_lock>:
 800e6b4:	4770      	bx	lr

0800e6b6 <__malloc_unlock>:
 800e6b6:	4770      	bx	lr

0800e6b8 <_sbrk_r>:
 800e6b8:	b538      	push	{r3, r4, r5, lr}
 800e6ba:	4c06      	ldr	r4, [pc, #24]	; (800e6d4 <_sbrk_r+0x1c>)
 800e6bc:	2300      	movs	r3, #0
 800e6be:	4605      	mov	r5, r0
 800e6c0:	4608      	mov	r0, r1
 800e6c2:	6023      	str	r3, [r4, #0]
 800e6c4:	f000 f81c 	bl	800e700 <_sbrk>
 800e6c8:	1c43      	adds	r3, r0, #1
 800e6ca:	d102      	bne.n	800e6d2 <_sbrk_r+0x1a>
 800e6cc:	6823      	ldr	r3, [r4, #0]
 800e6ce:	b103      	cbz	r3, 800e6d2 <_sbrk_r+0x1a>
 800e6d0:	602b      	str	r3, [r5, #0]
 800e6d2:	bd38      	pop	{r3, r4, r5, pc}
 800e6d4:	20000fdc 	.word	0x20000fdc

0800e6d8 <initialise_monitor_handles>:
 800e6d8:	4770      	bx	lr

0800e6da <_getpid>:
 800e6da:	2001      	movs	r0, #1
 800e6dc:	4770      	bx	lr
	...

0800e6e0 <_kill>:
 800e6e0:	4b02      	ldr	r3, [pc, #8]	; (800e6ec <_kill+0xc>)
 800e6e2:	2216      	movs	r2, #22
 800e6e4:	601a      	str	r2, [r3, #0]
 800e6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ea:	4770      	bx	lr
 800e6ec:	20000fdc 	.word	0x20000fdc

0800e6f0 <_exit>:
 800e6f0:	4b01      	ldr	r3, [pc, #4]	; (800e6f8 <_exit+0x8>)
 800e6f2:	2216      	movs	r2, #22
 800e6f4:	601a      	str	r2, [r3, #0]
 800e6f6:	e7fe      	b.n	800e6f6 <_exit+0x6>
 800e6f8:	20000fdc 	.word	0x20000fdc

0800e6fc <_write>:
 800e6fc:	4610      	mov	r0, r2
 800e6fe:	4770      	bx	lr

0800e700 <_sbrk>:
 800e700:	4b09      	ldr	r3, [pc, #36]	; (800e728 <_sbrk+0x28>)
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	b90a      	cbnz	r2, 800e70a <_sbrk+0xa>
 800e706:	4a09      	ldr	r2, [pc, #36]	; (800e72c <_sbrk+0x2c>)
 800e708:	601a      	str	r2, [r3, #0]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	466a      	mov	r2, sp
 800e70e:	4418      	add	r0, r3
 800e710:	4290      	cmp	r0, r2
 800e712:	d905      	bls.n	800e720 <_sbrk+0x20>
 800e714:	4b06      	ldr	r3, [pc, #24]	; (800e730 <_sbrk+0x30>)
 800e716:	220c      	movs	r2, #12
 800e718:	601a      	str	r2, [r3, #0]
 800e71a:	f04f 30ff 	mov.w	r0, #4294967295
 800e71e:	4770      	bx	lr
 800e720:	4a01      	ldr	r2, [pc, #4]	; (800e728 <_sbrk+0x28>)
 800e722:	6010      	str	r0, [r2, #0]
 800e724:	4618      	mov	r0, r3
 800e726:	4770      	bx	lr
 800e728:	200006d0 	.word	0x200006d0
 800e72c:	20000fe0 	.word	0x20000fe0
 800e730:	20000fdc 	.word	0x20000fdc

0800e734 <_close>:
 800e734:	f04f 30ff 	mov.w	r0, #4294967295
 800e738:	4770      	bx	lr

0800e73a <_fstat>:
 800e73a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e73e:	604b      	str	r3, [r1, #4]
 800e740:	2000      	movs	r0, #0
 800e742:	4770      	bx	lr

0800e744 <_isatty>:
 800e744:	2001      	movs	r0, #1
 800e746:	4770      	bx	lr

0800e748 <_lseek>:
 800e748:	2000      	movs	r0, #0
 800e74a:	4770      	bx	lr

0800e74c <_read>:
 800e74c:	2000      	movs	r0, #0
 800e74e:	4770      	bx	lr

0800e750 <_open>:
 800e750:	b40e      	push	{r1, r2, r3}
 800e752:	f04f 30ff 	mov.w	r0, #4294967295
 800e756:	b003      	add	sp, #12
 800e758:	4770      	bx	lr
	...

0800e75c <_wait>:
 800e75c:	4b02      	ldr	r3, [pc, #8]	; (800e768 <_wait+0xc>)
 800e75e:	220a      	movs	r2, #10
 800e760:	601a      	str	r2, [r3, #0]
 800e762:	f04f 30ff 	mov.w	r0, #4294967295
 800e766:	4770      	bx	lr
 800e768:	20000fdc 	.word	0x20000fdc

0800e76c <_unlink>:
 800e76c:	4b02      	ldr	r3, [pc, #8]	; (800e778 <_unlink+0xc>)
 800e76e:	2202      	movs	r2, #2
 800e770:	601a      	str	r2, [r3, #0]
 800e772:	f04f 30ff 	mov.w	r0, #4294967295
 800e776:	4770      	bx	lr
 800e778:	20000fdc 	.word	0x20000fdc

0800e77c <_times>:
 800e77c:	f04f 30ff 	mov.w	r0, #4294967295
 800e780:	4770      	bx	lr

0800e782 <_stat>:
 800e782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e786:	604b      	str	r3, [r1, #4]
 800e788:	2000      	movs	r0, #0
 800e78a:	4770      	bx	lr

0800e78c <_link>:
 800e78c:	4b02      	ldr	r3, [pc, #8]	; (800e798 <_link+0xc>)
 800e78e:	221f      	movs	r2, #31
 800e790:	601a      	str	r2, [r3, #0]
 800e792:	f04f 30ff 	mov.w	r0, #4294967295
 800e796:	4770      	bx	lr
 800e798:	20000fdc 	.word	0x20000fdc

0800e79c <_fork>:
 800e79c:	4b02      	ldr	r3, [pc, #8]	; (800e7a8 <_fork+0xc>)
 800e79e:	220b      	movs	r2, #11
 800e7a0:	601a      	str	r2, [r3, #0]
 800e7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a6:	4770      	bx	lr
 800e7a8:	20000fdc 	.word	0x20000fdc

0800e7ac <_execve>:
 800e7ac:	4b02      	ldr	r3, [pc, #8]	; (800e7b8 <_execve+0xc>)
 800e7ae:	220c      	movs	r2, #12
 800e7b0:	601a      	str	r2, [r3, #0]
 800e7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b6:	4770      	bx	lr
 800e7b8:	20000fdc 	.word	0x20000fdc

0800e7bc <_malloc_trim_r>:
 800e7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7c0:	4d24      	ldr	r5, [pc, #144]	; (800e854 <_malloc_trim_r+0x98>)
 800e7c2:	4f25      	ldr	r7, [pc, #148]	; (800e858 <_malloc_trim_r+0x9c>)
 800e7c4:	460e      	mov	r6, r1
 800e7c6:	4604      	mov	r4, r0
 800e7c8:	f7ff ff74 	bl	800e6b4 <__malloc_lock>
 800e7cc:	68ab      	ldr	r3, [r5, #8]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	f023 0803 	bic.w	r8, r3, #3
 800e7d4:	f1a7 0311 	sub.w	r3, r7, #17
 800e7d8:	4443      	add	r3, r8
 800e7da:	1b9e      	subs	r6, r3, r6
 800e7dc:	fbb6 f6f7 	udiv	r6, r6, r7
 800e7e0:	3e01      	subs	r6, #1
 800e7e2:	437e      	muls	r6, r7
 800e7e4:	42be      	cmp	r6, r7
 800e7e6:	da05      	bge.n	800e7f4 <_malloc_trim_r+0x38>
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	f7ff ff64 	bl	800e6b6 <__malloc_unlock>
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	2100      	movs	r1, #0
 800e7f8:	f7ff ff5e 	bl	800e6b8 <_sbrk_r>
 800e7fc:	68ab      	ldr	r3, [r5, #8]
 800e7fe:	4443      	add	r3, r8
 800e800:	4298      	cmp	r0, r3
 800e802:	d1f1      	bne.n	800e7e8 <_malloc_trim_r+0x2c>
 800e804:	4620      	mov	r0, r4
 800e806:	4271      	negs	r1, r6
 800e808:	f7ff ff56 	bl	800e6b8 <_sbrk_r>
 800e80c:	3001      	adds	r0, #1
 800e80e:	d110      	bne.n	800e832 <_malloc_trim_r+0x76>
 800e810:	4620      	mov	r0, r4
 800e812:	2100      	movs	r1, #0
 800e814:	f7ff ff50 	bl	800e6b8 <_sbrk_r>
 800e818:	68ab      	ldr	r3, [r5, #8]
 800e81a:	1ac2      	subs	r2, r0, r3
 800e81c:	2a0f      	cmp	r2, #15
 800e81e:	dde3      	ble.n	800e7e8 <_malloc_trim_r+0x2c>
 800e820:	490e      	ldr	r1, [pc, #56]	; (800e85c <_malloc_trim_r+0xa0>)
 800e822:	6809      	ldr	r1, [r1, #0]
 800e824:	1a40      	subs	r0, r0, r1
 800e826:	490e      	ldr	r1, [pc, #56]	; (800e860 <_malloc_trim_r+0xa4>)
 800e828:	f042 0201 	orr.w	r2, r2, #1
 800e82c:	6008      	str	r0, [r1, #0]
 800e82e:	605a      	str	r2, [r3, #4]
 800e830:	e7da      	b.n	800e7e8 <_malloc_trim_r+0x2c>
 800e832:	68ab      	ldr	r3, [r5, #8]
 800e834:	ebc6 0808 	rsb	r8, r6, r8
 800e838:	f048 0201 	orr.w	r2, r8, #1
 800e83c:	605a      	str	r2, [r3, #4]
 800e83e:	4b08      	ldr	r3, [pc, #32]	; (800e860 <_malloc_trim_r+0xa4>)
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	4620      	mov	r0, r4
 800e844:	1b96      	subs	r6, r2, r6
 800e846:	601e      	str	r6, [r3, #0]
 800e848:	f7ff ff35 	bl	800e6b6 <__malloc_unlock>
 800e84c:	2001      	movs	r0, #1
 800e84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e852:	bf00      	nop
 800e854:	2000016c 	.word	0x2000016c
 800e858:	00001000 	.word	0x00001000
 800e85c:	20000578 	.word	0x20000578
 800e860:	200006a4 	.word	0x200006a4

0800e864 <_free_r>:
 800e864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e866:	4606      	mov	r6, r0
 800e868:	460d      	mov	r5, r1
 800e86a:	2900      	cmp	r1, #0
 800e86c:	f000 80a9 	beq.w	800e9c2 <_free_r+0x15e>
 800e870:	f7ff ff20 	bl	800e6b4 <__malloc_lock>
 800e874:	f855 cc04 	ldr.w	ip, [r5, #-4]
 800e878:	4c52      	ldr	r4, [pc, #328]	; (800e9c4 <_free_r+0x160>)
 800e87a:	f1a5 0308 	sub.w	r3, r5, #8
 800e87e:	f02c 0201 	bic.w	r2, ip, #1
 800e882:	1898      	adds	r0, r3, r2
 800e884:	68a1      	ldr	r1, [r4, #8]
 800e886:	6847      	ldr	r7, [r0, #4]
 800e888:	4288      	cmp	r0, r1
 800e88a:	f027 0703 	bic.w	r7, r7, #3
 800e88e:	f00c 0101 	and.w	r1, ip, #1
 800e892:	d11b      	bne.n	800e8cc <_free_r+0x68>
 800e894:	443a      	add	r2, r7
 800e896:	b939      	cbnz	r1, 800e8a8 <_free_r+0x44>
 800e898:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800e89c:	1a5b      	subs	r3, r3, r1
 800e89e:	440a      	add	r2, r1
 800e8a0:	6898      	ldr	r0, [r3, #8]
 800e8a2:	68d9      	ldr	r1, [r3, #12]
 800e8a4:	60c1      	str	r1, [r0, #12]
 800e8a6:	6088      	str	r0, [r1, #8]
 800e8a8:	f042 0101 	orr.w	r1, r2, #1
 800e8ac:	6059      	str	r1, [r3, #4]
 800e8ae:	60a3      	str	r3, [r4, #8]
 800e8b0:	4b45      	ldr	r3, [pc, #276]	; (800e9c8 <_free_r+0x164>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d304      	bcc.n	800e8c2 <_free_r+0x5e>
 800e8b8:	4b44      	ldr	r3, [pc, #272]	; (800e9cc <_free_r+0x168>)
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	6819      	ldr	r1, [r3, #0]
 800e8be:	f7ff ff7d 	bl	800e7bc <_malloc_trim_r>
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e8c8:	f7ff bef5 	b.w	800e6b6 <__malloc_unlock>
 800e8cc:	6047      	str	r7, [r0, #4]
 800e8ce:	b979      	cbnz	r1, 800e8f0 <_free_r+0x8c>
 800e8d0:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800e8d4:	1b5b      	subs	r3, r3, r5
 800e8d6:	442a      	add	r2, r5
 800e8d8:	689d      	ldr	r5, [r3, #8]
 800e8da:	f104 0c08 	add.w	ip, r4, #8
 800e8de:	4565      	cmp	r5, ip
 800e8e0:	d008      	beq.n	800e8f4 <_free_r+0x90>
 800e8e2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800e8e6:	f8c5 c00c 	str.w	ip, [r5, #12]
 800e8ea:	f8cc 5008 	str.w	r5, [ip, #8]
 800e8ee:	e002      	b.n	800e8f6 <_free_r+0x92>
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	e000      	b.n	800e8f6 <_free_r+0x92>
 800e8f4:	2101      	movs	r1, #1
 800e8f6:	19c5      	adds	r5, r0, r7
 800e8f8:	686d      	ldr	r5, [r5, #4]
 800e8fa:	07ed      	lsls	r5, r5, #31
 800e8fc:	d40e      	bmi.n	800e91c <_free_r+0xb8>
 800e8fe:	443a      	add	r2, r7
 800e900:	6885      	ldr	r5, [r0, #8]
 800e902:	b941      	cbnz	r1, 800e916 <_free_r+0xb2>
 800e904:	4f32      	ldr	r7, [pc, #200]	; (800e9d0 <_free_r+0x16c>)
 800e906:	42bd      	cmp	r5, r7
 800e908:	d105      	bne.n	800e916 <_free_r+0xb2>
 800e90a:	6163      	str	r3, [r4, #20]
 800e90c:	6123      	str	r3, [r4, #16]
 800e90e:	2101      	movs	r1, #1
 800e910:	60dd      	str	r5, [r3, #12]
 800e912:	609d      	str	r5, [r3, #8]
 800e914:	e002      	b.n	800e91c <_free_r+0xb8>
 800e916:	68c0      	ldr	r0, [r0, #12]
 800e918:	60e8      	str	r0, [r5, #12]
 800e91a:	6085      	str	r5, [r0, #8]
 800e91c:	f042 0001 	orr.w	r0, r2, #1
 800e920:	6058      	str	r0, [r3, #4]
 800e922:	509a      	str	r2, [r3, r2]
 800e924:	2900      	cmp	r1, #0
 800e926:	d1cc      	bne.n	800e8c2 <_free_r+0x5e>
 800e928:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800e92c:	d20e      	bcs.n	800e94c <_free_r+0xe8>
 800e92e:	08d2      	lsrs	r2, r2, #3
 800e930:	1091      	asrs	r1, r2, #2
 800e932:	2001      	movs	r0, #1
 800e934:	4088      	lsls	r0, r1
 800e936:	6861      	ldr	r1, [r4, #4]
 800e938:	4301      	orrs	r1, r0
 800e93a:	6061      	str	r1, [r4, #4]
 800e93c:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 800e940:	68a2      	ldr	r2, [r4, #8]
 800e942:	609a      	str	r2, [r3, #8]
 800e944:	60dc      	str	r4, [r3, #12]
 800e946:	60a3      	str	r3, [r4, #8]
 800e948:	60d3      	str	r3, [r2, #12]
 800e94a:	e7ba      	b.n	800e8c2 <_free_r+0x5e>
 800e94c:	0a51      	lsrs	r1, r2, #9
 800e94e:	2904      	cmp	r1, #4
 800e950:	d802      	bhi.n	800e958 <_free_r+0xf4>
 800e952:	0991      	lsrs	r1, r2, #6
 800e954:	3138      	adds	r1, #56	; 0x38
 800e956:	e015      	b.n	800e984 <_free_r+0x120>
 800e958:	2914      	cmp	r1, #20
 800e95a:	d801      	bhi.n	800e960 <_free_r+0xfc>
 800e95c:	315b      	adds	r1, #91	; 0x5b
 800e95e:	e011      	b.n	800e984 <_free_r+0x120>
 800e960:	2954      	cmp	r1, #84	; 0x54
 800e962:	d802      	bhi.n	800e96a <_free_r+0x106>
 800e964:	0b11      	lsrs	r1, r2, #12
 800e966:	316e      	adds	r1, #110	; 0x6e
 800e968:	e00c      	b.n	800e984 <_free_r+0x120>
 800e96a:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 800e96e:	d802      	bhi.n	800e976 <_free_r+0x112>
 800e970:	0bd1      	lsrs	r1, r2, #15
 800e972:	3177      	adds	r1, #119	; 0x77
 800e974:	e006      	b.n	800e984 <_free_r+0x120>
 800e976:	f240 5054 	movw	r0, #1364	; 0x554
 800e97a:	4281      	cmp	r1, r0
 800e97c:	bf9a      	itte	ls
 800e97e:	0c91      	lsrls	r1, r2, #18
 800e980:	317c      	addls	r1, #124	; 0x7c
 800e982:	217e      	movhi	r1, #126	; 0x7e
 800e984:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
 800e988:	480e      	ldr	r0, [pc, #56]	; (800e9c4 <_free_r+0x160>)
 800e98a:	68a5      	ldr	r5, [r4, #8]
 800e98c:	42a5      	cmp	r5, r4
 800e98e:	d001      	beq.n	800e994 <_free_r+0x130>
 800e990:	4629      	mov	r1, r5
 800e992:	e00b      	b.n	800e9ac <_free_r+0x148>
 800e994:	2201      	movs	r2, #1
 800e996:	1089      	asrs	r1, r1, #2
 800e998:	fa02 f101 	lsl.w	r1, r2, r1
 800e99c:	6842      	ldr	r2, [r0, #4]
 800e99e:	430a      	orrs	r2, r1
 800e9a0:	6042      	str	r2, [r0, #4]
 800e9a2:	4629      	mov	r1, r5
 800e9a4:	e008      	b.n	800e9b8 <_free_r+0x154>
 800e9a6:	6889      	ldr	r1, [r1, #8]
 800e9a8:	42a1      	cmp	r1, r4
 800e9aa:	d004      	beq.n	800e9b6 <_free_r+0x152>
 800e9ac:	6848      	ldr	r0, [r1, #4]
 800e9ae:	f020 0003 	bic.w	r0, r0, #3
 800e9b2:	4282      	cmp	r2, r0
 800e9b4:	d3f7      	bcc.n	800e9a6 <_free_r+0x142>
 800e9b6:	68cd      	ldr	r5, [r1, #12]
 800e9b8:	60dd      	str	r5, [r3, #12]
 800e9ba:	6099      	str	r1, [r3, #8]
 800e9bc:	60ab      	str	r3, [r5, #8]
 800e9be:	60cb      	str	r3, [r1, #12]
 800e9c0:	e77f      	b.n	800e8c2 <_free_r+0x5e>
 800e9c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9c4:	2000016c 	.word	0x2000016c
 800e9c8:	20000574 	.word	0x20000574
 800e9cc:	200006a0 	.word	0x200006a0
 800e9d0:	20000174 	.word	0x20000174

0800e9d4 <cleanup_glue>:
 800e9d4:	b538      	push	{r3, r4, r5, lr}
 800e9d6:	460c      	mov	r4, r1
 800e9d8:	6809      	ldr	r1, [r1, #0]
 800e9da:	4605      	mov	r5, r0
 800e9dc:	b109      	cbz	r1, 800e9e2 <cleanup_glue+0xe>
 800e9de:	f7ff fff9 	bl	800e9d4 <cleanup_glue>
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	4621      	mov	r1, r4
 800e9e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9ea:	f7ff bf3b 	b.w	800e864 <_free_r>
	...

0800e9f0 <_reclaim_reent>:
 800e9f0:	4b32      	ldr	r3, [pc, #200]	; (800eabc <_reclaim_reent+0xcc>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4298      	cmp	r0, r3
 800e9f6:	b570      	push	{r4, r5, r6, lr}
 800e9f8:	4604      	mov	r4, r0
 800e9fa:	d05e      	beq.n	800eaba <_reclaim_reent+0xca>
 800e9fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e9fe:	b18b      	cbz	r3, 800ea24 <_reclaim_reent+0x34>
 800ea00:	68db      	ldr	r3, [r3, #12]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d14d      	bne.n	800eaa2 <_reclaim_reent+0xb2>
 800ea06:	e007      	b.n	800ea18 <_reclaim_reent+0x28>
 800ea08:	3504      	adds	r5, #4
 800ea0a:	2d80      	cmp	r5, #128	; 0x80
 800ea0c:	d14a      	bne.n	800eaa4 <_reclaim_reent+0xb4>
 800ea0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea10:	4620      	mov	r0, r4
 800ea12:	68d9      	ldr	r1, [r3, #12]
 800ea14:	f7ff ff26 	bl	800e864 <_free_r>
 800ea18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea1a:	6819      	ldr	r1, [r3, #0]
 800ea1c:	b111      	cbz	r1, 800ea24 <_reclaim_reent+0x34>
 800ea1e:	4620      	mov	r0, r4
 800ea20:	f7ff ff20 	bl	800e864 <_free_r>
 800ea24:	6961      	ldr	r1, [r4, #20]
 800ea26:	b111      	cbz	r1, 800ea2e <_reclaim_reent+0x3e>
 800ea28:	4620      	mov	r0, r4
 800ea2a:	f7ff ff1b 	bl	800e864 <_free_r>
 800ea2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ea30:	b111      	cbz	r1, 800ea38 <_reclaim_reent+0x48>
 800ea32:	4620      	mov	r0, r4
 800ea34:	f7ff ff16 	bl	800e864 <_free_r>
 800ea38:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ea3a:	b111      	cbz	r1, 800ea42 <_reclaim_reent+0x52>
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	f7ff ff11 	bl	800e864 <_free_r>
 800ea42:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ea44:	b111      	cbz	r1, 800ea4c <_reclaim_reent+0x5c>
 800ea46:	4620      	mov	r0, r4
 800ea48:	f7ff ff0c 	bl	800e864 <_free_r>
 800ea4c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ea4e:	b111      	cbz	r1, 800ea56 <_reclaim_reent+0x66>
 800ea50:	4620      	mov	r0, r4
 800ea52:	f7ff ff07 	bl	800e864 <_free_r>
 800ea56:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 800ea5a:	b111      	cbz	r1, 800ea62 <_reclaim_reent+0x72>
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f7ff ff01 	bl	800e864 <_free_r>
 800ea62:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
 800ea66:	b111      	cbz	r1, 800ea6e <_reclaim_reent+0x7e>
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f7ff fefb 	bl	800e864 <_free_r>
 800ea6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ea70:	b12b      	cbz	r3, 800ea7e <_reclaim_reent+0x8e>
 800ea72:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800ea76:	b111      	cbz	r1, 800ea7e <_reclaim_reent+0x8e>
 800ea78:	4620      	mov	r0, r4
 800ea7a:	f7ff fef3 	bl	800e864 <_free_r>
 800ea7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea80:	b111      	cbz	r1, 800ea88 <_reclaim_reent+0x98>
 800ea82:	4620      	mov	r0, r4
 800ea84:	f7ff feee 	bl	800e864 <_free_r>
 800ea88:	69a3      	ldr	r3, [r4, #24]
 800ea8a:	b1b3      	cbz	r3, 800eaba <_reclaim_reent+0xca>
 800ea8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ea8e:	4620      	mov	r0, r4
 800ea90:	4798      	blx	r3
 800ea92:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 800ea96:	b181      	cbz	r1, 800eaba <_reclaim_reent+0xca>
 800ea98:	4620      	mov	r0, r4
 800ea9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea9e:	f7ff bf99 	b.w	800e9d4 <cleanup_glue>
 800eaa2:	2500      	movs	r5, #0
 800eaa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaa6:	68db      	ldr	r3, [r3, #12]
 800eaa8:	5959      	ldr	r1, [r3, r5]
 800eaaa:	2900      	cmp	r1, #0
 800eaac:	d0ac      	beq.n	800ea08 <_reclaim_reent+0x18>
 800eaae:	680e      	ldr	r6, [r1, #0]
 800eab0:	4620      	mov	r0, r4
 800eab2:	f7ff fed7 	bl	800e864 <_free_r>
 800eab6:	4631      	mov	r1, r6
 800eab8:	e7f7      	b.n	800eaaa <_reclaim_reent+0xba>
 800eaba:	bd70      	pop	{r4, r5, r6, pc}
 800eabc:	20000670 	.word	0x20000670

0800eac0 <abort>:
 800eac0:	b508      	push	{r3, lr}
 800eac2:	2006      	movs	r0, #6
 800eac4:	f000 f888 	bl	800ebd8 <raise>
 800eac8:	2001      	movs	r0, #1
 800eaca:	f7ff fe11 	bl	800e6f0 <_exit>

0800eace <memcpy>:
 800eace:	b510      	push	{r4, lr}
 800ead0:	2300      	movs	r3, #0
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d003      	beq.n	800eade <memcpy+0x10>
 800ead6:	5ccc      	ldrb	r4, [r1, r3]
 800ead8:	54c4      	strb	r4, [r0, r3]
 800eada:	3301      	adds	r3, #1
 800eadc:	e7f9      	b.n	800ead2 <memcpy+0x4>
 800eade:	bd10      	pop	{r4, pc}

0800eae0 <_init_signal_r>:
 800eae0:	b538      	push	{r3, r4, r5, lr}
 800eae2:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800eae4:	4604      	mov	r4, r0
 800eae6:	b10d      	cbz	r5, 800eaec <_init_signal_r+0xc>
 800eae8:	2000      	movs	r0, #0
 800eaea:	bd38      	pop	{r3, r4, r5, pc}
 800eaec:	2180      	movs	r1, #128	; 0x80
 800eaee:	f7ff fbcf 	bl	800e290 <_malloc_r>
 800eaf2:	6460      	str	r0, [r4, #68]	; 0x44
 800eaf4:	b138      	cbz	r0, 800eb06 <_init_signal_r+0x26>
 800eaf6:	462b      	mov	r3, r5
 800eaf8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800eafa:	2100      	movs	r1, #0
 800eafc:	50d1      	str	r1, [r2, r3]
 800eafe:	3304      	adds	r3, #4
 800eb00:	2b80      	cmp	r3, #128	; 0x80
 800eb02:	d1f9      	bne.n	800eaf8 <_init_signal_r+0x18>
 800eb04:	e7f0      	b.n	800eae8 <_init_signal_r+0x8>
 800eb06:	f04f 30ff 	mov.w	r0, #4294967295
 800eb0a:	bd38      	pop	{r3, r4, r5, pc}

0800eb0c <_signal_r>:
 800eb0c:	291f      	cmp	r1, #31
 800eb0e:	b570      	push	{r4, r5, r6, lr}
 800eb10:	4604      	mov	r4, r0
 800eb12:	460d      	mov	r5, r1
 800eb14:	4616      	mov	r6, r2
 800eb16:	d902      	bls.n	800eb1e <_signal_r+0x12>
 800eb18:	2316      	movs	r3, #22
 800eb1a:	6003      	str	r3, [r0, #0]
 800eb1c:	e00b      	b.n	800eb36 <_signal_r+0x2a>
 800eb1e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800eb20:	b12b      	cbz	r3, 800eb2e <_signal_r+0x22>
 800eb22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eb24:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb28:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 800eb2c:	bd70      	pop	{r4, r5, r6, pc}
 800eb2e:	f7ff ffd7 	bl	800eae0 <_init_signal_r>
 800eb32:	2800      	cmp	r0, #0
 800eb34:	d0f5      	beq.n	800eb22 <_signal_r+0x16>
 800eb36:	f04f 30ff 	mov.w	r0, #4294967295
 800eb3a:	bd70      	pop	{r4, r5, r6, pc}

0800eb3c <_raise_r>:
 800eb3c:	291f      	cmp	r1, #31
 800eb3e:	b538      	push	{r3, r4, r5, lr}
 800eb40:	4605      	mov	r5, r0
 800eb42:	460c      	mov	r4, r1
 800eb44:	d904      	bls.n	800eb50 <_raise_r+0x14>
 800eb46:	2316      	movs	r3, #22
 800eb48:	6003      	str	r3, [r0, #0]
 800eb4a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb4e:	bd38      	pop	{r3, r4, r5, pc}
 800eb50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb52:	b112      	cbz	r2, 800eb5a <_raise_r+0x1e>
 800eb54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb58:	b94b      	cbnz	r3, 800eb6e <_raise_r+0x32>
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	f000 f86e 	bl	800ec3c <_getpid_r>
 800eb60:	4622      	mov	r2, r4
 800eb62:	4601      	mov	r1, r0
 800eb64:	4628      	mov	r0, r5
 800eb66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb6a:	f000 b855 	b.w	800ec18 <_kill_r>
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d00a      	beq.n	800eb88 <_raise_r+0x4c>
 800eb72:	1c59      	adds	r1, r3, #1
 800eb74:	d103      	bne.n	800eb7e <_raise_r+0x42>
 800eb76:	2316      	movs	r3, #22
 800eb78:	6003      	str	r3, [r0, #0]
 800eb7a:	2001      	movs	r0, #1
 800eb7c:	bd38      	pop	{r3, r4, r5, pc}
 800eb7e:	2500      	movs	r5, #0
 800eb80:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 800eb84:	4620      	mov	r0, r4
 800eb86:	4798      	blx	r3
 800eb88:	2000      	movs	r0, #0
 800eb8a:	bd38      	pop	{r3, r4, r5, pc}

0800eb8c <__sigtramp_r>:
 800eb8c:	291f      	cmp	r1, #31
 800eb8e:	b538      	push	{r3, r4, r5, lr}
 800eb90:	4605      	mov	r5, r0
 800eb92:	460c      	mov	r4, r1
 800eb94:	d902      	bls.n	800eb9c <__sigtramp_r+0x10>
 800eb96:	f04f 30ff 	mov.w	r0, #4294967295
 800eb9a:	bd38      	pop	{r3, r4, r5, pc}
 800eb9c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800eb9e:	b123      	cbz	r3, 800ebaa <__sigtramp_r+0x1e>
 800eba0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800eba2:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800eba6:	b92b      	cbnz	r3, 800ebb4 <__sigtramp_r+0x28>
 800eba8:	e00f      	b.n	800ebca <__sigtramp_r+0x3e>
 800ebaa:	f7ff ff99 	bl	800eae0 <_init_signal_r>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d0f6      	beq.n	800eba0 <__sigtramp_r+0x14>
 800ebb2:	e7f0      	b.n	800eb96 <__sigtramp_r+0xa>
 800ebb4:	1c59      	adds	r1, r3, #1
 800ebb6:	d00a      	beq.n	800ebce <__sigtramp_r+0x42>
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d00a      	beq.n	800ebd2 <__sigtramp_r+0x46>
 800ebbc:	2500      	movs	r5, #0
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 800ebc4:	4798      	blx	r3
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	bd38      	pop	{r3, r4, r5, pc}
 800ebca:	2001      	movs	r0, #1
 800ebcc:	bd38      	pop	{r3, r4, r5, pc}
 800ebce:	2002      	movs	r0, #2
 800ebd0:	bd38      	pop	{r3, r4, r5, pc}
 800ebd2:	2003      	movs	r0, #3
 800ebd4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ebd8 <raise>:
 800ebd8:	4b02      	ldr	r3, [pc, #8]	; (800ebe4 <raise+0xc>)
 800ebda:	4601      	mov	r1, r0
 800ebdc:	6818      	ldr	r0, [r3, #0]
 800ebde:	f7ff bfad 	b.w	800eb3c <_raise_r>
 800ebe2:	bf00      	nop
 800ebe4:	20000670 	.word	0x20000670

0800ebe8 <signal>:
 800ebe8:	460a      	mov	r2, r1
 800ebea:	4903      	ldr	r1, [pc, #12]	; (800ebf8 <signal+0x10>)
 800ebec:	4603      	mov	r3, r0
 800ebee:	6808      	ldr	r0, [r1, #0]
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	f7ff bf8b 	b.w	800eb0c <_signal_r>
 800ebf6:	bf00      	nop
 800ebf8:	20000670 	.word	0x20000670

0800ebfc <_init_signal>:
 800ebfc:	4b01      	ldr	r3, [pc, #4]	; (800ec04 <_init_signal+0x8>)
 800ebfe:	6818      	ldr	r0, [r3, #0]
 800ec00:	f7ff bf6e 	b.w	800eae0 <_init_signal_r>
 800ec04:	20000670 	.word	0x20000670

0800ec08 <__sigtramp>:
 800ec08:	4b02      	ldr	r3, [pc, #8]	; (800ec14 <__sigtramp+0xc>)
 800ec0a:	4601      	mov	r1, r0
 800ec0c:	6818      	ldr	r0, [r3, #0]
 800ec0e:	f7ff bfbd 	b.w	800eb8c <__sigtramp_r>
 800ec12:	bf00      	nop
 800ec14:	20000670 	.word	0x20000670

0800ec18 <_kill_r>:
 800ec18:	b538      	push	{r3, r4, r5, lr}
 800ec1a:	4c07      	ldr	r4, [pc, #28]	; (800ec38 <_kill_r+0x20>)
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	4605      	mov	r5, r0
 800ec20:	4608      	mov	r0, r1
 800ec22:	4611      	mov	r1, r2
 800ec24:	6023      	str	r3, [r4, #0]
 800ec26:	f7ff fd5b 	bl	800e6e0 <_kill>
 800ec2a:	1c43      	adds	r3, r0, #1
 800ec2c:	d102      	bne.n	800ec34 <_kill_r+0x1c>
 800ec2e:	6823      	ldr	r3, [r4, #0]
 800ec30:	b103      	cbz	r3, 800ec34 <_kill_r+0x1c>
 800ec32:	602b      	str	r3, [r5, #0]
 800ec34:	bd38      	pop	{r3, r4, r5, pc}
 800ec36:	bf00      	nop
 800ec38:	20000fdc 	.word	0x20000fdc

0800ec3c <_getpid_r>:
 800ec3c:	f7ff bd4d 	b.w	800e6da <_getpid>

0800ec40 <__EH_FRAME_BEGIN__>:
 800ec40:	0000 0000                                   ....

0800ec44 <_init>:
 800ec44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec46:	bf00      	nop
 800ec48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec4a:	bc08      	pop	{r3}
 800ec4c:	469e      	mov	lr, r3
 800ec4e:	4770      	bx	lr

0800ec50 <_fini>:
 800ec50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec52:	bf00      	nop
 800ec54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec56:	bc08      	pop	{r3}
 800ec58:	469e      	mov	lr, r3
 800ec5a:	4770      	bx	lr
