
roboime-tx-v_gustavo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dec0  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000130c  0800e048  0800e048  00016048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000130  0800f354  0800f354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001d8  0800f484  0800f484  00017484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800f65c  0800f65c  0001765c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800f660  0800f660  00017660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000640  20000000  0800f664  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001868  20000640  20000640  00018640  2**3
                  ALLOC
  9 ._user_heap_stack 00000400  20001ea8  20001ea8  00018640  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00018640  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013506  00000000  00000000  00018670  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000031da  00000000  00000000  0002bb76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e20  00000000  00000000  0002ed50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c68  00000000  00000000  0002fb70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005c3f  00000000  00000000  000307d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004fa6  00000000  00000000  00036417  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      00000082  00000000  00000000  0003b3bd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004518  00000000  00000000  0003b440  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000640 	.word	0x20000640
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800e030 	.word	0x0800e030

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e030 	.word	0x0800e030
 80001c4:	20000644 	.word	0x20000644

080001c8 <d_make_comp>:
 80001c8:	b470      	push	{r4, r5, r6}
 80001ca:	1e4c      	subs	r4, r1, #1
 80001cc:	2c4a      	cmp	r4, #74	; 0x4a
 80001ce:	d82c      	bhi.n	800022a <d_make_comp+0x62>
 80001d0:	e8df f004 	tbb	[pc, r4]
 80001d4:	3c3c3c3c 	.word	0x3c3c3c3c
 80001d8:	2b2b2b2b 	.word	0x2b2b2b2b
 80001dc:	263c2626 	.word	0x263c2626
 80001e0:	26262626 	.word	0x26262626
 80001e4:	26262626 	.word	0x26262626
 80001e8:	2b262626 	.word	0x2b262626
 80001ec:	27272727 	.word	0x27272727
 80001f0:	27272727 	.word	0x27272727
 80001f4:	2626263c 	.word	0x2626263c
 80001f8:	262b2626 	.word	0x262b2626
 80001fc:	2b3c3d27 	.word	0x2b3c3d27
 8000200:	3d27273c 	.word	0x3d27273c
 8000204:	26262b2b 	.word	0x26262b2b
 8000208:	3c3c3c3c 	.word	0x3c3c3c3c
 800020c:	3c3c263c 	.word	0x3c3c263c
 8000210:	2b2b3c26 	.word	0x2b2b3c26
 8000214:	2b262626 	.word	0x2b262626
 8000218:	26262b2b 	.word	0x26262b2b
 800021c:	3c26      	.short	0x3c26
 800021e:	3c          	.byte	0x3c
 800021f:	00          	.byte	0x00
 8000220:	b1ca      	cbz	r2, 8000256 <d_make_comp+0x8e>
 8000222:	6944      	ldr	r4, [r0, #20]
 8000224:	6985      	ldr	r5, [r0, #24]
 8000226:	42ac      	cmp	r4, r5
 8000228:	db02      	blt.n	8000230 <d_make_comp+0x68>
 800022a:	2000      	movs	r0, #0
 800022c:	bc70      	pop	{r4, r5, r6}
 800022e:	4770      	bx	lr
 8000230:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8000234:	6906      	ldr	r6, [r0, #16]
 8000236:	3401      	adds	r4, #1
 8000238:	00ad      	lsls	r5, r5, #2
 800023a:	6144      	str	r4, [r0, #20]
 800023c:	1974      	adds	r4, r6, r5
 800023e:	d00c      	beq.n	800025a <d_make_comp+0x92>
 8000240:	5571      	strb	r1, [r6, r5]
 8000242:	6062      	str	r2, [r4, #4]
 8000244:	60a3      	str	r3, [r4, #8]
 8000246:	4620      	mov	r0, r4
 8000248:	bc70      	pop	{r4, r5, r6}
 800024a:	4770      	bx	lr
 800024c:	b11a      	cbz	r2, 8000256 <d_make_comp+0x8e>
 800024e:	2b00      	cmp	r3, #0
 8000250:	d1e7      	bne.n	8000222 <d_make_comp+0x5a>
 8000252:	4618      	mov	r0, r3
 8000254:	e7ea      	b.n	800022c <d_make_comp+0x64>
 8000256:	4610      	mov	r0, r2
 8000258:	e7e8      	b.n	800022c <d_make_comp+0x64>
 800025a:	4620      	mov	r0, r4
 800025c:	e7e6      	b.n	800022c <d_make_comp+0x64>
 800025e:	bf00      	nop

08000260 <d_make_name>:
 8000260:	b430      	push	{r4, r5}
 8000262:	6943      	ldr	r3, [r0, #20]
 8000264:	6984      	ldr	r4, [r0, #24]
 8000266:	42a3      	cmp	r3, r4
 8000268:	da09      	bge.n	800027e <d_make_name+0x1e>
 800026a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800026e:	6905      	ldr	r5, [r0, #16]
 8000270:	3301      	adds	r3, #1
 8000272:	00a4      	lsls	r4, r4, #2
 8000274:	6143      	str	r3, [r0, #20]
 8000276:	192b      	adds	r3, r5, r4
 8000278:	d001      	beq.n	800027e <d_make_name+0x1e>
 800027a:	b101      	cbz	r1, 800027e <d_make_name+0x1e>
 800027c:	b912      	cbnz	r2, 8000284 <d_make_name+0x24>
 800027e:	2000      	movs	r0, #0
 8000280:	bc30      	pop	{r4, r5}
 8000282:	4770      	bx	lr
 8000284:	2000      	movs	r0, #0
 8000286:	5528      	strb	r0, [r5, r4]
 8000288:	6059      	str	r1, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	4618      	mov	r0, r3
 800028e:	bc30      	pop	{r4, r5}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop

08000294 <d_cv_qualifiers>:
 8000294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000298:	68c5      	ldr	r5, [r0, #12]
 800029a:	4604      	mov	r4, r0
 800029c:	4688      	mov	r8, r1
 800029e:	4617      	mov	r7, r2
 80002a0:	782b      	ldrb	r3, [r5, #0]
 80002a2:	460e      	mov	r6, r1
 80002a4:	e017      	b.n	80002d6 <d_cv_qualifiers+0x42>
 80002a6:	2b56      	cmp	r3, #86	; 0x56
 80002a8:	d022      	beq.n	80002f0 <d_cv_qualifiers+0x5c>
 80002aa:	2b4b      	cmp	r3, #75	; 0x4b
 80002ac:	d12d      	bne.n	800030a <d_cv_qualifiers+0x76>
 80002ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80002b0:	3501      	adds	r5, #1
 80002b2:	2f00      	cmp	r7, #0
 80002b4:	f103 0306 	add.w	r3, r3, #6
 80002b8:	60e5      	str	r5, [r4, #12]
 80002ba:	6323      	str	r3, [r4, #48]	; 0x30
 80002bc:	bf0c      	ite	eq
 80002be:	211b      	moveq	r1, #27
 80002c0:	211e      	movne	r1, #30
 80002c2:	2200      	movs	r2, #0
 80002c4:	4613      	mov	r3, r2
 80002c6:	4620      	mov	r0, r4
 80002c8:	f7ff ff7e 	bl	80001c8 <d_make_comp>
 80002cc:	6030      	str	r0, [r6, #0]
 80002ce:	b1d0      	cbz	r0, 8000306 <d_cv_qualifiers+0x72>
 80002d0:	68e5      	ldr	r5, [r4, #12]
 80002d2:	782b      	ldrb	r3, [r5, #0]
 80002d4:	1d06      	adds	r6, r0, #4
 80002d6:	2b72      	cmp	r3, #114	; 0x72
 80002d8:	d1e5      	bne.n	80002a6 <d_cv_qualifiers+0x12>
 80002da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80002dc:	3501      	adds	r5, #1
 80002de:	2f00      	cmp	r7, #0
 80002e0:	f103 0309 	add.w	r3, r3, #9
 80002e4:	60e5      	str	r5, [r4, #12]
 80002e6:	6323      	str	r3, [r4, #48]	; 0x30
 80002e8:	bf0c      	ite	eq
 80002ea:	2119      	moveq	r1, #25
 80002ec:	211c      	movne	r1, #28
 80002ee:	e7e8      	b.n	80002c2 <d_cv_qualifiers+0x2e>
 80002f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80002f2:	3501      	adds	r5, #1
 80002f4:	2f00      	cmp	r7, #0
 80002f6:	f103 0309 	add.w	r3, r3, #9
 80002fa:	60e5      	str	r5, [r4, #12]
 80002fc:	6323      	str	r3, [r4, #48]	; 0x30
 80002fe:	bf0c      	ite	eq
 8000300:	211a      	moveq	r1, #26
 8000302:	211d      	movne	r1, #29
 8000304:	e7dd      	b.n	80002c2 <d_cv_qualifiers+0x2e>
 8000306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800030a:	b9bf      	cbnz	r7, 800033c <d_cv_qualifiers+0xa8>
 800030c:	2b46      	cmp	r3, #70	; 0x46
 800030e:	d115      	bne.n	800033c <d_cv_qualifiers+0xa8>
 8000310:	4546      	cmp	r6, r8
 8000312:	d013      	beq.n	800033c <d_cv_qualifiers+0xa8>
 8000314:	241d      	movs	r4, #29
 8000316:	201e      	movs	r0, #30
 8000318:	211c      	movs	r1, #28
 800031a:	e008      	b.n	800032e <d_cv_qualifiers+0x9a>
 800031c:	2a1b      	cmp	r2, #27
 800031e:	d010      	beq.n	8000342 <d_cv_qualifiers+0xae>
 8000320:	2a19      	cmp	r2, #25
 8000322:	d100      	bne.n	8000326 <d_cv_qualifiers+0x92>
 8000324:	7019      	strb	r1, [r3, #0]
 8000326:	f103 0804 	add.w	r8, r3, #4
 800032a:	4546      	cmp	r6, r8
 800032c:	d006      	beq.n	800033c <d_cv_qualifiers+0xa8>
 800032e:	f8d8 3000 	ldr.w	r3, [r8]
 8000332:	781a      	ldrb	r2, [r3, #0]
 8000334:	2a1a      	cmp	r2, #26
 8000336:	d1f1      	bne.n	800031c <d_cv_qualifiers+0x88>
 8000338:	701c      	strb	r4, [r3, #0]
 800033a:	e7f4      	b.n	8000326 <d_cv_qualifiers+0x92>
 800033c:	4630      	mov	r0, r6
 800033e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000342:	7018      	strb	r0, [r3, #0]
 8000344:	e7ef      	b.n	8000326 <d_cv_qualifiers+0x92>
 8000346:	bf00      	nop

08000348 <d_ref_qualifier>:
 8000348:	b410      	push	{r4}
 800034a:	68c4      	ldr	r4, [r0, #12]
 800034c:	7823      	ldrb	r3, [r4, #0]
 800034e:	2b52      	cmp	r3, #82	; 0x52
 8000350:	460a      	mov	r2, r1
 8000352:	d010      	beq.n	8000376 <d_ref_qualifier+0x2e>
 8000354:	2b4f      	cmp	r3, #79	; 0x4f
 8000356:	d003      	beq.n	8000360 <d_ref_qualifier+0x18>
 8000358:	4608      	mov	r0, r1
 800035a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000362:	3303      	adds	r3, #3
 8000364:	6303      	str	r3, [r0, #48]	; 0x30
 8000366:	2120      	movs	r1, #32
 8000368:	3401      	adds	r4, #1
 800036a:	60c4      	str	r4, [r0, #12]
 800036c:	2300      	movs	r3, #0
 800036e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000372:	f7ff bf29 	b.w	80001c8 <d_make_comp>
 8000376:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000378:	3302      	adds	r3, #2
 800037a:	6303      	str	r3, [r0, #48]	; 0x30
 800037c:	211f      	movs	r1, #31
 800037e:	e7f3      	b.n	8000368 <d_ref_qualifier+0x20>

08000380 <d_clone_suffix>:
 8000380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000384:	460f      	mov	r7, r1
 8000386:	68c1      	ldr	r1, [r0, #12]
 8000388:	780c      	ldrb	r4, [r1, #0]
 800038a:	2c2e      	cmp	r4, #46	; 0x2e
 800038c:	4680      	mov	r8, r0
 800038e:	d027      	beq.n	80003e0 <d_clone_suffix+0x60>
 8000390:	460b      	mov	r3, r1
 8000392:	2c2e      	cmp	r4, #46	; 0x2e
 8000394:	d114      	bne.n	80003c0 <d_clone_suffix+0x40>
 8000396:	785c      	ldrb	r4, [r3, #1]
 8000398:	3c30      	subs	r4, #48	; 0x30
 800039a:	2c09      	cmp	r4, #9
 800039c:	d810      	bhi.n	80003c0 <d_clone_suffix+0x40>
 800039e:	789c      	ldrb	r4, [r3, #2]
 80003a0:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80003a4:	2a09      	cmp	r2, #9
 80003a6:	f103 0002 	add.w	r0, r3, #2
 80003aa:	d817      	bhi.n	80003dc <d_clone_suffix+0x5c>
 80003ac:	1cdd      	adds	r5, r3, #3
 80003ae:	462b      	mov	r3, r5
 80003b0:	3501      	adds	r5, #1
 80003b2:	781c      	ldrb	r4, [r3, #0]
 80003b4:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80003b8:	2e09      	cmp	r6, #9
 80003ba:	d9f8      	bls.n	80003ae <d_clone_suffix+0x2e>
 80003bc:	2c2e      	cmp	r4, #46	; 0x2e
 80003be:	d0ea      	beq.n	8000396 <d_clone_suffix+0x16>
 80003c0:	1a5a      	subs	r2, r3, r1
 80003c2:	f8c8 300c 	str.w	r3, [r8, #12]
 80003c6:	4640      	mov	r0, r8
 80003c8:	f7ff ff4a 	bl	8000260 <d_make_name>
 80003cc:	463a      	mov	r2, r7
 80003ce:	4603      	mov	r3, r0
 80003d0:	214b      	movs	r1, #75	; 0x4b
 80003d2:	4640      	mov	r0, r8
 80003d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80003d8:	f7ff bef6 	b.w	80001c8 <d_make_comp>
 80003dc:	4603      	mov	r3, r0
 80003de:	e7d8      	b.n	8000392 <d_clone_suffix+0x12>
 80003e0:	784b      	ldrb	r3, [r1, #1]
 80003e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80003e6:	2a19      	cmp	r2, #25
 80003e8:	d80a      	bhi.n	8000400 <d_clone_suffix+0x80>
 80003ea:	1c8a      	adds	r2, r1, #2
 80003ec:	4613      	mov	r3, r2
 80003ee:	3201      	adds	r2, #1
 80003f0:	781c      	ldrb	r4, [r3, #0]
 80003f2:	f1a4 0061 	sub.w	r0, r4, #97	; 0x61
 80003f6:	2819      	cmp	r0, #25
 80003f8:	d9f8      	bls.n	80003ec <d_clone_suffix+0x6c>
 80003fa:	2c5f      	cmp	r4, #95	; 0x5f
 80003fc:	d0f6      	beq.n	80003ec <d_clone_suffix+0x6c>
 80003fe:	e7c8      	b.n	8000392 <d_clone_suffix+0x12>
 8000400:	2b5f      	cmp	r3, #95	; 0x5f
 8000402:	d1c5      	bne.n	8000390 <d_clone_suffix+0x10>
 8000404:	e7f1      	b.n	80003ea <d_clone_suffix+0x6a>
 8000406:	bf00      	nop

08000408 <d_substitution>:
 8000408:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800040c:	68c2      	ldr	r2, [r0, #12]
 800040e:	7813      	ldrb	r3, [r2, #0]
 8000410:	2b53      	cmp	r3, #83	; 0x53
 8000412:	d003      	beq.n	800041c <d_substitution+0x14>
 8000414:	2000      	movs	r0, #0
 8000416:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800041a:	4770      	bx	lr
 800041c:	1c53      	adds	r3, r2, #1
 800041e:	60c3      	str	r3, [r0, #12]
 8000420:	7853      	ldrb	r3, [r2, #1]
 8000422:	b1ab      	cbz	r3, 8000450 <d_substitution+0x48>
 8000424:	1c93      	adds	r3, r2, #2
 8000426:	60c3      	str	r3, [r0, #12]
 8000428:	7853      	ldrb	r3, [r2, #1]
 800042a:	2b5f      	cmp	r3, #95	; 0x5f
 800042c:	d152      	bne.n	80004d4 <d_substitution+0xcc>
 800042e:	2100      	movs	r1, #0
 8000430:	6a03      	ldr	r3, [r0, #32]
 8000432:	4299      	cmp	r1, r3
 8000434:	d2ee      	bcs.n	8000414 <d_substitution+0xc>
 8000436:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000438:	69c2      	ldr	r2, [r0, #28]
 800043a:	3301      	adds	r3, #1
 800043c:	6283      	str	r3, [r0, #40]	; 0x28
 800043e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000442:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8000446:	4770      	bx	lr
 8000448:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800044c:	2a19      	cmp	r2, #25
 800044e:	d946      	bls.n	80004de <d_substitution+0xd6>
 8000450:	6882      	ldr	r2, [r0, #8]
 8000452:	0712      	lsls	r2, r2, #28
 8000454:	d46a      	bmi.n	800052c <d_substitution+0x124>
 8000456:	2900      	cmp	r1, #0
 8000458:	d16a      	bne.n	8000530 <d_substitution+0x128>
 800045a:	4a3f      	ldr	r2, [pc, #252]	; (8000558 <d_substitution+0x150>)
 800045c:	f102 05c4 	add.w	r5, r2, #196	; 0xc4
 8000460:	e002      	b.n	8000468 <d_substitution+0x60>
 8000462:	321c      	adds	r2, #28
 8000464:	42aa      	cmp	r2, r5
 8000466:	d0d5      	beq.n	8000414 <d_substitution+0xc>
 8000468:	7814      	ldrb	r4, [r2, #0]
 800046a:	429c      	cmp	r4, r3
 800046c:	d1f9      	bne.n	8000462 <d_substitution+0x5a>
 800046e:	6955      	ldr	r5, [r2, #20]
 8000470:	2d00      	cmp	r5, #0
 8000472:	d06a      	beq.n	800054a <d_substitution+0x142>
 8000474:	6943      	ldr	r3, [r0, #20]
 8000476:	6984      	ldr	r4, [r0, #24]
 8000478:	f8d2 8018 	ldr.w	r8, [r2, #24]
 800047c:	42a3      	cmp	r3, r4
 800047e:	da62      	bge.n	8000546 <d_substitution+0x13e>
 8000480:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8000484:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8000488:	00bf      	lsls	r7, r7, #2
 800048a:	3301      	adds	r3, #1
 800048c:	eb1c 0607 	adds.w	r6, ip, r7
 8000490:	6143      	str	r3, [r0, #20]
 8000492:	d05f      	beq.n	8000554 <d_substitution+0x14c>
 8000494:	f04f 0918 	mov.w	r9, #24
 8000498:	f80c 9007 	strb.w	r9, [ip, r7]
 800049c:	4637      	mov	r7, r6
 800049e:	6075      	str	r5, [r6, #4]
 80004a0:	f8c6 8008 	str.w	r8, [r6, #8]
 80004a4:	62c7      	str	r7, [r0, #44]	; 0x2c
 80004a6:	2900      	cmp	r1, #0
 80004a8:	d04a      	beq.n	8000540 <d_substitution+0x138>
 80004aa:	68d5      	ldr	r5, [r2, #12]
 80004ac:	6912      	ldr	r2, [r2, #16]
 80004ae:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	4411      	add	r1, r2
 80004b4:	6301      	str	r1, [r0, #48]	; 0x30
 80004b6:	daad      	bge.n	8000414 <d_substitution+0xc>
 80004b8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80004bc:	6904      	ldr	r4, [r0, #16]
 80004be:	3301      	adds	r3, #1
 80004c0:	0089      	lsls	r1, r1, #2
 80004c2:	6143      	str	r3, [r0, #20]
 80004c4:	1863      	adds	r3, r4, r1
 80004c6:	d043      	beq.n	8000550 <d_substitution+0x148>
 80004c8:	2018      	movs	r0, #24
 80004ca:	5460      	strb	r0, [r4, r1]
 80004cc:	4618      	mov	r0, r3
 80004ce:	605d      	str	r5, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	e7a0      	b.n	8000416 <d_substitution+0xe>
 80004d4:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80004d8:	b2ea      	uxtb	r2, r5
 80004da:	2a09      	cmp	r2, #9
 80004dc:	d8b4      	bhi.n	8000448 <d_substitution+0x40>
 80004de:	2200      	movs	r2, #0
 80004e0:	e012      	b.n	8000508 <d_substitution+0x100>
 80004e2:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 80004e6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80004ea:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80004ee:	428a      	cmp	r2, r1
 80004f0:	d890      	bhi.n	8000414 <d_substitution+0xc>
 80004f2:	68c2      	ldr	r2, [r0, #12]
 80004f4:	7813      	ldrb	r3, [r2, #0]
 80004f6:	1c54      	adds	r4, r2, #1
 80004f8:	b11b      	cbz	r3, 8000502 <d_substitution+0xfa>
 80004fa:	60c4      	str	r4, [r0, #12]
 80004fc:	7813      	ldrb	r3, [r2, #0]
 80004fe:	2b5f      	cmp	r3, #95	; 0x5f
 8000500:	d012      	beq.n	8000528 <d_substitution+0x120>
 8000502:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8000506:	460a      	mov	r2, r1
 8000508:	b2e9      	uxtb	r1, r5
 800050a:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 800050e:	2909      	cmp	r1, #9
 8000510:	b2e4      	uxtb	r4, r4
 8000512:	d9e6      	bls.n	80004e2 <d_substitution+0xda>
 8000514:	2c19      	cmp	r4, #25
 8000516:	f63f af7d 	bhi.w	8000414 <d_substitution+0xc>
 800051a:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 800051e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000522:	f1a3 0137 	sub.w	r1, r3, #55	; 0x37
 8000526:	e7e2      	b.n	80004ee <d_substitution+0xe6>
 8000528:	3101      	adds	r1, #1
 800052a:	e781      	b.n	8000430 <d_substitution+0x28>
 800052c:	2101      	movs	r1, #1
 800052e:	e794      	b.n	800045a <d_substitution+0x52>
 8000530:	68c2      	ldr	r2, [r0, #12]
 8000532:	7811      	ldrb	r1, [r2, #0]
 8000534:	3943      	subs	r1, #67	; 0x43
 8000536:	2901      	cmp	r1, #1
 8000538:	bf8c      	ite	hi
 800053a:	2100      	movhi	r1, #0
 800053c:	2101      	movls	r1, #1
 800053e:	e78c      	b.n	800045a <d_substitution+0x52>
 8000540:	6855      	ldr	r5, [r2, #4]
 8000542:	6892      	ldr	r2, [r2, #8]
 8000544:	e7b3      	b.n	80004ae <d_substitution+0xa6>
 8000546:	2700      	movs	r7, #0
 8000548:	e7ac      	b.n	80004a4 <d_substitution+0x9c>
 800054a:	6984      	ldr	r4, [r0, #24]
 800054c:	6943      	ldr	r3, [r0, #20]
 800054e:	e7aa      	b.n	80004a6 <d_substitution+0x9e>
 8000550:	4618      	mov	r0, r3
 8000552:	e760      	b.n	8000416 <d_substitution+0xe>
 8000554:	4637      	mov	r7, r6
 8000556:	e7a5      	b.n	80004a4 <d_substitution+0x9c>
 8000558:	0800e0e4 	.word	0x0800e0e4

0800055c <d_append_char>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	460d      	mov	r5, r1
 8000560:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000564:	29ff      	cmp	r1, #255	; 0xff
 8000566:	4604      	mov	r4, r0
 8000568:	d006      	beq.n	8000578 <d_append_char+0x1c>
 800056a:	1c4a      	adds	r2, r1, #1
 800056c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8000570:	5465      	strb	r5, [r4, r1]
 8000572:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	2600      	movs	r6, #0
 800057a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800057e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8000582:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8000586:	4798      	blx	r3
 8000588:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800058c:	4631      	mov	r1, r6
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8000594:	2201      	movs	r2, #1
 8000596:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800059a:	5465      	strb	r5, [r4, r1]
 800059c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80005a0:	bd70      	pop	{r4, r5, r6, pc}
 80005a2:	bf00      	nop

080005a4 <d_number.isra.0>:
 80005a4:	b470      	push	{r4, r5, r6}
 80005a6:	6802      	ldr	r2, [r0, #0]
 80005a8:	7813      	ldrb	r3, [r2, #0]
 80005aa:	2b6e      	cmp	r3, #110	; 0x6e
 80005ac:	4605      	mov	r5, r0
 80005ae:	d018      	beq.n	80005e2 <d_number.isra.0+0x3e>
 80005b0:	2600      	movs	r6, #0
 80005b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80005b6:	2a09      	cmp	r2, #9
 80005b8:	d818      	bhi.n	80005ec <d_number.isra.0+0x48>
 80005ba:	682a      	ldr	r2, [r5, #0]
 80005bc:	2000      	movs	r0, #0
 80005be:	3201      	adds	r2, #1
 80005c0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80005c4:	602a      	str	r2, [r5, #0]
 80005c6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80005ca:	f812 3b01 	ldrb.w	r3, [r2], #1
 80005ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80005d2:	2909      	cmp	r1, #9
 80005d4:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
 80005d8:	d9f2      	bls.n	80005c0 <d_number.isra.0+0x1c>
 80005da:	b106      	cbz	r6, 80005de <d_number.isra.0+0x3a>
 80005dc:	4240      	negs	r0, r0
 80005de:	bc70      	pop	{r4, r5, r6}
 80005e0:	4770      	bx	lr
 80005e2:	1c53      	adds	r3, r2, #1
 80005e4:	6003      	str	r3, [r0, #0]
 80005e6:	7853      	ldrb	r3, [r2, #1]
 80005e8:	2601      	movs	r6, #1
 80005ea:	e7e2      	b.n	80005b2 <d_number.isra.0+0xe>
 80005ec:	2000      	movs	r0, #0
 80005ee:	e7f4      	b.n	80005da <d_number.isra.0+0x36>

080005f0 <d_number_component>:
 80005f0:	6943      	ldr	r3, [r0, #20]
 80005f2:	6982      	ldr	r2, [r0, #24]
 80005f4:	4293      	cmp	r3, r2
 80005f6:	b510      	push	{r4, lr}
 80005f8:	da13      	bge.n	8000622 <d_number_component+0x32>
 80005fa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80005fe:	6901      	ldr	r1, [r0, #16]
 8000600:	0092      	lsls	r2, r2, #2
 8000602:	3301      	adds	r3, #1
 8000604:	188c      	adds	r4, r1, r2
 8000606:	6143      	str	r3, [r0, #20]
 8000608:	d008      	beq.n	800061c <d_number_component+0x2c>
 800060a:	2340      	movs	r3, #64	; 0x40
 800060c:	548b      	strb	r3, [r1, r2]
 800060e:	300c      	adds	r0, #12
 8000610:	f7ff ffc8 	bl	80005a4 <d_number.isra.0>
 8000614:	4623      	mov	r3, r4
 8000616:	6060      	str	r0, [r4, #4]
 8000618:	4618      	mov	r0, r3
 800061a:	bd10      	pop	{r4, pc}
 800061c:	4623      	mov	r3, r4
 800061e:	4618      	mov	r0, r3
 8000620:	bd10      	pop	{r4, pc}
 8000622:	2300      	movs	r3, #0
 8000624:	4618      	mov	r0, r3
 8000626:	bd10      	pop	{r4, pc}

08000628 <d_compact_number>:
 8000628:	b510      	push	{r4, lr}
 800062a:	68c3      	ldr	r3, [r0, #12]
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	2a5f      	cmp	r2, #95	; 0x5f
 8000630:	4604      	mov	r4, r0
 8000632:	d00b      	beq.n	800064c <d_compact_number+0x24>
 8000634:	2a6e      	cmp	r2, #110	; 0x6e
 8000636:	d006      	beq.n	8000646 <d_compact_number+0x1e>
 8000638:	300c      	adds	r0, #12
 800063a:	f7ff ffb3 	bl	80005a4 <d_number.isra.0>
 800063e:	68e3      	ldr	r3, [r4, #12]
 8000640:	781a      	ldrb	r2, [r3, #0]
 8000642:	2a5f      	cmp	r2, #95	; 0x5f
 8000644:	d006      	beq.n	8000654 <d_compact_number+0x2c>
 8000646:	f04f 30ff 	mov.w	r0, #4294967295
 800064a:	bd10      	pop	{r4, pc}
 800064c:	2000      	movs	r0, #0
 800064e:	3301      	adds	r3, #1
 8000650:	60e3      	str	r3, [r4, #12]
 8000652:	bd10      	pop	{r4, pc}
 8000654:	3001      	adds	r0, #1
 8000656:	e7fa      	b.n	800064e <d_compact_number+0x26>

08000658 <d_template_param>:
 8000658:	b538      	push	{r3, r4, r5, lr}
 800065a:	68c3      	ldr	r3, [r0, #12]
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	2a54      	cmp	r2, #84	; 0x54
 8000660:	4604      	mov	r4, r0
 8000662:	d001      	beq.n	8000668 <d_template_param+0x10>
 8000664:	2000      	movs	r0, #0
 8000666:	bd38      	pop	{r3, r4, r5, pc}
 8000668:	3301      	adds	r3, #1
 800066a:	60c3      	str	r3, [r0, #12]
 800066c:	f7ff ffdc 	bl	8000628 <d_compact_number>
 8000670:	1e05      	subs	r5, r0, #0
 8000672:	dbf7      	blt.n	8000664 <d_template_param+0xc>
 8000674:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000676:	6963      	ldr	r3, [r4, #20]
 8000678:	69a2      	ldr	r2, [r4, #24]
 800067a:	3101      	adds	r1, #1
 800067c:	4293      	cmp	r3, r2
 800067e:	62a1      	str	r1, [r4, #40]	; 0x28
 8000680:	daf0      	bge.n	8000664 <d_template_param+0xc>
 8000682:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000686:	6921      	ldr	r1, [r4, #16]
 8000688:	3301      	adds	r3, #1
 800068a:	0092      	lsls	r2, r2, #2
 800068c:	6163      	str	r3, [r4, #20]
 800068e:	188b      	adds	r3, r1, r2
 8000690:	d0e8      	beq.n	8000664 <d_template_param+0xc>
 8000692:	2405      	movs	r4, #5
 8000694:	548c      	strb	r4, [r1, r2]
 8000696:	605d      	str	r5, [r3, #4]
 8000698:	4618      	mov	r0, r3
 800069a:	bd38      	pop	{r3, r4, r5, pc}

0800069c <d_discriminator>:
 800069c:	b508      	push	{r3, lr}
 800069e:	68c3      	ldr	r3, [r0, #12]
 80006a0:	781a      	ldrb	r2, [r3, #0]
 80006a2:	2a5f      	cmp	r2, #95	; 0x5f
 80006a4:	d001      	beq.n	80006aa <d_discriminator+0xe>
 80006a6:	2001      	movs	r0, #1
 80006a8:	bd08      	pop	{r3, pc}
 80006aa:	3301      	adds	r3, #1
 80006ac:	f840 3f0c 	str.w	r3, [r0, #12]!
 80006b0:	f7ff ff78 	bl	80005a4 <d_number.isra.0>
 80006b4:	43c0      	mvns	r0, r0
 80006b6:	0fc0      	lsrs	r0, r0, #31
 80006b8:	bd08      	pop	{r3, pc}
 80006ba:	bf00      	nop

080006bc <d_source_name>:
 80006bc:	b570      	push	{r4, r5, r6, lr}
 80006be:	4604      	mov	r4, r0
 80006c0:	300c      	adds	r0, #12
 80006c2:	f7ff ff6f 	bl	80005a4 <d_number.isra.0>
 80006c6:	1e06      	subs	r6, r0, #0
 80006c8:	dd32      	ble.n	8000730 <d_source_name+0x74>
 80006ca:	68e5      	ldr	r5, [r4, #12]
 80006cc:	6863      	ldr	r3, [r4, #4]
 80006ce:	1b5b      	subs	r3, r3, r5
 80006d0:	429e      	cmp	r6, r3
 80006d2:	dc2f      	bgt.n	8000734 <d_source_name+0x78>
 80006d4:	68a2      	ldr	r2, [r4, #8]
 80006d6:	19ab      	adds	r3, r5, r6
 80006d8:	0752      	lsls	r2, r2, #29
 80006da:	60e3      	str	r3, [r4, #12]
 80006dc:	d415      	bmi.n	800070a <d_source_name+0x4e>
 80006de:	2e09      	cmp	r6, #9
 80006e0:	dd0c      	ble.n	80006fc <d_source_name+0x40>
 80006e2:	4628      	mov	r0, r5
 80006e4:	4914      	ldr	r1, [pc, #80]	; (8000738 <d_source_name+0x7c>)
 80006e6:	2208      	movs	r2, #8
 80006e8:	f00c fcd8 	bl	800d09c <memcmp>
 80006ec:	b930      	cbnz	r0, 80006fc <d_source_name+0x40>
 80006ee:	7a2b      	ldrb	r3, [r5, #8]
 80006f0:	2b2e      	cmp	r3, #46	; 0x2e
 80006f2:	d010      	beq.n	8000716 <d_source_name+0x5a>
 80006f4:	2b5f      	cmp	r3, #95	; 0x5f
 80006f6:	d00e      	beq.n	8000716 <d_source_name+0x5a>
 80006f8:	2b24      	cmp	r3, #36	; 0x24
 80006fa:	d00c      	beq.n	8000716 <d_source_name+0x5a>
 80006fc:	4629      	mov	r1, r5
 80006fe:	4632      	mov	r2, r6
 8000700:	4620      	mov	r0, r4
 8000702:	f7ff fdad 	bl	8000260 <d_make_name>
 8000706:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	5daa      	ldrb	r2, [r5, r6]
 800070c:	2a24      	cmp	r2, #36	; 0x24
 800070e:	bf04      	itt	eq
 8000710:	3301      	addeq	r3, #1
 8000712:	60e3      	streq	r3, [r4, #12]
 8000714:	e7e3      	b.n	80006de <d_source_name+0x22>
 8000716:	7a6b      	ldrb	r3, [r5, #9]
 8000718:	2b4e      	cmp	r3, #78	; 0x4e
 800071a:	d1ef      	bne.n	80006fc <d_source_name+0x40>
 800071c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800071e:	4907      	ldr	r1, [pc, #28]	; (800073c <d_source_name+0x80>)
 8000720:	3316      	adds	r3, #22
 8000722:	1b9e      	subs	r6, r3, r6
 8000724:	6326      	str	r6, [r4, #48]	; 0x30
 8000726:	4620      	mov	r0, r4
 8000728:	2215      	movs	r2, #21
 800072a:	f7ff fd99 	bl	8000260 <d_make_name>
 800072e:	e7ea      	b.n	8000706 <d_source_name+0x4a>
 8000730:	2000      	movs	r0, #0
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	2000      	movs	r0, #0
 8000736:	e7e6      	b.n	8000706 <d_source_name+0x4a>
 8000738:	0800eaf8 	.word	0x0800eaf8
 800073c:	0800eb04 	.word	0x0800eb04

08000740 <d_call_offset>:
 8000740:	b538      	push	{r3, r4, r5, lr}
 8000742:	4604      	mov	r4, r0
 8000744:	b929      	cbnz	r1, 8000752 <d_call_offset+0x12>
 8000746:	68c3      	ldr	r3, [r0, #12]
 8000748:	781a      	ldrb	r2, [r3, #0]
 800074a:	b132      	cbz	r2, 800075a <d_call_offset+0x1a>
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	60c2      	str	r2, [r0, #12]
 8000750:	7819      	ldrb	r1, [r3, #0]
 8000752:	2968      	cmp	r1, #104	; 0x68
 8000754:	d012      	beq.n	800077c <d_call_offset+0x3c>
 8000756:	2976      	cmp	r1, #118	; 0x76
 8000758:	d001      	beq.n	800075e <d_call_offset+0x1e>
 800075a:	2000      	movs	r0, #0
 800075c:	bd38      	pop	{r3, r4, r5, pc}
 800075e:	f104 050c 	add.w	r5, r4, #12
 8000762:	4628      	mov	r0, r5
 8000764:	f7ff ff1e 	bl	80005a4 <d_number.isra.0>
 8000768:	68e3      	ldr	r3, [r4, #12]
 800076a:	781a      	ldrb	r2, [r3, #0]
 800076c:	2a5f      	cmp	r2, #95	; 0x5f
 800076e:	d1f4      	bne.n	800075a <d_call_offset+0x1a>
 8000770:	3301      	adds	r3, #1
 8000772:	60e3      	str	r3, [r4, #12]
 8000774:	4628      	mov	r0, r5
 8000776:	f7ff ff15 	bl	80005a4 <d_number.isra.0>
 800077a:	e003      	b.n	8000784 <d_call_offset+0x44>
 800077c:	f104 000c 	add.w	r0, r4, #12
 8000780:	f7ff ff10 	bl	80005a4 <d_number.isra.0>
 8000784:	68e3      	ldr	r3, [r4, #12]
 8000786:	781a      	ldrb	r2, [r3, #0]
 8000788:	2a5f      	cmp	r2, #95	; 0x5f
 800078a:	d1e6      	bne.n	800075a <d_call_offset+0x1a>
 800078c:	3301      	adds	r3, #1
 800078e:	60e3      	str	r3, [r4, #12]
 8000790:	2001      	movs	r0, #1
 8000792:	bd38      	pop	{r3, r4, r5, pc}

08000794 <d_lookup_template_argument.isra.6>:
 8000794:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8000798:	4602      	mov	r2, r0
 800079a:	b1c3      	cbz	r3, 80007ce <d_lookup_template_argument.isra.6+0x3a>
 800079c:	685a      	ldr	r2, [r3, #4]
 800079e:	680b      	ldr	r3, [r1, #0]
 80007a0:	6890      	ldr	r0, [r2, #8]
 80007a2:	b170      	cbz	r0, 80007c2 <d_lookup_template_argument.isra.6+0x2e>
 80007a4:	7802      	ldrb	r2, [r0, #0]
 80007a6:	2a2f      	cmp	r2, #47	; 0x2f
 80007a8:	d10d      	bne.n	80007c6 <d_lookup_template_argument.isra.6+0x32>
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	dc04      	bgt.n	80007b8 <d_lookup_template_argument.isra.6+0x24>
 80007ae:	e009      	b.n	80007c4 <d_lookup_template_argument.isra.6+0x30>
 80007b0:	7802      	ldrb	r2, [r0, #0]
 80007b2:	2a2f      	cmp	r2, #47	; 0x2f
 80007b4:	d107      	bne.n	80007c6 <d_lookup_template_argument.isra.6+0x32>
 80007b6:	b143      	cbz	r3, 80007ca <d_lookup_template_argument.isra.6+0x36>
 80007b8:	6880      	ldr	r0, [r0, #8]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	2800      	cmp	r0, #0
 80007be:	d1f7      	bne.n	80007b0 <d_lookup_template_argument.isra.6+0x1c>
 80007c0:	4770      	bx	lr
 80007c2:	4770      	bx	lr
 80007c4:	d001      	beq.n	80007ca <d_lookup_template_argument.isra.6+0x36>
 80007c6:	2000      	movs	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	6840      	ldr	r0, [r0, #4]
 80007cc:	4770      	bx	lr
 80007ce:	2101      	movs	r1, #1
 80007d0:	4618      	mov	r0, r3
 80007d2:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 80007d6:	4770      	bx	lr

080007d8 <d_find_pack>:
 80007d8:	b538      	push	{r3, r4, r5, lr}
 80007da:	460c      	mov	r4, r1
 80007dc:	4605      	mov	r5, r0
 80007de:	b391      	cbz	r1, 8000846 <d_find_pack+0x6e>
 80007e0:	7823      	ldrb	r3, [r4, #0]
 80007e2:	2b4a      	cmp	r3, #74	; 0x4a
 80007e4:	d827      	bhi.n	8000836 <d_find_pack+0x5e>
 80007e6:	e8df f003 	tbb	[pc, r3]
 80007ea:	262e      	.short	0x262e
 80007ec:	30262626 	.word	0x30262626
 80007f0:	262b2b2e 	.word	0x262b2b2e
 80007f4:	26262626 	.word	0x26262626
 80007f8:	26262626 	.word	0x26262626
 80007fc:	26262626 	.word	0x26262626
 8000800:	262e2626 	.word	0x262e2626
 8000804:	26262626 	.word	0x26262626
 8000808:	26262626 	.word	0x26262626
 800080c:	26262626 	.word	0x26262626
 8000810:	26262e26 	.word	0x26262e26
 8000814:	26262626 	.word	0x26262626
 8000818:	2e262626 	.word	0x2e262626
 800081c:	2626262b 	.word	0x2626262b
 8000820:	26262626 	.word	0x26262626
 8000824:	26262626 	.word	0x26262626
 8000828:	26262e26 	.word	0x26262e26
 800082c:	262e2626 	.word	0x262e2626
 8000830:	2e26262e 	.word	0x2e26262e
 8000834:	2e          	.byte	0x2e
 8000835:	00          	.byte	0x00
 8000836:	4628      	mov	r0, r5
 8000838:	6861      	ldr	r1, [r4, #4]
 800083a:	f7ff ffcd 	bl	80007d8 <d_find_pack>
 800083e:	b918      	cbnz	r0, 8000848 <d_find_pack+0x70>
 8000840:	68a4      	ldr	r4, [r4, #8]
 8000842:	2c00      	cmp	r4, #0
 8000844:	d1cc      	bne.n	80007e0 <d_find_pack+0x8>
 8000846:	2000      	movs	r0, #0
 8000848:	bd38      	pop	{r3, r4, r5, pc}
 800084a:	4628      	mov	r0, r5
 800084c:	1d21      	adds	r1, r4, #4
 800084e:	f7ff ffa1 	bl	8000794 <d_lookup_template_argument.isra.6>
 8000852:	2800      	cmp	r0, #0
 8000854:	d0f7      	beq.n	8000846 <d_find_pack+0x6e>
 8000856:	7803      	ldrb	r3, [r0, #0]
 8000858:	2b2f      	cmp	r3, #47	; 0x2f
 800085a:	d1f4      	bne.n	8000846 <d_find_pack+0x6e>
 800085c:	bd38      	pop	{r3, r4, r5, pc}
 800085e:	bf00      	nop

08000860 <d_growable_string_callback_adapter>:
 8000860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000862:	6853      	ldr	r3, [r2, #4]
 8000864:	6894      	ldr	r4, [r2, #8]
 8000866:	3301      	adds	r3, #1
 8000868:	440b      	add	r3, r1
 800086a:	42a3      	cmp	r3, r4
 800086c:	b083      	sub	sp, #12
 800086e:	4615      	mov	r5, r2
 8000870:	460e      	mov	r6, r1
 8000872:	4607      	mov	r7, r0
 8000874:	d813      	bhi.n	800089e <d_growable_string_callback_adapter+0x3e>
 8000876:	68ec      	ldr	r4, [r5, #12]
 8000878:	b10c      	cbz	r4, 800087e <d_growable_string_callback_adapter+0x1e>
 800087a:	b003      	add	sp, #12
 800087c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087e:	e895 0009 	ldmia.w	r5, {r0, r3}
 8000882:	4632      	mov	r2, r6
 8000884:	4639      	mov	r1, r7
 8000886:	4418      	add	r0, r3
 8000888:	f00c fc17 	bl	800d0ba <memcpy>
 800088c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8000890:	4432      	add	r2, r6
 8000892:	54d4      	strb	r4, [r2, r3]
 8000894:	686b      	ldr	r3, [r5, #4]
 8000896:	441e      	add	r6, r3
 8000898:	606e      	str	r6, [r5, #4]
 800089a:	b003      	add	sp, #12
 800089c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800089e:	68d2      	ldr	r2, [r2, #12]
 80008a0:	2a00      	cmp	r2, #0
 80008a2:	d1ea      	bne.n	800087a <d_growable_string_callback_adapter+0x1a>
 80008a4:	b91c      	cbnz	r4, 80008ae <d_growable_string_callback_adapter+0x4e>
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	f04f 0402 	mov.w	r4, #2
 80008ac:	d902      	bls.n	80008b4 <d_growable_string_callback_adapter+0x54>
 80008ae:	0064      	lsls	r4, r4, #1
 80008b0:	42a3      	cmp	r3, r4
 80008b2:	d8fc      	bhi.n	80008ae <d_growable_string_callback_adapter+0x4e>
 80008b4:	6828      	ldr	r0, [r5, #0]
 80008b6:	4621      	mov	r1, r4
 80008b8:	f00c fc4e 	bl	800d158 <realloc>
 80008bc:	4603      	mov	r3, r0
 80008be:	b110      	cbz	r0, 80008c6 <d_growable_string_callback_adapter+0x66>
 80008c0:	6028      	str	r0, [r5, #0]
 80008c2:	60ac      	str	r4, [r5, #8]
 80008c4:	e7d7      	b.n	8000876 <d_growable_string_callback_adapter+0x16>
 80008c6:	6828      	ldr	r0, [r5, #0]
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	f00c f9cd 	bl	800cc68 <free>
 80008ce:	9b01      	ldr	r3, [sp, #4]
 80008d0:	602b      	str	r3, [r5, #0]
 80008d2:	2201      	movs	r2, #1
 80008d4:	606b      	str	r3, [r5, #4]
 80008d6:	60ab      	str	r3, [r5, #8]
 80008d8:	60ea      	str	r2, [r5, #12]
 80008da:	e7ce      	b.n	800087a <d_growable_string_callback_adapter+0x1a>

080008dc <d_expr_primary>:
 80008dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008e0:	68c3      	ldr	r3, [r0, #12]
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	2a4c      	cmp	r2, #76	; 0x4c
 80008e6:	4605      	mov	r5, r0
 80008e8:	d002      	beq.n	80008f0 <d_expr_primary+0x14>
 80008ea:	2000      	movs	r0, #0
 80008ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	60c2      	str	r2, [r0, #12]
 80008f4:	7859      	ldrb	r1, [r3, #1]
 80008f6:	295f      	cmp	r1, #95	; 0x5f
 80008f8:	d03a      	beq.n	8000970 <d_expr_primary+0x94>
 80008fa:	295a      	cmp	r1, #90	; 0x5a
 80008fc:	d10d      	bne.n	800091a <d_expr_primary+0x3e>
 80008fe:	3201      	adds	r2, #1
 8000900:	60ea      	str	r2, [r5, #12]
 8000902:	4628      	mov	r0, r5
 8000904:	2100      	movs	r1, #0
 8000906:	f000 fdf3 	bl	80014f0 <d_encoding>
 800090a:	68ea      	ldr	r2, [r5, #12]
 800090c:	7813      	ldrb	r3, [r2, #0]
 800090e:	2b45      	cmp	r3, #69	; 0x45
 8000910:	d1eb      	bne.n	80008ea <d_expr_primary+0xe>
 8000912:	3201      	adds	r2, #1
 8000914:	60ea      	str	r2, [r5, #12]
 8000916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800091a:	f000 fa03 	bl	8000d24 <d_type>
 800091e:	4607      	mov	r7, r0
 8000920:	2800      	cmp	r0, #0
 8000922:	d0e2      	beq.n	80008ea <d_expr_primary+0xe>
 8000924:	7803      	ldrb	r3, [r0, #0]
 8000926:	2b27      	cmp	r3, #39	; 0x27
 8000928:	d033      	beq.n	8000992 <d_expr_primary+0xb6>
 800092a:	68e9      	ldr	r1, [r5, #12]
 800092c:	780b      	ldrb	r3, [r1, #0]
 800092e:	2b6e      	cmp	r3, #110	; 0x6e
 8000930:	d028      	beq.n	8000984 <d_expr_primary+0xa8>
 8000932:	f04f 083b 	mov.w	r8, #59	; 0x3b
 8000936:	2b45      	cmp	r3, #69	; 0x45
 8000938:	d034      	beq.n	80009a4 <d_expr_primary+0xc8>
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0d5      	beq.n	80008ea <d_expr_primary+0xe>
 800093e:	1c4b      	adds	r3, r1, #1
 8000940:	e001      	b.n	8000946 <d_expr_primary+0x6a>
 8000942:	2c00      	cmp	r4, #0
 8000944:	d0d1      	beq.n	80008ea <d_expr_primary+0xe>
 8000946:	60eb      	str	r3, [r5, #12]
 8000948:	461e      	mov	r6, r3
 800094a:	f813 4b01 	ldrb.w	r4, [r3], #1
 800094e:	2c45      	cmp	r4, #69	; 0x45
 8000950:	d1f7      	bne.n	8000942 <d_expr_primary+0x66>
 8000952:	1a72      	subs	r2, r6, r1
 8000954:	4628      	mov	r0, r5
 8000956:	f7ff fc83 	bl	8000260 <d_make_name>
 800095a:	463a      	mov	r2, r7
 800095c:	4603      	mov	r3, r0
 800095e:	4641      	mov	r1, r8
 8000960:	4628      	mov	r0, r5
 8000962:	f7ff fc31 	bl	80001c8 <d_make_comp>
 8000966:	68ea      	ldr	r2, [r5, #12]
 8000968:	7813      	ldrb	r3, [r2, #0]
 800096a:	2b45      	cmp	r3, #69	; 0x45
 800096c:	d1bd      	bne.n	80008ea <d_expr_primary+0xe>
 800096e:	e7d0      	b.n	8000912 <d_expr_primary+0x36>
 8000970:	1c9a      	adds	r2, r3, #2
 8000972:	60c2      	str	r2, [r0, #12]
 8000974:	789b      	ldrb	r3, [r3, #2]
 8000976:	2b5a      	cmp	r3, #90	; 0x5a
 8000978:	d0c1      	beq.n	80008fe <d_expr_primary+0x22>
 800097a:	2b45      	cmp	r3, #69	; 0x45
 800097c:	f04f 0000 	mov.w	r0, #0
 8000980:	d1b3      	bne.n	80008ea <d_expr_primary+0xe>
 8000982:	e7c6      	b.n	8000912 <d_expr_primary+0x36>
 8000984:	1c4a      	adds	r2, r1, #1
 8000986:	60ea      	str	r2, [r5, #12]
 8000988:	784b      	ldrb	r3, [r1, #1]
 800098a:	f04f 083c 	mov.w	r8, #60	; 0x3c
 800098e:	4611      	mov	r1, r2
 8000990:	e7d1      	b.n	8000936 <d_expr_primary+0x5a>
 8000992:	6843      	ldr	r3, [r0, #4]
 8000994:	7c1a      	ldrb	r2, [r3, #16]
 8000996:	2a00      	cmp	r2, #0
 8000998:	d0c7      	beq.n	800092a <d_expr_primary+0x4e>
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800099e:	1a9b      	subs	r3, r3, r2
 80009a0:	632b      	str	r3, [r5, #48]	; 0x30
 80009a2:	e7c2      	b.n	800092a <d_expr_primary+0x4e>
 80009a4:	2200      	movs	r2, #0
 80009a6:	e7d5      	b.n	8000954 <d_expr_primary+0x78>

080009a8 <d_template_args>:
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	68c1      	ldr	r1, [r0, #12]
 80009ac:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80009ae:	780b      	ldrb	r3, [r1, #0]
 80009b0:	3b49      	subs	r3, #73	; 0x49
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	b083      	sub	sp, #12
 80009b6:	4604      	mov	r4, r0
 80009b8:	d81e      	bhi.n	80009f8 <d_template_args+0x50>
 80009ba:	1c4a      	adds	r2, r1, #1
 80009bc:	60c2      	str	r2, [r0, #12]
 80009be:	784b      	ldrb	r3, [r1, #1]
 80009c0:	2b45      	cmp	r3, #69	; 0x45
 80009c2:	d045      	beq.n	8000a50 <d_template_args+0xa8>
 80009c4:	ae02      	add	r6, sp, #8
 80009c6:	2100      	movs	r1, #0
 80009c8:	f846 1d04 	str.w	r1, [r6, #-4]!
 80009cc:	3b49      	subs	r3, #73	; 0x49
 80009ce:	2b0f      	cmp	r3, #15
 80009d0:	d835      	bhi.n	8000a3e <d_template_args+0x96>
 80009d2:	e8df f003 	tbb	[pc, r3]
 80009d6:	2f2f      	.short	0x2f2f
 80009d8:	34341434 	.word	0x34341434
 80009dc:	34343434 	.word	0x34343434
 80009e0:	34343434 	.word	0x34343434
 80009e4:	0834      	.short	0x0834
 80009e6:	3201      	adds	r2, #1
 80009e8:	60e2      	str	r2, [r4, #12]
 80009ea:	4620      	mov	r0, r4
 80009ec:	f001 fa6c 	bl	8001ec8 <d_expression>
 80009f0:	68e3      	ldr	r3, [r4, #12]
 80009f2:	781a      	ldrb	r2, [r3, #0]
 80009f4:	2a45      	cmp	r2, #69	; 0x45
 80009f6:	d027      	beq.n	8000a48 <d_template_args+0xa0>
 80009f8:	2000      	movs	r0, #0
 80009fa:	b003      	add	sp, #12
 80009fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009fe:	4620      	mov	r0, r4
 8000a00:	f7ff ff6c 	bl	80008dc <d_expr_primary>
 8000a04:	4605      	mov	r5, r0
 8000a06:	4620      	mov	r0, r4
 8000a08:	212f      	movs	r1, #47	; 0x2f
 8000a0a:	462a      	mov	r2, r5
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	2d00      	cmp	r5, #0
 8000a10:	d0f2      	beq.n	80009f8 <d_template_args+0x50>
 8000a12:	f7ff fbd9 	bl	80001c8 <d_make_comp>
 8000a16:	6030      	str	r0, [r6, #0]
 8000a18:	f100 0608 	add.w	r6, r0, #8
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d0eb      	beq.n	80009f8 <d_template_args+0x50>
 8000a20:	68e2      	ldr	r2, [r4, #12]
 8000a22:	7813      	ldrb	r3, [r2, #0]
 8000a24:	2b45      	cmp	r3, #69	; 0x45
 8000a26:	d1d1      	bne.n	80009cc <d_template_args+0x24>
 8000a28:	9801      	ldr	r0, [sp, #4]
 8000a2a:	62e7      	str	r7, [r4, #44]	; 0x2c
 8000a2c:	3201      	adds	r2, #1
 8000a2e:	60e2      	str	r2, [r4, #12]
 8000a30:	b003      	add	sp, #12
 8000a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a34:	4620      	mov	r0, r4
 8000a36:	f7ff ffb7 	bl	80009a8 <d_template_args>
 8000a3a:	4605      	mov	r5, r0
 8000a3c:	e7e3      	b.n	8000a06 <d_template_args+0x5e>
 8000a3e:	4620      	mov	r0, r4
 8000a40:	f000 f970 	bl	8000d24 <d_type>
 8000a44:	4605      	mov	r5, r0
 8000a46:	e7de      	b.n	8000a06 <d_template_args+0x5e>
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60e3      	str	r3, [r4, #12]
 8000a4c:	4605      	mov	r5, r0
 8000a4e:	e7da      	b.n	8000a06 <d_template_args+0x5e>
 8000a50:	3102      	adds	r1, #2
 8000a52:	2200      	movs	r2, #0
 8000a54:	60c1      	str	r1, [r0, #12]
 8000a56:	4613      	mov	r3, r2
 8000a58:	212f      	movs	r1, #47	; 0x2f
 8000a5a:	b003      	add	sp, #12
 8000a5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000a60:	f7ff bbb2 	b.w	80001c8 <d_make_comp>

08000a64 <d_name>:
 8000a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a68:	68c2      	ldr	r2, [r0, #12]
 8000a6a:	7813      	ldrb	r3, [r2, #0]
 8000a6c:	3b4c      	subs	r3, #76	; 0x4c
 8000a6e:	b082      	sub	sp, #8
 8000a70:	4605      	mov	r5, r0
 8000a72:	2b0e      	cmp	r3, #14
 8000a74:	d86d      	bhi.n	8000b52 <d_name+0xee>
 8000a76:	e8df f003 	tbb	[pc, r3]
 8000a7a:	6c2c      	.short	0x6c2c
 8000a7c:	6c6c6c31 	.word	0x6c6c6c31
 8000a80:	2c6c176c 	.word	0x2c6c176c
 8000a84:	6c6c6c6c 	.word	0x6c6c6c6c
 8000a88:	08          	.byte	0x08
 8000a89:	00          	.byte	0x00
 8000a8a:	3201      	adds	r2, #1
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	60c2      	str	r2, [r0, #12]
 8000a90:	f000 fd2e 	bl	80014f0 <d_encoding>
 8000a94:	68eb      	ldr	r3, [r5, #12]
 8000a96:	7819      	ldrb	r1, [r3, #0]
 8000a98:	2945      	cmp	r1, #69	; 0x45
 8000a9a:	4606      	mov	r6, r0
 8000a9c:	f000 80d1 	beq.w	8000c42 <d_name+0x1de>
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	b002      	add	sp, #8
 8000aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000aa8:	7853      	ldrb	r3, [r2, #1]
 8000aaa:	2b74      	cmp	r3, #116	; 0x74
 8000aac:	d069      	beq.n	8000b82 <d_name+0x11e>
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f7ff fcaa 	bl	8000408 <d_substitution>
 8000ab4:	68eb      	ldr	r3, [r5, #12]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b49      	cmp	r3, #73	; 0x49
 8000aba:	4604      	mov	r4, r0
 8000abc:	d150      	bne.n	8000b60 <d_name+0xfc>
 8000abe:	4628      	mov	r0, r5
 8000ac0:	f7ff ff72 	bl	80009a8 <d_template_args>
 8000ac4:	4622      	mov	r2, r4
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2104      	movs	r1, #4
 8000aca:	4628      	mov	r0, r5
 8000acc:	f7ff fb7c 	bl	80001c8 <d_make_comp>
 8000ad0:	e001      	b.n	8000ad6 <d_name+0x72>
 8000ad2:	f001 f8bb 	bl	8001c4c <d_unqualified_name>
 8000ad6:	b002      	add	sp, #8
 8000ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000adc:	3201      	adds	r2, #1
 8000ade:	60c2      	str	r2, [r0, #12]
 8000ae0:	a901      	add	r1, sp, #4
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f7ff fbd6 	bl	8000294 <d_cv_qualifiers>
 8000ae8:	4607      	mov	r7, r0
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d0d8      	beq.n	8000aa0 <d_name+0x3c>
 8000aee:	4628      	mov	r0, r5
 8000af0:	2100      	movs	r1, #0
 8000af2:	f7ff fc29 	bl	8000348 <d_ref_qualifier>
 8000af6:	68eb      	ldr	r3, [r5, #12]
 8000af8:	781c      	ldrb	r4, [r3, #0]
 8000afa:	4680      	mov	r8, r0
 8000afc:	2600      	movs	r6, #0
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	f000 808e 	beq.w	8000c20 <d_name+0x1bc>
 8000b04:	2c44      	cmp	r4, #68	; 0x44
 8000b06:	f000 8082 	beq.w	8000c0e <d_name+0x1aa>
 8000b0a:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	2a09      	cmp	r2, #9
 8000b12:	d95c      	bls.n	8000bce <d_name+0x16a>
 8000b14:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	2a19      	cmp	r2, #25
 8000b1c:	d957      	bls.n	8000bce <d_name+0x16a>
 8000b1e:	2c43      	cmp	r4, #67	; 0x43
 8000b20:	d055      	beq.n	8000bce <d_name+0x16a>
 8000b22:	2c55      	cmp	r4, #85	; 0x55
 8000b24:	d053      	beq.n	8000bce <d_name+0x16a>
 8000b26:	2c4c      	cmp	r4, #76	; 0x4c
 8000b28:	d051      	beq.n	8000bce <d_name+0x16a>
 8000b2a:	2c53      	cmp	r4, #83	; 0x53
 8000b2c:	f000 8084 	beq.w	8000c38 <d_name+0x1d4>
 8000b30:	2c49      	cmp	r4, #73	; 0x49
 8000b32:	d07a      	beq.n	8000c2a <d_name+0x1c6>
 8000b34:	2c54      	cmp	r4, #84	; 0x54
 8000b36:	f000 80b3 	beq.w	8000ca0 <d_name+0x23c>
 8000b3a:	2c45      	cmp	r4, #69	; 0x45
 8000b3c:	f000 80d8 	beq.w	8000cf0 <d_name+0x28c>
 8000b40:	2c4d      	cmp	r4, #77	; 0x4d
 8000b42:	d16d      	bne.n	8000c20 <d_name+0x1bc>
 8000b44:	2e00      	cmp	r6, #0
 8000b46:	d06b      	beq.n	8000c20 <d_name+0x1bc>
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	60ea      	str	r2, [r5, #12]
 8000b4c:	785c      	ldrb	r4, [r3, #1]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	e7d5      	b.n	8000afe <d_name+0x9a>
 8000b52:	f001 f87b 	bl	8001c4c <d_unqualified_name>
 8000b56:	68eb      	ldr	r3, [r5, #12]
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b49      	cmp	r3, #73	; 0x49
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	d003      	beq.n	8000b68 <d_name+0x104>
 8000b60:	4620      	mov	r0, r4
 8000b62:	b002      	add	sp, #8
 8000b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	d099      	beq.n	8000aa0 <d_name+0x3c>
 8000b6c:	6a2b      	ldr	r3, [r5, #32]
 8000b6e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000b70:	4293      	cmp	r3, r2
 8000b72:	da95      	bge.n	8000aa0 <d_name+0x3c>
 8000b74:	69ea      	ldr	r2, [r5, #28]
 8000b76:	1c59      	adds	r1, r3, #1
 8000b78:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	6229      	str	r1, [r5, #32]
 8000b80:	e79e      	b.n	8000ac0 <d_name+0x5c>
 8000b82:	3202      	adds	r2, #2
 8000b84:	4965      	ldr	r1, [pc, #404]	; (8000d1c <d_name+0x2b8>)
 8000b86:	60c2      	str	r2, [r0, #12]
 8000b88:	2203      	movs	r2, #3
 8000b8a:	f7ff fb69 	bl	8000260 <d_make_name>
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4628      	mov	r0, r5
 8000b92:	f001 f85b 	bl	8001c4c <d_unqualified_name>
 8000b96:	4622      	mov	r2, r4
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	f7ff fb13 	bl	80001c8 <d_make_comp>
 8000ba2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000ba4:	68eb      	ldr	r3, [r5, #12]
 8000ba6:	3203      	adds	r2, #3
 8000ba8:	632a      	str	r2, [r5, #48]	; 0x30
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b49      	cmp	r3, #73	; 0x49
 8000bae:	4604      	mov	r4, r0
 8000bb0:	d1d6      	bne.n	8000b60 <d_name+0xfc>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	f43f af74 	beq.w	8000aa0 <d_name+0x3c>
 8000bb8:	6a2b      	ldr	r3, [r5, #32]
 8000bba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	f6bf af6f 	bge.w	8000aa0 <d_name+0x3c>
 8000bc2:	69ea      	ldr	r2, [r5, #28]
 8000bc4:	1c59      	adds	r1, r3, #1
 8000bc6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000bca:	6229      	str	r1, [r5, #32]
 8000bcc:	e777      	b.n	8000abe <d_name+0x5a>
 8000bce:	4628      	mov	r0, r5
 8000bd0:	f001 f83c 	bl	8001c4c <d_unqualified_name>
 8000bd4:	b1ce      	cbz	r6, 8000c0a <d_name+0x1a6>
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4632      	mov	r2, r6
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f7ff faf3 	bl	80001c8 <d_make_comp>
 8000be2:	4606      	mov	r6, r0
 8000be4:	68eb      	ldr	r3, [r5, #12]
 8000be6:	2c53      	cmp	r4, #83	; 0x53
 8000be8:	781c      	ldrb	r4, [r3, #0]
 8000bea:	d088      	beq.n	8000afe <d_name+0x9a>
 8000bec:	2c45      	cmp	r4, #69	; 0x45
 8000bee:	d08c      	beq.n	8000b0a <d_name+0xa6>
 8000bf0:	b1b6      	cbz	r6, 8000c20 <d_name+0x1bc>
 8000bf2:	6a2b      	ldr	r3, [r5, #32]
 8000bf4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	da12      	bge.n	8000c20 <d_name+0x1bc>
 8000bfa:	69ea      	ldr	r2, [r5, #28]
 8000bfc:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 8000c00:	1c5a      	adds	r2, r3, #1
 8000c02:	68eb      	ldr	r3, [r5, #12]
 8000c04:	622a      	str	r2, [r5, #32]
 8000c06:	781c      	ldrb	r4, [r3, #0]
 8000c08:	e779      	b.n	8000afe <d_name+0x9a>
 8000c0a:	4606      	mov	r6, r0
 8000c0c:	e7ea      	b.n	8000be4 <d_name+0x180>
 8000c0e:	785b      	ldrb	r3, [r3, #1]
 8000c10:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8000c14:	2b54      	cmp	r3, #84	; 0x54
 8000c16:	d1da      	bne.n	8000bce <d_name+0x16a>
 8000c18:	4628      	mov	r0, r5
 8000c1a:	f000 f883 	bl	8000d24 <d_type>
 8000c1e:	e7d9      	b.n	8000bd4 <d_name+0x170>
 8000c20:	2000      	movs	r0, #0
 8000c22:	6038      	str	r0, [r7, #0]
 8000c24:	b002      	add	sp, #8
 8000c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	d0f8      	beq.n	8000c20 <d_name+0x1bc>
 8000c2e:	4628      	mov	r0, r5
 8000c30:	f7ff feba 	bl	80009a8 <d_template_args>
 8000c34:	2104      	movs	r1, #4
 8000c36:	e7cf      	b.n	8000bd8 <d_name+0x174>
 8000c38:	4628      	mov	r0, r5
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	f7ff fbe4 	bl	8000408 <d_substitution>
 8000c40:	e7c8      	b.n	8000bd4 <d_name+0x170>
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ea      	str	r2, [r5, #12]
 8000c46:	785a      	ldrb	r2, [r3, #1]
 8000c48:	2a73      	cmp	r2, #115	; 0x73
 8000c4a:	d03d      	beq.n	8000cc8 <d_name+0x264>
 8000c4c:	2a64      	cmp	r2, #100	; 0x64
 8000c4e:	d02b      	beq.n	8000ca8 <d_name+0x244>
 8000c50:	f04f 37ff 	mov.w	r7, #4294967295
 8000c54:	4628      	mov	r0, r5
 8000c56:	f7ff ff05 	bl	8000a64 <d_name>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	b120      	cbz	r0, 8000c68 <d_name+0x204>
 8000c5e:	7803      	ldrb	r3, [r0, #0]
 8000c60:	2b44      	cmp	r3, #68	; 0x44
 8000c62:	d001      	beq.n	8000c68 <d_name+0x204>
 8000c64:	2b46      	cmp	r3, #70	; 0x46
 8000c66:	d129      	bne.n	8000cbc <d_name+0x258>
 8000c68:	1c7b      	adds	r3, r7, #1
 8000c6a:	d025      	beq.n	8000cb8 <d_name+0x254>
 8000c6c:	696b      	ldr	r3, [r5, #20]
 8000c6e:	69aa      	ldr	r2, [r5, #24]
 8000c70:	4293      	cmp	r3, r2
 8000c72:	da13      	bge.n	8000c9c <d_name+0x238>
 8000c74:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000c78:	6929      	ldr	r1, [r5, #16]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	0092      	lsls	r2, r2, #2
 8000c7e:	616b      	str	r3, [r5, #20]
 8000c80:	188b      	adds	r3, r1, r2
 8000c82:	d003      	beq.n	8000c8c <d_name+0x228>
 8000c84:	2045      	movs	r0, #69	; 0x45
 8000c86:	5488      	strb	r0, [r1, r2]
 8000c88:	609f      	str	r7, [r3, #8]
 8000c8a:	605c      	str	r4, [r3, #4]
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	4632      	mov	r2, r6
 8000c90:	2102      	movs	r1, #2
 8000c92:	f7ff fa99 	bl	80001c8 <d_make_comp>
 8000c96:	b002      	add	sp, #8
 8000c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e7f5      	b.n	8000c8c <d_name+0x228>
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	f7ff fcd9 	bl	8000658 <d_template_param>
 8000ca6:	e795      	b.n	8000bd4 <d_name+0x170>
 8000ca8:	3302      	adds	r3, #2
 8000caa:	60eb      	str	r3, [r5, #12]
 8000cac:	4628      	mov	r0, r5
 8000cae:	f7ff fcbb 	bl	8000628 <d_compact_number>
 8000cb2:	1e07      	subs	r7, r0, #0
 8000cb4:	dace      	bge.n	8000c54 <d_name+0x1f0>
 8000cb6:	e6f3      	b.n	8000aa0 <d_name+0x3c>
 8000cb8:	4623      	mov	r3, r4
 8000cba:	e7e7      	b.n	8000c8c <d_name+0x228>
 8000cbc:	4628      	mov	r0, r5
 8000cbe:	f7ff fced 	bl	800069c <d_discriminator>
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	d1d0      	bne.n	8000c68 <d_name+0x204>
 8000cc6:	e6eb      	b.n	8000aa0 <d_name+0x3c>
 8000cc8:	3302      	adds	r3, #2
 8000cca:	60eb      	str	r3, [r5, #12]
 8000ccc:	4628      	mov	r0, r5
 8000cce:	f7ff fce5 	bl	800069c <d_discriminator>
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	f43f aee4 	beq.w	8000aa0 <d_name+0x3c>
 8000cd8:	4628      	mov	r0, r5
 8000cda:	4911      	ldr	r1, [pc, #68]	; (8000d20 <d_name+0x2bc>)
 8000cdc:	220e      	movs	r2, #14
 8000cde:	f7ff fabf 	bl	8000260 <d_make_name>
 8000ce2:	4632      	mov	r2, r6
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4628      	mov	r0, r5
 8000cea:	f7ff fa6d 	bl	80001c8 <d_make_comp>
 8000cee:	e6f2      	b.n	8000ad6 <d_name+0x72>
 8000cf0:	603e      	str	r6, [r7, #0]
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f43f aed4 	beq.w	8000aa0 <d_name+0x3c>
 8000cf8:	f1b8 0f00 	cmp.w	r8, #0
 8000cfc:	d004      	beq.n	8000d08 <d_name+0x2a4>
 8000cfe:	9b01      	ldr	r3, [sp, #4]
 8000d00:	f8c8 3004 	str.w	r3, [r8, #4]
 8000d04:	f8cd 8004 	str.w	r8, [sp, #4]
 8000d08:	68eb      	ldr	r3, [r5, #12]
 8000d0a:	781a      	ldrb	r2, [r3, #0]
 8000d0c:	2a45      	cmp	r2, #69	; 0x45
 8000d0e:	f47f aec7 	bne.w	8000aa0 <d_name+0x3c>
 8000d12:	3301      	adds	r3, #1
 8000d14:	60eb      	str	r3, [r5, #12]
 8000d16:	9801      	ldr	r0, [sp, #4]
 8000d18:	e6dd      	b.n	8000ad6 <d_name+0x72>
 8000d1a:	bf00      	nop
 8000d1c:	0800eb2c 	.word	0x0800eb2c
 8000d20:	0800eb1c 	.word	0x0800eb1c

08000d24 <d_type>:
 8000d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d26:	68c2      	ldr	r2, [r0, #12]
 8000d28:	7813      	ldrb	r3, [r2, #0]
 8000d2a:	2b72      	cmp	r3, #114	; 0x72
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	4604      	mov	r4, r0
 8000d30:	d054      	beq.n	8000ddc <d_type+0xb8>
 8000d32:	2b56      	cmp	r3, #86	; 0x56
 8000d34:	d052      	beq.n	8000ddc <d_type+0xb8>
 8000d36:	2b4b      	cmp	r3, #75	; 0x4b
 8000d38:	d050      	beq.n	8000ddc <d_type+0xb8>
 8000d3a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8000d3e:	294a      	cmp	r1, #74	; 0x4a
 8000d40:	d87d      	bhi.n	8000e3e <d_type+0x11a>
 8000d42:	e8df f011 	tbh	[pc, r1, lsl #1]
 8000d46:	00a2      	.short	0x00a2
 8000d48:	00a200a2 	.word	0x00a200a2
 8000d4c:	00a200a2 	.word	0x00a200a2
 8000d50:	00a200a2 	.word	0x00a200a2
 8000d54:	00a200a2 	.word	0x00a200a2
 8000d58:	007c00a2 	.word	0x007c00a2
 8000d5c:	007c007c 	.word	0x007c007c
 8000d60:	007c007c 	.word	0x007c007c
 8000d64:	007c007c 	.word	0x007c007c
 8000d68:	007c00a7 	.word	0x007c00a7
 8000d6c:	00ff00cf 	.word	0x00ff00cf
 8000d70:	00dc007c 	.word	0x00dc007c
 8000d74:	007c00f2 	.word	0x007c00f2
 8000d78:	007c007c 	.word	0x007c007c
 8000d7c:	007c007c 	.word	0x007c007c
 8000d80:	00a20171 	.word	0x00a20171
 8000d84:	01a701c1 	.word	0x01a701c1
 8000d88:	01b4007c 	.word	0x01b4007c
 8000d8c:	01ef01ce 	.word	0x01ef01ce
 8000d90:	007c0207 	.word	0x007c0207
 8000d94:	007c007c 	.word	0x007c007c
 8000d98:	00a2007c 	.word	0x00a2007c
 8000d9c:	007c007c 	.word	0x007c007c
 8000da0:	007c007c 	.word	0x007c007c
 8000da4:	007c007c 	.word	0x007c007c
 8000da8:	02180218 	.word	0x02180218
 8000dac:	02180218 	.word	0x02180218
 8000db0:	02180218 	.word	0x02180218
 8000db4:	02180218 	.word	0x02180218
 8000db8:	02180218 	.word	0x02180218
 8000dbc:	0218007c 	.word	0x0218007c
 8000dc0:	02180218 	.word	0x02180218
 8000dc4:	007c0218 	.word	0x007c0218
 8000dc8:	007c007c 	.word	0x007c007c
 8000dcc:	02180218 	.word	0x02180218
 8000dd0:	02180089 	.word	0x02180089
 8000dd4:	02180218 	.word	0x02180218
 8000dd8:	02180218 	.word	0x02180218
 8000ddc:	4620      	mov	r0, r4
 8000dde:	a901      	add	r1, sp, #4
 8000de0:	2200      	movs	r2, #0
 8000de2:	f7ff fa57 	bl	8000294 <d_cv_qualifiers>
 8000de6:	4605      	mov	r5, r0
 8000de8:	b348      	cbz	r0, 8000e3e <d_type+0x11a>
 8000dea:	4620      	mov	r0, r4
 8000dec:	f7ff ff9a 	bl	8000d24 <d_type>
 8000df0:	6028      	str	r0, [r5, #0]
 8000df2:	b320      	cbz	r0, 8000e3e <d_type+0x11a>
 8000df4:	7802      	ldrb	r2, [r0, #0]
 8000df6:	3a1f      	subs	r2, #31
 8000df8:	2a01      	cmp	r2, #1
 8000dfa:	d923      	bls.n	8000e44 <d_type+0x120>
 8000dfc:	9a01      	ldr	r2, [sp, #4]
 8000dfe:	b1f2      	cbz	r2, 8000e3e <d_type+0x11a>
 8000e00:	6a23      	ldr	r3, [r4, #32]
 8000e02:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e04:	428b      	cmp	r3, r1
 8000e06:	da1a      	bge.n	8000e3e <d_type+0x11a>
 8000e08:	69e1      	ldr	r1, [r4, #28]
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000e0e:	9801      	ldr	r0, [sp, #4]
 8000e10:	1c5d      	adds	r5, r3, #1
 8000e12:	6225      	str	r5, [r4, #32]
 8000e14:	b003      	add	sp, #12
 8000e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f001 f855 	bl	8001ec8 <d_expression>
 8000e1e:	2141      	movs	r1, #65	; 0x41
 8000e20:	4602      	mov	r2, r0
 8000e22:	2300      	movs	r3, #0
 8000e24:	4620      	mov	r0, r4
 8000e26:	f7ff f9cf 	bl	80001c8 <d_make_comp>
 8000e2a:	9001      	str	r0, [sp, #4]
 8000e2c:	b138      	cbz	r0, 8000e3e <d_type+0x11a>
 8000e2e:	68e3      	ldr	r3, [r4, #12]
 8000e30:	781a      	ldrb	r2, [r3, #0]
 8000e32:	b122      	cbz	r2, 8000e3e <d_type+0x11a>
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	60e2      	str	r2, [r4, #12]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b45      	cmp	r3, #69	; 0x45
 8000e3c:	d01a      	beq.n	8000e74 <d_type+0x150>
 8000e3e:	2000      	movs	r0, #0
 8000e40:	b003      	add	sp, #12
 8000e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e44:	9a01      	ldr	r2, [sp, #4]
 8000e46:	6841      	ldr	r1, [r0, #4]
 8000e48:	6042      	str	r2, [r0, #4]
 8000e4a:	682b      	ldr	r3, [r5, #0]
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	6029      	str	r1, [r5, #0]
 8000e50:	9a01      	ldr	r2, [sp, #4]
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	d1d4      	bne.n	8000e00 <d_type+0xdc>
 8000e56:	e7f2      	b.n	8000e3e <d_type+0x11a>
 8000e58:	3201      	adds	r2, #1
 8000e5a:	60e2      	str	r2, [r4, #12]
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f7ff fc2d 	bl	80006bc <d_source_name>
 8000e62:	2128      	movs	r1, #40	; 0x28
 8000e64:	4602      	mov	r2, r0
 8000e66:	2300      	movs	r3, #0
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f7ff f9ad 	bl	80001c8 <d_make_comp>
 8000e6e:	9001      	str	r0, [sp, #4]
 8000e70:	2800      	cmp	r0, #0
 8000e72:	d0e4      	beq.n	8000e3e <d_type+0x11a>
 8000e74:	6a23      	ldr	r3, [r4, #32]
 8000e76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	dae0      	bge.n	8000e3e <d_type+0x11a>
 8000e7c:	69e2      	ldr	r2, [r4, #28]
 8000e7e:	1c59      	adds	r1, r3, #1
 8000e80:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000e84:	9801      	ldr	r0, [sp, #4]
 8000e86:	6221      	str	r1, [r4, #32]
 8000e88:	e7da      	b.n	8000e40 <d_type+0x11c>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	f7ff fdea 	bl	8000a64 <d_name>
 8000e90:	9001      	str	r0, [sp, #4]
 8000e92:	e7ed      	b.n	8000e70 <d_type+0x14c>
 8000e94:	1c51      	adds	r1, r2, #1
 8000e96:	60e1      	str	r1, [r4, #12]
 8000e98:	7853      	ldrb	r3, [r2, #1]
 8000e9a:	2b5f      	cmp	r3, #95	; 0x5f
 8000e9c:	f000 8279 	beq.w	8001392 <d_type+0x66e>
 8000ea0:	3b30      	subs	r3, #48	; 0x30
 8000ea2:	2b09      	cmp	r3, #9
 8000ea4:	f200 827e 	bhi.w	80013a4 <d_type+0x680>
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	3201      	adds	r2, #1
 8000eac:	60e2      	str	r2, [r4, #12]
 8000eae:	7813      	ldrb	r3, [r2, #0]
 8000eb0:	3b30      	subs	r3, #48	; 0x30
 8000eb2:	2b09      	cmp	r3, #9
 8000eb4:	d9f9      	bls.n	8000eaa <d_type+0x186>
 8000eb6:	1a52      	subs	r2, r2, r1
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f7ff f9d1 	bl	8000260 <d_make_name>
 8000ebe:	4605      	mov	r5, r0
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d030      	beq.n	8000f26 <d_type+0x202>
 8000ec4:	68e1      	ldr	r1, [r4, #12]
 8000ec6:	780b      	ldrb	r3, [r1, #0]
 8000ec8:	2b5f      	cmp	r3, #95	; 0x5f
 8000eca:	d12c      	bne.n	8000f26 <d_type+0x202>
 8000ecc:	3101      	adds	r1, #1
 8000ece:	60e1      	str	r1, [r4, #12]
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f7ff ff27 	bl	8000d24 <d_type>
 8000ed6:	462a      	mov	r2, r5
 8000ed8:	4603      	mov	r3, r0
 8000eda:	212a      	movs	r1, #42	; 0x2a
 8000edc:	4620      	mov	r0, r4
 8000ede:	f7ff f973 	bl	80001c8 <d_make_comp>
 8000ee2:	e7d5      	b.n	8000e90 <d_type+0x16c>
 8000ee4:	3201      	adds	r2, #1
 8000ee6:	60e2      	str	r2, [r4, #12]
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f7ff ff1b 	bl	8000d24 <d_type>
 8000eee:	2125      	movs	r1, #37	; 0x25
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f7ff f967 	bl	80001c8 <d_make_comp>
 8000efa:	9001      	str	r0, [sp, #4]
 8000efc:	e7b8      	b.n	8000e70 <d_type+0x14c>
 8000efe:	1c53      	adds	r3, r2, #1
 8000f00:	60e3      	str	r3, [r4, #12]
 8000f02:	7853      	ldrb	r3, [r2, #1]
 8000f04:	2b59      	cmp	r3, #89	; 0x59
 8000f06:	bf04      	itt	eq
 8000f08:	3202      	addeq	r2, #2
 8000f0a:	60e2      	streq	r2, [r4, #12]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f000 fad0 	bl	80014b4 <d_bare_function_type>
 8000f14:	4601      	mov	r1, r0
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff fa16 	bl	8000348 <d_ref_qualifier>
 8000f1c:	68e3      	ldr	r3, [r4, #12]
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	2a45      	cmp	r2, #69	; 0x45
 8000f22:	f000 823c 	beq.w	800139e <d_type+0x67a>
 8000f26:	2000      	movs	r0, #0
 8000f28:	e7b2      	b.n	8000e90 <d_type+0x16c>
 8000f2a:	3201      	adds	r2, #1
 8000f2c:	60e2      	str	r2, [r4, #12]
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f7ff fef8 	bl	8000d24 <d_type>
 8000f34:	2126      	movs	r1, #38	; 0x26
 8000f36:	4602      	mov	r2, r0
 8000f38:	2300      	movs	r3, #0
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f7ff f944 	bl	80001c8 <d_make_comp>
 8000f40:	9001      	str	r0, [sp, #4]
 8000f42:	e795      	b.n	8000e70 <d_type+0x14c>
 8000f44:	1c53      	adds	r3, r2, #1
 8000f46:	60e3      	str	r3, [r4, #12]
 8000f48:	7853      	ldrb	r3, [r2, #1]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f43f af77 	beq.w	8000e3e <d_type+0x11a>
 8000f50:	1c93      	adds	r3, r2, #2
 8000f52:	60e3      	str	r3, [r4, #12]
 8000f54:	7853      	ldrb	r3, [r2, #1]
 8000f56:	3b46      	subs	r3, #70	; 0x46
 8000f58:	2b30      	cmp	r3, #48	; 0x30
 8000f5a:	f63f af70 	bhi.w	8000e3e <d_type+0x11a>
 8000f5e:	a101      	add	r1, pc, #4	; (adr r1, 8000f64 <d_type+0x240>)
 8000f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f64:	0800127d 	.word	0x0800127d
 8000f68:	08000e3f 	.word	0x08000e3f
 8000f6c:	08000e3f 	.word	0x08000e3f
 8000f70:	08000e3f 	.word	0x08000e3f
 8000f74:	08000e3f 	.word	0x08000e3f
 8000f78:	08000e3f 	.word	0x08000e3f
 8000f7c:	08000e3f 	.word	0x08000e3f
 8000f80:	08000e3f 	.word	0x08000e3f
 8000f84:	08000e3f 	.word	0x08000e3f
 8000f88:	08000e3f 	.word	0x08000e3f
 8000f8c:	08000e3f 	.word	0x08000e3f
 8000f90:	08000e3f 	.word	0x08000e3f
 8000f94:	08000e3f 	.word	0x08000e3f
 8000f98:	08000e3f 	.word	0x08000e3f
 8000f9c:	08000e19 	.word	0x08000e19
 8000fa0:	08000e3f 	.word	0x08000e3f
 8000fa4:	08000e3f 	.word	0x08000e3f
 8000fa8:	08000e3f 	.word	0x08000e3f
 8000fac:	08000e3f 	.word	0x08000e3f
 8000fb0:	08000e3f 	.word	0x08000e3f
 8000fb4:	08000e3f 	.word	0x08000e3f
 8000fb8:	08000e3f 	.word	0x08000e3f
 8000fbc:	08000e3f 	.word	0x08000e3f
 8000fc0:	08000e3f 	.word	0x08000e3f
 8000fc4:	08000e3f 	.word	0x08000e3f
 8000fc8:	08000e3f 	.word	0x08000e3f
 8000fcc:	08000e3f 	.word	0x08000e3f
 8000fd0:	08001271 	.word	0x08001271
 8000fd4:	08000e3f 	.word	0x08000e3f
 8000fd8:	08000e3f 	.word	0x08000e3f
 8000fdc:	08001249 	.word	0x08001249
 8000fe0:	08001221 	.word	0x08001221
 8000fe4:	080011f9 	.word	0x080011f9
 8000fe8:	08000e3f 	.word	0x08000e3f
 8000fec:	080011d1 	.word	0x080011d1
 8000ff0:	080011a1 	.word	0x080011a1
 8000ff4:	08000e3f 	.word	0x08000e3f
 8000ff8:	08000e3f 	.word	0x08000e3f
 8000ffc:	08000e3f 	.word	0x08000e3f
 8001000:	08000e3f 	.word	0x08000e3f
 8001004:	08001355 	.word	0x08001355
 8001008:	08000e3f 	.word	0x08000e3f
 800100c:	0800133f 	.word	0x0800133f
 8001010:	08000e3f 	.word	0x08000e3f
 8001014:	08000e3f 	.word	0x08000e3f
 8001018:	0800131b 	.word	0x0800131b
 800101c:	08000e19 	.word	0x08000e19
 8001020:	08000e3f 	.word	0x08000e3f
 8001024:	080012e3 	.word	0x080012e3
 8001028:	3201      	adds	r2, #1
 800102a:	60e2      	str	r2, [r4, #12]
 800102c:	4620      	mov	r0, r4
 800102e:	f7ff fe79 	bl	8000d24 <d_type>
 8001032:	ae01      	add	r6, sp, #4
 8001034:	4607      	mov	r7, r0
 8001036:	4631      	mov	r1, r6
 8001038:	4620      	mov	r0, r4
 800103a:	2201      	movs	r2, #1
 800103c:	f7ff f92a 	bl	8000294 <d_cv_qualifiers>
 8001040:	4605      	mov	r5, r0
 8001042:	2800      	cmp	r0, #0
 8001044:	f43f af6f 	beq.w	8000f26 <d_type+0x202>
 8001048:	4620      	mov	r0, r4
 800104a:	f7ff fe6b 	bl	8000d24 <d_type>
 800104e:	6028      	str	r0, [r5, #0]
 8001050:	2800      	cmp	r0, #0
 8001052:	f43f af68 	beq.w	8000f26 <d_type+0x202>
 8001056:	42b5      	cmp	r5, r6
 8001058:	d015      	beq.n	8001086 <d_type+0x362>
 800105a:	7801      	ldrb	r1, [r0, #0]
 800105c:	f1a1 021f 	sub.w	r2, r1, #31
 8001060:	2a01      	cmp	r2, #1
 8001062:	f240 81a7 	bls.w	80013b4 <d_type+0x690>
 8001066:	2929      	cmp	r1, #41	; 0x29
 8001068:	d00d      	beq.n	8001086 <d_type+0x362>
 800106a:	9a01      	ldr	r2, [sp, #4]
 800106c:	2a00      	cmp	r2, #0
 800106e:	f43f af5a 	beq.w	8000f26 <d_type+0x202>
 8001072:	6a23      	ldr	r3, [r4, #32]
 8001074:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001076:	428b      	cmp	r3, r1
 8001078:	f6bf af55 	bge.w	8000f26 <d_type+0x202>
 800107c:	69e1      	ldr	r1, [r4, #28]
 800107e:	1c58      	adds	r0, r3, #1
 8001080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001084:	6220      	str	r0, [r4, #32]
 8001086:	463a      	mov	r2, r7
 8001088:	4620      	mov	r0, r4
 800108a:	212b      	movs	r1, #43	; 0x2b
 800108c:	9b01      	ldr	r3, [sp, #4]
 800108e:	f7ff f89b 	bl	80001c8 <d_make_comp>
 8001092:	e6fd      	b.n	8000e90 <d_type+0x16c>
 8001094:	3201      	adds	r2, #1
 8001096:	60e2      	str	r2, [r4, #12]
 8001098:	4620      	mov	r0, r4
 800109a:	f7ff fe43 	bl	8000d24 <d_type>
 800109e:	2122      	movs	r1, #34	; 0x22
 80010a0:	4602      	mov	r2, r0
 80010a2:	2300      	movs	r3, #0
 80010a4:	4620      	mov	r0, r4
 80010a6:	f7ff f88f 	bl	80001c8 <d_make_comp>
 80010aa:	9001      	str	r0, [sp, #4]
 80010ac:	e6e0      	b.n	8000e70 <d_type+0x14c>
 80010ae:	3201      	adds	r2, #1
 80010b0:	60e2      	str	r2, [r4, #12]
 80010b2:	4620      	mov	r0, r4
 80010b4:	f7ff fe36 	bl	8000d24 <d_type>
 80010b8:	2123      	movs	r1, #35	; 0x23
 80010ba:	4602      	mov	r2, r0
 80010bc:	2300      	movs	r3, #0
 80010be:	4620      	mov	r0, r4
 80010c0:	f7ff f882 	bl	80001c8 <d_make_comp>
 80010c4:	9001      	str	r0, [sp, #4]
 80010c6:	e6d3      	b.n	8000e70 <d_type+0x14c>
 80010c8:	3201      	adds	r2, #1
 80010ca:	60e2      	str	r2, [r4, #12]
 80010cc:	4620      	mov	r0, r4
 80010ce:	f7ff fe29 	bl	8000d24 <d_type>
 80010d2:	2124      	movs	r1, #36	; 0x24
 80010d4:	4602      	mov	r2, r0
 80010d6:	2300      	movs	r3, #0
 80010d8:	4620      	mov	r0, r4
 80010da:	f7ff f875 	bl	80001c8 <d_make_comp>
 80010de:	9001      	str	r0, [sp, #4]
 80010e0:	e6c6      	b.n	8000e70 <d_type+0x14c>
 80010e2:	7853      	ldrb	r3, [r2, #1]
 80010e4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80010e8:	2a09      	cmp	r2, #9
 80010ea:	d905      	bls.n	80010f8 <d_type+0x3d4>
 80010ec:	2b5f      	cmp	r3, #95	; 0x5f
 80010ee:	d003      	beq.n	80010f8 <d_type+0x3d4>
 80010f0:	3b41      	subs	r3, #65	; 0x41
 80010f2:	2b19      	cmp	r3, #25
 80010f4:	f200 8166 	bhi.w	80013c4 <d_type+0x6a0>
 80010f8:	4620      	mov	r0, r4
 80010fa:	2100      	movs	r1, #0
 80010fc:	f7ff f984 	bl	8000408 <d_substitution>
 8001100:	68e3      	ldr	r3, [r4, #12]
 8001102:	9001      	str	r0, [sp, #4]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b49      	cmp	r3, #73	; 0x49
 8001108:	4605      	mov	r5, r0
 800110a:	f47f ae99 	bne.w	8000e40 <d_type+0x11c>
 800110e:	4620      	mov	r0, r4
 8001110:	f7ff fc4a 	bl	80009a8 <d_template_args>
 8001114:	462a      	mov	r2, r5
 8001116:	4603      	mov	r3, r0
 8001118:	2104      	movs	r1, #4
 800111a:	4620      	mov	r0, r4
 800111c:	f7ff f854 	bl	80001c8 <d_make_comp>
 8001120:	9001      	str	r0, [sp, #4]
 8001122:	e6a5      	b.n	8000e70 <d_type+0x14c>
 8001124:	4620      	mov	r0, r4
 8001126:	f7ff fa97 	bl	8000658 <d_template_param>
 800112a:	68e3      	ldr	r3, [r4, #12]
 800112c:	9001      	str	r0, [sp, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b49      	cmp	r3, #73	; 0x49
 8001132:	f47f ae9d 	bne.w	8000e70 <d_type+0x14c>
 8001136:	2800      	cmp	r0, #0
 8001138:	f43f ae81 	beq.w	8000e3e <d_type+0x11a>
 800113c:	6a23      	ldr	r3, [r4, #32]
 800113e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001140:	4293      	cmp	r3, r2
 8001142:	f6bf ae7c 	bge.w	8000e3e <d_type+0x11a>
 8001146:	69e2      	ldr	r2, [r4, #28]
 8001148:	1c59      	adds	r1, r3, #1
 800114a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800114e:	9d01      	ldr	r5, [sp, #4]
 8001150:	6221      	str	r1, [r4, #32]
 8001152:	e7dc      	b.n	800110e <d_type+0x3ea>
 8001154:	3201      	adds	r2, #1
 8001156:	60e2      	str	r2, [r4, #12]
 8001158:	4620      	mov	r0, r4
 800115a:	f7ff faaf 	bl	80006bc <d_source_name>
 800115e:	9001      	str	r0, [sp, #4]
 8001160:	4620      	mov	r0, r4
 8001162:	f7ff fddf 	bl	8000d24 <d_type>
 8001166:	2121      	movs	r1, #33	; 0x21
 8001168:	4602      	mov	r2, r0
 800116a:	9b01      	ldr	r3, [sp, #4]
 800116c:	4620      	mov	r0, r4
 800116e:	f7ff f82b 	bl	80001c8 <d_make_comp>
 8001172:	9001      	str	r0, [sp, #4]
 8001174:	e67c      	b.n	8000e70 <d_type+0x14c>
 8001176:	6961      	ldr	r1, [r4, #20]
 8001178:	69a0      	ldr	r0, [r4, #24]
 800117a:	4da3      	ldr	r5, [pc, #652]	; (8001408 <d_type+0x6e4>)
 800117c:	3b61      	subs	r3, #97	; 0x61
 800117e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001182:	4281      	cmp	r1, r0
 8001184:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001188:	f2c0 80f6 	blt.w	8001378 <d_type+0x654>
 800118c:	2300      	movs	r3, #0
 800118e:	4618      	mov	r0, r3
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	6859      	ldr	r1, [r3, #4]
 8001194:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001196:	3201      	adds	r2, #1
 8001198:	440b      	add	r3, r1
 800119a:	60e2      	str	r2, [r4, #12]
 800119c:	6323      	str	r3, [r4, #48]	; 0x30
 800119e:	e64f      	b.n	8000e40 <d_type+0x11c>
 80011a0:	6963      	ldr	r3, [r4, #20]
 80011a2:	69a2      	ldr	r2, [r4, #24]
 80011a4:	4293      	cmp	r3, r2
 80011a6:	f280 80f6 	bge.w	8001396 <d_type+0x672>
 80011aa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80011ae:	6921      	ldr	r1, [r4, #16]
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	3301      	adds	r3, #1
 80011b4:	1888      	adds	r0, r1, r2
 80011b6:	6163      	str	r3, [r4, #20]
 80011b8:	f000 8121 	beq.w	80013fe <d_type+0x6da>
 80011bc:	4d93      	ldr	r5, [pc, #588]	; (800140c <d_type+0x6e8>)
 80011be:	2327      	movs	r3, #39	; 0x27
 80011c0:	548b      	strb	r3, [r1, r2]
 80011c2:	462b      	mov	r3, r5
 80011c4:	6045      	str	r5, [r0, #4]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80011ca:	4413      	add	r3, r2
 80011cc:	6323      	str	r3, [r4, #48]	; 0x30
 80011ce:	e637      	b.n	8000e40 <d_type+0x11c>
 80011d0:	6963      	ldr	r3, [r4, #20]
 80011d2:	69a2      	ldr	r2, [r4, #24]
 80011d4:	4293      	cmp	r3, r2
 80011d6:	f280 80de 	bge.w	8001396 <d_type+0x672>
 80011da:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80011de:	6921      	ldr	r1, [r4, #16]
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	3301      	adds	r3, #1
 80011e4:	1888      	adds	r0, r1, r2
 80011e6:	6163      	str	r3, [r4, #20]
 80011e8:	f000 8109 	beq.w	80013fe <d_type+0x6da>
 80011ec:	4d88      	ldr	r5, [pc, #544]	; (8001410 <d_type+0x6ec>)
 80011ee:	2327      	movs	r3, #39	; 0x27
 80011f0:	548b      	strb	r3, [r1, r2]
 80011f2:	462b      	mov	r3, r5
 80011f4:	6045      	str	r5, [r0, #4]
 80011f6:	e7e6      	b.n	80011c6 <d_type+0x4a2>
 80011f8:	6963      	ldr	r3, [r4, #20]
 80011fa:	69a2      	ldr	r2, [r4, #24]
 80011fc:	4293      	cmp	r3, r2
 80011fe:	f280 80ca 	bge.w	8001396 <d_type+0x672>
 8001202:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001206:	6921      	ldr	r1, [r4, #16]
 8001208:	0092      	lsls	r2, r2, #2
 800120a:	3301      	adds	r3, #1
 800120c:	1888      	adds	r0, r1, r2
 800120e:	6163      	str	r3, [r4, #20]
 8001210:	f000 80f5 	beq.w	80013fe <d_type+0x6da>
 8001214:	4d7f      	ldr	r5, [pc, #508]	; (8001414 <d_type+0x6f0>)
 8001216:	2327      	movs	r3, #39	; 0x27
 8001218:	548b      	strb	r3, [r1, r2]
 800121a:	462b      	mov	r3, r5
 800121c:	6045      	str	r5, [r0, #4]
 800121e:	e7d2      	b.n	80011c6 <d_type+0x4a2>
 8001220:	6963      	ldr	r3, [r4, #20]
 8001222:	69a2      	ldr	r2, [r4, #24]
 8001224:	4293      	cmp	r3, r2
 8001226:	f280 80b6 	bge.w	8001396 <d_type+0x672>
 800122a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800122e:	6921      	ldr	r1, [r4, #16]
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	3301      	adds	r3, #1
 8001234:	1888      	adds	r0, r1, r2
 8001236:	6163      	str	r3, [r4, #20]
 8001238:	f000 80e1 	beq.w	80013fe <d_type+0x6da>
 800123c:	4d76      	ldr	r5, [pc, #472]	; (8001418 <d_type+0x6f4>)
 800123e:	2327      	movs	r3, #39	; 0x27
 8001240:	548b      	strb	r3, [r1, r2]
 8001242:	462b      	mov	r3, r5
 8001244:	6045      	str	r5, [r0, #4]
 8001246:	e7be      	b.n	80011c6 <d_type+0x4a2>
 8001248:	6963      	ldr	r3, [r4, #20]
 800124a:	69a2      	ldr	r2, [r4, #24]
 800124c:	4293      	cmp	r3, r2
 800124e:	f280 80a2 	bge.w	8001396 <d_type+0x672>
 8001252:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001256:	6921      	ldr	r1, [r4, #16]
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	3301      	adds	r3, #1
 800125c:	1888      	adds	r0, r1, r2
 800125e:	6163      	str	r3, [r4, #20]
 8001260:	f000 80cd 	beq.w	80013fe <d_type+0x6da>
 8001264:	4d6d      	ldr	r5, [pc, #436]	; (800141c <d_type+0x6f8>)
 8001266:	2327      	movs	r3, #39	; 0x27
 8001268:	548b      	strb	r3, [r1, r2]
 800126a:	462b      	mov	r3, r5
 800126c:	6045      	str	r5, [r0, #4]
 800126e:	e7aa      	b.n	80011c6 <d_type+0x4a2>
 8001270:	4620      	mov	r0, r4
 8001272:	496b      	ldr	r1, [pc, #428]	; (8001420 <d_type+0x6fc>)
 8001274:	2204      	movs	r2, #4
 8001276:	f7fe fff3 	bl	8000260 <d_make_name>
 800127a:	e5e1      	b.n	8000e40 <d_type+0x11c>
 800127c:	6963      	ldr	r3, [r4, #20]
 800127e:	69a1      	ldr	r1, [r4, #24]
 8001280:	428b      	cmp	r3, r1
 8001282:	f280 80ab 	bge.w	80013dc <d_type+0x6b8>
 8001286:	6921      	ldr	r1, [r4, #16]
 8001288:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 800128c:	3301      	adds	r3, #1
 800128e:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8001292:	6163      	str	r3, [r4, #20]
 8001294:	232c      	movs	r3, #44	; 0x2c
 8001296:	9501      	str	r5, [sp, #4]
 8001298:	702b      	strb	r3, [r5, #0]
 800129a:	7893      	ldrb	r3, [r2, #2]
 800129c:	3b30      	subs	r3, #48	; 0x30
 800129e:	2b09      	cmp	r3, #9
 80012a0:	bf8c      	ite	hi
 80012a2:	2300      	movhi	r3, #0
 80012a4:	2301      	movls	r3, #1
 80012a6:	812b      	strh	r3, [r5, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f040 8099 	bne.w	80013e0 <d_type+0x6bc>
 80012ae:	4620      	mov	r0, r4
 80012b0:	f7ff fd38 	bl	8000d24 <d_type>
 80012b4:	6068      	str	r0, [r5, #4]
 80012b6:	9b01      	ldr	r3, [sp, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f43f adbf 	beq.w	8000e3e <d_type+0x11a>
 80012c0:	f104 000c 	add.w	r0, r4, #12
 80012c4:	f7ff f96e 	bl	80005a4 <d_number.isra.0>
 80012c8:	68e3      	ldr	r3, [r4, #12]
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	b132      	cbz	r2, 80012dc <d_type+0x5b8>
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60e2      	str	r2, [r4, #12]
 80012d2:	781a      	ldrb	r2, [r3, #0]
 80012d4:	f1b2 0373 	subs.w	r3, r2, #115	; 0x73
 80012d8:	425a      	negs	r2, r3
 80012da:	415a      	adcs	r2, r3
 80012dc:	9801      	ldr	r0, [sp, #4]
 80012de:	8142      	strh	r2, [r0, #10]
 80012e0:	e5ae      	b.n	8000e40 <d_type+0x11c>
 80012e2:	7893      	ldrb	r3, [r2, #2]
 80012e4:	2b5f      	cmp	r3, #95	; 0x5f
 80012e6:	f000 8081 	beq.w	80013ec <d_type+0x6c8>
 80012ea:	4620      	mov	r0, r4
 80012ec:	f7ff f980 	bl	80005f0 <d_number_component>
 80012f0:	4605      	mov	r5, r0
 80012f2:	2d00      	cmp	r5, #0
 80012f4:	f000 8081 	beq.w	80013fa <d_type+0x6d6>
 80012f8:	68e3      	ldr	r3, [r4, #12]
 80012fa:	781a      	ldrb	r2, [r3, #0]
 80012fc:	2a5f      	cmp	r2, #95	; 0x5f
 80012fe:	f47f ae12 	bne.w	8000f26 <d_type+0x202>
 8001302:	3301      	adds	r3, #1
 8001304:	60e3      	str	r3, [r4, #12]
 8001306:	4620      	mov	r0, r4
 8001308:	f7ff fd0c 	bl	8000d24 <d_type>
 800130c:	462a      	mov	r2, r5
 800130e:	4603      	mov	r3, r0
 8001310:	212d      	movs	r1, #45	; 0x2d
 8001312:	4620      	mov	r0, r4
 8001314:	f7fe ff58 	bl	80001c8 <d_make_comp>
 8001318:	e5ba      	b.n	8000e90 <d_type+0x16c>
 800131a:	6963      	ldr	r3, [r4, #20]
 800131c:	69a2      	ldr	r2, [r4, #24]
 800131e:	4293      	cmp	r3, r2
 8001320:	da39      	bge.n	8001396 <d_type+0x672>
 8001322:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001326:	6921      	ldr	r1, [r4, #16]
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	3301      	adds	r3, #1
 800132c:	1888      	adds	r0, r1, r2
 800132e:	6163      	str	r3, [r4, #20]
 8001330:	d065      	beq.n	80013fe <d_type+0x6da>
 8001332:	4d3c      	ldr	r5, [pc, #240]	; (8001424 <d_type+0x700>)
 8001334:	2327      	movs	r3, #39	; 0x27
 8001336:	548b      	strb	r3, [r1, r2]
 8001338:	462b      	mov	r3, r5
 800133a:	6045      	str	r5, [r0, #4]
 800133c:	e743      	b.n	80011c6 <d_type+0x4a2>
 800133e:	4620      	mov	r0, r4
 8001340:	f7ff fcf0 	bl	8000d24 <d_type>
 8001344:	2149      	movs	r1, #73	; 0x49
 8001346:	4602      	mov	r2, r0
 8001348:	2300      	movs	r3, #0
 800134a:	4620      	mov	r0, r4
 800134c:	f7fe ff3c 	bl	80001c8 <d_make_comp>
 8001350:	9001      	str	r0, [sp, #4]
 8001352:	e58d      	b.n	8000e70 <d_type+0x14c>
 8001354:	6963      	ldr	r3, [r4, #20]
 8001356:	69a2      	ldr	r2, [r4, #24]
 8001358:	4293      	cmp	r3, r2
 800135a:	da1c      	bge.n	8001396 <d_type+0x672>
 800135c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001360:	6921      	ldr	r1, [r4, #16]
 8001362:	0092      	lsls	r2, r2, #2
 8001364:	3301      	adds	r3, #1
 8001366:	1888      	adds	r0, r1, r2
 8001368:	6163      	str	r3, [r4, #20]
 800136a:	d048      	beq.n	80013fe <d_type+0x6da>
 800136c:	4d2e      	ldr	r5, [pc, #184]	; (8001428 <d_type+0x704>)
 800136e:	2327      	movs	r3, #39	; 0x27
 8001370:	548b      	strb	r3, [r1, r2]
 8001372:	462b      	mov	r3, r5
 8001374:	6045      	str	r5, [r0, #4]
 8001376:	e726      	b.n	80011c6 <d_type+0x4a2>
 8001378:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800137c:	6925      	ldr	r5, [r4, #16]
 800137e:	3101      	adds	r1, #1
 8001380:	0080      	lsls	r0, r0, #2
 8001382:	6161      	str	r1, [r4, #20]
 8001384:	1829      	adds	r1, r5, r0
 8001386:	d03c      	beq.n	8001402 <d_type+0x6de>
 8001388:	2627      	movs	r6, #39	; 0x27
 800138a:	542e      	strb	r6, [r5, r0]
 800138c:	4608      	mov	r0, r1
 800138e:	604b      	str	r3, [r1, #4]
 8001390:	e6ff      	b.n	8001192 <d_type+0x46e>
 8001392:	2500      	movs	r5, #0
 8001394:	e59a      	b.n	8000ecc <d_type+0x1a8>
 8001396:	2300      	movs	r3, #0
 8001398:	4618      	mov	r0, r3
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	e713      	b.n	80011c6 <d_type+0x4a2>
 800139e:	3301      	adds	r3, #1
 80013a0:	60e3      	str	r3, [r4, #12]
 80013a2:	e575      	b.n	8000e90 <d_type+0x16c>
 80013a4:	4620      	mov	r0, r4
 80013a6:	f000 fd8f 	bl	8001ec8 <d_expression>
 80013aa:	4605      	mov	r5, r0
 80013ac:	2800      	cmp	r0, #0
 80013ae:	f47f ad89 	bne.w	8000ec4 <d_type+0x1a0>
 80013b2:	e5b8      	b.n	8000f26 <d_type+0x202>
 80013b4:	9901      	ldr	r1, [sp, #4]
 80013b6:	6842      	ldr	r2, [r0, #4]
 80013b8:	6041      	str	r1, [r0, #4]
 80013ba:	682b      	ldr	r3, [r5, #0]
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	7811      	ldrb	r1, [r2, #0]
 80013c0:	602a      	str	r2, [r5, #0]
 80013c2:	e650      	b.n	8001066 <d_type+0x342>
 80013c4:	4620      	mov	r0, r4
 80013c6:	f7ff fb4d 	bl	8000a64 <d_name>
 80013ca:	9001      	str	r0, [sp, #4]
 80013cc:	2800      	cmp	r0, #0
 80013ce:	f43f ad36 	beq.w	8000e3e <d_type+0x11a>
 80013d2:	7803      	ldrb	r3, [r0, #0]
 80013d4:	2b18      	cmp	r3, #24
 80013d6:	f47f ad4d 	bne.w	8000e74 <d_type+0x150>
 80013da:	e531      	b.n	8000e40 <d_type+0x11c>
 80013dc:	2500      	movs	r5, #0
 80013de:	e759      	b.n	8001294 <d_type+0x570>
 80013e0:	f104 000c 	add.w	r0, r4, #12
 80013e4:	f7ff f8de 	bl	80005a4 <d_number.isra.0>
 80013e8:	9d01      	ldr	r5, [sp, #4]
 80013ea:	e760      	b.n	80012ae <d_type+0x58a>
 80013ec:	3203      	adds	r2, #3
 80013ee:	60e2      	str	r2, [r4, #12]
 80013f0:	4620      	mov	r0, r4
 80013f2:	f000 fd69 	bl	8001ec8 <d_expression>
 80013f6:	4605      	mov	r5, r0
 80013f8:	e77b      	b.n	80012f2 <d_type+0x5ce>
 80013fa:	4628      	mov	r0, r5
 80013fc:	e548      	b.n	8000e90 <d_type+0x16c>
 80013fe:	6843      	ldr	r3, [r0, #4]
 8001400:	e6e1      	b.n	80011c6 <d_type+0x4a2>
 8001402:	684b      	ldr	r3, [r1, #4]
 8001404:	4608      	mov	r0, r1
 8001406:	e6c4      	b.n	8001192 <d_type+0x46e>
 8001408:	0800e1a8 	.word	0x0800e1a8
 800140c:	0800e414 	.word	0x0800e414
 8001410:	0800e3ec 	.word	0x0800e3ec
 8001414:	0800e3b0 	.word	0x0800e3b0
 8001418:	0800e3d8 	.word	0x0800e3d8
 800141c:	0800e3c4 	.word	0x0800e3c4
 8001420:	0800eb30 	.word	0x0800eb30
 8001424:	0800e400 	.word	0x0800e400
 8001428:	0800e428 	.word	0x0800e428

0800142c <d_parmlist>:
 800142c:	b570      	push	{r4, r5, r6, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	2300      	movs	r3, #0
 8001432:	68c1      	ldr	r1, [r0, #12]
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	780b      	ldrb	r3, [r1, #0]
 8001438:	4604      	mov	r4, r0
 800143a:	b34b      	cbz	r3, 8001490 <d_parmlist+0x64>
 800143c:	2b45      	cmp	r3, #69	; 0x45
 800143e:	d027      	beq.n	8001490 <d_parmlist+0x64>
 8001440:	2b2e      	cmp	r3, #46	; 0x2e
 8001442:	d025      	beq.n	8001490 <d_parmlist+0x64>
 8001444:	ae01      	add	r6, sp, #4
 8001446:	e017      	b.n	8001478 <d_parmlist+0x4c>
 8001448:	2b4f      	cmp	r3, #79	; 0x4f
 800144a:	d017      	beq.n	800147c <d_parmlist+0x50>
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff fc69 	bl	8000d24 <d_type>
 8001452:	4605      	mov	r5, r0
 8001454:	212e      	movs	r1, #46	; 0x2e
 8001456:	4620      	mov	r0, r4
 8001458:	462a      	mov	r2, r5
 800145a:	2300      	movs	r3, #0
 800145c:	b1c5      	cbz	r5, 8001490 <d_parmlist+0x64>
 800145e:	f7fe feb3 	bl	80001c8 <d_make_comp>
 8001462:	6030      	str	r0, [r6, #0]
 8001464:	b1a0      	cbz	r0, 8001490 <d_parmlist+0x64>
 8001466:	68e1      	ldr	r1, [r4, #12]
 8001468:	780b      	ldrb	r3, [r1, #0]
 800146a:	f100 0608 	add.w	r6, r0, #8
 800146e:	b143      	cbz	r3, 8001482 <d_parmlist+0x56>
 8001470:	2b45      	cmp	r3, #69	; 0x45
 8001472:	d006      	beq.n	8001482 <d_parmlist+0x56>
 8001474:	2b2e      	cmp	r3, #46	; 0x2e
 8001476:	d004      	beq.n	8001482 <d_parmlist+0x56>
 8001478:	2b52      	cmp	r3, #82	; 0x52
 800147a:	d1e5      	bne.n	8001448 <d_parmlist+0x1c>
 800147c:	784b      	ldrb	r3, [r1, #1]
 800147e:	2b45      	cmp	r3, #69	; 0x45
 8001480:	d1e4      	bne.n	800144c <d_parmlist+0x20>
 8001482:	9b01      	ldr	r3, [sp, #4]
 8001484:	b123      	cbz	r3, 8001490 <d_parmlist+0x64>
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	b12a      	cbz	r2, 8001496 <d_parmlist+0x6a>
 800148a:	4618      	mov	r0, r3
 800148c:	b002      	add	sp, #8
 800148e:	bd70      	pop	{r4, r5, r6, pc}
 8001490:	2000      	movs	r0, #0
 8001492:	b002      	add	sp, #8
 8001494:	bd70      	pop	{r4, r5, r6, pc}
 8001496:	6859      	ldr	r1, [r3, #4]
 8001498:	7808      	ldrb	r0, [r1, #0]
 800149a:	2827      	cmp	r0, #39	; 0x27
 800149c:	d1f5      	bne.n	800148a <d_parmlist+0x5e>
 800149e:	6849      	ldr	r1, [r1, #4]
 80014a0:	7c08      	ldrb	r0, [r1, #16]
 80014a2:	2809      	cmp	r0, #9
 80014a4:	d1f1      	bne.n	800148a <d_parmlist+0x5e>
 80014a6:	6848      	ldr	r0, [r1, #4]
 80014a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80014aa:	1a09      	subs	r1, r1, r0
 80014ac:	6321      	str	r1, [r4, #48]	; 0x30
 80014ae:	4618      	mov	r0, r3
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	e7eb      	b.n	800148c <d_parmlist+0x60>

080014b4 <d_bare_function_type>:
 80014b4:	b570      	push	{r4, r5, r6, lr}
 80014b6:	68c3      	ldr	r3, [r0, #12]
 80014b8:	781a      	ldrb	r2, [r3, #0]
 80014ba:	2a4a      	cmp	r2, #74	; 0x4a
 80014bc:	4604      	mov	r4, r0
 80014be:	d00d      	beq.n	80014dc <d_bare_function_type+0x28>
 80014c0:	b971      	cbnz	r1, 80014e0 <d_bare_function_type+0x2c>
 80014c2:	460d      	mov	r5, r1
 80014c4:	4620      	mov	r0, r4
 80014c6:	f7ff ffb1 	bl	800142c <d_parmlist>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b170      	cbz	r0, 80014ec <d_bare_function_type+0x38>
 80014ce:	4620      	mov	r0, r4
 80014d0:	462a      	mov	r2, r5
 80014d2:	2129      	movs	r1, #41	; 0x29
 80014d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80014d8:	f7fe be76 	b.w	80001c8 <d_make_comp>
 80014dc:	3301      	adds	r3, #1
 80014de:	60c3      	str	r3, [r0, #12]
 80014e0:	4620      	mov	r0, r4
 80014e2:	f7ff fc1f 	bl	8000d24 <d_type>
 80014e6:	4605      	mov	r5, r0
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d1eb      	bne.n	80014c4 <d_bare_function_type+0x10>
 80014ec:	2000      	movs	r0, #0
 80014ee:	bd70      	pop	{r4, r5, r6, pc}

080014f0 <d_encoding>:
 80014f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014f4:	68c3      	ldr	r3, [r0, #12]
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	2a47      	cmp	r2, #71	; 0x47
 80014fa:	4605      	mov	r5, r0
 80014fc:	460e      	mov	r6, r1
 80014fe:	d034      	beq.n	800156a <d_encoding+0x7a>
 8001500:	2a54      	cmp	r2, #84	; 0x54
 8001502:	d032      	beq.n	800156a <d_encoding+0x7a>
 8001504:	f7ff faae 	bl	8000a64 <d_name>
 8001508:	4604      	mov	r4, r0
 800150a:	b358      	cbz	r0, 8001564 <d_encoding+0x74>
 800150c:	b116      	cbz	r6, 8001514 <d_encoding+0x24>
 800150e:	68ab      	ldr	r3, [r5, #8]
 8001510:	07db      	lsls	r3, r3, #31
 8001512:	d51f      	bpl.n	8001554 <d_encoding+0x64>
 8001514:	68eb      	ldr	r3, [r5, #12]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b323      	cbz	r3, 8001564 <d_encoding+0x74>
 800151a:	2b45      	cmp	r3, #69	; 0x45
 800151c:	d022      	beq.n	8001564 <d_encoding+0x74>
 800151e:	4621      	mov	r1, r4
 8001520:	780b      	ldrb	r3, [r1, #0]
 8001522:	2b04      	cmp	r3, #4
 8001524:	f1a3 021c 	sub.w	r2, r3, #28
 8001528:	f000 80a4 	beq.w	8001674 <d_encoding+0x184>
 800152c:	f0c0 80a0 	bcc.w	8001670 <d_encoding+0x180>
 8001530:	2a04      	cmp	r2, #4
 8001532:	f200 809d 	bhi.w	8001670 <d_encoding+0x180>
 8001536:	6849      	ldr	r1, [r1, #4]
 8001538:	2900      	cmp	r1, #0
 800153a:	d1f1      	bne.n	8001520 <d_encoding+0x30>
 800153c:	4628      	mov	r0, r5
 800153e:	f7ff ffb9 	bl	80014b4 <d_bare_function_type>
 8001542:	4622      	mov	r2, r4
 8001544:	4603      	mov	r3, r0
 8001546:	2103      	movs	r1, #3
 8001548:	4628      	mov	r0, r5
 800154a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800154e:	f7fe be3b 	b.w	80001c8 <d_make_comp>
 8001552:	6864      	ldr	r4, [r4, #4]
 8001554:	7823      	ldrb	r3, [r4, #0]
 8001556:	f1a3 021c 	sub.w	r2, r3, #28
 800155a:	2a04      	cmp	r2, #4
 800155c:	d9f9      	bls.n	8001552 <d_encoding+0x62>
 800155e:	2b02      	cmp	r3, #2
 8001560:	f000 816e 	beq.w	8001840 <d_encoding+0x350>
 8001564:	4620      	mov	r0, r4
 8001566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800156a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800156c:	f101 0214 	add.w	r2, r1, #20
 8001570:	632a      	str	r2, [r5, #48]	; 0x30
 8001572:	781a      	ldrb	r2, [r3, #0]
 8001574:	2a54      	cmp	r2, #84	; 0x54
 8001576:	d005      	beq.n	8001584 <d_encoding+0x94>
 8001578:	2a47      	cmp	r2, #71	; 0x47
 800157a:	f000 80ed 	beq.w	8001758 <d_encoding+0x268>
 800157e:	2000      	movs	r0, #0
 8001580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	60ea      	str	r2, [r5, #12]
 8001588:	785a      	ldrb	r2, [r3, #1]
 800158a:	2a00      	cmp	r2, #0
 800158c:	d0f7      	beq.n	800157e <d_encoding+0x8e>
 800158e:	1c9a      	adds	r2, r3, #2
 8001590:	60ea      	str	r2, [r5, #12]
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	3b43      	subs	r3, #67	; 0x43
 8001596:	2b33      	cmp	r3, #51	; 0x33
 8001598:	d8f1      	bhi.n	800157e <d_encoding+0x8e>
 800159a:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <d_encoding+0xb0>)
 800159c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a0:	08001aad 	.word	0x08001aad
 80015a4:	0800157f 	.word	0x0800157f
 80015a8:	0800157f 	.word	0x0800157f
 80015ac:	08001a97 	.word	0x08001a97
 80015b0:	0800157f 	.word	0x0800157f
 80015b4:	08001a81 	.word	0x08001a81
 80015b8:	08001a6b 	.word	0x08001a6b
 80015bc:	08001a55 	.word	0x08001a55
 80015c0:	0800157f 	.word	0x0800157f
 80015c4:	0800157f 	.word	0x0800157f
 80015c8:	0800157f 	.word	0x0800157f
 80015cc:	0800157f 	.word	0x0800157f
 80015d0:	0800157f 	.word	0x0800157f
 80015d4:	0800157f 	.word	0x0800157f
 80015d8:	0800157f 	.word	0x0800157f
 80015dc:	0800157f 	.word	0x0800157f
 80015e0:	08001a3f 	.word	0x08001a3f
 80015e4:	08001a25 	.word	0x08001a25
 80015e8:	0800157f 	.word	0x0800157f
 80015ec:	08001a0b 	.word	0x08001a0b
 80015f0:	080019cf 	.word	0x080019cf
 80015f4:	0800157f 	.word	0x0800157f
 80015f8:	0800157f 	.word	0x0800157f
 80015fc:	0800157f 	.word	0x0800157f
 8001600:	0800157f 	.word	0x0800157f
 8001604:	0800157f 	.word	0x0800157f
 8001608:	0800157f 	.word	0x0800157f
 800160c:	0800157f 	.word	0x0800157f
 8001610:	0800157f 	.word	0x0800157f
 8001614:	0800157f 	.word	0x0800157f
 8001618:	0800157f 	.word	0x0800157f
 800161c:	0800157f 	.word	0x0800157f
 8001620:	0800199b 	.word	0x0800199b
 8001624:	0800157f 	.word	0x0800157f
 8001628:	0800157f 	.word	0x0800157f
 800162c:	0800157f 	.word	0x0800157f
 8001630:	0800157f 	.word	0x0800157f
 8001634:	080019e5 	.word	0x080019e5
 8001638:	0800157f 	.word	0x0800157f
 800163c:	0800157f 	.word	0x0800157f
 8001640:	0800157f 	.word	0x0800157f
 8001644:	0800157f 	.word	0x0800157f
 8001648:	0800157f 	.word	0x0800157f
 800164c:	0800157f 	.word	0x0800157f
 8001650:	0800157f 	.word	0x0800157f
 8001654:	0800157f 	.word	0x0800157f
 8001658:	0800157f 	.word	0x0800157f
 800165c:	0800157f 	.word	0x0800157f
 8001660:	0800157f 	.word	0x0800157f
 8001664:	0800157f 	.word	0x0800157f
 8001668:	0800157f 	.word	0x0800157f
 800166c:	08001975 	.word	0x08001975
 8001670:	2100      	movs	r1, #0
 8001672:	e763      	b.n	800153c <d_encoding+0x4c>
 8001674:	684b      	ldr	r3, [r1, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80f4 	beq.w	8001864 <d_encoding+0x374>
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	3a01      	subs	r2, #1
 8001680:	2a32      	cmp	r2, #50	; 0x32
 8001682:	f200 80ef 	bhi.w	8001864 <d_encoding+0x374>
 8001686:	a101      	add	r1, pc, #4	; (adr r1, 800168c <d_encoding+0x19c>)
 8001688:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800168c:	0800185d 	.word	0x0800185d
 8001690:	0800185d 	.word	0x0800185d
 8001694:	08001865 	.word	0x08001865
 8001698:	08001865 	.word	0x08001865
 800169c:	08001865 	.word	0x08001865
 80016a0:	08001865 	.word	0x08001865
 80016a4:	08001671 	.word	0x08001671
 80016a8:	08001671 	.word	0x08001671
 80016ac:	08001865 	.word	0x08001865
 80016b0:	08001865 	.word	0x08001865
 80016b4:	08001865 	.word	0x08001865
 80016b8:	08001865 	.word	0x08001865
 80016bc:	08001865 	.word	0x08001865
 80016c0:	08001865 	.word	0x08001865
 80016c4:	08001865 	.word	0x08001865
 80016c8:	08001865 	.word	0x08001865
 80016cc:	08001865 	.word	0x08001865
 80016d0:	08001865 	.word	0x08001865
 80016d4:	08001865 	.word	0x08001865
 80016d8:	08001865 	.word	0x08001865
 80016dc:	08001865 	.word	0x08001865
 80016e0:	08001865 	.word	0x08001865
 80016e4:	08001865 	.word	0x08001865
 80016e8:	08001865 	.word	0x08001865
 80016ec:	08001865 	.word	0x08001865
 80016f0:	08001865 	.word	0x08001865
 80016f4:	08001865 	.word	0x08001865
 80016f8:	08001865 	.word	0x08001865
 80016fc:	08001865 	.word	0x08001865
 8001700:	08001865 	.word	0x08001865
 8001704:	08001865 	.word	0x08001865
 8001708:	08001865 	.word	0x08001865
 800170c:	08001865 	.word	0x08001865
 8001710:	08001865 	.word	0x08001865
 8001714:	08001865 	.word	0x08001865
 8001718:	08001865 	.word	0x08001865
 800171c:	08001865 	.word	0x08001865
 8001720:	08001865 	.word	0x08001865
 8001724:	08001865 	.word	0x08001865
 8001728:	08001865 	.word	0x08001865
 800172c:	08001865 	.word	0x08001865
 8001730:	08001865 	.word	0x08001865
 8001734:	08001865 	.word	0x08001865
 8001738:	08001865 	.word	0x08001865
 800173c:	08001865 	.word	0x08001865
 8001740:	08001865 	.word	0x08001865
 8001744:	08001865 	.word	0x08001865
 8001748:	08001865 	.word	0x08001865
 800174c:	08001865 	.word	0x08001865
 8001750:	08001865 	.word	0x08001865
 8001754:	08001671 	.word	0x08001671
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	60ea      	str	r2, [r5, #12]
 800175c:	785a      	ldrb	r2, [r3, #1]
 800175e:	2a00      	cmp	r2, #0
 8001760:	f43f af0d 	beq.w	800157e <d_encoding+0x8e>
 8001764:	1c9a      	adds	r2, r3, #2
 8001766:	60ea      	str	r2, [r5, #12]
 8001768:	785a      	ldrb	r2, [r3, #1]
 800176a:	3a41      	subs	r2, #65	; 0x41
 800176c:	2a31      	cmp	r2, #49	; 0x31
 800176e:	f63f af06 	bhi.w	800157e <d_encoding+0x8e>
 8001772:	a101      	add	r1, pc, #4	; (adr r1, 8001778 <d_encoding+0x288>)
 8001774:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001778:	08001931 	.word	0x08001931
 800177c:	0800157f 	.word	0x0800157f
 8001780:	0800157f 	.word	0x0800157f
 8001784:	0800157f 	.word	0x0800157f
 8001788:	0800157f 	.word	0x0800157f
 800178c:	0800157f 	.word	0x0800157f
 8001790:	0800157f 	.word	0x0800157f
 8001794:	0800157f 	.word	0x0800157f
 8001798:	0800157f 	.word	0x0800157f
 800179c:	0800157f 	.word	0x0800157f
 80017a0:	0800157f 	.word	0x0800157f
 80017a4:	0800157f 	.word	0x0800157f
 80017a8:	0800157f 	.word	0x0800157f
 80017ac:	0800157f 	.word	0x0800157f
 80017b0:	0800157f 	.word	0x0800157f
 80017b4:	0800157f 	.word	0x0800157f
 80017b8:	0800157f 	.word	0x0800157f
 80017bc:	08001913 	.word	0x08001913
 80017c0:	0800157f 	.word	0x0800157f
 80017c4:	08001949 	.word	0x08001949
 80017c8:	0800157f 	.word	0x0800157f
 80017cc:	080018fd 	.word	0x080018fd
 80017d0:	0800157f 	.word	0x0800157f
 80017d4:	0800157f 	.word	0x0800157f
 80017d8:	0800157f 	.word	0x0800157f
 80017dc:	0800157f 	.word	0x0800157f
 80017e0:	0800157f 	.word	0x0800157f
 80017e4:	0800157f 	.word	0x0800157f
 80017e8:	0800157f 	.word	0x0800157f
 80017ec:	0800157f 	.word	0x0800157f
 80017f0:	0800157f 	.word	0x0800157f
 80017f4:	0800157f 	.word	0x0800157f
 80017f8:	0800157f 	.word	0x0800157f
 80017fc:	0800157f 	.word	0x0800157f
 8001800:	0800157f 	.word	0x0800157f
 8001804:	0800157f 	.word	0x0800157f
 8001808:	0800157f 	.word	0x0800157f
 800180c:	0800157f 	.word	0x0800157f
 8001810:	0800157f 	.word	0x0800157f
 8001814:	0800157f 	.word	0x0800157f
 8001818:	0800157f 	.word	0x0800157f
 800181c:	0800157f 	.word	0x0800157f
 8001820:	0800157f 	.word	0x0800157f
 8001824:	0800157f 	.word	0x0800157f
 8001828:	0800157f 	.word	0x0800157f
 800182c:	0800157f 	.word	0x0800157f
 8001830:	0800157f 	.word	0x0800157f
 8001834:	0800157f 	.word	0x0800157f
 8001838:	0800157f 	.word	0x0800157f
 800183c:	08001869 	.word	0x08001869
 8001840:	68a3      	ldr	r3, [r4, #8]
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	3a1c      	subs	r2, #28
 8001846:	2a04      	cmp	r2, #4
 8001848:	d804      	bhi.n	8001854 <d_encoding+0x364>
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	781a      	ldrb	r2, [r3, #0]
 800184e:	3a1c      	subs	r2, #28
 8001850:	2a04      	cmp	r2, #4
 8001852:	d9fa      	bls.n	800184a <d_encoding+0x35a>
 8001854:	60a3      	str	r3, [r4, #8]
 8001856:	4620      	mov	r0, r4
 8001858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f47f af0c 	bne.w	800167c <d_encoding+0x18c>
 8001864:	2101      	movs	r1, #1
 8001866:	e669      	b.n	800153c <d_encoding+0x4c>
 8001868:	f105 000c 	add.w	r0, r5, #12
 800186c:	f7fe fe9a 	bl	80005a4 <d_number.isra.0>
 8001870:	2801      	cmp	r0, #1
 8001872:	f77f ae84 	ble.w	800157e <d_encoding+0x8e>
 8001876:	68eb      	ldr	r3, [r5, #12]
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	2a00      	cmp	r2, #0
 800187c:	f43f ae7f 	beq.w	800157e <d_encoding+0x8e>
 8001880:	1c5e      	adds	r6, r3, #1
 8001882:	60ee      	str	r6, [r5, #12]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b5f      	cmp	r3, #95	; 0x5f
 8001888:	f47f ae79 	bne.w	800157e <d_encoding+0x8e>
 800188c:	1e47      	subs	r7, r0, #1
 800188e:	f04f 0800 	mov.w	r8, #0
 8001892:	f04f 093f 	mov.w	r9, #63	; 0x3f
 8001896:	7833      	ldrb	r3, [r6, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f43f ae70 	beq.w	800157e <d_encoding+0x8e>
 800189e:	2b24      	cmp	r3, #36	; 0x24
 80018a0:	f000 8124 	beq.w	8001aec <d_encoding+0x5fc>
 80018a4:	2400      	movs	r4, #0
 80018a6:	5d33      	ldrb	r3, [r6, r4]
 80018a8:	b123      	cbz	r3, 80018b4 <d_encoding+0x3c4>
 80018aa:	2b24      	cmp	r3, #36	; 0x24
 80018ac:	d002      	beq.n	80018b4 <d_encoding+0x3c4>
 80018ae:	3401      	adds	r4, #1
 80018b0:	42bc      	cmp	r4, r7
 80018b2:	dbf8      	blt.n	80018a6 <d_encoding+0x3b6>
 80018b4:	4631      	mov	r1, r6
 80018b6:	4628      	mov	r0, r5
 80018b8:	4622      	mov	r2, r4
 80018ba:	f7fe fcd1 	bl	8000260 <d_make_name>
 80018be:	68ee      	ldr	r6, [r5, #12]
 80018c0:	4426      	add	r6, r4
 80018c2:	1b3f      	subs	r7, r7, r4
 80018c4:	60ee      	str	r6, [r5, #12]
 80018c6:	2800      	cmp	r0, #0
 80018c8:	f43f ae59 	beq.w	800157e <d_encoding+0x8e>
 80018cc:	f1b8 0f00 	cmp.w	r8, #0
 80018d0:	f000 8129 	beq.w	8001b26 <d_encoding+0x636>
 80018d4:	4642      	mov	r2, r8
 80018d6:	4603      	mov	r3, r0
 80018d8:	213e      	movs	r1, #62	; 0x3e
 80018da:	4628      	mov	r0, r5
 80018dc:	f7fe fc74 	bl	80001c8 <d_make_comp>
 80018e0:	4680      	mov	r8, r0
 80018e2:	2800      	cmp	r0, #0
 80018e4:	f43f ae4b 	beq.w	800157e <d_encoding+0x8e>
 80018e8:	2f00      	cmp	r7, #0
 80018ea:	dcd4      	bgt.n	8001896 <d_encoding+0x3a6>
 80018ec:	4628      	mov	r0, r5
 80018ee:	4642      	mov	r2, r8
 80018f0:	213d      	movs	r1, #61	; 0x3d
 80018f2:	2300      	movs	r3, #0
 80018f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018f8:	f7fe bc66 	b.w	80001c8 <d_make_comp>
 80018fc:	4628      	mov	r0, r5
 80018fe:	f7ff f8b1 	bl	8000a64 <d_name>
 8001902:	2113      	movs	r1, #19
 8001904:	4602      	mov	r2, r0
 8001906:	2300      	movs	r3, #0
 8001908:	4628      	mov	r0, r5
 800190a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800190e:	f7fe bc5b 	b.w	80001c8 <d_make_comp>
 8001912:	4628      	mov	r0, r5
 8001914:	f7ff f8a6 	bl	8000a64 <d_name>
 8001918:	4604      	mov	r4, r0
 800191a:	4628      	mov	r0, r5
 800191c:	f7fe fe68 	bl	80005f0 <d_number_component>
 8001920:	4622      	mov	r2, r4
 8001922:	4603      	mov	r3, r0
 8001924:	2116      	movs	r1, #22
 8001926:	4628      	mov	r0, r5
 8001928:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800192c:	f7fe bc4c 	b.w	80001c8 <d_make_comp>
 8001930:	4628      	mov	r0, r5
 8001932:	2100      	movs	r1, #0
 8001934:	f7ff fddc 	bl	80014f0 <d_encoding>
 8001938:	2117      	movs	r1, #23
 800193a:	4602      	mov	r2, r0
 800193c:	2300      	movs	r3, #0
 800193e:	4628      	mov	r0, r5
 8001940:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001944:	f7fe bc40 	b.w	80001c8 <d_make_comp>
 8001948:	789a      	ldrb	r2, [r3, #2]
 800194a:	4628      	mov	r0, r5
 800194c:	2100      	movs	r1, #0
 800194e:	2a00      	cmp	r2, #0
 8001950:	f000 80eb 	beq.w	8001b2a <d_encoding+0x63a>
 8001954:	1cda      	adds	r2, r3, #3
 8001956:	60ea      	str	r2, [r5, #12]
 8001958:	789b      	ldrb	r3, [r3, #2]
 800195a:	2b6e      	cmp	r3, #110	; 0x6e
 800195c:	f040 80e5 	bne.w	8001b2a <d_encoding+0x63a>
 8001960:	f7ff fdc6 	bl	80014f0 <d_encoding>
 8001964:	2148      	movs	r1, #72	; 0x48
 8001966:	4602      	mov	r2, r0
 8001968:	2300      	movs	r3, #0
 800196a:	4628      	mov	r0, r5
 800196c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001970:	f7fe bc2a 	b.w	80001c8 <d_make_comp>
 8001974:	4628      	mov	r0, r5
 8001976:	2176      	movs	r1, #118	; 0x76
 8001978:	f7fe fee2 	bl	8000740 <d_call_offset>
 800197c:	2800      	cmp	r0, #0
 800197e:	f43f adfe 	beq.w	800157e <d_encoding+0x8e>
 8001982:	4628      	mov	r0, r5
 8001984:	2100      	movs	r1, #0
 8001986:	f7ff fdb3 	bl	80014f0 <d_encoding>
 800198a:	2110      	movs	r1, #16
 800198c:	4602      	mov	r2, r0
 800198e:	2300      	movs	r3, #0
 8001990:	4628      	mov	r0, r5
 8001992:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001996:	f7fe bc17 	b.w	80001c8 <d_make_comp>
 800199a:	4628      	mov	r0, r5
 800199c:	2100      	movs	r1, #0
 800199e:	f7fe fecf 	bl	8000740 <d_call_offset>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	f43f adeb 	beq.w	800157e <d_encoding+0x8e>
 80019a8:	4628      	mov	r0, r5
 80019aa:	2100      	movs	r1, #0
 80019ac:	f7fe fec8 	bl	8000740 <d_call_offset>
 80019b0:	2800      	cmp	r0, #0
 80019b2:	f43f ade4 	beq.w	800157e <d_encoding+0x8e>
 80019b6:	4628      	mov	r0, r5
 80019b8:	2100      	movs	r1, #0
 80019ba:	f7ff fd99 	bl	80014f0 <d_encoding>
 80019be:	2111      	movs	r1, #17
 80019c0:	4602      	mov	r2, r0
 80019c2:	2300      	movs	r3, #0
 80019c4:	4628      	mov	r0, r5
 80019c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019ca:	f7fe bbfd 	b.w	80001c8 <d_make_comp>
 80019ce:	4628      	mov	r0, r5
 80019d0:	f7ff f848 	bl	8000a64 <d_name>
 80019d4:	2115      	movs	r1, #21
 80019d6:	4602      	mov	r2, r0
 80019d8:	2300      	movs	r3, #0
 80019da:	4628      	mov	r0, r5
 80019dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019e0:	f7fe bbf2 	b.w	80001c8 <d_make_comp>
 80019e4:	4628      	mov	r0, r5
 80019e6:	2168      	movs	r1, #104	; 0x68
 80019e8:	f7fe feaa 	bl	8000740 <d_call_offset>
 80019ec:	2800      	cmp	r0, #0
 80019ee:	f43f adc6 	beq.w	800157e <d_encoding+0x8e>
 80019f2:	4628      	mov	r0, r5
 80019f4:	2100      	movs	r1, #0
 80019f6:	f7ff fd7b 	bl	80014f0 <d_encoding>
 80019fa:	210f      	movs	r1, #15
 80019fc:	4602      	mov	r2, r0
 80019fe:	2300      	movs	r3, #0
 8001a00:	4628      	mov	r0, r5
 8001a02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a06:	f7fe bbdf 	b.w	80001c8 <d_make_comp>
 8001a0a:	310f      	adds	r1, #15
 8001a0c:	6329      	str	r1, [r5, #48]	; 0x30
 8001a0e:	4628      	mov	r0, r5
 8001a10:	f7ff f988 	bl	8000d24 <d_type>
 8001a14:	2109      	movs	r1, #9
 8001a16:	4602      	mov	r2, r0
 8001a18:	2300      	movs	r3, #0
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a20:	f7fe bbd2 	b.w	80001c8 <d_make_comp>
 8001a24:	310a      	adds	r1, #10
 8001a26:	6329      	str	r1, [r5, #48]	; 0x30
 8001a28:	4628      	mov	r0, r5
 8001a2a:	f7ff f97b 	bl	8000d24 <d_type>
 8001a2e:	210a      	movs	r1, #10
 8001a30:	4602      	mov	r2, r0
 8001a32:	2300      	movs	r3, #0
 8001a34:	4628      	mov	r0, r5
 8001a36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a3a:	f7fe bbc5 	b.w	80001c8 <d_make_comp>
 8001a3e:	4628      	mov	r0, r5
 8001a40:	f7ff f970 	bl	8000d24 <d_type>
 8001a44:	210d      	movs	r1, #13
 8001a46:	4602      	mov	r2, r0
 8001a48:	2300      	movs	r3, #0
 8001a4a:	4628      	mov	r0, r5
 8001a4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a50:	f7fe bbba 	b.w	80001c8 <d_make_comp>
 8001a54:	4628      	mov	r0, r5
 8001a56:	f7ff f965 	bl	8000d24 <d_type>
 8001a5a:	2112      	movs	r1, #18
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	2300      	movs	r3, #0
 8001a60:	4628      	mov	r0, r5
 8001a62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a66:	f7fe bbaf 	b.w	80001c8 <d_make_comp>
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f7ff f95a 	bl	8000d24 <d_type>
 8001a70:	210c      	movs	r1, #12
 8001a72:	4602      	mov	r2, r0
 8001a74:	2300      	movs	r3, #0
 8001a76:	4628      	mov	r0, r5
 8001a78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a7c:	f7fe bba4 	b.w	80001c8 <d_make_comp>
 8001a80:	4628      	mov	r0, r5
 8001a82:	f7fe ffef 	bl	8000a64 <d_name>
 8001a86:	2114      	movs	r1, #20
 8001a88:	4602      	mov	r2, r0
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a92:	f7fe bb99 	b.w	80001c8 <d_make_comp>
 8001a96:	4628      	mov	r0, r5
 8001a98:	f7ff f944 	bl	8000d24 <d_type>
 8001a9c:	210e      	movs	r1, #14
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001aa8:	f7fe bb8e 	b.w	80001c8 <d_make_comp>
 8001aac:	4628      	mov	r0, r5
 8001aae:	f7ff f939 	bl	8000d24 <d_type>
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	f105 000c 	add.w	r0, r5, #12
 8001ab8:	f7fe fd74 	bl	80005a4 <d_number.isra.0>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	f6ff ad5e 	blt.w	800157e <d_encoding+0x8e>
 8001ac2:	68ea      	ldr	r2, [r5, #12]
 8001ac4:	7811      	ldrb	r1, [r2, #0]
 8001ac6:	295f      	cmp	r1, #95	; 0x5f
 8001ac8:	f47f ad59 	bne.w	800157e <d_encoding+0x8e>
 8001acc:	3201      	adds	r2, #1
 8001ace:	60ea      	str	r2, [r5, #12]
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	f7ff f927 	bl	8000d24 <d_type>
 8001ad6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001ad8:	1d59      	adds	r1, r3, #5
 8001ada:	6329      	str	r1, [r5, #48]	; 0x30
 8001adc:	4602      	mov	r2, r0
 8001ade:	4623      	mov	r3, r4
 8001ae0:	4628      	mov	r0, r5
 8001ae2:	210b      	movs	r1, #11
 8001ae4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ae8:	f7fe bb6e 	b.w	80001c8 <d_make_comp>
 8001aec:	7873      	ldrb	r3, [r6, #1]
 8001aee:	2b53      	cmp	r3, #83	; 0x53
 8001af0:	d027      	beq.n	8001b42 <d_encoding+0x652>
 8001af2:	2b5f      	cmp	r3, #95	; 0x5f
 8001af4:	d023      	beq.n	8001b3e <d_encoding+0x64e>
 8001af6:	2b24      	cmp	r3, #36	; 0x24
 8001af8:	f47f ad41 	bne.w	800157e <d_encoding+0x8e>
 8001afc:	461c      	mov	r4, r3
 8001afe:	696b      	ldr	r3, [r5, #20]
 8001b00:	69aa      	ldr	r2, [r5, #24]
 8001b02:	4293      	cmp	r3, r2
 8001b04:	da1f      	bge.n	8001b46 <d_encoding+0x656>
 8001b06:	692a      	ldr	r2, [r5, #16]
 8001b08:	1c58      	adds	r0, r3, #1
 8001b0a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001b0e:	6168      	str	r0, [r5, #20]
 8001b10:	eb12 0081 	adds.w	r0, r2, r1, lsl #2
 8001b14:	d017      	beq.n	8001b46 <d_encoding+0x656>
 8001b16:	f802 9021 	strb.w	r9, [r2, r1, lsl #2]
 8001b1a:	6044      	str	r4, [r0, #4]
 8001b1c:	68ee      	ldr	r6, [r5, #12]
 8001b1e:	3602      	adds	r6, #2
 8001b20:	3f02      	subs	r7, #2
 8001b22:	60ee      	str	r6, [r5, #12]
 8001b24:	e6d2      	b.n	80018cc <d_encoding+0x3dc>
 8001b26:	4680      	mov	r8, r0
 8001b28:	e6de      	b.n	80018e8 <d_encoding+0x3f8>
 8001b2a:	f7ff fce1 	bl	80014f0 <d_encoding>
 8001b2e:	2147      	movs	r1, #71	; 0x47
 8001b30:	4602      	mov	r2, r0
 8001b32:	2300      	movs	r3, #0
 8001b34:	4628      	mov	r0, r5
 8001b36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b3a:	f7fe bb45 	b.w	80001c8 <d_make_comp>
 8001b3e:	242e      	movs	r4, #46	; 0x2e
 8001b40:	e7dd      	b.n	8001afe <d_encoding+0x60e>
 8001b42:	242f      	movs	r4, #47	; 0x2f
 8001b44:	e7db      	b.n	8001afe <d_encoding+0x60e>
 8001b46:	68eb      	ldr	r3, [r5, #12]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	60eb      	str	r3, [r5, #12]
 8001b4c:	e517      	b.n	800157e <d_encoding+0x8e>
 8001b4e:	bf00      	nop

08001b50 <d_operator_name>:
 8001b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b54:	68c3      	ldr	r3, [r0, #12]
 8001b56:	781f      	ldrb	r7, [r3, #0]
 8001b58:	4680      	mov	r8, r0
 8001b5a:	b35f      	cbz	r7, 8001bb4 <d_operator_name+0x64>
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	60c2      	str	r2, [r0, #12]
 8001b60:	7858      	ldrb	r0, [r3, #1]
 8001b62:	781f      	ldrb	r7, [r3, #0]
 8001b64:	b118      	cbz	r0, 8001b6e <d_operator_name+0x1e>
 8001b66:	1c9a      	adds	r2, r3, #2
 8001b68:	f8c8 200c 	str.w	r2, [r8, #12]
 8001b6c:	7858      	ldrb	r0, [r3, #1]
 8001b6e:	2f76      	cmp	r7, #118	; 0x76
 8001b70:	d141      	bne.n	8001bf6 <d_operator_name+0xa6>
 8001b72:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
 8001b76:	b2e3      	uxtb	r3, r4
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	d81c      	bhi.n	8001bb6 <d_operator_name+0x66>
 8001b7c:	4640      	mov	r0, r8
 8001b7e:	f7fe fd9d 	bl	80006bc <d_source_name>
 8001b82:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001b86:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	4601      	mov	r1, r0
 8001b8e:	da2f      	bge.n	8001bf0 <d_operator_name+0xa0>
 8001b90:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001b94:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	0092      	lsls	r2, r2, #2
 8001b9c:	f8c8 3014 	str.w	r3, [r8, #20]
 8001ba0:	1883      	adds	r3, r0, r2
 8001ba2:	d025      	beq.n	8001bf0 <d_operator_name+0xa0>
 8001ba4:	b321      	cbz	r1, 8001bf0 <d_operator_name+0xa0>
 8001ba6:	2532      	movs	r5, #50	; 0x32
 8001ba8:	5485      	strb	r5, [r0, r2]
 8001baa:	605c      	str	r4, [r3, #4]
 8001bac:	6099      	str	r1, [r3, #8]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bb4:	4638      	mov	r0, r7
 8001bb6:	4e24      	ldr	r6, [pc, #144]	; (8001c48 <d_operator_name+0xf8>)
 8001bb8:	243d      	movs	r4, #61	; 0x3d
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e004      	b.n	8001bc8 <d_operator_name+0x78>
 8001bbe:	42ba      	cmp	r2, r7
 8001bc0:	d913      	bls.n	8001bea <d_operator_name+0x9a>
 8001bc2:	460c      	mov	r4, r1
 8001bc4:	42a3      	cmp	r3, r4
 8001bc6:	d013      	beq.n	8001bf0 <d_operator_name+0xa0>
 8001bc8:	1ae2      	subs	r2, r4, r3
 8001bca:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8001bce:	eb03 0162 	add.w	r1, r3, r2, asr #1
 8001bd2:	010a      	lsls	r2, r1, #4
 8001bd4:	eb06 0c02 	add.w	ip, r6, r2
 8001bd8:	58b5      	ldr	r5, [r6, r2]
 8001bda:	782a      	ldrb	r2, [r5, #0]
 8001bdc:	4297      	cmp	r7, r2
 8001bde:	d1ee      	bne.n	8001bbe <d_operator_name+0x6e>
 8001be0:	786a      	ldrb	r2, [r5, #1]
 8001be2:	4290      	cmp	r0, r2
 8001be4:	d016      	beq.n	8001c14 <d_operator_name+0xc4>
 8001be6:	4282      	cmp	r2, r0
 8001be8:	d8eb      	bhi.n	8001bc2 <d_operator_name+0x72>
 8001bea:	1c4b      	adds	r3, r1, #1
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	d1eb      	bne.n	8001bc8 <d_operator_name+0x78>
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bf6:	2f63      	cmp	r7, #99	; 0x63
 8001bf8:	d1dd      	bne.n	8001bb6 <d_operator_name+0x66>
 8001bfa:	2876      	cmp	r0, #118	; 0x76
 8001bfc:	d1db      	bne.n	8001bb6 <d_operator_name+0x66>
 8001bfe:	4640      	mov	r0, r8
 8001c00:	f7ff f890 	bl	8000d24 <d_type>
 8001c04:	2133      	movs	r1, #51	; 0x33
 8001c06:	4602      	mov	r2, r0
 8001c08:	2300      	movs	r3, #0
 8001c0a:	4640      	mov	r0, r8
 8001c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c10:	f7fe bada 	b.w	80001c8 <d_make_comp>
 8001c14:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001c18:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	dae7      	bge.n	8001bf0 <d_operator_name+0xa0>
 8001c20:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001c24:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	f8c8 3014 	str.w	r3, [r8, #20]
 8001c30:	188b      	adds	r3, r1, r2
 8001c32:	d006      	beq.n	8001c42 <d_operator_name+0xf2>
 8001c34:	2031      	movs	r0, #49	; 0x31
 8001c36:	5488      	strb	r0, [r1, r2]
 8001c38:	f8c3 c004 	str.w	ip, [r3, #4]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c42:	4618      	mov	r0, r3
 8001c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c48:	0800e43c 	.word	0x0800e43c

08001c4c <d_unqualified_name>:
 8001c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4e:	68c2      	ldr	r2, [r0, #12]
 8001c50:	7813      	ldrb	r3, [r2, #0]
 8001c52:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001c56:	2909      	cmp	r1, #9
 8001c58:	4604      	mov	r4, r0
 8001c5a:	d92e      	bls.n	8001cba <d_unqualified_name+0x6e>
 8001c5c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8001c60:	2919      	cmp	r1, #25
 8001c62:	d933      	bls.n	8001ccc <d_unqualified_name+0x80>
 8001c64:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
 8001c68:	2901      	cmp	r1, #1
 8001c6a:	d971      	bls.n	8001d50 <d_unqualified_name+0x104>
 8001c6c:	2b4c      	cmp	r3, #76	; 0x4c
 8001c6e:	f000 8087 	beq.w	8001d80 <d_unqualified_name+0x134>
 8001c72:	2b55      	cmp	r3, #85	; 0x55
 8001c74:	f040 808f 	bne.w	8001d96 <d_unqualified_name+0x14a>
 8001c78:	7853      	ldrb	r3, [r2, #1]
 8001c7a:	2b6c      	cmp	r3, #108	; 0x6c
 8001c7c:	d030      	beq.n	8001ce0 <d_unqualified_name+0x94>
 8001c7e:	2b74      	cmp	r3, #116	; 0x74
 8001c80:	f040 8089 	bne.w	8001d96 <d_unqualified_name+0x14a>
 8001c84:	1c53      	adds	r3, r2, #1
 8001c86:	60c3      	str	r3, [r0, #12]
 8001c88:	7851      	ldrb	r1, [r2, #1]
 8001c8a:	2974      	cmp	r1, #116	; 0x74
 8001c8c:	f000 80c3 	beq.w	8001e16 <d_unqualified_name+0x1ca>
 8001c90:	2942      	cmp	r1, #66	; 0x42
 8001c92:	f04f 0500 	mov.w	r5, #0
 8001c96:	d117      	bne.n	8001cc8 <d_unqualified_name+0x7c>
 8001c98:	3301      	adds	r3, #1
 8001c9a:	60e3      	str	r3, [r4, #12]
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7fe fd0d 	bl	80006bc <d_source_name>
 8001ca2:	462a      	mov	r2, r5
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	214a      	movs	r1, #74	; 0x4a
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f7fe fa8d 	bl	80001c8 <d_make_comp>
 8001cae:	68e3      	ldr	r3, [r4, #12]
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	2a42      	cmp	r2, #66	; 0x42
 8001cb4:	4605      	mov	r5, r0
 8001cb6:	d0ef      	beq.n	8001c98 <d_unqualified_name+0x4c>
 8001cb8:	e006      	b.n	8001cc8 <d_unqualified_name+0x7c>
 8001cba:	f7fe fcff 	bl	80006bc <d_source_name>
 8001cbe:	68e3      	ldr	r3, [r4, #12]
 8001cc0:	7819      	ldrb	r1, [r3, #0]
 8001cc2:	4605      	mov	r5, r0
 8001cc4:	2942      	cmp	r1, #66	; 0x42
 8001cc6:	d0e7      	beq.n	8001c98 <d_unqualified_name+0x4c>
 8001cc8:	4628      	mov	r0, r5
 8001cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ccc:	f7ff ff40 	bl	8001b50 <d_operator_name>
 8001cd0:	4605      	mov	r5, r0
 8001cd2:	b110      	cbz	r0, 8001cda <d_unqualified_name+0x8e>
 8001cd4:	7803      	ldrb	r3, [r0, #0]
 8001cd6:	2b31      	cmp	r3, #49	; 0x31
 8001cd8:	d05f      	beq.n	8001d9a <d_unqualified_name+0x14e>
 8001cda:	68e3      	ldr	r3, [r4, #12]
 8001cdc:	7819      	ldrb	r1, [r3, #0]
 8001cde:	e7f1      	b.n	8001cc4 <d_unqualified_name+0x78>
 8001ce0:	1c53      	adds	r3, r2, #1
 8001ce2:	60c3      	str	r3, [r0, #12]
 8001ce4:	7851      	ldrb	r1, [r2, #1]
 8001ce6:	296c      	cmp	r1, #108	; 0x6c
 8001ce8:	d1d2      	bne.n	8001c90 <d_unqualified_name+0x44>
 8001cea:	3202      	adds	r2, #2
 8001cec:	60c2      	str	r2, [r0, #12]
 8001cee:	f7ff fb9d 	bl	800142c <d_parmlist>
 8001cf2:	68e3      	ldr	r3, [r4, #12]
 8001cf4:	4606      	mov	r6, r0
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	f000 80e1 	beq.w	8001ebe <d_unqualified_name+0x272>
 8001cfc:	7819      	ldrb	r1, [r3, #0]
 8001cfe:	2945      	cmp	r1, #69	; 0x45
 8001d00:	d1c6      	bne.n	8001c90 <d_unqualified_name+0x44>
 8001d02:	3301      	adds	r3, #1
 8001d04:	60e3      	str	r3, [r4, #12]
 8001d06:	4620      	mov	r0, r4
 8001d08:	f7fe fc8e 	bl	8000628 <d_compact_number>
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	f2c0 809c 	blt.w	8001e4a <d_unqualified_name+0x1fe>
 8001d12:	6963      	ldr	r3, [r4, #20]
 8001d14:	69a2      	ldr	r2, [r4, #24]
 8001d16:	4293      	cmp	r3, r2
 8001d18:	f280 8097 	bge.w	8001e4a <d_unqualified_name+0x1fe>
 8001d1c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001d20:	6921      	ldr	r1, [r4, #16]
 8001d22:	0092      	lsls	r2, r2, #2
 8001d24:	3301      	adds	r3, #1
 8001d26:	188d      	adds	r5, r1, r2
 8001d28:	6163      	str	r3, [r4, #20]
 8001d2a:	f000 808e 	beq.w	8001e4a <d_unqualified_name+0x1fe>
 8001d2e:	2344      	movs	r3, #68	; 0x44
 8001d30:	548b      	strb	r3, [r1, r2]
 8001d32:	606e      	str	r6, [r5, #4]
 8001d34:	60a8      	str	r0, [r5, #8]
 8001d36:	6a23      	ldr	r3, [r4, #32]
 8001d38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	f280 8085 	bge.w	8001e4a <d_unqualified_name+0x1fe>
 8001d40:	69e2      	ldr	r2, [r4, #28]
 8001d42:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	68e3      	ldr	r3, [r4, #12]
 8001d4a:	6222      	str	r2, [r4, #32]
 8001d4c:	7819      	ldrb	r1, [r3, #0]
 8001d4e:	e7b9      	b.n	8001cc4 <d_unqualified_name+0x78>
 8001d50:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d03c      	beq.n	8001dd0 <d_unqualified_name+0x184>
 8001d56:	7801      	ldrb	r1, [r0, #0]
 8001d58:	2900      	cmp	r1, #0
 8001d5a:	d137      	bne.n	8001dcc <d_unqualified_name+0x180>
 8001d5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001d5e:	6883      	ldr	r3, [r0, #8]
 8001d60:	440b      	add	r3, r1
 8001d62:	6323      	str	r3, [r4, #48]	; 0x30
 8001d64:	7811      	ldrb	r1, [r2, #0]
 8001d66:	2943      	cmp	r1, #67	; 0x43
 8001d68:	d078      	beq.n	8001e5c <d_unqualified_name+0x210>
 8001d6a:	2944      	cmp	r1, #68	; 0x44
 8001d6c:	d173      	bne.n	8001e56 <d_unqualified_name+0x20a>
 8001d6e:	7853      	ldrb	r3, [r2, #1]
 8001d70:	3b30      	subs	r3, #48	; 0x30
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d84d      	bhi.n	8001e12 <d_unqualified_name+0x1c6>
 8001d76:	e8df f003 	tbb	[pc, r3]
 8001d7a:	2d48      	.short	0x2d48
 8001d7c:	4a4c4c46 	.word	0x4a4c4c46
 8001d80:	3201      	adds	r2, #1
 8001d82:	60c2      	str	r2, [r0, #12]
 8001d84:	f7fe fc9a 	bl	80006bc <d_source_name>
 8001d88:	4605      	mov	r5, r0
 8001d8a:	b120      	cbz	r0, 8001d96 <d_unqualified_name+0x14a>
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7fe fc85 	bl	800069c <d_discriminator>
 8001d92:	2800      	cmp	r0, #0
 8001d94:	d1a1      	bne.n	8001cda <d_unqualified_name+0x8e>
 8001d96:	2000      	movs	r0, #0
 8001d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d9a:	6843      	ldr	r3, [r0, #4]
 8001d9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d9e:	689e      	ldr	r6, [r3, #8]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	4948      	ldr	r1, [pc, #288]	; (8001ec4 <d_unqualified_name+0x278>)
 8001da4:	4432      	add	r2, r6
 8001da6:	3207      	adds	r2, #7
 8001da8:	6322      	str	r2, [r4, #48]	; 0x30
 8001daa:	f003 fdcf 	bl	800594c <strcmp>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d193      	bne.n	8001cda <d_unqualified_name+0x8e>
 8001db2:	4620      	mov	r0, r4
 8001db4:	f7fe fc82 	bl	80006bc <d_source_name>
 8001db8:	462a      	mov	r2, r5
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2135      	movs	r1, #53	; 0x35
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f7fe fa02 	bl	80001c8 <d_make_comp>
 8001dc4:	68e3      	ldr	r3, [r4, #12]
 8001dc6:	4605      	mov	r5, r0
 8001dc8:	7819      	ldrb	r1, [r3, #0]
 8001dca:	e77b      	b.n	8001cc4 <d_unqualified_name+0x78>
 8001dcc:	2918      	cmp	r1, #24
 8001dce:	d0c5      	beq.n	8001d5c <d_unqualified_name+0x110>
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	e7c8      	b.n	8001d66 <d_unqualified_name+0x11a>
 8001dd4:	2702      	movs	r7, #2
 8001dd6:	6961      	ldr	r1, [r4, #20]
 8001dd8:	69a5      	ldr	r5, [r4, #24]
 8001dda:	1c93      	adds	r3, r2, #2
 8001ddc:	42a9      	cmp	r1, r5
 8001dde:	60e3      	str	r3, [r4, #12]
 8001de0:	da37      	bge.n	8001e52 <d_unqualified_name+0x206>
 8001de2:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 8001de6:	6926      	ldr	r6, [r4, #16]
 8001de8:	3101      	adds	r1, #1
 8001dea:	00ad      	lsls	r5, r5, #2
 8001dec:	6161      	str	r1, [r4, #20]
 8001dee:	1971      	adds	r1, r6, r5
 8001df0:	d02f      	beq.n	8001e52 <d_unqualified_name+0x206>
 8001df2:	b370      	cbz	r0, 8001e52 <d_unqualified_name+0x206>
 8001df4:	f04f 0c08 	mov.w	ip, #8
 8001df8:	f806 c005 	strb.w	ip, [r6, r5]
 8001dfc:	460d      	mov	r5, r1
 8001dfe:	710f      	strb	r7, [r1, #4]
 8001e00:	6088      	str	r0, [r1, #8]
 8001e02:	7891      	ldrb	r1, [r2, #2]
 8001e04:	e75e      	b.n	8001cc4 <d_unqualified_name+0x78>
 8001e06:	2703      	movs	r7, #3
 8001e08:	e7e5      	b.n	8001dd6 <d_unqualified_name+0x18a>
 8001e0a:	2701      	movs	r7, #1
 8001e0c:	e7e3      	b.n	8001dd6 <d_unqualified_name+0x18a>
 8001e0e:	2704      	movs	r7, #4
 8001e10:	e7e1      	b.n	8001dd6 <d_unqualified_name+0x18a>
 8001e12:	2500      	movs	r5, #0
 8001e14:	e758      	b.n	8001cc8 <d_unqualified_name+0x7c>
 8001e16:	3202      	adds	r2, #2
 8001e18:	60c2      	str	r2, [r0, #12]
 8001e1a:	f7fe fc05 	bl	8000628 <d_compact_number>
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	db13      	blt.n	8001e4a <d_unqualified_name+0x1fe>
 8001e22:	6963      	ldr	r3, [r4, #20]
 8001e24:	69a2      	ldr	r2, [r4, #24]
 8001e26:	4293      	cmp	r3, r2
 8001e28:	da0f      	bge.n	8001e4a <d_unqualified_name+0x1fe>
 8001e2a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001e2e:	6921      	ldr	r1, [r4, #16]
 8001e30:	0092      	lsls	r2, r2, #2
 8001e32:	3301      	adds	r3, #1
 8001e34:	188d      	adds	r5, r1, r2
 8001e36:	6163      	str	r3, [r4, #20]
 8001e38:	d007      	beq.n	8001e4a <d_unqualified_name+0x1fe>
 8001e3a:	2346      	movs	r3, #70	; 0x46
 8001e3c:	548b      	strb	r3, [r1, r2]
 8001e3e:	6068      	str	r0, [r5, #4]
 8001e40:	6a23      	ldr	r3, [r4, #32]
 8001e42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e44:	4293      	cmp	r3, r2
 8001e46:	f6ff af7b 	blt.w	8001d40 <d_unqualified_name+0xf4>
 8001e4a:	68e3      	ldr	r3, [r4, #12]
 8001e4c:	2500      	movs	r5, #0
 8001e4e:	7819      	ldrb	r1, [r3, #0]
 8001e50:	e738      	b.n	8001cc4 <d_unqualified_name+0x78>
 8001e52:	2500      	movs	r5, #0
 8001e54:	e7d5      	b.n	8001e02 <d_unqualified_name+0x1b6>
 8001e56:	4613      	mov	r3, r2
 8001e58:	2500      	movs	r5, #0
 8001e5a:	e733      	b.n	8001cc4 <d_unqualified_name+0x78>
 8001e5c:	7853      	ldrb	r3, [r2, #1]
 8001e5e:	3b31      	subs	r3, #49	; 0x31
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d8d6      	bhi.n	8001e12 <d_unqualified_name+0x1c6>
 8001e64:	a101      	add	r1, pc, #4	; (adr r1, 8001e6c <d_unqualified_name+0x220>)
 8001e66:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e6a:	bf00      	nop
 8001e6c:	08001eb3 	.word	0x08001eb3
 8001e70:	08001e81 	.word	0x08001e81
 8001e74:	08001ebb 	.word	0x08001ebb
 8001e78:	08001e13 	.word	0x08001e13
 8001e7c:	08001eb7 	.word	0x08001eb7
 8001e80:	2702      	movs	r7, #2
 8001e82:	6961      	ldr	r1, [r4, #20]
 8001e84:	69a5      	ldr	r5, [r4, #24]
 8001e86:	1c93      	adds	r3, r2, #2
 8001e88:	42a9      	cmp	r1, r5
 8001e8a:	60e3      	str	r3, [r4, #12]
 8001e8c:	dae1      	bge.n	8001e52 <d_unqualified_name+0x206>
 8001e8e:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 8001e92:	6926      	ldr	r6, [r4, #16]
 8001e94:	3101      	adds	r1, #1
 8001e96:	00ad      	lsls	r5, r5, #2
 8001e98:	6161      	str	r1, [r4, #20]
 8001e9a:	1971      	adds	r1, r6, r5
 8001e9c:	d0d9      	beq.n	8001e52 <d_unqualified_name+0x206>
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d0d7      	beq.n	8001e52 <d_unqualified_name+0x206>
 8001ea2:	f04f 0c07 	mov.w	ip, #7
 8001ea6:	f806 c005 	strb.w	ip, [r6, r5]
 8001eaa:	460d      	mov	r5, r1
 8001eac:	710f      	strb	r7, [r1, #4]
 8001eae:	6088      	str	r0, [r1, #8]
 8001eb0:	e7a7      	b.n	8001e02 <d_unqualified_name+0x1b6>
 8001eb2:	2701      	movs	r7, #1
 8001eb4:	e7e5      	b.n	8001e82 <d_unqualified_name+0x236>
 8001eb6:	2704      	movs	r7, #4
 8001eb8:	e7e3      	b.n	8001e82 <d_unqualified_name+0x236>
 8001eba:	2703      	movs	r7, #3
 8001ebc:	e7e1      	b.n	8001e82 <d_unqualified_name+0x236>
 8001ebe:	4605      	mov	r5, r0
 8001ec0:	7819      	ldrb	r1, [r3, #0]
 8001ec2:	e6ff      	b.n	8001cc4 <d_unqualified_name+0x78>
 8001ec4:	0800eb38 	.word	0x0800eb38

08001ec8 <d_expression>:
 8001ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ecc:	68c1      	ldr	r1, [r0, #12]
 8001ece:	780b      	ldrb	r3, [r1, #0]
 8001ed0:	2b4c      	cmp	r3, #76	; 0x4c
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	f000 809e 	beq.w	8002014 <d_expression+0x14c>
 8001ed8:	2b54      	cmp	r3, #84	; 0x54
 8001eda:	f000 809f 	beq.w	800201c <d_expression+0x154>
 8001ede:	2b73      	cmp	r3, #115	; 0x73
 8001ee0:	d057      	beq.n	8001f92 <d_expression+0xca>
 8001ee2:	2b66      	cmp	r3, #102	; 0x66
 8001ee4:	d02d      	beq.n	8001f42 <d_expression+0x7a>
 8001ee6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001eea:	2a09      	cmp	r2, #9
 8001eec:	d80d      	bhi.n	8001f0a <d_expression+0x42>
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f7ff feac 	bl	8001c4c <d_unqualified_name>
 8001ef4:	4605      	mov	r5, r0
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	f000 8083 	beq.w	8002002 <d_expression+0x13a>
 8001efc:	68e3      	ldr	r3, [r4, #12]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b49      	cmp	r3, #73	; 0x49
 8001f02:	f000 80a3 	beq.w	800204c <d_expression+0x184>
 8001f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f0a:	2b6f      	cmp	r3, #111	; 0x6f
 8001f0c:	d07c      	beq.n	8002008 <d_expression+0x140>
 8001f0e:	2b69      	cmp	r3, #105	; 0x69
 8001f10:	f000 80a7 	beq.w	8002062 <d_expression+0x19a>
 8001f14:	2b74      	cmp	r3, #116	; 0x74
 8001f16:	d117      	bne.n	8001f48 <d_expression+0x80>
 8001f18:	784b      	ldrb	r3, [r1, #1]
 8001f1a:	2b6c      	cmp	r3, #108	; 0x6c
 8001f1c:	d114      	bne.n	8001f48 <d_expression+0x80>
 8001f1e:	f7fe ff01 	bl	8000d24 <d_type>
 8001f22:	68e1      	ldr	r1, [r4, #12]
 8001f24:	4605      	mov	r5, r0
 8001f26:	3102      	adds	r1, #2
 8001f28:	60e1      	str	r1, [r4, #12]
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	2145      	movs	r1, #69	; 0x45
 8001f2e:	f000 f9a9 	bl	8002284 <d_exprlist>
 8001f32:	462a      	mov	r2, r5
 8001f34:	4603      	mov	r3, r0
 8001f36:	2130      	movs	r1, #48	; 0x30
 8001f38:	4620      	mov	r0, r4
 8001f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f3e:	f7fe b943 	b.w	80001c8 <d_make_comp>
 8001f42:	784b      	ldrb	r3, [r1, #1]
 8001f44:	2b70      	cmp	r3, #112	; 0x70
 8001f46:	d040      	beq.n	8001fca <d_expression+0x102>
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f7ff fe01 	bl	8001b50 <d_operator_name>
 8001f4e:	4605      	mov	r5, r0
 8001f50:	2800      	cmp	r0, #0
 8001f52:	d056      	beq.n	8002002 <d_expression+0x13a>
 8001f54:	7806      	ldrb	r6, [r0, #0]
 8001f56:	2e31      	cmp	r6, #49	; 0x31
 8001f58:	d064      	beq.n	8002024 <d_expression+0x15c>
 8001f5a:	2e32      	cmp	r6, #50	; 0x32
 8001f5c:	d02b      	beq.n	8001fb6 <d_expression+0xee>
 8001f5e:	2e33      	cmp	r6, #51	; 0x33
 8001f60:	d14f      	bne.n	8002002 <d_expression+0x13a>
 8001f62:	2700      	movs	r7, #0
 8001f64:	68e3      	ldr	r3, [r4, #12]
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	2a5f      	cmp	r2, #95	; 0x5f
 8001f6a:	f000 810d 	beq.w	8002188 <d_expression+0x2c0>
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f7ff ffaa 	bl	8001ec8 <d_expression>
 8001f74:	4603      	mov	r3, r0
 8001f76:	b12f      	cbz	r7, 8001f84 <d_expression+0xbc>
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	2137      	movs	r1, #55	; 0x37
 8001f7e:	f7fe f923 	bl	80001c8 <d_make_comp>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4620      	mov	r0, r4
 8001f86:	462a      	mov	r2, r5
 8001f88:	2135      	movs	r1, #53	; 0x35
 8001f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f8e:	f7fe b91b 	b.w	80001c8 <d_make_comp>
 8001f92:	784b      	ldrb	r3, [r1, #1]
 8001f94:	2b72      	cmp	r3, #114	; 0x72
 8001f96:	f000 80de 	beq.w	8002156 <d_expression+0x28e>
 8001f9a:	2b70      	cmp	r3, #112	; 0x70
 8001f9c:	d1d4      	bne.n	8001f48 <d_expression+0x80>
 8001f9e:	3102      	adds	r1, #2
 8001fa0:	60c1      	str	r1, [r0, #12]
 8001fa2:	f7ff ff91 	bl	8001ec8 <d_expression>
 8001fa6:	2149      	movs	r1, #73	; 0x49
 8001fa8:	4602      	mov	r2, r0
 8001faa:	2300      	movs	r3, #0
 8001fac:	4620      	mov	r0, r4
 8001fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb2:	f7fe b909 	b.w	80001c8 <d_make_comp>
 8001fb6:	6843      	ldr	r3, [r0, #4]
 8001fb8:	2700      	movs	r7, #0
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d821      	bhi.n	8002002 <d_expression+0x13a>
 8001fbe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001fc2:	0056      	.short	0x0056
 8001fc4:	009a013f 	.word	0x009a013f
 8001fc8:	005e      	.short	0x005e
 8001fca:	1c8b      	adds	r3, r1, #2
 8001fcc:	60c3      	str	r3, [r0, #12]
 8001fce:	788b      	ldrb	r3, [r1, #2]
 8001fd0:	2b54      	cmp	r3, #84	; 0x54
 8001fd2:	f000 80d5 	beq.w	8002180 <d_expression+0x2b8>
 8001fd6:	f7fe fb27 	bl	8000628 <d_compact_number>
 8001fda:	1c45      	adds	r5, r0, #1
 8001fdc:	d011      	beq.n	8002002 <d_expression+0x13a>
 8001fde:	6963      	ldr	r3, [r4, #20]
 8001fe0:	69a2      	ldr	r2, [r4, #24]
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	da0d      	bge.n	8002002 <d_expression+0x13a>
 8001fe6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001fea:	6921      	ldr	r1, [r4, #16]
 8001fec:	3301      	adds	r3, #1
 8001fee:	0092      	lsls	r2, r2, #2
 8001ff0:	6163      	str	r3, [r4, #20]
 8001ff2:	188b      	adds	r3, r1, r2
 8001ff4:	d005      	beq.n	8002002 <d_expression+0x13a>
 8001ff6:	2006      	movs	r0, #6
 8001ff8:	5488      	strb	r0, [r1, r2]
 8001ffa:	605d      	str	r5, [r3, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002002:	2000      	movs	r0, #0
 8002004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002008:	784b      	ldrb	r3, [r1, #1]
 800200a:	2b6e      	cmp	r3, #110	; 0x6e
 800200c:	d19c      	bne.n	8001f48 <d_expression+0x80>
 800200e:	3102      	adds	r1, #2
 8002010:	60c1      	str	r1, [r0, #12]
 8002012:	e76c      	b.n	8001eee <d_expression+0x26>
 8002014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002018:	f7fe bc60 	b.w	80008dc <d_expr_primary>
 800201c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002020:	f7fe bb1a 	b.w	8000658 <d_template_param>
 8002024:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8002028:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800202a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800202e:	f8d8 7000 	ldr.w	r7, [r8]
 8002032:	498f      	ldr	r1, [pc, #572]	; (8002270 <d_expression+0x3a8>)
 8002034:	3a02      	subs	r2, #2
 8002036:	4413      	add	r3, r2
 8002038:	6323      	str	r3, [r4, #48]	; 0x30
 800203a:	4638      	mov	r0, r7
 800203c:	f003 fc86 	bl	800594c <strcmp>
 8002040:	2800      	cmp	r0, #0
 8002042:	f000 80a9 	beq.w	8002198 <d_expression+0x2d0>
 8002046:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800204a:	e7b6      	b.n	8001fba <d_expression+0xf2>
 800204c:	4620      	mov	r0, r4
 800204e:	f7fe fcab 	bl	80009a8 <d_template_args>
 8002052:	462a      	mov	r2, r5
 8002054:	4603      	mov	r3, r0
 8002056:	2104      	movs	r1, #4
 8002058:	4620      	mov	r0, r4
 800205a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800205e:	f7fe b8b3 	b.w	80001c8 <d_make_comp>
 8002062:	784b      	ldrb	r3, [r1, #1]
 8002064:	2b6c      	cmp	r3, #108	; 0x6c
 8002066:	f47f af6f 	bne.w	8001f48 <d_expression+0x80>
 800206a:	2500      	movs	r5, #0
 800206c:	e75b      	b.n	8001f26 <d_expression+0x5e>
 800206e:	4620      	mov	r0, r4
 8002070:	462a      	mov	r2, r5
 8002072:	2134      	movs	r1, #52	; 0x34
 8002074:	2300      	movs	r3, #0
 8002076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800207a:	f7fe b8a5 	b.w	80001c8 <d_make_comp>
 800207e:	4638      	mov	r0, r7
 8002080:	497c      	ldr	r1, [pc, #496]	; (8002274 <d_expression+0x3ac>)
 8002082:	f003 fc63 	bl	800594c <strcmp>
 8002086:	2800      	cmp	r0, #0
 8002088:	f000 808a 	beq.w	80021a0 <d_expression+0x2d8>
 800208c:	783b      	ldrb	r3, [r7, #0]
 800208e:	2b6e      	cmp	r3, #110	; 0x6e
 8002090:	d1b7      	bne.n	8002002 <d_expression+0x13a>
 8002092:	787b      	ldrb	r3, [r7, #1]
 8002094:	2b77      	cmp	r3, #119	; 0x77
 8002096:	d001      	beq.n	800209c <d_expression+0x1d4>
 8002098:	2b61      	cmp	r3, #97	; 0x61
 800209a:	d1b2      	bne.n	8002002 <d_expression+0x13a>
 800209c:	215f      	movs	r1, #95	; 0x5f
 800209e:	4620      	mov	r0, r4
 80020a0:	f000 f8f0 	bl	8002284 <d_exprlist>
 80020a4:	4606      	mov	r6, r0
 80020a6:	4620      	mov	r0, r4
 80020a8:	f7fe fe3c 	bl	8000d24 <d_type>
 80020ac:	68e1      	ldr	r1, [r4, #12]
 80020ae:	780b      	ldrb	r3, [r1, #0]
 80020b0:	2b45      	cmp	r3, #69	; 0x45
 80020b2:	4607      	mov	r7, r0
 80020b4:	f000 80a9 	beq.w	800220a <d_expression+0x342>
 80020b8:	2b70      	cmp	r3, #112	; 0x70
 80020ba:	f000 80b5 	beq.w	8002228 <d_expression+0x360>
 80020be:	2b69      	cmp	r3, #105	; 0x69
 80020c0:	d19f      	bne.n	8002002 <d_expression+0x13a>
 80020c2:	784b      	ldrb	r3, [r1, #1]
 80020c4:	2b6c      	cmp	r3, #108	; 0x6c
 80020c6:	d19c      	bne.n	8002002 <d_expression+0x13a>
 80020c8:	4620      	mov	r0, r4
 80020ca:	f7ff fefd 	bl	8001ec8 <d_expression>
 80020ce:	4603      	mov	r3, r0
 80020d0:	463a      	mov	r2, r7
 80020d2:	4620      	mov	r0, r4
 80020d4:	213a      	movs	r1, #58	; 0x3a
 80020d6:	f7fe f877 	bl	80001c8 <d_make_comp>
 80020da:	4632      	mov	r2, r6
 80020dc:	4603      	mov	r3, r0
 80020de:	2139      	movs	r1, #57	; 0x39
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7fe f871 	bl	80001c8 <d_make_comp>
 80020e6:	462a      	mov	r2, r5
 80020e8:	4603      	mov	r3, r0
 80020ea:	2138      	movs	r1, #56	; 0x38
 80020ec:	4620      	mov	r0, r4
 80020ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020f2:	f7fe b869 	b.w	80001c8 <d_make_comp>
 80020f6:	686b      	ldr	r3, [r5, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	785a      	ldrb	r2, [r3, #1]
 80020fc:	2a63      	cmp	r2, #99	; 0x63
 80020fe:	d062      	beq.n	80021c6 <d_expression+0x2fe>
 8002100:	4620      	mov	r0, r4
 8002102:	f7ff fee1 	bl	8001ec8 <d_expression>
 8002106:	4680      	mov	r8, r0
 8002108:	4638      	mov	r0, r7
 800210a:	495b      	ldr	r1, [pc, #364]	; (8002278 <d_expression+0x3b0>)
 800210c:	f003 fc1e 	bl	800594c <strcmp>
 8002110:	2800      	cmp	r0, #0
 8002112:	d052      	beq.n	80021ba <d_expression+0x2f2>
 8002114:	4638      	mov	r0, r7
 8002116:	4959      	ldr	r1, [pc, #356]	; (800227c <d_expression+0x3b4>)
 8002118:	f003 fc18 	bl	800594c <strcmp>
 800211c:	b128      	cbz	r0, 800212a <d_expression+0x262>
 800211e:	4638      	mov	r0, r7
 8002120:	4957      	ldr	r1, [pc, #348]	; (8002280 <d_expression+0x3b8>)
 8002122:	f003 fc13 	bl	800594c <strcmp>
 8002126:	2800      	cmp	r0, #0
 8002128:	d16a      	bne.n	8002200 <d_expression+0x338>
 800212a:	4620      	mov	r0, r4
 800212c:	f7ff fd8e 	bl	8001c4c <d_unqualified_name>
 8002130:	68e3      	ldr	r3, [r4, #12]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b49      	cmp	r3, #73	; 0x49
 8002136:	4606      	mov	r6, r0
 8002138:	d06b      	beq.n	8002212 <d_expression+0x34a>
 800213a:	4642      	mov	r2, r8
 800213c:	4633      	mov	r3, r6
 800213e:	4620      	mov	r0, r4
 8002140:	2137      	movs	r1, #55	; 0x37
 8002142:	f7fe f841 	bl	80001c8 <d_make_comp>
 8002146:	462a      	mov	r2, r5
 8002148:	4603      	mov	r3, r0
 800214a:	2136      	movs	r1, #54	; 0x36
 800214c:	4620      	mov	r0, r4
 800214e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002152:	f7fe b839 	b.w	80001c8 <d_make_comp>
 8002156:	3102      	adds	r1, #2
 8002158:	60c1      	str	r1, [r0, #12]
 800215a:	f7fe fde3 	bl	8000d24 <d_type>
 800215e:	4605      	mov	r5, r0
 8002160:	4620      	mov	r0, r4
 8002162:	f7ff fd73 	bl	8001c4c <d_unqualified_name>
 8002166:	68e1      	ldr	r1, [r4, #12]
 8002168:	7809      	ldrb	r1, [r1, #0]
 800216a:	2949      	cmp	r1, #73	; 0x49
 800216c:	4606      	mov	r6, r0
 800216e:	4620      	mov	r0, r4
 8002170:	d036      	beq.n	80021e0 <d_expression+0x318>
 8002172:	462a      	mov	r2, r5
 8002174:	4633      	mov	r3, r6
 8002176:	2101      	movs	r1, #1
 8002178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800217c:	f7fe b824 	b.w	80001c8 <d_make_comp>
 8002180:	3103      	adds	r1, #3
 8002182:	60c1      	str	r1, [r0, #12]
 8002184:	2500      	movs	r5, #0
 8002186:	e72a      	b.n	8001fde <d_expression+0x116>
 8002188:	3301      	adds	r3, #1
 800218a:	60e3      	str	r3, [r4, #12]
 800218c:	4620      	mov	r0, r4
 800218e:	2145      	movs	r1, #69	; 0x45
 8002190:	f000 f878 	bl	8002284 <d_exprlist>
 8002194:	4603      	mov	r3, r0
 8002196:	e6ee      	b.n	8001f76 <d_expression+0xae>
 8002198:	4620      	mov	r0, r4
 800219a:	f7fe fdc3 	bl	8000d24 <d_type>
 800219e:	e6f0      	b.n	8001f82 <d_expression+0xba>
 80021a0:	4620      	mov	r0, r4
 80021a2:	f7ff fe91 	bl	8001ec8 <d_expression>
 80021a6:	4606      	mov	r6, r0
 80021a8:	4620      	mov	r0, r4
 80021aa:	f7ff fe8d 	bl	8001ec8 <d_expression>
 80021ae:	4607      	mov	r7, r0
 80021b0:	4620      	mov	r0, r4
 80021b2:	f7ff fe89 	bl	8001ec8 <d_expression>
 80021b6:	4603      	mov	r3, r0
 80021b8:	e78a      	b.n	80020d0 <d_expression+0x208>
 80021ba:	4620      	mov	r0, r4
 80021bc:	2145      	movs	r1, #69	; 0x45
 80021be:	f000 f861 	bl	8002284 <d_exprlist>
 80021c2:	4606      	mov	r6, r0
 80021c4:	e7b9      	b.n	800213a <d_expression+0x272>
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80021cc:	2a01      	cmp	r2, #1
 80021ce:	d902      	bls.n	80021d6 <d_expression+0x30e>
 80021d0:	3b72      	subs	r3, #114	; 0x72
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d894      	bhi.n	8002100 <d_expression+0x238>
 80021d6:	4620      	mov	r0, r4
 80021d8:	f7fe fda4 	bl	8000d24 <d_type>
 80021dc:	4680      	mov	r8, r0
 80021de:	e793      	b.n	8002108 <d_expression+0x240>
 80021e0:	f7fe fbe2 	bl	80009a8 <d_template_args>
 80021e4:	4632      	mov	r2, r6
 80021e6:	4603      	mov	r3, r0
 80021e8:	2104      	movs	r1, #4
 80021ea:	4620      	mov	r0, r4
 80021ec:	f7fd ffec 	bl	80001c8 <d_make_comp>
 80021f0:	462a      	mov	r2, r5
 80021f2:	4603      	mov	r3, r0
 80021f4:	2101      	movs	r1, #1
 80021f6:	4620      	mov	r0, r4
 80021f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021fc:	f7fd bfe4 	b.w	80001c8 <d_make_comp>
 8002200:	4620      	mov	r0, r4
 8002202:	f7ff fe61 	bl	8001ec8 <d_expression>
 8002206:	4606      	mov	r6, r0
 8002208:	e797      	b.n	800213a <d_expression+0x272>
 800220a:	3101      	adds	r1, #1
 800220c:	60e1      	str	r1, [r4, #12]
 800220e:	2300      	movs	r3, #0
 8002210:	e75e      	b.n	80020d0 <d_expression+0x208>
 8002212:	4620      	mov	r0, r4
 8002214:	f7fe fbc8 	bl	80009a8 <d_template_args>
 8002218:	4632      	mov	r2, r6
 800221a:	4603      	mov	r3, r0
 800221c:	2104      	movs	r1, #4
 800221e:	4620      	mov	r0, r4
 8002220:	f7fd ffd2 	bl	80001c8 <d_make_comp>
 8002224:	4606      	mov	r6, r0
 8002226:	e788      	b.n	800213a <d_expression+0x272>
 8002228:	784b      	ldrb	r3, [r1, #1]
 800222a:	2b69      	cmp	r3, #105	; 0x69
 800222c:	f47f aee9 	bne.w	8002002 <d_expression+0x13a>
 8002230:	3102      	adds	r1, #2
 8002232:	60e1      	str	r1, [r4, #12]
 8002234:	4620      	mov	r0, r4
 8002236:	2145      	movs	r1, #69	; 0x45
 8002238:	f000 f824 	bl	8002284 <d_exprlist>
 800223c:	4603      	mov	r3, r0
 800223e:	e747      	b.n	80020d0 <d_expression+0x208>
 8002240:	b12f      	cbz	r7, 800224e <d_expression+0x386>
 8002242:	783b      	ldrb	r3, [r7, #0]
 8002244:	2b70      	cmp	r3, #112	; 0x70
 8002246:	d006      	beq.n	8002256 <d_expression+0x38e>
 8002248:	2b6d      	cmp	r3, #109	; 0x6d
 800224a:	d004      	beq.n	8002256 <d_expression+0x38e>
 800224c:	2700      	movs	r7, #0
 800224e:	2e33      	cmp	r6, #51	; 0x33
 8002250:	f47f ae8d 	bne.w	8001f6e <d_expression+0xa6>
 8002254:	e686      	b.n	8001f64 <d_expression+0x9c>
 8002256:	787a      	ldrb	r2, [r7, #1]
 8002258:	429a      	cmp	r2, r3
 800225a:	d1f7      	bne.n	800224c <d_expression+0x384>
 800225c:	68e3      	ldr	r3, [r4, #12]
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	2a5f      	cmp	r2, #95	; 0x5f
 8002262:	d001      	beq.n	8002268 <d_expression+0x3a0>
 8002264:	2701      	movs	r7, #1
 8002266:	e7f2      	b.n	800224e <d_expression+0x386>
 8002268:	3301      	adds	r3, #1
 800226a:	60e3      	str	r3, [r4, #12]
 800226c:	2700      	movs	r7, #0
 800226e:	e7ee      	b.n	800224e <d_expression+0x386>
 8002270:	0800efe4 	.word	0x0800efe4
 8002274:	0800eb48 	.word	0x0800eb48
 8002278:	0800eb3c 	.word	0x0800eb3c
 800227c:	0800eb40 	.word	0x0800eb40
 8002280:	0800eb44 	.word	0x0800eb44

08002284 <d_exprlist>:
 8002284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002286:	68c3      	ldr	r3, [r0, #12]
 8002288:	460f      	mov	r7, r1
 800228a:	7819      	ldrb	r1, [r3, #0]
 800228c:	b083      	sub	sp, #12
 800228e:	2200      	movs	r2, #0
 8002290:	42b9      	cmp	r1, r7
 8002292:	4604      	mov	r4, r0
 8002294:	9201      	str	r2, [sp, #4]
 8002296:	bf18      	it	ne
 8002298:	ae01      	addne	r6, sp, #4
 800229a:	d10a      	bne.n	80022b2 <d_exprlist+0x2e>
 800229c:	e01b      	b.n	80022d6 <d_exprlist+0x52>
 800229e:	f7fd ff93 	bl	80001c8 <d_make_comp>
 80022a2:	6030      	str	r0, [r6, #0]
 80022a4:	f100 0608 	add.w	r6, r0, #8
 80022a8:	b168      	cbz	r0, 80022c6 <d_exprlist+0x42>
 80022aa:	68e3      	ldr	r3, [r4, #12]
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	42ba      	cmp	r2, r7
 80022b0:	d00c      	beq.n	80022cc <d_exprlist+0x48>
 80022b2:	4620      	mov	r0, r4
 80022b4:	f7ff fe08 	bl	8001ec8 <d_expression>
 80022b8:	4605      	mov	r5, r0
 80022ba:	212e      	movs	r1, #46	; 0x2e
 80022bc:	4620      	mov	r0, r4
 80022be:	462a      	mov	r2, r5
 80022c0:	2300      	movs	r3, #0
 80022c2:	2d00      	cmp	r5, #0
 80022c4:	d1eb      	bne.n	800229e <d_exprlist+0x1a>
 80022c6:	2000      	movs	r0, #0
 80022c8:	b003      	add	sp, #12
 80022ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022cc:	9801      	ldr	r0, [sp, #4]
 80022ce:	3301      	adds	r3, #1
 80022d0:	60e3      	str	r3, [r4, #12]
 80022d2:	b003      	add	sp, #12
 80022d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d6:	3301      	adds	r3, #1
 80022d8:	60c3      	str	r3, [r0, #12]
 80022da:	212e      	movs	r1, #46	; 0x2e
 80022dc:	4613      	mov	r3, r2
 80022de:	b003      	add	sp, #12
 80022e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80022e4:	f7fd bf70 	b.w	80001c8 <d_make_comp>

080022e8 <d_append_string>:
 80022e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ec:	4604      	mov	r4, r0
 80022ee:	4608      	mov	r0, r1
 80022f0:	460d      	mov	r5, r1
 80022f2:	f00b f937 	bl	800d564 <strlen>
 80022f6:	b348      	cbz	r0, 800234c <d_append_string+0x64>
 80022f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80022fc:	182f      	adds	r7, r5, r0
 80022fe:	f04f 0800 	mov.w	r8, #0
 8002302:	e009      	b.n	8002318 <d_append_string+0x30>
 8002304:	460b      	mov	r3, r1
 8002306:	42bd      	cmp	r5, r7
 8002308:	f101 0101 	add.w	r1, r1, #1
 800230c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002310:	54e6      	strb	r6, [r4, r3]
 8002312:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002316:	d019      	beq.n	800234c <d_append_string+0x64>
 8002318:	29ff      	cmp	r1, #255	; 0xff
 800231a:	f815 6b01 	ldrb.w	r6, [r5], #1
 800231e:	d1f1      	bne.n	8002304 <d_append_string+0x1c>
 8002320:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002324:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002328:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800232c:	4620      	mov	r0, r4
 800232e:	4798      	blx	r3
 8002330:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002334:	3301      	adds	r3, #1
 8002336:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800233a:	2300      	movs	r3, #0
 800233c:	2101      	movs	r1, #1
 800233e:	42bd      	cmp	r5, r7
 8002340:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002344:	54e6      	strb	r6, [r4, r3]
 8002346:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800234a:	d1e5      	bne.n	8002318 <d_append_string+0x30>
 800234c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002350 <d_print_comp.part.10>:
 8002350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002354:	7813      	ldrb	r3, [r2, #0]
 8002356:	b097      	sub	sp, #92	; 0x5c
 8002358:	4615      	mov	r5, r2
 800235a:	4604      	mov	r4, r0
 800235c:	460e      	mov	r6, r1
 800235e:	2b4b      	cmp	r3, #75	; 0x4b
 8002360:	f201 818c 	bhi.w	800367c <d_print_comp.part.10+0x132c>
 8002364:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002368:	03a80488 	.word	0x03a80488
 800236c:	031f03a8 	.word	0x031f03a8
 8002370:	04e004f8 	.word	0x04e004f8
 8002374:	031a0561 	.word	0x031a0561
 8002378:	02e10308 	.word	0x02e10308
 800237c:	029302ba 	.word	0x029302ba
 8002380:	022e026c 	.word	0x022e026c
 8002384:	01e00207 	.word	0x01e00207
 8002388:	019201b9 	.word	0x019201b9
 800238c:	0144016b 	.word	0x0144016b
 8002390:	00f6011d 	.word	0x00f6011d
 8002394:	00a800cf 	.word	0x00a800cf
 8002398:	006b0080 	.word	0x006b0080
 800239c:	006b006b 	.word	0x006b006b
 80023a0:	004c004c 	.word	0x004c004c
 80023a4:	004c004c 	.word	0x004c004c
 80023a8:	004c004c 	.word	0x004c004c
 80023ac:	08ed004c 	.word	0x08ed004c
 80023b0:	004c08ed 	.word	0x004c08ed
 80023b4:	08bf004c 	.word	0x08bf004c
 80023b8:	07b3090f 	.word	0x07b3090f
 80023bc:	07250742 	.word	0x07250742
 80023c0:	072506e2 	.word	0x072506e2
 80023c4:	06ae06ae 	.word	0x06ae06ae
 80023c8:	09150965 	.word	0x09150965
 80023cc:	0898093e 	.word	0x0898093e
 80023d0:	0547055b 	.word	0x0547055b
 80023d4:	0536053b 	.word	0x0536053b
 80023d8:	06700675 	.word	0x06700675
 80023dc:	06310670 	.word	0x06310670
 80023e0:	05fa0631 	.word	0x05fa0631
 80023e4:	05e105ef 	.word	0x05e105ef
 80023e8:	058905b0 	.word	0x058905b0
 80023ec:	08230871 	.word	0x08230871
 80023f0:	098a084a 	.word	0x098a084a
 80023f4:	07ee07c8 	.word	0x07ee07c8
 80023f8:	040c0461 	.word	0x040c0461
 80023fc:	04b503d5 	.word	0x04b503d5
 8002400:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 8002404:	ab16      	add	r3, sp, #88	; 0x58
 8002406:	2100      	movs	r1, #0
 8002408:	f843 2d40 	str.w	r2, [r3, #-64]!
 800240c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8002410:	9507      	str	r5, [sp, #28]
 8002412:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002416:	9108      	str	r1, [sp, #32]
 8002418:	9209      	str	r2, [sp, #36]	; 0x24
 800241a:	686a      	ldr	r2, [r5, #4]
 800241c:	4620      	mov	r0, r4
 800241e:	4631      	mov	r1, r6
 8002420:	f002 fa2c 	bl	800487c <d_print_comp>
 8002424:	9b08      	ldr	r3, [sp, #32]
 8002426:	b923      	cbnz	r3, 8002432 <d_print_comp.part.10+0xe2>
 8002428:	4631      	mov	r1, r6
 800242a:	462a      	mov	r2, r5
 800242c:	4620      	mov	r0, r4
 800242e:	f002 fa31 	bl	8004894 <d_print_mod>
 8002432:	9b06      	ldr	r3, [sp, #24]
 8002434:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002438:	b017      	add	sp, #92	; 0x5c
 800243a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800243e:	f8d0 7114 	ldr.w	r7, [r0, #276]	; 0x114
 8002442:	463a      	mov	r2, r7
 8002444:	2f00      	cmp	r7, #0
 8002446:	d0dd      	beq.n	8002404 <d_print_comp.part.10+0xb4>
 8002448:	6891      	ldr	r1, [r2, #8]
 800244a:	b941      	cbnz	r1, 800245e <d_print_comp.part.10+0x10e>
 800244c:	6851      	ldr	r1, [r2, #4]
 800244e:	7809      	ldrb	r1, [r1, #0]
 8002450:	f1a1 0019 	sub.w	r0, r1, #25
 8002454:	2802      	cmp	r0, #2
 8002456:	d805      	bhi.n	8002464 <d_print_comp.part.10+0x114>
 8002458:	428b      	cmp	r3, r1
 800245a:	f001 854f 	beq.w	8003efc <d_print_comp.part.10+0x1bac>
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	2a00      	cmp	r2, #0
 8002462:	d1f1      	bne.n	8002448 <d_print_comp.part.10+0xf8>
 8002464:	463a      	mov	r2, r7
 8002466:	e7cd      	b.n	8002404 <d_print_comp.part.10+0xb4>
 8002468:	6897      	ldr	r7, [r2, #8]
 800246a:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800246e:	2f00      	cmp	r7, #0
 8002470:	d0e2      	beq.n	8002438 <d_print_comp.part.10+0xe8>
 8002472:	2500      	movs	r5, #0
 8002474:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002478:	46a8      	mov	r8, r5
 800247a:	e009      	b.n	8002490 <d_print_comp.part.10+0x140>
 800247c:	460b      	mov	r3, r1
 800247e:	3101      	adds	r1, #1
 8002480:	3501      	adds	r5, #1
 8002482:	42af      	cmp	r7, r5
 8002484:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002488:	54e6      	strb	r6, [r4, r3]
 800248a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800248e:	d0d3      	beq.n	8002438 <d_print_comp.part.10+0xe8>
 8002490:	29ff      	cmp	r1, #255	; 0xff
 8002492:	f819 6005 	ldrb.w	r6, [r9, r5]
 8002496:	d1f1      	bne.n	800247c <d_print_comp.part.10+0x12c>
 8002498:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800249c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80024a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80024a4:	4620      	mov	r0, r4
 80024a6:	4798      	blx	r3
 80024a8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80024ac:	3301      	adds	r3, #1
 80024ae:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80024b2:	2101      	movs	r1, #1
 80024b4:	2300      	movs	r3, #0
 80024b6:	e7e3      	b.n	8002480 <d_print_comp.part.10+0x130>
 80024b8:	4fd6      	ldr	r7, [pc, #856]	; (8002814 <d_print_comp.part.10+0x4c4>)
 80024ba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80024be:	f107 0a11 	add.w	sl, r7, #17
 80024c2:	f04f 0900 	mov.w	r9, #0
 80024c6:	e00a      	b.n	80024de <d_print_comp.part.10+0x18e>
 80024c8:	460b      	mov	r3, r1
 80024ca:	3101      	adds	r1, #1
 80024cc:	4557      	cmp	r7, sl
 80024ce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80024d2:	f804 8003 	strb.w	r8, [r4, r3]
 80024d6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80024da:	f001 8208 	beq.w	80038ee <d_print_comp.part.10+0x159e>
 80024de:	29ff      	cmp	r1, #255	; 0xff
 80024e0:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80024e4:	d1f0      	bne.n	80024c8 <d_print_comp.part.10+0x178>
 80024e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80024ea:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80024ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80024f2:	4620      	mov	r0, r4
 80024f4:	4798      	blx	r3
 80024f6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80024fa:	3301      	adds	r3, #1
 80024fc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002500:	2101      	movs	r1, #1
 8002502:	2300      	movs	r3, #0
 8002504:	e7e2      	b.n	80024cc <d_print_comp.part.10+0x17c>
 8002506:	4fc4      	ldr	r7, [pc, #784]	; (8002818 <d_print_comp.part.10+0x4c8>)
 8002508:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800250c:	f107 0a15 	add.w	sl, r7, #21
 8002510:	f04f 0900 	mov.w	r9, #0
 8002514:	e00a      	b.n	800252c <d_print_comp.part.10+0x1dc>
 8002516:	460b      	mov	r3, r1
 8002518:	3101      	adds	r1, #1
 800251a:	4557      	cmp	r7, sl
 800251c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002520:	f804 8003 	strb.w	r8, [r4, r3]
 8002524:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8002528:	f001 80ec 	beq.w	8003704 <d_print_comp.part.10+0x13b4>
 800252c:	29ff      	cmp	r1, #255	; 0xff
 800252e:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8002532:	d1f0      	bne.n	8002516 <d_print_comp.part.10+0x1c6>
 8002534:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002538:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800253c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002540:	4620      	mov	r0, r4
 8002542:	4798      	blx	r3
 8002544:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002548:	3301      	adds	r3, #1
 800254a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800254e:	2101      	movs	r1, #1
 8002550:	2300      	movs	r3, #0
 8002552:	e7e2      	b.n	800251a <d_print_comp.part.10+0x1ca>
 8002554:	4fb1      	ldr	r7, [pc, #708]	; (800281c <d_print_comp.part.10+0x4cc>)
 8002556:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800255a:	f107 0a19 	add.w	sl, r7, #25
 800255e:	f04f 0900 	mov.w	r9, #0
 8002562:	e00a      	b.n	800257a <d_print_comp.part.10+0x22a>
 8002564:	460b      	mov	r3, r1
 8002566:	3101      	adds	r1, #1
 8002568:	4557      	cmp	r7, sl
 800256a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800256e:	f804 8003 	strb.w	r8, [r4, r3]
 8002572:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8002576:	f001 80b4 	beq.w	80036e2 <d_print_comp.part.10+0x1392>
 800257a:	29ff      	cmp	r1, #255	; 0xff
 800257c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8002580:	d1f0      	bne.n	8002564 <d_print_comp.part.10+0x214>
 8002582:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002586:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800258a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800258e:	4620      	mov	r0, r4
 8002590:	4798      	blx	r3
 8002592:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002596:	3301      	adds	r3, #1
 8002598:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800259c:	2101      	movs	r1, #1
 800259e:	2300      	movs	r3, #0
 80025a0:	e7e2      	b.n	8002568 <d_print_comp.part.10+0x218>
 80025a2:	4f9f      	ldr	r7, [pc, #636]	; (8002820 <d_print_comp.part.10+0x4d0>)
 80025a4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80025a8:	f107 0a16 	add.w	sl, r7, #22
 80025ac:	f04f 0900 	mov.w	r9, #0
 80025b0:	e00a      	b.n	80025c8 <d_print_comp.part.10+0x278>
 80025b2:	460b      	mov	r3, r1
 80025b4:	3101      	adds	r1, #1
 80025b6:	4557      	cmp	r7, sl
 80025b8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80025bc:	f804 8003 	strb.w	r8, [r4, r3]
 80025c0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80025c4:	f001 80d7 	beq.w	8003776 <d_print_comp.part.10+0x1426>
 80025c8:	29ff      	cmp	r1, #255	; 0xff
 80025ca:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80025ce:	d1f0      	bne.n	80025b2 <d_print_comp.part.10+0x262>
 80025d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80025d4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80025d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80025dc:	4620      	mov	r0, r4
 80025de:	4798      	blx	r3
 80025e0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80025e4:	3301      	adds	r3, #1
 80025e6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80025ea:	2101      	movs	r1, #1
 80025ec:	2300      	movs	r3, #0
 80025ee:	e7e2      	b.n	80025b6 <d_print_comp.part.10+0x266>
 80025f0:	4f8c      	ldr	r7, [pc, #560]	; (8002824 <d_print_comp.part.10+0x4d4>)
 80025f2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80025f6:	f107 0a13 	add.w	sl, r7, #19
 80025fa:	f04f 0900 	mov.w	r9, #0
 80025fe:	e00a      	b.n	8002616 <d_print_comp.part.10+0x2c6>
 8002600:	460b      	mov	r3, r1
 8002602:	3101      	adds	r1, #1
 8002604:	4557      	cmp	r7, sl
 8002606:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800260a:	f804 8003 	strb.w	r8, [r4, r3]
 800260e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8002612:	f001 80a9 	beq.w	8003768 <d_print_comp.part.10+0x1418>
 8002616:	29ff      	cmp	r1, #255	; 0xff
 8002618:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800261c:	d1f0      	bne.n	8002600 <d_print_comp.part.10+0x2b0>
 800261e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002622:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002626:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800262a:	4620      	mov	r0, r4
 800262c:	4798      	blx	r3
 800262e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002632:	3301      	adds	r3, #1
 8002634:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002638:	2101      	movs	r1, #1
 800263a:	2300      	movs	r3, #0
 800263c:	e7e2      	b.n	8002604 <d_print_comp.part.10+0x2b4>
 800263e:	4f7a      	ldr	r7, [pc, #488]	; (8002828 <d_print_comp.part.10+0x4d8>)
 8002640:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002644:	f107 0a0f 	add.w	sl, r7, #15
 8002648:	f04f 0900 	mov.w	r9, #0
 800264c:	e00a      	b.n	8002664 <d_print_comp.part.10+0x314>
 800264e:	460b      	mov	r3, r1
 8002650:	3101      	adds	r1, #1
 8002652:	4557      	cmp	r7, sl
 8002654:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002658:	f804 8003 	strb.w	r8, [r4, r3]
 800265c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8002660:	f001 8090 	beq.w	8003784 <d_print_comp.part.10+0x1434>
 8002664:	29ff      	cmp	r1, #255	; 0xff
 8002666:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800266a:	d1f0      	bne.n	800264e <d_print_comp.part.10+0x2fe>
 800266c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002670:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002674:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002678:	4620      	mov	r0, r4
 800267a:	4798      	blx	r3
 800267c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002680:	3301      	adds	r3, #1
 8002682:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002686:	2101      	movs	r1, #1
 8002688:	2300      	movs	r3, #0
 800268a:	e7e2      	b.n	8002652 <d_print_comp.part.10+0x302>
 800268c:	4f67      	ldr	r7, [pc, #412]	; (800282c <d_print_comp.part.10+0x4dc>)
 800268e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002692:	f107 0a1a 	add.w	sl, r7, #26
 8002696:	f04f 0900 	mov.w	r9, #0
 800269a:	e00a      	b.n	80026b2 <d_print_comp.part.10+0x362>
 800269c:	460b      	mov	r3, r1
 800269e:	3101      	adds	r1, #1
 80026a0:	4557      	cmp	r7, sl
 80026a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80026a6:	f804 8003 	strb.w	r8, [r4, r3]
 80026aa:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80026ae:	f001 8011 	beq.w	80036d4 <d_print_comp.part.10+0x1384>
 80026b2:	29ff      	cmp	r1, #255	; 0xff
 80026b4:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80026b8:	d1f0      	bne.n	800269c <d_print_comp.part.10+0x34c>
 80026ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80026be:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80026c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80026c6:	4620      	mov	r0, r4
 80026c8:	4798      	blx	r3
 80026ca:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80026ce:	3301      	adds	r3, #1
 80026d0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80026d4:	2101      	movs	r1, #1
 80026d6:	2300      	movs	r3, #0
 80026d8:	e7e2      	b.n	80026a0 <d_print_comp.part.10+0x350>
 80026da:	4f55      	ldr	r7, [pc, #340]	; (8002830 <d_print_comp.part.10+0x4e0>)
 80026dc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80026e0:	f107 0a11 	add.w	sl, r7, #17
 80026e4:	f04f 0900 	mov.w	r9, #0
 80026e8:	e00a      	b.n	8002700 <d_print_comp.part.10+0x3b0>
 80026ea:	460b      	mov	r3, r1
 80026ec:	3101      	adds	r1, #1
 80026ee:	4557      	cmp	r7, sl
 80026f0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80026f4:	f804 8003 	strb.w	r8, [r4, r3]
 80026f8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80026fc:	f001 80a5 	beq.w	800384a <d_print_comp.part.10+0x14fa>
 8002700:	29ff      	cmp	r1, #255	; 0xff
 8002702:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8002706:	d1f0      	bne.n	80026ea <d_print_comp.part.10+0x39a>
 8002708:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800270c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002710:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002714:	4620      	mov	r0, r4
 8002716:	4798      	blx	r3
 8002718:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800271c:	3301      	adds	r3, #1
 800271e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002722:	2101      	movs	r1, #1
 8002724:	2300      	movs	r3, #0
 8002726:	e7e2      	b.n	80026ee <d_print_comp.part.10+0x39e>
 8002728:	4f42      	ldr	r7, [pc, #264]	; (8002834 <d_print_comp.part.10+0x4e4>)
 800272a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800272e:	f107 0a15 	add.w	sl, r7, #21
 8002732:	f04f 0900 	mov.w	r9, #0
 8002736:	e00a      	b.n	800274e <d_print_comp.part.10+0x3fe>
 8002738:	460b      	mov	r3, r1
 800273a:	3101      	adds	r1, #1
 800273c:	4557      	cmp	r7, sl
 800273e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002742:	f804 8003 	strb.w	r8, [r4, r3]
 8002746:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800274a:	f001 8077 	beq.w	800383c <d_print_comp.part.10+0x14ec>
 800274e:	29ff      	cmp	r1, #255	; 0xff
 8002750:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8002754:	d1f0      	bne.n	8002738 <d_print_comp.part.10+0x3e8>
 8002756:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800275a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800275e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002762:	4620      	mov	r0, r4
 8002764:	4798      	blx	r3
 8002766:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800276a:	3301      	adds	r3, #1
 800276c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002770:	2101      	movs	r1, #1
 8002772:	2300      	movs	r3, #0
 8002774:	e7e2      	b.n	800273c <d_print_comp.part.10+0x3ec>
 8002776:	4f30      	ldr	r7, [pc, #192]	; (8002838 <d_print_comp.part.10+0x4e8>)
 8002778:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800277c:	f107 0a10 	add.w	sl, r7, #16
 8002780:	f04f 0900 	mov.w	r9, #0
 8002784:	e00a      	b.n	800279c <d_print_comp.part.10+0x44c>
 8002786:	460b      	mov	r3, r1
 8002788:	3101      	adds	r1, #1
 800278a:	4557      	cmp	r7, sl
 800278c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002790:	f804 8003 	strb.w	r8, [r4, r3]
 8002794:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8002798:	f001 8049 	beq.w	800382e <d_print_comp.part.10+0x14de>
 800279c:	29ff      	cmp	r1, #255	; 0xff
 800279e:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80027a2:	d1f0      	bne.n	8002786 <d_print_comp.part.10+0x436>
 80027a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80027a8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80027ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80027b0:	4620      	mov	r0, r4
 80027b2:	4798      	blx	r3
 80027b4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80027b8:	3301      	adds	r3, #1
 80027ba:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80027be:	2101      	movs	r1, #1
 80027c0:	2300      	movs	r3, #0
 80027c2:	e7e2      	b.n	800278a <d_print_comp.part.10+0x43a>
 80027c4:	4f1d      	ldr	r7, [pc, #116]	; (800283c <d_print_comp.part.10+0x4ec>)
 80027c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80027ca:	f107 0a12 	add.w	sl, r7, #18
 80027ce:	f04f 0900 	mov.w	r9, #0
 80027d2:	e00a      	b.n	80027ea <d_print_comp.part.10+0x49a>
 80027d4:	460b      	mov	r3, r1
 80027d6:	3101      	adds	r1, #1
 80027d8:	4557      	cmp	r7, sl
 80027da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80027de:	f804 8003 	strb.w	r8, [r4, r3]
 80027e2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80027e6:	f001 801b 	beq.w	8003820 <d_print_comp.part.10+0x14d0>
 80027ea:	29ff      	cmp	r1, #255	; 0xff
 80027ec:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80027f0:	d1f0      	bne.n	80027d4 <d_print_comp.part.10+0x484>
 80027f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80027f6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80027fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80027fe:	4620      	mov	r0, r4
 8002800:	4798      	blx	r3
 8002802:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002806:	3301      	adds	r3, #1
 8002808:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800280c:	2101      	movs	r1, #1
 800280e:	2300      	movs	r3, #0
 8002810:	e7e2      	b.n	80027d8 <d_print_comp.part.10+0x488>
 8002812:	bf00      	nop
 8002814:	0800ec93 	.word	0x0800ec93
 8002818:	0800ec7b 	.word	0x0800ec7b
 800281c:	0800ec5f 	.word	0x0800ec5f
 8002820:	0800ec47 	.word	0x0800ec47
 8002824:	0800ec33 	.word	0x0800ec33
 8002828:	0800ec23 	.word	0x0800ec23
 800282c:	0800ec07 	.word	0x0800ec07
 8002830:	0800ebf3 	.word	0x0800ebf3
 8002834:	0800ebef 	.word	0x0800ebef
 8002838:	0800ebdb 	.word	0x0800ebdb
 800283c:	0800ebc7 	.word	0x0800ebc7
 8002840:	4fc9      	ldr	r7, [pc, #804]	; (8002b68 <d_print_comp.part.10+0x818>)
 8002842:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002846:	f107 0a0d 	add.w	sl, r7, #13
 800284a:	f04f 0900 	mov.w	r9, #0
 800284e:	e00a      	b.n	8002866 <d_print_comp.part.10+0x516>
 8002850:	460b      	mov	r3, r1
 8002852:	3101      	adds	r1, #1
 8002854:	4557      	cmp	r7, sl
 8002856:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800285a:	f804 8003 	strb.w	r8, [r4, r3]
 800285e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8002862:	f000 87cf 	beq.w	8003804 <d_print_comp.part.10+0x14b4>
 8002866:	29ff      	cmp	r1, #255	; 0xff
 8002868:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800286c:	d1f0      	bne.n	8002850 <d_print_comp.part.10+0x500>
 800286e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002872:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002876:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800287a:	4620      	mov	r0, r4
 800287c:	4798      	blx	r3
 800287e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002882:	3301      	adds	r3, #1
 8002884:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002888:	2101      	movs	r1, #1
 800288a:	2300      	movs	r3, #0
 800288c:	e7e2      	b.n	8002854 <d_print_comp.part.10+0x504>
 800288e:	4fb7      	ldr	r7, [pc, #732]	; (8002b6c <d_print_comp.part.10+0x81c>)
 8002890:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002894:	f107 0a18 	add.w	sl, r7, #24
 8002898:	f04f 0900 	mov.w	r9, #0
 800289c:	e00a      	b.n	80028b4 <d_print_comp.part.10+0x564>
 800289e:	460b      	mov	r3, r1
 80028a0:	3101      	adds	r1, #1
 80028a2:	4557      	cmp	r7, sl
 80028a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80028a8:	f804 8003 	strb.w	r8, [r4, r3]
 80028ac:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80028b0:	f000 877d 	beq.w	80037ae <d_print_comp.part.10+0x145e>
 80028b4:	29ff      	cmp	r1, #255	; 0xff
 80028b6:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80028ba:	d1f0      	bne.n	800289e <d_print_comp.part.10+0x54e>
 80028bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80028c0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80028c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80028c8:	4620      	mov	r0, r4
 80028ca:	4798      	blx	r3
 80028cc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80028d0:	3301      	adds	r3, #1
 80028d2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80028d6:	2101      	movs	r1, #1
 80028d8:	2300      	movs	r3, #0
 80028da:	e7e2      	b.n	80028a2 <d_print_comp.part.10+0x552>
 80028dc:	4fa4      	ldr	r7, [pc, #656]	; (8002b70 <d_print_comp.part.10+0x820>)
 80028de:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80028e2:	f107 0a08 	add.w	sl, r7, #8
 80028e6:	f04f 0900 	mov.w	r9, #0
 80028ea:	e00a      	b.n	8002902 <d_print_comp.part.10+0x5b2>
 80028ec:	460b      	mov	r3, r1
 80028ee:	3101      	adds	r1, #1
 80028f0:	4557      	cmp	r7, sl
 80028f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80028f6:	f804 8003 	strb.w	r8, [r4, r3]
 80028fa:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80028fe:	f000 874f 	beq.w	80037a0 <d_print_comp.part.10+0x1450>
 8002902:	29ff      	cmp	r1, #255	; 0xff
 8002904:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8002908:	d1f0      	bne.n	80028ec <d_print_comp.part.10+0x59c>
 800290a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800290e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002912:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002916:	4620      	mov	r0, r4
 8002918:	4798      	blx	r3
 800291a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800291e:	3301      	adds	r3, #1
 8002920:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002924:	2101      	movs	r1, #1
 8002926:	2300      	movs	r3, #0
 8002928:	e7e2      	b.n	80028f0 <d_print_comp.part.10+0x5a0>
 800292a:	4f92      	ldr	r7, [pc, #584]	; (8002b74 <d_print_comp.part.10+0x824>)
 800292c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002930:	f107 0a0b 	add.w	sl, r7, #11
 8002934:	f04f 0900 	mov.w	r9, #0
 8002938:	e00a      	b.n	8002950 <d_print_comp.part.10+0x600>
 800293a:	460b      	mov	r3, r1
 800293c:	3101      	adds	r1, #1
 800293e:	4557      	cmp	r7, sl
 8002940:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002944:	f804 8003 	strb.w	r8, [r4, r3]
 8002948:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800294c:	f000 8721 	beq.w	8003792 <d_print_comp.part.10+0x1442>
 8002950:	29ff      	cmp	r1, #255	; 0xff
 8002952:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8002956:	d1f0      	bne.n	800293a <d_print_comp.part.10+0x5ea>
 8002958:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800295c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002960:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002964:	4620      	mov	r0, r4
 8002966:	4798      	blx	r3
 8002968:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800296c:	3301      	adds	r3, #1
 800296e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002972:	2101      	movs	r1, #1
 8002974:	2300      	movs	r3, #0
 8002976:	e7e2      	b.n	800293e <d_print_comp.part.10+0x5ee>
 8002978:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800297c:	29ff      	cmp	r1, #255	; 0xff
 800297e:	f001 82c4 	beq.w	8003f0a <d_print_comp.part.10+0x1bba>
 8002982:	1c4a      	adds	r2, r1, #1
 8002984:	237e      	movs	r3, #126	; 0x7e
 8002986:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800298a:	5463      	strb	r3, [r4, r1]
 800298c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002990:	4631      	mov	r1, r6
 8002992:	68aa      	ldr	r2, [r5, #8]
 8002994:	4620      	mov	r0, r4
 8002996:	f001 ff71 	bl	800487c <d_print_comp>
 800299a:	e54d      	b.n	8002438 <d_print_comp.part.10+0xe8>
 800299c:	4631      	mov	r1, r6
 800299e:	6892      	ldr	r2, [r2, #8]
 80029a0:	f001 ff6c 	bl	800487c <d_print_comp>
 80029a4:	e548      	b.n	8002438 <d_print_comp.part.10+0xe8>
 80029a6:	2200      	movs	r2, #0
 80029a8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80029ac:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 80029b0:	686f      	ldr	r7, [r5, #4]
 80029b2:	9302      	str	r3, [sp, #8]
 80029b4:	2f00      	cmp	r7, #0
 80029b6:	f001 8503 	beq.w	80043c0 <d_print_comp.part.10+0x2070>
 80029ba:	a906      	add	r1, sp, #24
 80029bc:	f8d0 a110 	ldr.w	sl, [r0, #272]	; 0x110
 80029c0:	9101      	str	r1, [sp, #4]
 80029c2:	4690      	mov	r8, r2
 80029c4:	4694      	mov	ip, r2
 80029c6:	460b      	mov	r3, r1
 80029c8:	7839      	ldrb	r1, [r7, #0]
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f1a1 001c 	sub.w	r0, r1, #28
 80029d0:	2804      	cmp	r0, #4
 80029d2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80029d6:	605f      	str	r7, [r3, #4]
 80029d8:	f8c3 c008 	str.w	ip, [r3, #8]
 80029dc:	f8c3 a00c 	str.w	sl, [r3, #12]
 80029e0:	461a      	mov	r2, r3
 80029e2:	f108 0801 	add.w	r8, r8, #1
 80029e6:	f103 0310 	add.w	r3, r3, #16
 80029ea:	f240 864c 	bls.w	8003686 <d_print_comp.part.10+0x1336>
 80029ee:	2904      	cmp	r1, #4
 80029f0:	f001 8633 	beq.w	800465a <d_print_comp.part.10+0x230a>
 80029f4:	2902      	cmp	r1, #2
 80029f6:	d13d      	bne.n	8002a74 <d_print_comp.part.10+0x724>
 80029f8:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80029fc:	f89b 3000 	ldrb.w	r3, [fp]
 8002a00:	2b45      	cmp	r3, #69	; 0x45
 8002a02:	bf08      	it	eq
 8002a04:	f8db b004 	ldreq.w	fp, [fp, #4]
 8002a08:	f89b 3000 	ldrb.w	r3, [fp]
 8002a0c:	3b1c      	subs	r3, #28
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d830      	bhi.n	8002a74 <d_print_comp.part.10+0x724>
 8002a12:	f1b8 0f04 	cmp.w	r8, #4
 8002a16:	f001 8679 	beq.w	800470c <d_print_comp.part.10+0x23bc>
 8002a1a:	9a01      	ldr	r2, [sp, #4]
 8002a1c:	4623      	mov	r3, r4
 8002a1e:	eb02 1c08 	add.w	ip, r2, r8, lsl #4
 8002a22:	4629      	mov	r1, r5
 8002a24:	4632      	mov	r2, r6
 8002a26:	465d      	mov	r5, fp
 8002a28:	4656      	mov	r6, sl
 8002a2a:	4664      	mov	r4, ip
 8002a2c:	468b      	mov	fp, r1
 8002a2e:	4692      	mov	sl, r2
 8002a30:	4699      	mov	r9, r3
 8002a32:	e003      	b.n	8002a3c <d_print_comp.part.10+0x6ec>
 8002a34:	f1b8 0f04 	cmp.w	r8, #4
 8002a38:	f001 8667 	beq.w	800470a <d_print_comp.part.10+0x23ba>
 8002a3c:	e91c 000f 	ldmdb	ip, {r0, r1, r2, r3}
 8002a40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a44:	f1a4 0310 	sub.w	r3, r4, #16
 8002a48:	6023      	str	r3, [r4, #0]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e90c 0048 	stmdb	ip, {r3, r6}
 8002a50:	f8c9 4114 	str.w	r4, [r9, #276]	; 0x114
 8002a54:	f84c 5c0c 	str.w	r5, [ip, #-12]
 8002a58:	686d      	ldr	r5, [r5, #4]
 8002a5a:	782b      	ldrb	r3, [r5, #0]
 8002a5c:	3b1c      	subs	r3, #28
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	f108 0801 	add.w	r8, r8, #1
 8002a64:	f10c 0c10 	add.w	ip, ip, #16
 8002a68:	f104 0410 	add.w	r4, r4, #16
 8002a6c:	d9e2      	bls.n	8002a34 <d_print_comp.part.10+0x6e4>
 8002a6e:	464c      	mov	r4, r9
 8002a70:	4656      	mov	r6, sl
 8002a72:	465d      	mov	r5, fp
 8002a74:	68aa      	ldr	r2, [r5, #8]
 8002a76:	4620      	mov	r0, r4
 8002a78:	4631      	mov	r1, r6
 8002a7a:	f001 feff 	bl	800487c <d_print_comp>
 8002a7e:	783b      	ldrb	r3, [r7, #0]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	bf04      	itt	eq
 8002a84:	9b04      	ldreq	r3, [sp, #16]
 8002a86:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
 8002a8a:	f1b8 0f00 	cmp.w	r8, #0
 8002a8e:	d00f      	beq.n	8002ab0 <d_print_comp.part.10+0x760>
 8002a90:	9a01      	ldr	r2, [sp, #4]
 8002a92:	4647      	mov	r7, r8
 8002a94:	eb02 1508 	add.w	r5, r2, r8, lsl #4
 8002a98:	f04f 0920 	mov.w	r9, #32
 8002a9c:	46b0      	mov	r8, r6
 8002a9e:	f855 6c08 	ldr.w	r6, [r5, #-8]
 8002aa2:	3f01      	subs	r7, #1
 8002aa4:	2e00      	cmp	r6, #0
 8002aa6:	f001 8477 	beq.w	8004398 <d_print_comp.part.10+0x2048>
 8002aaa:	3d10      	subs	r5, #16
 8002aac:	2f00      	cmp	r7, #0
 8002aae:	d1f6      	bne.n	8002a9e <d_print_comp.part.10+0x74e>
 8002ab0:	9902      	ldr	r1, [sp, #8]
 8002ab2:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 8002ab6:	e4bf      	b.n	8002438 <d_print_comp.part.10+0xe8>
 8002ab8:	4631      	mov	r1, r6
 8002aba:	6852      	ldr	r2, [r2, #4]
 8002abc:	f001 fede 	bl	800487c <d_print_comp>
 8002ac0:	f016 0904 	ands.w	r9, r6, #4
 8002ac4:	f040 85ec 	bne.w	80036a0 <d_print_comp.part.10+0x1350>
 8002ac8:	4f2b      	ldr	r7, [pc, #172]	; (8002b78 <d_print_comp.part.10+0x828>)
 8002aca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002ace:	f107 0a02 	add.w	sl, r7, #2
 8002ad2:	e00a      	b.n	8002aea <d_print_comp.part.10+0x79a>
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	3101      	adds	r1, #1
 8002ad8:	4557      	cmp	r7, sl
 8002ada:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002ade:	f804 8003 	strb.w	r8, [r4, r3]
 8002ae2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8002ae6:	f000 85e7 	beq.w	80036b8 <d_print_comp.part.10+0x1368>
 8002aea:	29ff      	cmp	r1, #255	; 0xff
 8002aec:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8002af0:	d1f0      	bne.n	8002ad4 <d_print_comp.part.10+0x784>
 8002af2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002af6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002afa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002afe:	4620      	mov	r0, r4
 8002b00:	4798      	blx	r3
 8002b02:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b06:	3301      	adds	r3, #1
 8002b08:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e7e2      	b.n	8002ad8 <d_print_comp.part.10+0x788>
 8002b12:	4f1a      	ldr	r7, [pc, #104]	; (8002b7c <d_print_comp.part.10+0x82c>)
 8002b14:	6852      	ldr	r2, [r2, #4]
 8002b16:	4631      	mov	r1, r6
 8002b18:	f001 feb0 	bl	800487c <d_print_comp>
 8002b1c:	f107 0a05 	add.w	sl, r7, #5
 8002b20:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002b24:	f04f 0900 	mov.w	r9, #0
 8002b28:	e00a      	b.n	8002b40 <d_print_comp.part.10+0x7f0>
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	3101      	adds	r1, #1
 8002b2e:	4557      	cmp	r7, sl
 8002b30:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002b34:	f804 8003 	strb.w	r8, [r4, r3]
 8002b38:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8002b3c:	f000 87b2 	beq.w	8003aa4 <d_print_comp.part.10+0x1754>
 8002b40:	29ff      	cmp	r1, #255	; 0xff
 8002b42:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8002b46:	d1f0      	bne.n	8002b2a <d_print_comp.part.10+0x7da>
 8002b48:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002b4c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002b50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002b54:	4620      	mov	r0, r4
 8002b56:	4798      	blx	r3
 8002b58:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002b62:	2101      	movs	r1, #1
 8002b64:	2300      	movs	r3, #0
 8002b66:	e7e2      	b.n	8002b2e <d_print_comp.part.10+0x7de>
 8002b68:	0800ebb7 	.word	0x0800ebb7
 8002b6c:	0800eb93 	.word	0x0800eb93
 8002b70:	0800eb87 	.word	0x0800eb87
 8002b74:	0800eb7b 	.word	0x0800eb7b
 8002b78:	0800eb53 	.word	0x0800eb53
 8002b7c:	0800eb4b 	.word	0x0800eb4b
 8002b80:	6851      	ldr	r1, [r2, #4]
 8002b82:	f7fd fe29 	bl	80007d8 <d_find_pack>
 8002b86:	2800      	cmp	r0, #0
 8002b88:	f001 856f 	beq.w	800466a <d_print_comp.part.10+0x231a>
 8002b8c:	f04f 0800 	mov.w	r8, #0
 8002b90:	7803      	ldrb	r3, [r0, #0]
 8002b92:	2b2f      	cmp	r3, #47	; 0x2f
 8002b94:	f040 87ca 	bne.w	8003b2c <d_print_comp.part.10+0x17dc>
 8002b98:	6843      	ldr	r3, [r0, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 87c6 	beq.w	8003b2c <d_print_comp.part.10+0x17dc>
 8002ba0:	6880      	ldr	r0, [r0, #8]
 8002ba2:	f108 0801 	add.w	r8, r8, #1
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	d1f2      	bne.n	8002b90 <d_print_comp.part.10+0x840>
 8002baa:	686d      	ldr	r5, [r5, #4]
 8002bac:	9501      	str	r5, [sp, #4]
 8002bae:	2700      	movs	r7, #0
 8002bb0:	f108 33ff 	add.w	r3, r8, #4294967295
 8002bb4:	f8df a3cc 	ldr.w	sl, [pc, #972]	; 8002f84 <d_print_comp.part.10+0xc34>
 8002bb8:	9302      	str	r3, [sp, #8]
 8002bba:	46b9      	mov	r9, r7
 8002bbc:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	4631      	mov	r1, r6
 8002bc4:	9a01      	ldr	r2, [sp, #4]
 8002bc6:	f001 fe59 	bl	800487c <d_print_comp>
 8002bca:	9b02      	ldr	r3, [sp, #8]
 8002bcc:	42bb      	cmp	r3, r7
 8002bce:	dd28      	ble.n	8002c22 <d_print_comp.part.10+0x8d2>
 8002bd0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002bd4:	f8df b3b0 	ldr.w	fp, [pc, #944]	; 8002f88 <d_print_comp.part.10+0xc38>
 8002bd8:	e009      	b.n	8002bee <d_print_comp.part.10+0x89e>
 8002bda:	460b      	mov	r3, r1
 8002bdc:	45d3      	cmp	fp, sl
 8002bde:	f101 0101 	add.w	r1, r1, #1
 8002be2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002be6:	54e5      	strb	r5, [r4, r3]
 8002be8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002bec:	d019      	beq.n	8002c22 <d_print_comp.part.10+0x8d2>
 8002bee:	29ff      	cmp	r1, #255	; 0xff
 8002bf0:	f81b 5f01 	ldrb.w	r5, [fp, #1]!
 8002bf4:	d1f1      	bne.n	8002bda <d_print_comp.part.10+0x88a>
 8002bf6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002bfa:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002bfe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c02:	4620      	mov	r0, r4
 8002c04:	4798      	blx	r3
 8002c06:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002c10:	2300      	movs	r3, #0
 8002c12:	2101      	movs	r1, #1
 8002c14:	45d3      	cmp	fp, sl
 8002c16:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c1a:	54e5      	strb	r5, [r4, r3]
 8002c1c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002c20:	d1e5      	bne.n	8002bee <d_print_comp.part.10+0x89e>
 8002c22:	3701      	adds	r7, #1
 8002c24:	4547      	cmp	r7, r8
 8002c26:	d1c9      	bne.n	8002bbc <d_print_comp.part.10+0x86c>
 8002c28:	e406      	b.n	8002438 <d_print_comp.part.10+0xe8>
 8002c2a:	4fd0      	ldr	r7, [pc, #832]	; (8002f6c <d_print_comp.part.10+0xc1c>)
 8002c2c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c30:	f107 0a1a 	add.w	sl, r7, #26
 8002c34:	f04f 0900 	mov.w	r9, #0
 8002c38:	e00a      	b.n	8002c50 <d_print_comp.part.10+0x900>
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	3101      	adds	r1, #1
 8002c3e:	4557      	cmp	r7, sl
 8002c40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c44:	f804 8003 	strb.w	r8, [r4, r3]
 8002c48:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8002c4c:	f000 8604 	beq.w	8003858 <d_print_comp.part.10+0x1508>
 8002c50:	29ff      	cmp	r1, #255	; 0xff
 8002c52:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8002c56:	d1f0      	bne.n	8002c3a <d_print_comp.part.10+0x8ea>
 8002c58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c5c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002c60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c64:	4620      	mov	r0, r4
 8002c66:	4798      	blx	r3
 8002c68:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002c72:	2101      	movs	r1, #1
 8002c74:	2300      	movs	r3, #0
 8002c76:	e7e2      	b.n	8002c3e <d_print_comp.part.10+0x8ee>
 8002c78:	f016 0604 	ands.w	r6, r6, #4
 8002c7c:	f041 81ae 	bne.w	8003fdc <d_print_comp.part.10+0x1c8c>
 8002c80:	6897      	ldr	r7, [r2, #8]
 8002c82:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8002c86:	2f00      	cmp	r7, #0
 8002c88:	f43f abd6 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 8002c8c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c90:	46b0      	mov	r8, r6
 8002c92:	e00a      	b.n	8002caa <d_print_comp.part.10+0x95a>
 8002c94:	460b      	mov	r3, r1
 8002c96:	3101      	adds	r1, #1
 8002c98:	3601      	adds	r6, #1
 8002c9a:	42b7      	cmp	r7, r6
 8002c9c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002ca0:	54e5      	strb	r5, [r4, r3]
 8002ca2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002ca6:	f43f abc7 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 8002caa:	29ff      	cmp	r1, #255	; 0xff
 8002cac:	f819 5006 	ldrb.w	r5, [r9, r6]
 8002cb0:	d1f0      	bne.n	8002c94 <d_print_comp.part.10+0x944>
 8002cb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002cb6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002cba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	4798      	blx	r3
 8002cc2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002ccc:	2101      	movs	r1, #1
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e7e2      	b.n	8002c98 <d_print_comp.part.10+0x948>
 8002cd2:	4fa7      	ldr	r7, [pc, #668]	; (8002f70 <d_print_comp.part.10+0xc20>)
 8002cd4:	6852      	ldr	r2, [r2, #4]
 8002cd6:	4631      	mov	r1, r6
 8002cd8:	f001 fdd0 	bl	800487c <d_print_comp>
 8002cdc:	f107 0a08 	add.w	sl, r7, #8
 8002ce0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002ce4:	f04f 0900 	mov.w	r9, #0
 8002ce8:	e00a      	b.n	8002d00 <d_print_comp.part.10+0x9b0>
 8002cea:	460b      	mov	r3, r1
 8002cec:	3101      	adds	r1, #1
 8002cee:	4557      	cmp	r7, sl
 8002cf0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002cf4:	f804 8003 	strb.w	r8, [r4, r3]
 8002cf8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8002cfc:	f000 86e5 	beq.w	8003aca <d_print_comp.part.10+0x177a>
 8002d00:	29ff      	cmp	r1, #255	; 0xff
 8002d02:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8002d06:	d1f0      	bne.n	8002cea <d_print_comp.part.10+0x99a>
 8002d08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d0c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002d10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d14:	4620      	mov	r0, r4
 8002d16:	4798      	blx	r3
 8002d18:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002d22:	2101      	movs	r1, #1
 8002d24:	2300      	movs	r3, #0
 8002d26:	e7e2      	b.n	8002cee <d_print_comp.part.10+0x99e>
 8002d28:	1d11      	adds	r1, r2, #4
 8002d2a:	f7fd fd33 	bl	8000794 <d_lookup_template_argument.isra.6>
 8002d2e:	2800      	cmp	r0, #0
 8002d30:	f001 8013 	beq.w	8003d5a <d_print_comp.part.10+0x1a0a>
 8002d34:	7803      	ldrb	r3, [r0, #0]
 8002d36:	2b2f      	cmp	r3, #47	; 0x2f
 8002d38:	f001 8002 	beq.w	8003d40 <d_print_comp.part.10+0x19f0>
 8002d3c:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8002d40:	682b      	ldr	r3, [r5, #0]
 8002d42:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8002d46:	4602      	mov	r2, r0
 8002d48:	4631      	mov	r1, r6
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f001 fd96 	bl	800487c <d_print_comp>
 8002d50:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8002d54:	f7ff bb70 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
 8002d5e:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8002d62:	6857      	ldr	r7, [r2, #4]
 8002d64:	0772      	lsls	r2, r6, #29
 8002d66:	d505      	bpl.n	8002d74 <d_print_comp.part.10+0xa24>
 8002d68:	783b      	ldrb	r3, [r7, #0]
 8002d6a:	b91b      	cbnz	r3, 8002d74 <d_print_comp.part.10+0xa24>
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	2a06      	cmp	r2, #6
 8002d70:	f001 83bb 	beq.w	80044ea <d_print_comp.part.10+0x219a>
 8002d74:	463a      	mov	r2, r7
 8002d76:	4620      	mov	r0, r4
 8002d78:	4631      	mov	r1, r6
 8002d7a:	f001 fd7f 	bl	800487c <d_print_comp>
 8002d7e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8002d82:	2b3c      	cmp	r3, #60	; 0x3c
 8002d84:	f001 832f 	beq.w	80043e6 <d_print_comp.part.10+0x2096>
 8002d88:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002d8c:	2bff      	cmp	r3, #255	; 0xff
 8002d8e:	f001 822a 	beq.w	80041e6 <d_print_comp.part.10+0x1e96>
 8002d92:	1c59      	adds	r1, r3, #1
 8002d94:	223c      	movs	r2, #60	; 0x3c
 8002d96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d9a:	54e2      	strb	r2, [r4, r3]
 8002d9c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8002da0:	4631      	mov	r1, r6
 8002da2:	68aa      	ldr	r2, [r5, #8]
 8002da4:	4620      	mov	r0, r4
 8002da6:	f001 fd69 	bl	800487c <d_print_comp>
 8002daa:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8002dae:	2b3e      	cmp	r3, #62	; 0x3e
 8002db0:	f001 830b 	beq.w	80043ca <d_print_comp.part.10+0x207a>
 8002db4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002db8:	2bff      	cmp	r3, #255	; 0xff
 8002dba:	f001 8201 	beq.w	80041c0 <d_print_comp.part.10+0x1e70>
 8002dbe:	1c59      	adds	r1, r3, #1
 8002dc0:	223e      	movs	r2, #62	; 0x3e
 8002dc2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002dc6:	54e2      	strb	r2, [r4, r3]
 8002dc8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8002dcc:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8002dd0:	f7ff bb32 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8002dda:	f7ff bb2d 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8002dde:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002de2:	f898 3000 	ldrb.w	r3, [r8]
 8002de6:	2b37      	cmp	r3, #55	; 0x37
 8002de8:	f000 875d 	beq.w	8003ca6 <d_print_comp.part.10+0x1956>
 8002dec:	2301      	movs	r3, #1
 8002dee:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8002df2:	f7ff bb21 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8002df6:	6857      	ldr	r7, [r2, #4]
 8002df8:	6895      	ldr	r5, [r2, #8]
 8002dfa:	783b      	ldrb	r3, [r7, #0]
 8002dfc:	2b31      	cmp	r3, #49	; 0x31
 8002dfe:	f001 8003 	beq.w	8003e08 <d_print_comp.part.10+0x1ab8>
 8002e02:	2b33      	cmp	r3, #51	; 0x33
 8002e04:	f001 8046 	beq.w	8003e94 <d_print_comp.part.10+0x1b44>
 8002e08:	463a      	mov	r2, r7
 8002e0a:	4631      	mov	r1, r6
 8002e0c:	f002 fb98 	bl	8005540 <d_print_expr_op>
 8002e10:	4620      	mov	r0, r4
 8002e12:	4631      	mov	r1, r6
 8002e14:	462a      	mov	r2, r5
 8002e16:	f002 fbcd 	bl	80055b4 <d_print_subexpr>
 8002e1a:	f7ff bb0d 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8002e1e:	4631      	mov	r1, r6
 8002e20:	6852      	ldr	r2, [r2, #4]
 8002e22:	f002 fb8d 	bl	8005540 <d_print_expr_op>
 8002e26:	f7ff bb07 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8002e2a:	6857      	ldr	r7, [r2, #4]
 8002e2c:	2f00      	cmp	r7, #0
 8002e2e:	f040 86d4 	bne.w	8003bda <d_print_comp.part.10+0x188a>
 8002e32:	4d50      	ldr	r5, [pc, #320]	; (8002f74 <d_print_comp.part.10+0xc24>)
 8002e34:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002e38:	f105 0804 	add.w	r8, r5, #4
 8002e3c:	e009      	b.n	8002e52 <d_print_comp.part.10+0xb02>
 8002e3e:	460b      	mov	r3, r1
 8002e40:	3101      	adds	r1, #1
 8002e42:	4545      	cmp	r5, r8
 8002e44:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e48:	54e6      	strb	r6, [r4, r3]
 8002e4a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002e4e:	f43f aaf3 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 8002e52:	29ff      	cmp	r1, #255	; 0xff
 8002e54:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002e58:	d1f1      	bne.n	8002e3e <d_print_comp.part.10+0xaee>
 8002e5a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e5e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8002e62:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e66:	4620      	mov	r0, r4
 8002e68:	4798      	blx	r3
 8002e6a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002e6e:	3301      	adds	r3, #1
 8002e70:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002e74:	2101      	movs	r1, #1
 8002e76:	2300      	movs	r3, #0
 8002e78:	e7e3      	b.n	8002e42 <d_print_comp.part.10+0xaf2>
 8002e7a:	4f3f      	ldr	r7, [pc, #252]	; (8002f78 <d_print_comp.part.10+0xc28>)
 8002e7c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002e80:	f107 0a0a 	add.w	sl, r7, #10
 8002e84:	f04f 0900 	mov.w	r9, #0
 8002e88:	e00a      	b.n	8002ea0 <d_print_comp.part.10+0xb50>
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	3101      	adds	r1, #1
 8002e8e:	4557      	cmp	r7, sl
 8002e90:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e94:	f804 8003 	strb.w	r8, [r4, r3]
 8002e98:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8002e9c:	f000 85e8 	beq.w	8003a70 <d_print_comp.part.10+0x1720>
 8002ea0:	29ff      	cmp	r1, #255	; 0xff
 8002ea2:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8002ea6:	d1f0      	bne.n	8002e8a <d_print_comp.part.10+0xb3a>
 8002ea8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002eac:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002eb0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	4798      	blx	r3
 8002eb8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e7e2      	b.n	8002e8e <d_print_comp.part.10+0xb3e>
 8002ec8:	6852      	ldr	r2, [r2, #4]
 8002eca:	492c      	ldr	r1, [pc, #176]	; (8002f7c <d_print_comp.part.10+0xc2c>)
 8002ecc:	a806      	add	r0, sp, #24
 8002ece:	f003 fdab 	bl	8006a28 <siprintf>
 8002ed2:	a806      	add	r0, sp, #24
 8002ed4:	f00a fb46 	bl	800d564 <strlen>
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	f43f aaad 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 8002ede:	f10d 0517 	add.w	r5, sp, #23
 8002ee2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002ee6:	182f      	adds	r7, r5, r0
 8002ee8:	f04f 0800 	mov.w	r8, #0
 8002eec:	e009      	b.n	8002f02 <d_print_comp.part.10+0xbb2>
 8002eee:	460b      	mov	r3, r1
 8002ef0:	3101      	adds	r1, #1
 8002ef2:	42bd      	cmp	r5, r7
 8002ef4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002ef8:	54e6      	strb	r6, [r4, r3]
 8002efa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002efe:	f43f aa9b 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 8002f02:	29ff      	cmp	r1, #255	; 0xff
 8002f04:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002f08:	d1f1      	bne.n	8002eee <d_print_comp.part.10+0xb9e>
 8002f0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f0e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002f12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f16:	4620      	mov	r0, r4
 8002f18:	4798      	blx	r3
 8002f1a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002f24:	2101      	movs	r1, #1
 8002f26:	2300      	movs	r3, #0
 8002f28:	e7e3      	b.n	8002ef2 <d_print_comp.part.10+0xba2>
 8002f2a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f2e:	7915      	ldrb	r5, [r2, #4]
 8002f30:	29ff      	cmp	r1, #255	; 0xff
 8002f32:	f001 80ae 	beq.w	8004092 <d_print_comp.part.10+0x1d42>
 8002f36:	1c4b      	adds	r3, r1, #1
 8002f38:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f3c:	5465      	strb	r5, [r4, r1]
 8002f3e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002f42:	f7ff ba79 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8002f46:	4631      	mov	r1, r6
 8002f48:	6852      	ldr	r2, [r2, #4]
 8002f4a:	f001 fc97 	bl	800487c <d_print_comp>
 8002f4e:	4620      	mov	r0, r4
 8002f50:	4631      	mov	r1, r6
 8002f52:	68aa      	ldr	r2, [r5, #8]
 8002f54:	f001 fc92 	bl	800487c <d_print_comp>
 8002f58:	f7ff ba6e 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8002f5c:	4f08      	ldr	r7, [pc, #32]	; (8002f80 <d_print_comp.part.10+0xc30>)
 8002f5e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f62:	f107 0a0e 	add.w	sl, r7, #14
 8002f66:	f04f 0900 	mov.w	r9, #0
 8002f6a:	e01a      	b.n	8002fa2 <d_print_comp.part.10+0xc52>
 8002f6c:	0800eca7 	.word	0x0800eca7
 8002f70:	0800edbb 	.word	0x0800edbb
 8002f74:	0800ed4b 	.word	0x0800ed4b
 8002f78:	0800ed3b 	.word	0x0800ed3b
 8002f7c:	0800eb68 	.word	0x0800eb68
 8002f80:	0800ed2b 	.word	0x0800ed2b
 8002f84:	0800ecdd 	.word	0x0800ecdd
 8002f88:	0800ecdb 	.word	0x0800ecdb
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	3101      	adds	r1, #1
 8002f90:	4557      	cmp	r7, sl
 8002f92:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f96:	f804 8003 	strb.w	r8, [r4, r3]
 8002f9a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8002f9e:	f000 8560 	beq.w	8003a62 <d_print_comp.part.10+0x1712>
 8002fa2:	29ff      	cmp	r1, #255	; 0xff
 8002fa4:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8002fa8:	d1f0      	bne.n	8002f8c <d_print_comp.part.10+0xc3c>
 8002faa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002fb2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	4798      	blx	r3
 8002fba:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e7e2      	b.n	8002f90 <d_print_comp.part.10+0xc40>
 8002fca:	6852      	ldr	r2, [r2, #4]
 8002fcc:	7811      	ldrb	r1, [r2, #0]
 8002fce:	2927      	cmp	r1, #39	; 0x27
 8002fd0:	f040 85b4 	bne.w	8003b3c <d_print_comp.part.10+0x17ec>
 8002fd4:	6852      	ldr	r2, [r2, #4]
 8002fd6:	7c17      	ldrb	r7, [r2, #16]
 8002fd8:	b15f      	cbz	r7, 8002ff2 <d_print_comp.part.10+0xca2>
 8002fda:	2f06      	cmp	r7, #6
 8002fdc:	f241 8178 	bls.w	80042d0 <d_print_comp.part.10+0x1f80>
 8002fe0:	2f07      	cmp	r7, #7
 8002fe2:	d106      	bne.n	8002ff2 <d_print_comp.part.10+0xca2>
 8002fe4:	68aa      	ldr	r2, [r5, #8]
 8002fe6:	7811      	ldrb	r1, [r2, #0]
 8002fe8:	b919      	cbnz	r1, 8002ff2 <d_print_comp.part.10+0xca2>
 8002fea:	6891      	ldr	r1, [r2, #8]
 8002fec:	2901      	cmp	r1, #1
 8002fee:	f001 83ad 	beq.w	800474c <d_print_comp.part.10+0x23fc>
 8002ff2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002ff6:	29ff      	cmp	r1, #255	; 0xff
 8002ff8:	f001 8150 	beq.w	800429c <d_print_comp.part.10+0x1f4c>
 8002ffc:	1c4a      	adds	r2, r1, #1
 8002ffe:	2328      	movs	r3, #40	; 0x28
 8003000:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003004:	5463      	strb	r3, [r4, r1]
 8003006:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800300a:	686a      	ldr	r2, [r5, #4]
 800300c:	4620      	mov	r0, r4
 800300e:	4631      	mov	r1, r6
 8003010:	f001 fc34 	bl	800487c <d_print_comp>
 8003014:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003018:	2bff      	cmp	r3, #255	; 0xff
 800301a:	f001 811c 	beq.w	8004256 <d_print_comp.part.10+0x1f06>
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	2229      	movs	r2, #41	; 0x29
 8003022:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003026:	54e2      	strb	r2, [r4, r3]
 8003028:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800302c:	782b      	ldrb	r3, [r5, #0]
 800302e:	2b3c      	cmp	r3, #60	; 0x3c
 8003030:	f001 8206 	beq.w	8004440 <d_print_comp.part.10+0x20f0>
 8003034:	2f08      	cmp	r7, #8
 8003036:	f001 81e4 	beq.w	8004402 <d_print_comp.part.10+0x20b2>
 800303a:	4620      	mov	r0, r4
 800303c:	4631      	mov	r1, r6
 800303e:	68aa      	ldr	r2, [r5, #8]
 8003040:	f001 fc1c 	bl	800487c <d_print_comp>
 8003044:	f7ff b9f8 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003048:	2301      	movs	r3, #1
 800304a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800304e:	f7ff b9f3 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003052:	6893      	ldr	r3, [r2, #8]
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	2a39      	cmp	r2, #57	; 0x39
 8003058:	f47f aec8 	bne.w	8002dec <d_print_comp.part.10+0xa9c>
 800305c:	689f      	ldr	r7, [r3, #8]
 800305e:	783a      	ldrb	r2, [r7, #0]
 8003060:	2a3a      	cmp	r2, #58	; 0x3a
 8003062:	f47f aec3 	bne.w	8002dec <d_print_comp.part.10+0xa9c>
 8003066:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800306a:	49ba      	ldr	r1, [pc, #744]	; (8003354 <d_print_comp.part.10+0x1004>)
 800306c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003070:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8003074:	6810      	ldr	r0, [r2, #0]
 8003076:	f8d7 9004 	ldr.w	r9, [r7, #4]
 800307a:	68bd      	ldr	r5, [r7, #8]
 800307c:	f002 fc66 	bl	800594c <strcmp>
 8003080:	2800      	cmp	r0, #0
 8003082:	f001 8290 	beq.w	80045a6 <d_print_comp.part.10+0x2256>
 8003086:	4620      	mov	r0, r4
 8003088:	49b3      	ldr	r1, [pc, #716]	; (8003358 <d_print_comp.part.10+0x1008>)
 800308a:	f7ff f92d 	bl	80022e8 <d_append_string>
 800308e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003092:	b143      	cbz	r3, 80030a6 <d_print_comp.part.10+0xd56>
 8003094:	4620      	mov	r0, r4
 8003096:	4631      	mov	r1, r6
 8003098:	4642      	mov	r2, r8
 800309a:	f002 fa8b 	bl	80055b4 <d_print_subexpr>
 800309e:	4620      	mov	r0, r4
 80030a0:	2120      	movs	r1, #32
 80030a2:	f7fd fa5b 	bl	800055c <d_append_char>
 80030a6:	464a      	mov	r2, r9
 80030a8:	4620      	mov	r0, r4
 80030aa:	4631      	mov	r1, r6
 80030ac:	f001 fbe6 	bl	800487c <d_print_comp>
 80030b0:	2d00      	cmp	r5, #0
 80030b2:	f43f a9c1 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 80030b6:	4620      	mov	r0, r4
 80030b8:	4631      	mov	r1, r6
 80030ba:	462a      	mov	r2, r5
 80030bc:	f002 fa7a 	bl	80055b4 <d_print_subexpr>
 80030c0:	f7ff b9ba 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80030c4:	6852      	ldr	r2, [r2, #4]
 80030c6:	b112      	cbz	r2, 80030ce <d_print_comp.part.10+0xd7e>
 80030c8:	4631      	mov	r1, r6
 80030ca:	f001 fbd7 	bl	800487c <d_print_comp>
 80030ce:	68ab      	ldr	r3, [r5, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f43f a9b1 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 80030d6:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80030da:	2ffd      	cmp	r7, #253	; 0xfd
 80030dc:	f200 86f9 	bhi.w	8003ed2 <d_print_comp.part.10+0x1b82>
 80030e0:	f8df 8288 	ldr.w	r8, [pc, #648]	; 800336c <d_print_comp.part.10+0x101c>
 80030e4:	f04f 0a00 	mov.w	sl, #0
 80030e8:	f108 0b02 	add.w	fp, r8, #2
 80030ec:	4639      	mov	r1, r7
 80030ee:	e009      	b.n	8003104 <d_print_comp.part.10+0xdb4>
 80030f0:	460b      	mov	r3, r1
 80030f2:	3101      	adds	r1, #1
 80030f4:	45d8      	cmp	r8, fp
 80030f6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80030fa:	54e7      	strb	r7, [r4, r3]
 80030fc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003100:	f000 84fd 	beq.w	8003afe <d_print_comp.part.10+0x17ae>
 8003104:	29ff      	cmp	r1, #255	; 0xff
 8003106:	f818 7f01 	ldrb.w	r7, [r8, #1]!
 800310a:	d1f1      	bne.n	80030f0 <d_print_comp.part.10+0xda0>
 800310c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003110:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003114:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003118:	4620      	mov	r0, r4
 800311a:	4798      	blx	r3
 800311c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003120:	3301      	adds	r3, #1
 8003122:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003126:	2101      	movs	r1, #1
 8003128:	2300      	movs	r3, #0
 800312a:	e7e3      	b.n	80030f4 <d_print_comp.part.10+0xda4>
 800312c:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 8629 	bne.w	8003d88 <d_print_comp.part.10+0x1a38>
 8003136:	686a      	ldr	r2, [r5, #4]
 8003138:	4988      	ldr	r1, [pc, #544]	; (800335c <d_print_comp.part.10+0x100c>)
 800313a:	6853      	ldr	r3, [r2, #4]
 800313c:	428b      	cmp	r3, r1
 800313e:	f000 85fb 	beq.w	8003d38 <d_print_comp.part.10+0x19e8>
 8003142:	4631      	mov	r1, r6
 8003144:	4620      	mov	r0, r4
 8003146:	f001 fb99 	bl	800487c <d_print_comp>
 800314a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800314e:	2bff      	cmp	r3, #255	; 0xff
 8003150:	f001 80f4 	beq.w	800433c <d_print_comp.part.10+0x1fec>
 8003154:	1c59      	adds	r1, r3, #1
 8003156:	2220      	movs	r2, #32
 8003158:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800315c:	54e2      	strb	r2, [r4, r3]
 800315e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003162:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 84eb 	beq.w	8003b42 <d_print_comp.part.10+0x17f2>
 800316c:	4d7c      	ldr	r5, [pc, #496]	; (8003360 <d_print_comp.part.10+0x1010>)
 800316e:	f04f 0800 	mov.w	r8, #0
 8003172:	1daf      	adds	r7, r5, #6
 8003174:	e009      	b.n	800318a <d_print_comp.part.10+0xe3a>
 8003176:	460b      	mov	r3, r1
 8003178:	3101      	adds	r1, #1
 800317a:	42bd      	cmp	r5, r7
 800317c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003180:	54e6      	strb	r6, [r4, r3]
 8003182:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003186:	f43f a957 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 800318a:	29ff      	cmp	r1, #255	; 0xff
 800318c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003190:	d1f1      	bne.n	8003176 <d_print_comp.part.10+0xe26>
 8003192:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003196:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800319a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800319e:	4620      	mov	r0, r4
 80031a0:	4798      	blx	r3
 80031a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80031a6:	3301      	adds	r3, #1
 80031a8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80031ac:	2101      	movs	r1, #1
 80031ae:	2300      	movs	r3, #0
 80031b0:	e7e3      	b.n	800317a <d_print_comp.part.10+0xe2a>
 80031b2:	ab16      	add	r3, sp, #88	; 0x58
 80031b4:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 80031b8:	f843 2d40 	str.w	r2, [r3, #-64]!
 80031bc:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80031c0:	68aa      	ldr	r2, [r5, #8]
 80031c2:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80031c6:	9309      	str	r3, [sp, #36]	; 0x24
 80031c8:	2700      	movs	r7, #0
 80031ca:	4631      	mov	r1, r6
 80031cc:	9507      	str	r5, [sp, #28]
 80031ce:	9708      	str	r7, [sp, #32]
 80031d0:	f001 fb54 	bl	800487c <d_print_comp>
 80031d4:	9b08      	ldr	r3, [sp, #32]
 80031d6:	b923      	cbnz	r3, 80031e2 <d_print_comp.part.10+0xe92>
 80031d8:	4631      	mov	r1, r6
 80031da:	462a      	mov	r2, r5
 80031dc:	4620      	mov	r0, r4
 80031de:	f001 fb59 	bl	8004894 <d_print_mod>
 80031e2:	9b06      	ldr	r3, [sp, #24]
 80031e4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80031e8:	f7ff b926 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80031ec:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
 80031f0:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80031f4:	f8cd b008 	str.w	fp, [sp, #8]
 80031f8:	a916      	add	r1, sp, #88	; 0x58
 80031fa:	2200      	movs	r2, #0
 80031fc:	f841 bd40 	str.w	fp, [r1, #-64]!
 8003200:	9309      	str	r3, [sp, #36]	; 0x24
 8003202:	9b02      	ldr	r3, [sp, #8]
 8003204:	9101      	str	r1, [sp, #4]
 8003206:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
 800320a:	9507      	str	r5, [sp, #28]
 800320c:	9208      	str	r2, [sp, #32]
 800320e:	2b00      	cmp	r3, #0
 8003210:	f001 831d 	beq.w	800484e <d_print_comp.part.10+0x24fe>
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	3b19      	subs	r3, #25
 800321a:	2b02      	cmp	r3, #2
 800321c:	f201 8317 	bhi.w	800484e <d_print_comp.part.10+0x24fe>
 8003220:	46ab      	mov	fp, r5
 8003222:	f04f 0801 	mov.w	r8, #1
 8003226:	9f02      	ldr	r7, [sp, #8]
 8003228:	9603      	str	r6, [sp, #12]
 800322a:	468a      	mov	sl, r1
 800322c:	460d      	mov	r5, r1
 800322e:	e004      	b.n	800323a <d_print_comp.part.10+0xeea>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	3b19      	subs	r3, #25
 8003236:	2b02      	cmp	r3, #2
 8003238:	d81d      	bhi.n	8003276 <d_print_comp.part.10+0xf26>
 800323a:	ea4f 1c08 	mov.w	ip, r8, lsl #4
 800323e:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	44e1      	add	r9, ip
 8003246:	f1a9 0640 	sub.w	r6, r9, #64	; 0x40
 800324a:	b98b      	cbnz	r3, 8003270 <d_print_comp.part.10+0xf20>
 800324c:	f1b8 0f03 	cmp.w	r8, #3
 8003250:	f200 87dc 	bhi.w	800420c <d_print_comp.part.10+0x1ebc>
 8003254:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8003258:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800325c:	f849 5c40 	str.w	r5, [r9, #-64]
 8003260:	2101      	movs	r1, #1
 8003262:	eb0a 050c 	add.w	r5, sl, ip
 8003266:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 800326a:	f108 0801 	add.w	r8, r8, #1
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	683f      	ldr	r7, [r7, #0]
 8003272:	2f00      	cmp	r7, #0
 8003274:	d1dc      	bne.n	8003230 <d_print_comp.part.10+0xee0>
 8003276:	9e03      	ldr	r6, [sp, #12]
 8003278:	f8db 2008 	ldr.w	r2, [fp, #8]
 800327c:	4620      	mov	r0, r4
 800327e:	4631      	mov	r1, r6
 8003280:	f001 fafc 	bl	800487c <d_print_comp>
 8003284:	9b08      	ldr	r3, [sp, #32]
 8003286:	9a02      	ldr	r2, [sp, #8]
 8003288:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800328c:	465d      	mov	r5, fp
 800328e:	2b00      	cmp	r3, #0
 8003290:	f47f a8d2 	bne.w	8002438 <d_print_comp.part.10+0xe8>
 8003294:	f1b8 0f01 	cmp.w	r8, #1
 8003298:	f001 8139 	beq.w	800450e <d_print_comp.part.10+0x21be>
 800329c:	9b01      	ldr	r3, [sp, #4]
 800329e:	eb03 1708 	add.w	r7, r3, r8, lsl #4
 80032a2:	f857 2c0c 	ldr.w	r2, [r7, #-12]
 80032a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80032aa:	4620      	mov	r0, r4
 80032ac:	4631      	mov	r1, r6
 80032ae:	f001 faf1 	bl	8004894 <d_print_mod>
 80032b2:	f1b8 0f01 	cmp.w	r8, #1
 80032b6:	f1a7 0710 	sub.w	r7, r7, #16
 80032ba:	d1f2      	bne.n	80032a2 <d_print_comp.part.10+0xf52>
 80032bc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80032c0:	4620      	mov	r0, r4
 80032c2:	4631      	mov	r1, r6
 80032c4:	1d2a      	adds	r2, r5, #4
 80032c6:	f001 febb 	bl	8005040 <d_print_array_type.isra.9>
 80032ca:	f7ff b8b5 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80032ce:	06b3      	lsls	r3, r6, #26
 80032d0:	f100 8548 	bmi.w	8003d64 <d_print_comp.part.10+0x1a14>
 80032d4:	6853      	ldr	r3, [r2, #4]
 80032d6:	b11b      	cbz	r3, 80032e0 <d_print_comp.part.10+0xf90>
 80032d8:	f016 0340 	ands.w	r3, r6, #64	; 0x40
 80032dc:	f000 879b 	beq.w	8004216 <d_print_comp.part.10+0x1ec6>
 80032e0:	f026 0660 	bic.w	r6, r6, #96	; 0x60
 80032e4:	4620      	mov	r0, r4
 80032e6:	4631      	mov	r1, r6
 80032e8:	f105 0208 	add.w	r2, r5, #8
 80032ec:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80032f0:	f001 ff76 	bl	80051e0 <d_print_function_type.isra.11>
 80032f4:	f7ff b8a0 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80032f8:	4e1a      	ldr	r6, [pc, #104]	; (8003364 <d_print_comp.part.10+0x1014>)
 80032fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80032fe:	f106 090e 	add.w	r9, r6, #14
 8003302:	f04f 0800 	mov.w	r8, #0
 8003306:	e009      	b.n	800331c <d_print_comp.part.10+0xfcc>
 8003308:	460b      	mov	r3, r1
 800330a:	3101      	adds	r1, #1
 800330c:	454e      	cmp	r6, r9
 800330e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003312:	54e7      	strb	r7, [r4, r3]
 8003314:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003318:	f000 82f7 	beq.w	800390a <d_print_comp.part.10+0x15ba>
 800331c:	29ff      	cmp	r1, #255	; 0xff
 800331e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003322:	d1f1      	bne.n	8003308 <d_print_comp.part.10+0xfb8>
 8003324:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003328:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800332c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003330:	4620      	mov	r0, r4
 8003332:	4798      	blx	r3
 8003334:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003338:	3301      	adds	r3, #1
 800333a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800333e:	2101      	movs	r1, #1
 8003340:	2300      	movs	r3, #0
 8003342:	e7e3      	b.n	800330c <d_print_comp.part.10+0xfbc>
 8003344:	4f08      	ldr	r7, [pc, #32]	; (8003368 <d_print_comp.part.10+0x1018>)
 8003346:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800334a:	f107 0a16 	add.w	sl, r7, #22
 800334e:	f04f 0900 	mov.w	r9, #0
 8003352:	e018      	b.n	8003386 <d_print_comp.part.10+0x1036>
 8003354:	0800eb48 	.word	0x0800eb48
 8003358:	0800ed08 	.word	0x0800ed08
 800335c:	0800e248 	.word	0x0800e248
 8003360:	0800eccb 	.word	0x0800eccb
 8003364:	0800edab 	.word	0x0800edab
 8003368:	0800ecab 	.word	0x0800ecab
 800336c:	0800ecdb 	.word	0x0800ecdb
 8003370:	460b      	mov	r3, r1
 8003372:	3101      	adds	r1, #1
 8003374:	4557      	cmp	r7, sl
 8003376:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800337a:	f804 8003 	strb.w	r8, [r4, r3]
 800337e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8003382:	f000 82bb 	beq.w	80038fc <d_print_comp.part.10+0x15ac>
 8003386:	29ff      	cmp	r1, #255	; 0xff
 8003388:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800338c:	d1f0      	bne.n	8003370 <d_print_comp.part.10+0x1020>
 800338e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003392:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003396:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800339a:	4620      	mov	r0, r4
 800339c:	4798      	blx	r3
 800339e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80033a2:	3301      	adds	r3, #1
 80033a4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80033a8:	2101      	movs	r1, #1
 80033aa:	2300      	movs	r3, #0
 80033ac:	e7e2      	b.n	8003374 <d_print_comp.part.10+0x1024>
 80033ae:	4fd0      	ldr	r7, [pc, #832]	; (80036f0 <d_print_comp.part.10+0x13a0>)
 80033b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80033b4:	f107 0a1c 	add.w	sl, r7, #28
 80033b8:	f04f 0900 	mov.w	r9, #0
 80033bc:	e00a      	b.n	80033d4 <d_print_comp.part.10+0x1084>
 80033be:	460b      	mov	r3, r1
 80033c0:	3101      	adds	r1, #1
 80033c2:	4557      	cmp	r7, sl
 80033c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80033c8:	f804 8003 	strb.w	r8, [r4, r3]
 80033cc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80033d0:	f000 8361 	beq.w	8003a96 <d_print_comp.part.10+0x1746>
 80033d4:	29ff      	cmp	r1, #255	; 0xff
 80033d6:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80033da:	d1f0      	bne.n	80033be <d_print_comp.part.10+0x106e>
 80033dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033e0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80033e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033e8:	4620      	mov	r0, r4
 80033ea:	4798      	blx	r3
 80033ec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80033f0:	3301      	adds	r3, #1
 80033f2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80033f6:	2101      	movs	r1, #1
 80033f8:	2300      	movs	r3, #0
 80033fa:	e7e2      	b.n	80033c2 <d_print_comp.part.10+0x1072>
 80033fc:	4fbd      	ldr	r7, [pc, #756]	; (80036f4 <d_print_comp.part.10+0x13a4>)
 80033fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003402:	f107 0a08 	add.w	sl, r7, #8
 8003406:	f04f 0900 	mov.w	r9, #0
 800340a:	e00a      	b.n	8003422 <d_print_comp.part.10+0x10d2>
 800340c:	460b      	mov	r3, r1
 800340e:	3101      	adds	r1, #1
 8003410:	4557      	cmp	r7, sl
 8003412:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003416:	f804 8003 	strb.w	r8, [r4, r3]
 800341a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800341e:	f000 82b1 	beq.w	8003984 <d_print_comp.part.10+0x1634>
 8003422:	29ff      	cmp	r1, #255	; 0xff
 8003424:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8003428:	d1f0      	bne.n	800340c <d_print_comp.part.10+0x10bc>
 800342a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800342e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003432:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003436:	4620      	mov	r0, r4
 8003438:	4798      	blx	r3
 800343a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800343e:	3301      	adds	r3, #1
 8003440:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003444:	2101      	movs	r1, #1
 8003446:	2300      	movs	r3, #0
 8003448:	e7e2      	b.n	8003410 <d_print_comp.part.10+0x10c0>
 800344a:	4fab      	ldr	r7, [pc, #684]	; (80036f8 <d_print_comp.part.10+0x13a8>)
 800344c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003450:	f107 0a1d 	add.w	sl, r7, #29
 8003454:	f04f 0900 	mov.w	r9, #0
 8003458:	e00a      	b.n	8003470 <d_print_comp.part.10+0x1120>
 800345a:	460b      	mov	r3, r1
 800345c:	3101      	adds	r1, #1
 800345e:	4557      	cmp	r7, sl
 8003460:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003464:	f804 8003 	strb.w	r8, [r4, r3]
 8003468:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800346c:	f000 8340 	beq.w	8003af0 <d_print_comp.part.10+0x17a0>
 8003470:	29ff      	cmp	r1, #255	; 0xff
 8003472:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8003476:	d1f0      	bne.n	800345a <d_print_comp.part.10+0x110a>
 8003478:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800347c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003480:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003484:	4620      	mov	r0, r4
 8003486:	4798      	blx	r3
 8003488:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800348c:	3301      	adds	r3, #1
 800348e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003492:	2101      	movs	r1, #1
 8003494:	2300      	movs	r3, #0
 8003496:	e7e2      	b.n	800345e <d_print_comp.part.10+0x110e>
 8003498:	4f98      	ldr	r7, [pc, #608]	; (80036fc <d_print_comp.part.10+0x13ac>)
 800349a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800349e:	f107 0a09 	add.w	sl, r7, #9
 80034a2:	f04f 0900 	mov.w	r9, #0
 80034a6:	e00a      	b.n	80034be <d_print_comp.part.10+0x116e>
 80034a8:	460b      	mov	r3, r1
 80034aa:	3101      	adds	r1, #1
 80034ac:	4557      	cmp	r7, sl
 80034ae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80034b2:	f804 8003 	strb.w	r8, [r4, r3]
 80034b6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80034ba:	f000 81d4 	beq.w	8003866 <d_print_comp.part.10+0x1516>
 80034be:	29ff      	cmp	r1, #255	; 0xff
 80034c0:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80034c4:	d1f0      	bne.n	80034a8 <d_print_comp.part.10+0x1158>
 80034c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034ca:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034d2:	4620      	mov	r0, r4
 80034d4:	4798      	blx	r3
 80034d6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80034da:	3301      	adds	r3, #1
 80034dc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80034e0:	2101      	movs	r1, #1
 80034e2:	2300      	movs	r3, #0
 80034e4:	e7e2      	b.n	80034ac <d_print_comp.part.10+0x115c>
 80034e6:	f016 0604 	ands.w	r6, r6, #4
 80034ea:	6853      	ldr	r3, [r2, #4]
 80034ec:	f040 834b 	bne.w	8003b86 <d_print_comp.part.10+0x1836>
 80034f0:	685f      	ldr	r7, [r3, #4]
 80034f2:	f8d3 9000 	ldr.w	r9, [r3]
 80034f6:	2f00      	cmp	r7, #0
 80034f8:	f43e af9e 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 80034fc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003500:	46b0      	mov	r8, r6
 8003502:	e00a      	b.n	800351a <d_print_comp.part.10+0x11ca>
 8003504:	460b      	mov	r3, r1
 8003506:	3101      	adds	r1, #1
 8003508:	3601      	adds	r6, #1
 800350a:	42b7      	cmp	r7, r6
 800350c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003510:	54e5      	strb	r5, [r4, r3]
 8003512:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003516:	f43e af8f 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 800351a:	29ff      	cmp	r1, #255	; 0xff
 800351c:	f819 5006 	ldrb.w	r5, [r9, r6]
 8003520:	d1f0      	bne.n	8003504 <d_print_comp.part.10+0x11b4>
 8003522:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003526:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800352a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800352e:	4620      	mov	r0, r4
 8003530:	4798      	blx	r3
 8003532:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003536:	3301      	adds	r3, #1
 8003538:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800353c:	2101      	movs	r1, #1
 800353e:	2300      	movs	r3, #0
 8003540:	e7e2      	b.n	8003508 <d_print_comp.part.10+0x11b8>
 8003542:	6850      	ldr	r0, [r2, #4]
 8003544:	7803      	ldrb	r3, [r0, #0]
 8003546:	2b05      	cmp	r3, #5
 8003548:	f000 870b 	beq.w	8004362 <d_print_comp.part.10+0x2012>
 800354c:	2b23      	cmp	r3, #35	; 0x23
 800354e:	f000 83a5 	beq.w	8003c9c <d_print_comp.part.10+0x194c>
 8003552:	782a      	ldrb	r2, [r5, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	f000 83a1 	beq.w	8003c9c <d_print_comp.part.10+0x194c>
 800355a:	2b24      	cmp	r3, #36	; 0x24
 800355c:	f47e af50 	bne.w	8002400 <d_print_comp.part.10+0xb0>
 8003560:	ab16      	add	r3, sp, #88	; 0x58
 8003562:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8003566:	6842      	ldr	r2, [r0, #4]
 8003568:	f843 1d40 	str.w	r1, [r3, #-64]!
 800356c:	2000      	movs	r0, #0
 800356e:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8003572:	9507      	str	r5, [sp, #28]
 8003574:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003578:	9008      	str	r0, [sp, #32]
 800357a:	9109      	str	r1, [sp, #36]	; 0x24
 800357c:	2a00      	cmp	r2, #0
 800357e:	f47e af4d 	bne.w	800241c <d_print_comp.part.10+0xcc>
 8003582:	f7fe bf4a 	b.w	800241a <d_print_comp.part.10+0xca>
 8003586:	4631      	mov	r1, r6
 8003588:	6852      	ldr	r2, [r2, #4]
 800358a:	f001 f977 	bl	800487c <d_print_comp>
 800358e:	f7fe bf53 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003592:	6857      	ldr	r7, [r2, #4]
 8003594:	4d5a      	ldr	r5, [pc, #360]	; (8003700 <d_print_comp.part.10+0x13b0>)
 8003596:	f8d7 9008 	ldr.w	r9, [r7, #8]
 800359a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800359e:	f105 0a08 	add.w	sl, r5, #8
 80035a2:	f04f 0800 	mov.w	r8, #0
 80035a6:	e009      	b.n	80035bc <d_print_comp.part.10+0x126c>
 80035a8:	460b      	mov	r3, r1
 80035aa:	3101      	adds	r1, #1
 80035ac:	4555      	cmp	r5, sl
 80035ae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80035b2:	54e6      	strb	r6, [r4, r3]
 80035b4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80035b8:	f000 8163 	beq.w	8003882 <d_print_comp.part.10+0x1532>
 80035bc:	29ff      	cmp	r1, #255	; 0xff
 80035be:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80035c2:	d1f1      	bne.n	80035a8 <d_print_comp.part.10+0x1258>
 80035c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035c8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80035cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035d0:	4620      	mov	r0, r4
 80035d2:	4798      	blx	r3
 80035d4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80035d8:	3301      	adds	r3, #1
 80035da:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80035de:	2101      	movs	r1, #1
 80035e0:	2300      	movs	r3, #0
 80035e2:	e7e3      	b.n	80035ac <d_print_comp.part.10+0x125c>
 80035e4:	4f45      	ldr	r7, [pc, #276]	; (80036fc <d_print_comp.part.10+0x13ac>)
 80035e6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035ea:	f107 0a09 	add.w	sl, r7, #9
 80035ee:	f04f 0900 	mov.w	r9, #0
 80035f2:	e00a      	b.n	800360a <d_print_comp.part.10+0x12ba>
 80035f4:	460b      	mov	r3, r1
 80035f6:	3101      	adds	r1, #1
 80035f8:	4557      	cmp	r7, sl
 80035fa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80035fe:	f804 8003 	strb.w	r8, [r4, r3]
 8003602:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8003606:	f000 8135 	beq.w	8003874 <d_print_comp.part.10+0x1524>
 800360a:	29ff      	cmp	r1, #255	; 0xff
 800360c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8003610:	d1f0      	bne.n	80035f4 <d_print_comp.part.10+0x12a4>
 8003612:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003616:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800361a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800361e:	4620      	mov	r0, r4
 8003620:	4798      	blx	r3
 8003622:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003626:	3301      	adds	r3, #1
 8003628:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800362c:	2101      	movs	r1, #1
 800362e:	2300      	movs	r3, #0
 8003630:	e7e2      	b.n	80035f8 <d_print_comp.part.10+0x12a8>
 8003632:	6852      	ldr	r2, [r2, #4]
 8003634:	68af      	ldr	r7, [r5, #8]
 8003636:	b112      	cbz	r2, 800363e <d_print_comp.part.10+0x12ee>
 8003638:	4631      	mov	r1, r6
 800363a:	f001 f91f 	bl	800487c <d_print_comp>
 800363e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003642:	2bff      	cmp	r3, #255	; 0xff
 8003644:	f000 8484 	beq.w	8003f50 <d_print_comp.part.10+0x1c00>
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	257b      	movs	r5, #123	; 0x7b
 800364c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003650:	4631      	mov	r1, r6
 8003652:	54e5      	strb	r5, [r4, r3]
 8003654:	463a      	mov	r2, r7
 8003656:	4620      	mov	r0, r4
 8003658:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800365c:	f001 f90e 	bl	800487c <d_print_comp>
 8003660:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003664:	29ff      	cmp	r1, #255	; 0xff
 8003666:	f000 8461 	beq.w	8003f2c <d_print_comp.part.10+0x1bdc>
 800366a:	1c4a      	adds	r2, r1, #1
 800366c:	237d      	movs	r3, #125	; 0x7d
 800366e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003672:	5463      	strb	r3, [r4, r1]
 8003674:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003678:	f7fe bede 	b.w	8002438 <d_print_comp.part.10+0xe8>
 800367c:	2301      	movs	r3, #1
 800367e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003682:	f7fe bed9 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003686:	687f      	ldr	r7, [r7, #4]
 8003688:	2f00      	cmp	r7, #0
 800368a:	f000 8699 	beq.w	80043c0 <d_print_comp.part.10+0x2070>
 800368e:	f1b8 0f04 	cmp.w	r8, #4
 8003692:	f47f a999 	bne.w	80029c8 <d_print_comp.part.10+0x678>
 8003696:	2301      	movs	r3, #1
 8003698:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800369c:	f7fe becc 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80036a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80036a4:	29ff      	cmp	r1, #255	; 0xff
 80036a6:	f000 870e 	beq.w	80044c6 <d_print_comp.part.10+0x2176>
 80036aa:	1c4a      	adds	r2, r1, #1
 80036ac:	232e      	movs	r3, #46	; 0x2e
 80036ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80036b2:	5463      	strb	r3, [r4, r1]
 80036b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80036b8:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80036bc:	f898 3000 	ldrb.w	r3, [r8]
 80036c0:	2b45      	cmp	r3, #69	; 0x45
 80036c2:	f000 84c1 	beq.w	8004048 <d_print_comp.part.10+0x1cf8>
 80036c6:	4620      	mov	r0, r4
 80036c8:	4631      	mov	r1, r6
 80036ca:	4642      	mov	r2, r8
 80036cc:	f001 f8d6 	bl	800487c <d_print_comp>
 80036d0:	f7fe beb2 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80036d4:	4620      	mov	r0, r4
 80036d6:	4631      	mov	r1, r6
 80036d8:	686a      	ldr	r2, [r5, #4]
 80036da:	f001 f8cf 	bl	800487c <d_print_comp>
 80036de:	f7fe beab 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80036e2:	4620      	mov	r0, r4
 80036e4:	4631      	mov	r1, r6
 80036e6:	686a      	ldr	r2, [r5, #4]
 80036e8:	f001 f8c8 	bl	800487c <d_print_comp>
 80036ec:	f7fe bea4 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80036f0:	0800ed7b 	.word	0x0800ed7b
 80036f4:	0800ed9b 	.word	0x0800ed9b
 80036f8:	0800ed5b 	.word	0x0800ed5b
 80036fc:	0800eceb 	.word	0x0800eceb
 8003700:	0800ecdf 	.word	0x0800ecdf
 8003704:	4fbd      	ldr	r7, [pc, #756]	; (80039fc <d_print_comp.part.10+0x16ac>)
 8003706:	68aa      	ldr	r2, [r5, #8]
 8003708:	4631      	mov	r1, r6
 800370a:	4620      	mov	r0, r4
 800370c:	f001 f8b6 	bl	800487c <d_print_comp>
 8003710:	f107 0a05 	add.w	sl, r7, #5
 8003714:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003718:	f04f 0900 	mov.w	r9, #0
 800371c:	e009      	b.n	8003732 <d_print_comp.part.10+0x13e2>
 800371e:	460b      	mov	r3, r1
 8003720:	3101      	adds	r1, #1
 8003722:	4557      	cmp	r7, sl
 8003724:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003728:	f804 8003 	strb.w	r8, [r4, r3]
 800372c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8003730:	d013      	beq.n	800375a <d_print_comp.part.10+0x140a>
 8003732:	29ff      	cmp	r1, #255	; 0xff
 8003734:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8003738:	d1f1      	bne.n	800371e <d_print_comp.part.10+0x13ce>
 800373a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800373e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003742:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003746:	4620      	mov	r0, r4
 8003748:	4798      	blx	r3
 800374a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800374e:	3301      	adds	r3, #1
 8003750:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003754:	2101      	movs	r1, #1
 8003756:	2300      	movs	r3, #0
 8003758:	e7e3      	b.n	8003722 <d_print_comp.part.10+0x13d2>
 800375a:	4620      	mov	r0, r4
 800375c:	4631      	mov	r1, r6
 800375e:	686a      	ldr	r2, [r5, #4]
 8003760:	f001 f88c 	bl	800487c <d_print_comp>
 8003764:	f7fe be68 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003768:	4620      	mov	r0, r4
 800376a:	4631      	mov	r1, r6
 800376c:	686a      	ldr	r2, [r5, #4]
 800376e:	f001 f885 	bl	800487c <d_print_comp>
 8003772:	f7fe be61 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003776:	4620      	mov	r0, r4
 8003778:	4631      	mov	r1, r6
 800377a:	686a      	ldr	r2, [r5, #4]
 800377c:	f001 f87e 	bl	800487c <d_print_comp>
 8003780:	f7fe be5a 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003784:	4620      	mov	r0, r4
 8003786:	4631      	mov	r1, r6
 8003788:	686a      	ldr	r2, [r5, #4]
 800378a:	f001 f877 	bl	800487c <d_print_comp>
 800378e:	f7fe be53 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003792:	4620      	mov	r0, r4
 8003794:	4631      	mov	r1, r6
 8003796:	686a      	ldr	r2, [r5, #4]
 8003798:	f001 f870 	bl	800487c <d_print_comp>
 800379c:	f7fe be4c 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80037a0:	4620      	mov	r0, r4
 80037a2:	4631      	mov	r1, r6
 80037a4:	686a      	ldr	r2, [r5, #4]
 80037a6:	f001 f869 	bl	800487c <d_print_comp>
 80037aa:	f7fe be45 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80037ae:	4f94      	ldr	r7, [pc, #592]	; (8003a00 <d_print_comp.part.10+0x16b0>)
 80037b0:	686a      	ldr	r2, [r5, #4]
 80037b2:	4631      	mov	r1, r6
 80037b4:	4620      	mov	r0, r4
 80037b6:	f001 f861 	bl	800487c <d_print_comp>
 80037ba:	f107 0a04 	add.w	sl, r7, #4
 80037be:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80037c2:	f04f 0900 	mov.w	r9, #0
 80037c6:	e009      	b.n	80037dc <d_print_comp.part.10+0x148c>
 80037c8:	460b      	mov	r3, r1
 80037ca:	3101      	adds	r1, #1
 80037cc:	4557      	cmp	r7, sl
 80037ce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80037d2:	f804 8003 	strb.w	r8, [r4, r3]
 80037d6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80037da:	d01a      	beq.n	8003812 <d_print_comp.part.10+0x14c2>
 80037dc:	29ff      	cmp	r1, #255	; 0xff
 80037de:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 80037e2:	d1f1      	bne.n	80037c8 <d_print_comp.part.10+0x1478>
 80037e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80037e8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80037ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80037f0:	4620      	mov	r0, r4
 80037f2:	4798      	blx	r3
 80037f4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80037f8:	3301      	adds	r3, #1
 80037fa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80037fe:	2101      	movs	r1, #1
 8003800:	2300      	movs	r3, #0
 8003802:	e7e3      	b.n	80037cc <d_print_comp.part.10+0x147c>
 8003804:	4620      	mov	r0, r4
 8003806:	4631      	mov	r1, r6
 8003808:	686a      	ldr	r2, [r5, #4]
 800380a:	f001 f837 	bl	800487c <d_print_comp>
 800380e:	f7fe be13 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003812:	4620      	mov	r0, r4
 8003814:	4631      	mov	r1, r6
 8003816:	68aa      	ldr	r2, [r5, #8]
 8003818:	f001 f830 	bl	800487c <d_print_comp>
 800381c:	f7fe be0c 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003820:	4620      	mov	r0, r4
 8003822:	4631      	mov	r1, r6
 8003824:	686a      	ldr	r2, [r5, #4]
 8003826:	f001 f829 	bl	800487c <d_print_comp>
 800382a:	f7fe be05 	b.w	8002438 <d_print_comp.part.10+0xe8>
 800382e:	4620      	mov	r0, r4
 8003830:	4631      	mov	r1, r6
 8003832:	686a      	ldr	r2, [r5, #4]
 8003834:	f001 f822 	bl	800487c <d_print_comp>
 8003838:	f7fe bdfe 	b.w	8002438 <d_print_comp.part.10+0xe8>
 800383c:	4620      	mov	r0, r4
 800383e:	4631      	mov	r1, r6
 8003840:	686a      	ldr	r2, [r5, #4]
 8003842:	f001 f81b 	bl	800487c <d_print_comp>
 8003846:	f7fe bdf7 	b.w	8002438 <d_print_comp.part.10+0xe8>
 800384a:	4620      	mov	r0, r4
 800384c:	4631      	mov	r1, r6
 800384e:	686a      	ldr	r2, [r5, #4]
 8003850:	f001 f814 	bl	800487c <d_print_comp>
 8003854:	f7fe bdf0 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003858:	4620      	mov	r0, r4
 800385a:	4631      	mov	r1, r6
 800385c:	686a      	ldr	r2, [r5, #4]
 800385e:	f001 f80d 	bl	800487c <d_print_comp>
 8003862:	f7fe bde9 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003866:	4620      	mov	r0, r4
 8003868:	4631      	mov	r1, r6
 800386a:	1d2a      	adds	r2, r5, #4
 800386c:	f001 fda4 	bl	80053b8 <d_print_cast.isra.12>
 8003870:	f7fe bde2 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003874:	4620      	mov	r0, r4
 8003876:	4631      	mov	r1, r6
 8003878:	68aa      	ldr	r2, [r5, #8]
 800387a:	f000 ffff 	bl	800487c <d_print_comp>
 800387e:	f7fe bddb 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003882:	687d      	ldr	r5, [r7, #4]
 8003884:	782b      	ldrb	r3, [r5, #0]
 8003886:	3b61      	subs	r3, #97	; 0x61
 8003888:	2b19      	cmp	r3, #25
 800388a:	f240 82a4 	bls.w	8003dd6 <d_print_comp.part.10+0x1a86>
 800388e:	eb05 0309 	add.w	r3, r5, r9
 8003892:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8003896:	2b20      	cmp	r3, #32
 8003898:	bf0c      	ite	eq
 800389a:	f109 37ff 	addeq.w	r7, r9, #4294967295
 800389e:	464f      	movne	r7, r9
 80038a0:	2f00      	cmp	r7, #0
 80038a2:	f43e adc9 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 80038a6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80038aa:	442f      	add	r7, r5
 80038ac:	f04f 0800 	mov.w	r8, #0
 80038b0:	e009      	b.n	80038c6 <d_print_comp.part.10+0x1576>
 80038b2:	460b      	mov	r3, r1
 80038b4:	3101      	adds	r1, #1
 80038b6:	42bd      	cmp	r5, r7
 80038b8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80038bc:	54e6      	strb	r6, [r4, r3]
 80038be:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80038c2:	f43e adb9 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 80038c6:	29ff      	cmp	r1, #255	; 0xff
 80038c8:	f815 6b01 	ldrb.w	r6, [r5], #1
 80038cc:	d1f1      	bne.n	80038b2 <d_print_comp.part.10+0x1562>
 80038ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038d2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80038d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038da:	4620      	mov	r0, r4
 80038dc:	4798      	blx	r3
 80038de:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80038e2:	3301      	adds	r3, #1
 80038e4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80038e8:	2101      	movs	r1, #1
 80038ea:	2300      	movs	r3, #0
 80038ec:	e7e3      	b.n	80038b6 <d_print_comp.part.10+0x1566>
 80038ee:	4620      	mov	r0, r4
 80038f0:	4631      	mov	r1, r6
 80038f2:	686a      	ldr	r2, [r5, #4]
 80038f4:	f000 ffc2 	bl	800487c <d_print_comp>
 80038f8:	f7fe bd9e 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80038fc:	4620      	mov	r0, r4
 80038fe:	4631      	mov	r1, r6
 8003900:	686a      	ldr	r2, [r5, #4]
 8003902:	f000 ffbb 	bl	800487c <d_print_comp>
 8003906:	f7fe bd97 	b.w	8002438 <d_print_comp.part.10+0xe8>
 800390a:	686a      	ldr	r2, [r5, #4]
 800390c:	493d      	ldr	r1, [pc, #244]	; (8003a04 <d_print_comp.part.10+0x16b4>)
 800390e:	3201      	adds	r2, #1
 8003910:	a806      	add	r0, sp, #24
 8003912:	f003 f889 	bl	8006a28 <siprintf>
 8003916:	a806      	add	r0, sp, #24
 8003918:	f009 fe24 	bl	800d564 <strlen>
 800391c:	b320      	cbz	r0, 8003968 <d_print_comp.part.10+0x1618>
 800391e:	f10d 0517 	add.w	r5, sp, #23
 8003922:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003926:	182f      	adds	r7, r5, r0
 8003928:	f04f 0800 	mov.w	r8, #0
 800392c:	e008      	b.n	8003940 <d_print_comp.part.10+0x15f0>
 800392e:	460b      	mov	r3, r1
 8003930:	3101      	adds	r1, #1
 8003932:	42bd      	cmp	r5, r7
 8003934:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003938:	54e6      	strb	r6, [r4, r3]
 800393a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800393e:	d015      	beq.n	800396c <d_print_comp.part.10+0x161c>
 8003940:	29ff      	cmp	r1, #255	; 0xff
 8003942:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003946:	d1f2      	bne.n	800392e <d_print_comp.part.10+0x15de>
 8003948:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800394c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003950:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003954:	4620      	mov	r0, r4
 8003956:	4798      	blx	r3
 8003958:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800395c:	3301      	adds	r3, #1
 800395e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003962:	2101      	movs	r1, #1
 8003964:	2300      	movs	r3, #0
 8003966:	e7e4      	b.n	8003932 <d_print_comp.part.10+0x15e2>
 8003968:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800396c:	29ff      	cmp	r1, #255	; 0xff
 800396e:	f000 8302 	beq.w	8003f76 <d_print_comp.part.10+0x1c26>
 8003972:	1c4a      	adds	r2, r1, #1
 8003974:	237d      	movs	r3, #125	; 0x7d
 8003976:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800397a:	5463      	strb	r3, [r4, r1]
 800397c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003980:	f7fe bd5a 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003984:	4631      	mov	r1, r6
 8003986:	4e20      	ldr	r6, [pc, #128]	; (8003a08 <d_print_comp.part.10+0x16b8>)
 8003988:	686a      	ldr	r2, [r5, #4]
 800398a:	4620      	mov	r0, r4
 800398c:	f000 ff76 	bl	800487c <d_print_comp>
 8003990:	f106 0902 	add.w	r9, r6, #2
 8003994:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003998:	f04f 0800 	mov.w	r8, #0
 800399c:	e008      	b.n	80039b0 <d_print_comp.part.10+0x1660>
 800399e:	460b      	mov	r3, r1
 80039a0:	3101      	adds	r1, #1
 80039a2:	454e      	cmp	r6, r9
 80039a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80039a8:	54e7      	strb	r7, [r4, r3]
 80039aa:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80039ae:	d013      	beq.n	80039d8 <d_print_comp.part.10+0x1688>
 80039b0:	29ff      	cmp	r1, #255	; 0xff
 80039b2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80039b6:	d1f2      	bne.n	800399e <d_print_comp.part.10+0x164e>
 80039b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039bc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80039c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039c4:	4620      	mov	r0, r4
 80039c6:	4798      	blx	r3
 80039c8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80039cc:	3301      	adds	r3, #1
 80039ce:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80039d2:	2101      	movs	r1, #1
 80039d4:	2300      	movs	r3, #0
 80039d6:	e7e4      	b.n	80039a2 <d_print_comp.part.10+0x1652>
 80039d8:	68aa      	ldr	r2, [r5, #8]
 80039da:	490a      	ldr	r1, [pc, #40]	; (8003a04 <d_print_comp.part.10+0x16b4>)
 80039dc:	3201      	adds	r2, #1
 80039de:	a806      	add	r0, sp, #24
 80039e0:	f003 f822 	bl	8006a28 <siprintf>
 80039e4:	a806      	add	r0, sp, #24
 80039e6:	f009 fdbd 	bl	800d564 <strlen>
 80039ea:	b360      	cbz	r0, 8003a46 <d_print_comp.part.10+0x16f6>
 80039ec:	f10d 0517 	add.w	r5, sp, #23
 80039f0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80039f4:	182f      	adds	r7, r5, r0
 80039f6:	f04f 0800 	mov.w	r8, #0
 80039fa:	e010      	b.n	8003a1e <d_print_comp.part.10+0x16ce>
 80039fc:	0800ec73 	.word	0x0800ec73
 8003a00:	0800ebaf 	.word	0x0800ebaf
 8003a04:	0800eb68 	.word	0x0800eb68
 8003a08:	0800eda7 	.word	0x0800eda7
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	3101      	adds	r1, #1
 8003a10:	42bd      	cmp	r5, r7
 8003a12:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a16:	54e6      	strb	r6, [r4, r3]
 8003a18:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003a1c:	d015      	beq.n	8003a4a <d_print_comp.part.10+0x16fa>
 8003a1e:	29ff      	cmp	r1, #255	; 0xff
 8003a20:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003a24:	d1f2      	bne.n	8003a0c <d_print_comp.part.10+0x16bc>
 8003a26:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a2a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a32:	4620      	mov	r0, r4
 8003a34:	4798      	blx	r3
 8003a36:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003a40:	2101      	movs	r1, #1
 8003a42:	2300      	movs	r3, #0
 8003a44:	e7e4      	b.n	8003a10 <d_print_comp.part.10+0x16c0>
 8003a46:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003a4a:	29ff      	cmp	r1, #255	; 0xff
 8003a4c:	f000 8332 	beq.w	80040b4 <d_print_comp.part.10+0x1d64>
 8003a50:	1c4a      	adds	r2, r1, #1
 8003a52:	237d      	movs	r3, #125	; 0x7d
 8003a54:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003a58:	5463      	strb	r3, [r4, r1]
 8003a5a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003a5e:	f7fe bceb 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003a62:	4620      	mov	r0, r4
 8003a64:	4631      	mov	r1, r6
 8003a66:	686a      	ldr	r2, [r5, #4]
 8003a68:	f000 ff08 	bl	800487c <d_print_comp>
 8003a6c:	f7fe bce4 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003a70:	4631      	mov	r1, r6
 8003a72:	686a      	ldr	r2, [r5, #4]
 8003a74:	4620      	mov	r0, r4
 8003a76:	f000 ff01 	bl	800487c <d_print_comp>
 8003a7a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003a7e:	29ff      	cmp	r1, #255	; 0xff
 8003a80:	f000 828a 	beq.w	8003f98 <d_print_comp.part.10+0x1c48>
 8003a84:	1c4a      	adds	r2, r1, #1
 8003a86:	2329      	movs	r3, #41	; 0x29
 8003a88:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003a8c:	5463      	strb	r3, [r4, r1]
 8003a8e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003a92:	f7fe bcd1 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003a96:	4620      	mov	r0, r4
 8003a98:	4631      	mov	r1, r6
 8003a9a:	686a      	ldr	r2, [r5, #4]
 8003a9c:	f000 feee 	bl	800487c <d_print_comp>
 8003aa0:	f7fe bcca 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003aa4:	4631      	mov	r1, r6
 8003aa6:	68aa      	ldr	r2, [r5, #8]
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f000 fee7 	bl	800487c <d_print_comp>
 8003aae:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ab2:	29ff      	cmp	r1, #255	; 0xff
 8003ab4:	f000 830f 	beq.w	80040d6 <d_print_comp.part.10+0x1d86>
 8003ab8:	1c4a      	adds	r2, r1, #1
 8003aba:	235d      	movs	r3, #93	; 0x5d
 8003abc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003ac0:	5463      	strb	r3, [r4, r1]
 8003ac2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003ac6:	f7fe bcb7 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003aca:	4631      	mov	r1, r6
 8003acc:	68aa      	ldr	r2, [r5, #8]
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f000 fed4 	bl	800487c <d_print_comp>
 8003ad4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ad8:	29ff      	cmp	r1, #255	; 0xff
 8003ada:	f000 826e 	beq.w	8003fba <d_print_comp.part.10+0x1c6a>
 8003ade:	1c4a      	adds	r2, r1, #1
 8003ae0:	235d      	movs	r3, #93	; 0x5d
 8003ae2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003ae6:	5463      	strb	r3, [r4, r1]
 8003ae8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003aec:	f7fe bca4 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003af0:	4620      	mov	r0, r4
 8003af2:	4631      	mov	r1, r6
 8003af4:	686a      	ldr	r2, [r5, #4]
 8003af6:	f000 fec1 	bl	800487c <d_print_comp>
 8003afa:	f7fe bc9d 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003afe:	68aa      	ldr	r2, [r5, #8]
 8003b00:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 8003b04:	460f      	mov	r7, r1
 8003b06:	4620      	mov	r0, r4
 8003b08:	4631      	mov	r1, r6
 8003b0a:	f000 feb7 	bl	800487c <d_print_comp>
 8003b0e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003b12:	429d      	cmp	r5, r3
 8003b14:	f47e ac90 	bne.w	8002438 <d_print_comp.part.10+0xe8>
 8003b18:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003b1c:	42bb      	cmp	r3, r7
 8003b1e:	f47e ac8b 	bne.w	8002438 <d_print_comp.part.10+0xe8>
 8003b22:	3f02      	subs	r7, #2
 8003b24:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8003b28:	f7fe bc86 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003b2c:	686d      	ldr	r5, [r5, #4]
 8003b2e:	9501      	str	r5, [sp, #4]
 8003b30:	f1b8 0f00 	cmp.w	r8, #0
 8003b34:	f47f a83b 	bne.w	8002bae <d_print_comp.part.10+0x85e>
 8003b38:	f7fe bc7e 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003b3c:	2700      	movs	r7, #0
 8003b3e:	f7ff ba58 	b.w	8002ff2 <d_print_comp.part.10+0xca2>
 8003b42:	4dab      	ldr	r5, [pc, #684]	; (8003df0 <d_print_comp.part.10+0x1aa0>)
 8003b44:	4698      	mov	r8, r3
 8003b46:	1daf      	adds	r7, r5, #6
 8003b48:	e009      	b.n	8003b5e <d_print_comp.part.10+0x180e>
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	3101      	adds	r1, #1
 8003b4e:	42bd      	cmp	r5, r7
 8003b50:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b54:	54e6      	strb	r6, [r4, r3]
 8003b56:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003b5a:	f43e ac6d 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 8003b5e:	29ff      	cmp	r1, #255	; 0xff
 8003b60:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003b64:	d1f1      	bne.n	8003b4a <d_print_comp.part.10+0x17fa>
 8003b66:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b6a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003b6e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b72:	4620      	mov	r0, r4
 8003b74:	4798      	blx	r3
 8003b76:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003b80:	2101      	movs	r1, #1
 8003b82:	2300      	movs	r3, #0
 8003b84:	e7e3      	b.n	8003b4e <d_print_comp.part.10+0x17fe>
 8003b86:	68df      	ldr	r7, [r3, #12]
 8003b88:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8003b8c:	2f00      	cmp	r7, #0
 8003b8e:	f43e ac53 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 8003b92:	2500      	movs	r5, #0
 8003b94:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003b98:	46a8      	mov	r8, r5
 8003b9a:	e00a      	b.n	8003bb2 <d_print_comp.part.10+0x1862>
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	3101      	adds	r1, #1
 8003ba0:	3501      	adds	r5, #1
 8003ba2:	42af      	cmp	r7, r5
 8003ba4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003ba8:	54e6      	strb	r6, [r4, r3]
 8003baa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003bae:	f43e ac43 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 8003bb2:	29ff      	cmp	r1, #255	; 0xff
 8003bb4:	f819 6005 	ldrb.w	r6, [r9, r5]
 8003bb8:	d1f0      	bne.n	8003b9c <d_print_comp.part.10+0x184c>
 8003bba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bbe:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003bc2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	4798      	blx	r3
 8003bca:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e7e2      	b.n	8003ba0 <d_print_comp.part.10+0x1850>
 8003bda:	4d86      	ldr	r5, [pc, #536]	; (8003df4 <d_print_comp.part.10+0x1aa4>)
 8003bdc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003be0:	f105 0906 	add.w	r9, r5, #6
 8003be4:	f04f 0800 	mov.w	r8, #0
 8003be8:	e008      	b.n	8003bfc <d_print_comp.part.10+0x18ac>
 8003bea:	460b      	mov	r3, r1
 8003bec:	3101      	adds	r1, #1
 8003bee:	454d      	cmp	r5, r9
 8003bf0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003bf4:	54e6      	strb	r6, [r4, r3]
 8003bf6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003bfa:	d013      	beq.n	8003c24 <d_print_comp.part.10+0x18d4>
 8003bfc:	29ff      	cmp	r1, #255	; 0xff
 8003bfe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003c02:	d1f2      	bne.n	8003bea <d_print_comp.part.10+0x189a>
 8003c04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c08:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003c0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c10:	4620      	mov	r0, r4
 8003c12:	4798      	blx	r3
 8003c14:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003c1e:	2101      	movs	r1, #1
 8003c20:	2300      	movs	r3, #0
 8003c22:	e7e4      	b.n	8003bee <d_print_comp.part.10+0x189e>
 8003c24:	463a      	mov	r2, r7
 8003c26:	a806      	add	r0, sp, #24
 8003c28:	4973      	ldr	r1, [pc, #460]	; (8003df8 <d_print_comp.part.10+0x1aa8>)
 8003c2a:	f002 fefd 	bl	8006a28 <siprintf>
 8003c2e:	a806      	add	r0, sp, #24
 8003c30:	f009 fc98 	bl	800d564 <strlen>
 8003c34:	b320      	cbz	r0, 8003c80 <d_print_comp.part.10+0x1930>
 8003c36:	f10d 0517 	add.w	r5, sp, #23
 8003c3a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003c3e:	182f      	adds	r7, r5, r0
 8003c40:	f04f 0800 	mov.w	r8, #0
 8003c44:	e008      	b.n	8003c58 <d_print_comp.part.10+0x1908>
 8003c46:	460b      	mov	r3, r1
 8003c48:	3101      	adds	r1, #1
 8003c4a:	42bd      	cmp	r5, r7
 8003c4c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c50:	54e6      	strb	r6, [r4, r3]
 8003c52:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003c56:	d015      	beq.n	8003c84 <d_print_comp.part.10+0x1934>
 8003c58:	29ff      	cmp	r1, #255	; 0xff
 8003c5a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003c5e:	d1f2      	bne.n	8003c46 <d_print_comp.part.10+0x18f6>
 8003c60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c64:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003c68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	4798      	blx	r3
 8003c70:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003c74:	3301      	adds	r3, #1
 8003c76:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e7e4      	b.n	8003c4a <d_print_comp.part.10+0x18fa>
 8003c80:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003c84:	29ff      	cmp	r1, #255	; 0xff
 8003c86:	f000 8445 	beq.w	8004514 <d_print_comp.part.10+0x21c4>
 8003c8a:	1c4a      	adds	r2, r1, #1
 8003c8c:	237d      	movs	r3, #125	; 0x7d
 8003c8e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c92:	5463      	strb	r3, [r4, r1]
 8003c94:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c98:	f7fe bbce 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 8003ca2:	f7fe bbaf 	b.w	8002404 <d_print_comp.part.10+0xb4>
 8003ca6:	6852      	ldr	r2, [r2, #4]
 8003ca8:	6853      	ldr	r3, [r2, #4]
 8003caa:	6819      	ldr	r1, [r3, #0]
 8003cac:	7848      	ldrb	r0, [r1, #1]
 8003cae:	2863      	cmp	r0, #99	; 0x63
 8003cb0:	f000 83e2 	beq.w	8004478 <d_print_comp.part.10+0x2128>
 8003cb4:	7811      	ldrb	r1, [r2, #0]
 8003cb6:	2931      	cmp	r1, #49	; 0x31
 8003cb8:	f000 844e 	beq.w	8004558 <d_print_comp.part.10+0x2208>
 8003cbc:	6853      	ldr	r3, [r2, #4]
 8003cbe:	494f      	ldr	r1, [pc, #316]	; (8003dfc <d_print_comp.part.10+0x1aac>)
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	f001 fe43 	bl	800594c <strcmp>
 8003cc6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003cca:	b918      	cbnz	r0, 8003cd4 <d_print_comp.part.10+0x1984>
 8003ccc:	7813      	ldrb	r3, [r2, #0]
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	f000 845b 	beq.w	800458a <d_print_comp.part.10+0x223a>
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	4631      	mov	r1, r6
 8003cd8:	f001 fc6c 	bl	80055b4 <d_print_subexpr>
 8003cdc:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8003ce0:	4947      	ldr	r1, [pc, #284]	; (8003e00 <d_print_comp.part.10+0x1ab0>)
 8003ce2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003ce6:	681f      	ldr	r7, [r3, #0]
 8003ce8:	4638      	mov	r0, r7
 8003cea:	f001 fe2f 	bl	800594c <strcmp>
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	f000 8422 	beq.w	8004538 <d_print_comp.part.10+0x21e8>
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	4941      	ldr	r1, [pc, #260]	; (8003dfc <d_print_comp.part.10+0x1aac>)
 8003cf8:	f001 fe28 	bl	800594c <strcmp>
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	f040 843d 	bne.w	800457c <d_print_comp.part.10+0x222c>
 8003d02:	68ab      	ldr	r3, [r5, #8]
 8003d04:	4631      	mov	r1, r6
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f001 fc53 	bl	80055b4 <d_print_subexpr>
 8003d0e:	686b      	ldr	r3, [r5, #4]
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	2a31      	cmp	r2, #49	; 0x31
 8003d14:	f47e ab90 	bne.w	8002438 <d_print_comp.part.10+0xe8>
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	2a01      	cmp	r2, #1
 8003d1e:	f47e ab8b 	bne.w	8002438 <d_print_comp.part.10+0xe8>
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b3e      	cmp	r3, #62	; 0x3e
 8003d28:	f47e ab86 	bne.w	8002438 <d_print_comp.part.10+0xe8>
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	2129      	movs	r1, #41	; 0x29
 8003d30:	f7fc fc14 	bl	800055c <d_append_char>
 8003d34:	f7fe bb80 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003d38:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003d3c:	f7ff ba11 	b.w	8003162 <d_print_comp.part.10+0xe12>
 8003d40:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003d44:	e002      	b.n	8003d4c <d_print_comp.part.10+0x19fc>
 8003d46:	7802      	ldrb	r2, [r0, #0]
 8003d48:	2a2f      	cmp	r2, #47	; 0x2f
 8003d4a:	d106      	bne.n	8003d5a <d_print_comp.part.10+0x1a0a>
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f340 8576 	ble.w	800483e <d_print_comp.part.10+0x24ee>
 8003d52:	6880      	ldr	r0, [r0, #8]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d1f5      	bne.n	8003d46 <d_print_comp.part.10+0x19f6>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003d60:	f7fe bb6a 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003d64:	f026 0660 	bic.w	r6, r6, #96	; 0x60
 8003d68:	3208      	adds	r2, #8
 8003d6a:	4631      	mov	r1, r6
 8003d6c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003d70:	f001 fa36 	bl	80051e0 <d_print_function_type.isra.11>
 8003d74:	686a      	ldr	r2, [r5, #4]
 8003d76:	2a00      	cmp	r2, #0
 8003d78:	f43e ab5e 	beq.w	8002438 <d_print_comp.part.10+0xe8>
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	4631      	mov	r1, r6
 8003d80:	f000 fd7c 	bl	800487c <d_print_comp>
 8003d84:	f7fe bb58 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003d88:	4f1e      	ldr	r7, [pc, #120]	; (8003e04 <d_print_comp.part.10+0x1ab4>)
 8003d8a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003d8e:	f107 0a05 	add.w	sl, r7, #5
 8003d92:	f04f 0900 	mov.w	r9, #0
 8003d96:	e00a      	b.n	8003dae <d_print_comp.part.10+0x1a5e>
 8003d98:	460b      	mov	r3, r1
 8003d9a:	3101      	adds	r1, #1
 8003d9c:	4557      	cmp	r7, sl
 8003d9e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003da2:	f804 8003 	strb.w	r8, [r4, r3]
 8003da6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8003daa:	f43f a9c4 	beq.w	8003136 <d_print_comp.part.10+0xde6>
 8003dae:	29ff      	cmp	r1, #255	; 0xff
 8003db0:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8003db4:	d1f0      	bne.n	8003d98 <d_print_comp.part.10+0x1a48>
 8003db6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003dba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003dbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	4798      	blx	r3
 8003dc6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003dca:	3301      	adds	r3, #1
 8003dcc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e7e2      	b.n	8003d9c <d_print_comp.part.10+0x1a4c>
 8003dd6:	29ff      	cmp	r1, #255	; 0xff
 8003dd8:	f000 8421 	beq.w	800461e <d_print_comp.part.10+0x22ce>
 8003ddc:	1c4a      	adds	r2, r1, #1
 8003dde:	2320      	movs	r3, #32
 8003de0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003de4:	5463      	strb	r3, [r4, r1]
 8003de6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003dea:	687d      	ldr	r5, [r7, #4]
 8003dec:	e54f      	b.n	800388e <d_print_comp.part.10+0x153e>
 8003dee:	bf00      	nop
 8003df0:	0800ecd3 	.word	0x0800ecd3
 8003df4:	0800ed53 	.word	0x0800ed53
 8003df8:	0800eb68 	.word	0x0800eb68
 8003dfc:	0800eb3c 	.word	0x0800eb3c
 8003e00:	0800ed00 	.word	0x0800ed00
 8003e04:	0800ecc3 	.word	0x0800ecc3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	49c5      	ldr	r1, [pc, #788]	; (8004120 <d_print_comp.part.10+0x1dd0>)
 8003e0c:	f8d3 8000 	ldr.w	r8, [r3]
 8003e10:	4640      	mov	r0, r8
 8003e12:	f001 fd9b 	bl	800594c <strcmp>
 8003e16:	782b      	ldrb	r3, [r5, #0]
 8003e18:	b910      	cbnz	r0, 8003e20 <d_print_comp.part.10+0x1ad0>
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	f000 8411 	beq.w	8004642 <d_print_comp.part.10+0x22f2>
 8003e20:	2b37      	cmp	r3, #55	; 0x37
 8003e22:	f000 8487 	beq.w	8004734 <d_print_comp.part.10+0x23e4>
 8003e26:	463a      	mov	r2, r7
 8003e28:	4620      	mov	r0, r4
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	f001 fb88 	bl	8005540 <d_print_expr_op>
 8003e30:	f1b8 0f00 	cmp.w	r8, #0
 8003e34:	f43e afec 	beq.w	8002e10 <d_print_comp.part.10+0xac0>
 8003e38:	4640      	mov	r0, r8
 8003e3a:	49ba      	ldr	r1, [pc, #744]	; (8004124 <d_print_comp.part.10+0x1dd4>)
 8003e3c:	f001 fd86 	bl	800594c <strcmp>
 8003e40:	2800      	cmp	r0, #0
 8003e42:	f000 823e 	beq.w	80042c2 <d_print_comp.part.10+0x1f72>
 8003e46:	4640      	mov	r0, r8
 8003e48:	49b7      	ldr	r1, [pc, #732]	; (8004128 <d_print_comp.part.10+0x1dd8>)
 8003e4a:	f001 fd7f 	bl	800594c <strcmp>
 8003e4e:	4607      	mov	r7, r0
 8003e50:	2800      	cmp	r0, #0
 8003e52:	f47e afdd 	bne.w	8002e10 <d_print_comp.part.10+0xac0>
 8003e56:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e5a:	2bff      	cmp	r3, #255	; 0xff
 8003e5c:	f000 8421 	beq.w	80046a2 <d_print_comp.part.10+0x2352>
 8003e60:	1c58      	adds	r0, r3, #1
 8003e62:	2728      	movs	r7, #40	; 0x28
 8003e64:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8003e68:	4631      	mov	r1, r6
 8003e6a:	54e7      	strb	r7, [r4, r3]
 8003e6c:	462a      	mov	r2, r5
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003e74:	f000 fd02 	bl	800487c <d_print_comp>
 8003e78:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003e7c:	29ff      	cmp	r1, #255	; 0xff
 8003e7e:	f000 83ff 	beq.w	8004680 <d_print_comp.part.10+0x2330>
 8003e82:	2329      	movs	r3, #41	; 0x29
 8003e84:	1c4a      	adds	r2, r1, #1
 8003e86:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003e8a:	5463      	strb	r3, [r4, r1]
 8003e8c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003e90:	f7fe bad2 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003e94:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003e98:	29ff      	cmp	r1, #255	; 0xff
 8003e9a:	f000 83af 	beq.w	80045fc <d_print_comp.part.10+0x22ac>
 8003e9e:	1c4a      	adds	r2, r1, #1
 8003ea0:	2328      	movs	r3, #40	; 0x28
 8003ea2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	5463      	strb	r3, [r4, r1]
 8003eaa:	1d3a      	adds	r2, r7, #4
 8003eac:	4631      	mov	r1, r6
 8003eae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003eb2:	f001 fa81 	bl	80053b8 <d_print_cast.isra.12>
 8003eb6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003eba:	29ff      	cmp	r1, #255	; 0xff
 8003ebc:	f000 838d 	beq.w	80045da <d_print_comp.part.10+0x228a>
 8003ec0:	1c4a      	adds	r2, r1, #1
 8003ec2:	2329      	movs	r3, #41	; 0x29
 8003ec4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003ec8:	5463      	strb	r3, [r4, r1]
 8003eca:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003ece:	f7fe bf9f 	b.w	8002e10 <d_print_comp.part.10+0xac0>
 8003ed2:	f04f 0800 	mov.w	r8, #0
 8003ed6:	f804 8007 	strb.w	r8, [r4, r7]
 8003eda:	4639      	mov	r1, r7
 8003edc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ee0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	4798      	blx	r3
 8003ee8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003eec:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	4647      	mov	r7, r8
 8003ef4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003ef8:	f7ff b8f2 	b.w	80030e0 <d_print_comp.part.10+0xd90>
 8003efc:	4620      	mov	r0, r4
 8003efe:	4631      	mov	r1, r6
 8003f00:	686a      	ldr	r2, [r5, #4]
 8003f02:	f000 fcbb 	bl	800487c <d_print_comp>
 8003f06:	f7fe ba97 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8003f0a:	2700      	movs	r7, #0
 8003f0c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8003f10:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8003f14:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8003f18:	4798      	blx	r3
 8003f1a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003f1e:	3301      	adds	r3, #1
 8003f20:	4639      	mov	r1, r7
 8003f22:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003f26:	2201      	movs	r2, #1
 8003f28:	f7fe bd2c 	b.w	8002984 <d_print_comp.part.10+0x634>
 8003f2c:	2500      	movs	r5, #0
 8003f2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f32:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f36:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	4798      	blx	r3
 8003f3e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003f42:	3301      	adds	r3, #1
 8003f44:	4629      	mov	r1, r5
 8003f46:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f7ff bb8e 	b.w	800366c <d_print_comp.part.10+0x131c>
 8003f50:	2500      	movs	r5, #0
 8003f52:	4619      	mov	r1, r3
 8003f54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f5c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003f60:	4620      	mov	r0, r4
 8003f62:	4798      	blx	r3
 8003f64:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8003f6e:	462b      	mov	r3, r5
 8003f70:	2201      	movs	r2, #1
 8003f72:	f7ff bb6a 	b.w	800364a <d_print_comp.part.10+0x12fa>
 8003f76:	2500      	movs	r5, #0
 8003f78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f80:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003f84:	4620      	mov	r0, r4
 8003f86:	4798      	blx	r3
 8003f88:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	4629      	mov	r1, r5
 8003f90:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003f94:	2201      	movs	r2, #1
 8003f96:	e4ed      	b.n	8003974 <d_print_comp.part.10+0x1624>
 8003f98:	2500      	movs	r5, #0
 8003f9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f9e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003fa2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	4798      	blx	r3
 8003faa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003fae:	3301      	adds	r3, #1
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	e565      	b.n	8003a86 <d_print_comp.part.10+0x1736>
 8003fba:	2500      	movs	r5, #0
 8003fbc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003fc0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003fc4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003fc8:	4620      	mov	r0, r4
 8003fca:	4798      	blx	r3
 8003fcc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003fd8:	2201      	movs	r2, #1
 8003fda:	e581      	b.n	8003ae0 <d_print_comp.part.10+0x1790>
 8003fdc:	6856      	ldr	r6, [r2, #4]
 8003fde:	6897      	ldr	r7, [r2, #8]
 8003fe0:	4437      	add	r7, r6
 8003fe2:	42be      	cmp	r6, r7
 8003fe4:	f4be aa28 	bcs.w	8002438 <d_print_comp.part.10+0xe8>
 8003fe8:	f04f 0800 	mov.w	r8, #0
 8003fec:	e00d      	b.n	800400a <d_print_comp.part.10+0x1cba>
 8003fee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ff2:	29ff      	cmp	r1, #255	; 0xff
 8003ff4:	d018      	beq.n	8004028 <d_print_comp.part.10+0x1cd8>
 8003ff6:	1c4b      	adds	r3, r1, #1
 8003ff8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ffc:	5465      	strb	r5, [r4, r1]
 8003ffe:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004002:	3601      	adds	r6, #1
 8004004:	42b7      	cmp	r7, r6
 8004006:	f67e aa17 	bls.w	8002438 <d_print_comp.part.10+0xe8>
 800400a:	1bbb      	subs	r3, r7, r6
 800400c:	2b03      	cmp	r3, #3
 800400e:	7835      	ldrb	r5, [r6, #0]
 8004010:	dded      	ble.n	8003fee <d_print_comp.part.10+0x1c9e>
 8004012:	2d5f      	cmp	r5, #95	; 0x5f
 8004014:	d1eb      	bne.n	8003fee <d_print_comp.part.10+0x1c9e>
 8004016:	7872      	ldrb	r2, [r6, #1]
 8004018:	2a5f      	cmp	r2, #95	; 0x5f
 800401a:	d1e8      	bne.n	8003fee <d_print_comp.part.10+0x1c9e>
 800401c:	78b3      	ldrb	r3, [r6, #2]
 800401e:	2b55      	cmp	r3, #85	; 0x55
 8004020:	f000 8350 	beq.w	80046c4 <d_print_comp.part.10+0x2374>
 8004024:	4615      	mov	r5, r2
 8004026:	e7e2      	b.n	8003fee <d_print_comp.part.10+0x1c9e>
 8004028:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800402c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004030:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004034:	4620      	mov	r0, r4
 8004036:	4798      	blx	r3
 8004038:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800403c:	3301      	adds	r3, #1
 800403e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004042:	2100      	movs	r1, #0
 8004044:	2301      	movs	r3, #1
 8004046:	e7d7      	b.n	8003ff8 <d_print_comp.part.10+0x1ca8>
 8004048:	4d38      	ldr	r5, [pc, #224]	; (800412c <d_print_comp.part.10+0x1ddc>)
 800404a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800404e:	f105 0a0d 	add.w	sl, r5, #13
 8004052:	f04f 0900 	mov.w	r9, #0
 8004056:	e008      	b.n	800406a <d_print_comp.part.10+0x1d1a>
 8004058:	460b      	mov	r3, r1
 800405a:	3101      	adds	r1, #1
 800405c:	4555      	cmp	r5, sl
 800405e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004062:	54e7      	strb	r7, [r4, r3]
 8004064:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004068:	d046      	beq.n	80040f8 <d_print_comp.part.10+0x1da8>
 800406a:	29ff      	cmp	r1, #255	; 0xff
 800406c:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 8004070:	d1f2      	bne.n	8004058 <d_print_comp.part.10+0x1d08>
 8004072:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004076:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800407a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800407e:	4620      	mov	r0, r4
 8004080:	4798      	blx	r3
 8004082:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004086:	3301      	adds	r3, #1
 8004088:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800408c:	2101      	movs	r1, #1
 800408e:	2300      	movs	r3, #0
 8004090:	e7e4      	b.n	800405c <d_print_comp.part.10+0x1d0c>
 8004092:	2600      	movs	r6, #0
 8004094:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004098:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 800409c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80040a0:	4798      	blx	r3
 80040a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80040a6:	3301      	adds	r3, #1
 80040a8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80040ac:	4631      	mov	r1, r6
 80040ae:	2301      	movs	r3, #1
 80040b0:	f7fe bf42 	b.w	8002f38 <d_print_comp.part.10+0xbe8>
 80040b4:	2500      	movs	r5, #0
 80040b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80040ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80040be:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80040c2:	4620      	mov	r0, r4
 80040c4:	4798      	blx	r3
 80040c6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80040ca:	3301      	adds	r3, #1
 80040cc:	4629      	mov	r1, r5
 80040ce:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80040d2:	2201      	movs	r2, #1
 80040d4:	e4bd      	b.n	8003a52 <d_print_comp.part.10+0x1702>
 80040d6:	2500      	movs	r5, #0
 80040d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80040dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80040e0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80040e4:	4620      	mov	r0, r4
 80040e6:	4798      	blx	r3
 80040e8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80040ec:	3301      	adds	r3, #1
 80040ee:	4629      	mov	r1, r5
 80040f0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80040f4:	2201      	movs	r2, #1
 80040f6:	e4e0      	b.n	8003aba <d_print_comp.part.10+0x176a>
 80040f8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80040fc:	490c      	ldr	r1, [pc, #48]	; (8004130 <d_print_comp.part.10+0x1de0>)
 80040fe:	3201      	adds	r2, #1
 8004100:	a806      	add	r0, sp, #24
 8004102:	f002 fc91 	bl	8006a28 <siprintf>
 8004106:	a806      	add	r0, sp, #24
 8004108:	f009 fa2c 	bl	800d564 <strlen>
 800410c:	b378      	cbz	r0, 800416e <d_print_comp.part.10+0x1e1e>
 800410e:	f10d 0517 	add.w	r5, sp, #23
 8004112:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004116:	eb05 0a00 	add.w	sl, r5, r0
 800411a:	f04f 0900 	mov.w	r9, #0
 800411e:	e012      	b.n	8004146 <d_print_comp.part.10+0x1df6>
 8004120:	0800ecf8 	.word	0x0800ecf8
 8004124:	0800ecfc 	.word	0x0800ecfc
 8004128:	0800efe4 	.word	0x0800efe4
 800412c:	0800eb57 	.word	0x0800eb57
 8004130:	0800eb68 	.word	0x0800eb68
 8004134:	460b      	mov	r3, r1
 8004136:	3101      	adds	r1, #1
 8004138:	4555      	cmp	r5, sl
 800413a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800413e:	54e7      	strb	r7, [r4, r3]
 8004140:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004144:	d015      	beq.n	8004172 <d_print_comp.part.10+0x1e22>
 8004146:	29ff      	cmp	r1, #255	; 0xff
 8004148:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 800414c:	d1f2      	bne.n	8004134 <d_print_comp.part.10+0x1de4>
 800414e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004152:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004156:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800415a:	4620      	mov	r0, r4
 800415c:	4798      	blx	r3
 800415e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004162:	3301      	adds	r3, #1
 8004164:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004168:	2101      	movs	r1, #1
 800416a:	2300      	movs	r3, #0
 800416c:	e7e4      	b.n	8004138 <d_print_comp.part.10+0x1de8>
 800416e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004172:	4dbd      	ldr	r5, [pc, #756]	; (8004468 <d_print_comp.part.10+0x2118>)
 8004174:	f04f 0900 	mov.w	r9, #0
 8004178:	f105 0a03 	add.w	sl, r5, #3
 800417c:	e008      	b.n	8004190 <d_print_comp.part.10+0x1e40>
 800417e:	460b      	mov	r3, r1
 8004180:	3101      	adds	r1, #1
 8004182:	4555      	cmp	r5, sl
 8004184:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004188:	54e7      	strb	r7, [r4, r3]
 800418a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800418e:	d013      	beq.n	80041b8 <d_print_comp.part.10+0x1e68>
 8004190:	29ff      	cmp	r1, #255	; 0xff
 8004192:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 8004196:	d1f2      	bne.n	800417e <d_print_comp.part.10+0x1e2e>
 8004198:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800419c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80041a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80041a4:	4620      	mov	r0, r4
 80041a6:	4798      	blx	r3
 80041a8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80041ac:	3301      	adds	r3, #1
 80041ae:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80041b2:	2101      	movs	r1, #1
 80041b4:	2300      	movs	r3, #0
 80041b6:	e7e4      	b.n	8004182 <d_print_comp.part.10+0x1e32>
 80041b8:	f8d8 8004 	ldr.w	r8, [r8, #4]
 80041bc:	f7ff ba83 	b.w	80036c6 <d_print_comp.part.10+0x1376>
 80041c0:	2500      	movs	r5, #0
 80041c2:	4619      	mov	r1, r3
 80041c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80041c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80041cc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80041d0:	4620      	mov	r0, r4
 80041d2:	4798      	blx	r3
 80041d4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80041de:	462b      	mov	r3, r5
 80041e0:	2101      	movs	r1, #1
 80041e2:	f7fe bded 	b.w	8002dc0 <d_print_comp.part.10+0xa70>
 80041e6:	2700      	movs	r7, #0
 80041e8:	4619      	mov	r1, r3
 80041ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80041ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80041f2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80041f6:	4620      	mov	r0, r4
 80041f8:	4798      	blx	r3
 80041fa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8004204:	463b      	mov	r3, r7
 8004206:	2101      	movs	r1, #1
 8004208:	f7fe bdc4 	b.w	8002d94 <d_print_comp.part.10+0xa44>
 800420c:	2301      	movs	r3, #1
 800420e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8004212:	f7fe b911 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8004216:	aa16      	add	r2, sp, #88	; 0x58
 8004218:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 800421c:	f842 1d40 	str.w	r1, [r2, #-64]!
 8004220:	f026 0660 	bic.w	r6, r6, #96	; 0x60
 8004224:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8004228:	686a      	ldr	r2, [r5, #4]
 800422a:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 800422e:	9308      	str	r3, [sp, #32]
 8004230:	4631      	mov	r1, r6
 8004232:	4620      	mov	r0, r4
 8004234:	9507      	str	r5, [sp, #28]
 8004236:	9709      	str	r7, [sp, #36]	; 0x24
 8004238:	f000 fb20 	bl	800487c <d_print_comp>
 800423c:	9b08      	ldr	r3, [sp, #32]
 800423e:	9a06      	ldr	r2, [sp, #24]
 8004240:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8004244:	2b00      	cmp	r3, #0
 8004246:	f47e a8f7 	bne.w	8002438 <d_print_comp.part.10+0xe8>
 800424a:	4620      	mov	r0, r4
 800424c:	2120      	movs	r1, #32
 800424e:	f7fc f985 	bl	800055c <d_append_char>
 8004252:	f7ff b847 	b.w	80032e4 <d_print_comp.part.10+0xf94>
 8004256:	2200      	movs	r2, #0
 8004258:	4619      	mov	r1, r3
 800425a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800425e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004262:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004266:	4620      	mov	r0, r4
 8004268:	4798      	blx	r3
 800426a:	2329      	movs	r3, #41	; 0x29
 800426c:	7023      	strb	r3, [r4, #0]
 800426e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004272:	782a      	ldrb	r2, [r5, #0]
 8004274:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004278:	2101      	movs	r1, #1
 800427a:	3301      	adds	r3, #1
 800427c:	2a3c      	cmp	r2, #60	; 0x3c
 800427e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004282:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004286:	f47e aed5 	bne.w	8003034 <d_print_comp.part.10+0xce4>
 800428a:	232d      	movs	r3, #45	; 0x2d
 800428c:	1c4a      	adds	r2, r1, #1
 800428e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004292:	5463      	strb	r3, [r4, r1]
 8004294:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004298:	f7fe becc 	b.w	8003034 <d_print_comp.part.10+0xce4>
 800429c:	f04f 0800 	mov.w	r8, #0
 80042a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80042a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80042a8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80042ac:	4620      	mov	r0, r4
 80042ae:	4798      	blx	r3
 80042b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80042b4:	3301      	adds	r3, #1
 80042b6:	4641      	mov	r1, r8
 80042b8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80042bc:	2201      	movs	r2, #1
 80042be:	f7fe be9e 	b.w	8002ffe <d_print_comp.part.10+0xcae>
 80042c2:	4620      	mov	r0, r4
 80042c4:	4631      	mov	r1, r6
 80042c6:	462a      	mov	r2, r5
 80042c8:	f000 fad8 	bl	800487c <d_print_comp>
 80042cc:	f7fe b8b4 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80042d0:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80042d4:	f898 2000 	ldrb.w	r2, [r8]
 80042d8:	2a00      	cmp	r2, #0
 80042da:	f47e ae8a 	bne.w	8002ff2 <d_print_comp.part.10+0xca2>
 80042de:	2b3c      	cmp	r3, #60	; 0x3c
 80042e0:	f000 8290 	beq.w	8004804 <d_print_comp.part.10+0x24b4>
 80042e4:	4631      	mov	r1, r6
 80042e6:	4642      	mov	r2, r8
 80042e8:	4620      	mov	r0, r4
 80042ea:	3f02      	subs	r7, #2
 80042ec:	f000 fac6 	bl	800487c <d_print_comp>
 80042f0:	2f04      	cmp	r7, #4
 80042f2:	f63e a8a1 	bhi.w	8002438 <d_print_comp.part.10+0xe8>
 80042f6:	e8df f007 	tbb	[pc, r7]
 80042fa:	151b      	.short	0x151b
 80042fc:	090f      	.short	0x090f
 80042fe:	03          	.byte	0x03
 80042ff:	00          	.byte	0x00
 8004300:	4620      	mov	r0, r4
 8004302:	495a      	ldr	r1, [pc, #360]	; (800446c <d_print_comp.part.10+0x211c>)
 8004304:	f7fd fff0 	bl	80022e8 <d_append_string>
 8004308:	f7fe b896 	b.w	8002438 <d_print_comp.part.10+0xe8>
 800430c:	4620      	mov	r0, r4
 800430e:	4958      	ldr	r1, [pc, #352]	; (8004470 <d_print_comp.part.10+0x2120>)
 8004310:	f7fd ffea 	bl	80022e8 <d_append_string>
 8004314:	f7fe b890 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8004318:	4620      	mov	r0, r4
 800431a:	4956      	ldr	r1, [pc, #344]	; (8004474 <d_print_comp.part.10+0x2124>)
 800431c:	f7fd ffe4 	bl	80022e8 <d_append_string>
 8004320:	f7fe b88a 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8004324:	4620      	mov	r0, r4
 8004326:	216c      	movs	r1, #108	; 0x6c
 8004328:	f7fc f918 	bl	800055c <d_append_char>
 800432c:	f7fe b884 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8004330:	4620      	mov	r0, r4
 8004332:	2175      	movs	r1, #117	; 0x75
 8004334:	f7fc f912 	bl	800055c <d_append_char>
 8004338:	f7fe b87e 	b.w	8002438 <d_print_comp.part.10+0xe8>
 800433c:	2600      	movs	r6, #0
 800433e:	4619      	mov	r1, r3
 8004340:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004344:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004348:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800434c:	4620      	mov	r0, r4
 800434e:	4798      	blx	r3
 8004350:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800435a:	4633      	mov	r3, r6
 800435c:	2101      	movs	r1, #1
 800435e:	f7fe befa 	b.w	8003156 <d_print_comp.part.10+0xe06>
 8004362:	1d01      	adds	r1, r0, #4
 8004364:	4620      	mov	r0, r4
 8004366:	f7fc fa15 	bl	8000794 <d_lookup_template_argument.isra.6>
 800436a:	b180      	cbz	r0, 800438e <d_print_comp.part.10+0x203e>
 800436c:	7803      	ldrb	r3, [r0, #0]
 800436e:	2b2f      	cmp	r3, #47	; 0x2f
 8004370:	f47f a8ec 	bne.w	800354c <d_print_comp.part.10+0x11fc>
 8004374:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8004378:	e005      	b.n	8004386 <d_print_comp.part.10+0x2036>
 800437a:	6880      	ldr	r0, [r0, #8]
 800437c:	3b01      	subs	r3, #1
 800437e:	b130      	cbz	r0, 800438e <d_print_comp.part.10+0x203e>
 8004380:	7802      	ldrb	r2, [r0, #0]
 8004382:	2a2f      	cmp	r2, #47	; 0x2f
 8004384:	d103      	bne.n	800438e <d_print_comp.part.10+0x203e>
 8004386:	2b00      	cmp	r3, #0
 8004388:	dcf7      	bgt.n	800437a <d_print_comp.part.10+0x202a>
 800438a:	f000 8251 	beq.w	8004830 <d_print_comp.part.10+0x24e0>
 800438e:	2301      	movs	r3, #1
 8004390:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8004394:	f7fe b850 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8004398:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800439c:	29ff      	cmp	r1, #255	; 0xff
 800439e:	f000 81ba 	beq.w	8004716 <d_print_comp.part.10+0x23c6>
 80043a2:	1c4b      	adds	r3, r1, #1
 80043a4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80043a8:	4620      	mov	r0, r4
 80043aa:	f804 9001 	strb.w	r9, [r4, r1]
 80043ae:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 80043b2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80043b6:	4641      	mov	r1, r8
 80043b8:	f000 fa6c 	bl	8004894 <d_print_mod>
 80043bc:	f7fe bb75 	b.w	8002aaa <d_print_comp.part.10+0x75a>
 80043c0:	2301      	movs	r3, #1
 80043c2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80043c6:	f7fe b837 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80043ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80043ce:	29ff      	cmp	r1, #255	; 0xff
 80043d0:	f000 81dc 	beq.w	800478c <d_print_comp.part.10+0x243c>
 80043d4:	2220      	movs	r2, #32
 80043d6:	1c4b      	adds	r3, r1, #1
 80043d8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80043dc:	5462      	strb	r2, [r4, r1]
 80043de:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80043e2:	f7fe bce9 	b.w	8002db8 <d_print_comp.part.10+0xa68>
 80043e6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80043ea:	29ff      	cmp	r1, #255	; 0xff
 80043ec:	f000 81ea 	beq.w	80047c4 <d_print_comp.part.10+0x2474>
 80043f0:	2220      	movs	r2, #32
 80043f2:	1c4b      	adds	r3, r1, #1
 80043f4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80043f8:	5462      	strb	r2, [r4, r1]
 80043fa:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80043fe:	f7fe bcc5 	b.w	8002d8c <d_print_comp.part.10+0xa3c>
 8004402:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004406:	29ff      	cmp	r1, #255	; 0xff
 8004408:	f000 81ec 	beq.w	80047e4 <d_print_comp.part.10+0x2494>
 800440c:	1c4a      	adds	r2, r1, #1
 800440e:	235b      	movs	r3, #91	; 0x5b
 8004410:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004414:	5463      	strb	r3, [r4, r1]
 8004416:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800441a:	4631      	mov	r1, r6
 800441c:	68aa      	ldr	r2, [r5, #8]
 800441e:	4620      	mov	r0, r4
 8004420:	f000 fa2c 	bl	800487c <d_print_comp>
 8004424:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004428:	29ff      	cmp	r1, #255	; 0xff
 800442a:	f000 819f 	beq.w	800476c <d_print_comp.part.10+0x241c>
 800442e:	235d      	movs	r3, #93	; 0x5d
 8004430:	1c4a      	adds	r2, r1, #1
 8004432:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004436:	5463      	strb	r3, [r4, r1]
 8004438:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800443c:	f7fd bffc 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8004440:	29ff      	cmp	r1, #255	; 0xff
 8004442:	f47f af22 	bne.w	800428a <d_print_comp.part.10+0x1f3a>
 8004446:	f04f 0800 	mov.w	r8, #0
 800444a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800444e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004452:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004456:	4620      	mov	r0, r4
 8004458:	4798      	blx	r3
 800445a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800445e:	3301      	adds	r3, #1
 8004460:	4641      	mov	r1, r8
 8004462:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004466:	e710      	b.n	800428a <d_print_comp.part.10+0x1f3a>
 8004468:	0800eb6b 	.word	0x0800eb6b
 800446c:	0800ed18 	.word	0x0800ed18
 8004470:	0800ed14 	.word	0x0800ed14
 8004474:	0800ed10 	.word	0x0800ed10
 8004478:	7809      	ldrb	r1, [r1, #0]
 800447a:	f1a1 0063 	sub.w	r0, r1, #99	; 0x63
 800447e:	2801      	cmp	r0, #1
 8004480:	d903      	bls.n	800448a <d_print_comp.part.10+0x213a>
 8004482:	3972      	subs	r1, #114	; 0x72
 8004484:	2901      	cmp	r1, #1
 8004486:	f63f ac15 	bhi.w	8003cb4 <d_print_comp.part.10+0x1964>
 800448a:	4620      	mov	r0, r4
 800448c:	4631      	mov	r1, r6
 800448e:	f001 f857 	bl	8005540 <d_print_expr_op>
 8004492:	4620      	mov	r0, r4
 8004494:	213c      	movs	r1, #60	; 0x3c
 8004496:	f7fc f861 	bl	800055c <d_append_char>
 800449a:	68ab      	ldr	r3, [r5, #8]
 800449c:	4620      	mov	r0, r4
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	4631      	mov	r1, r6
 80044a2:	f000 f9eb 	bl	800487c <d_print_comp>
 80044a6:	4620      	mov	r0, r4
 80044a8:	49c0      	ldr	r1, [pc, #768]	; (80047ac <d_print_comp.part.10+0x245c>)
 80044aa:	f7fd ff1d 	bl	80022e8 <d_append_string>
 80044ae:	68ab      	ldr	r3, [r5, #8]
 80044b0:	4631      	mov	r1, r6
 80044b2:	4620      	mov	r0, r4
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	f000 f9e1 	bl	800487c <d_print_comp>
 80044ba:	4620      	mov	r0, r4
 80044bc:	2129      	movs	r1, #41	; 0x29
 80044be:	f7fc f84d 	bl	800055c <d_append_char>
 80044c2:	f7fd bfb9 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80044c6:	2700      	movs	r7, #0
 80044c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80044cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80044d0:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80044d4:	4620      	mov	r0, r4
 80044d6:	4798      	blx	r3
 80044d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80044dc:	3301      	adds	r3, #1
 80044de:	4639      	mov	r1, r7
 80044e0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80044e4:	2201      	movs	r2, #1
 80044e6:	f7ff b8e1 	b.w	80036ac <d_print_comp.part.10+0x135c>
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	49b0      	ldr	r1, [pc, #704]	; (80047b0 <d_print_comp.part.10+0x2460>)
 80044ee:	f009 f841 	bl	800d574 <strncmp>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	f47e ac3e 	bne.w	8002d74 <d_print_comp.part.10+0xa24>
 80044f8:	4631      	mov	r1, r6
 80044fa:	4620      	mov	r0, r4
 80044fc:	68aa      	ldr	r2, [r5, #8]
 80044fe:	f000 f9bd 	bl	800487c <d_print_comp>
 8004502:	4620      	mov	r0, r4
 8004504:	49ab      	ldr	r1, [pc, #684]	; (80047b4 <d_print_comp.part.10+0x2464>)
 8004506:	f7fd feef 	bl	80022e8 <d_append_string>
 800450a:	f7fe bc5f 	b.w	8002dcc <d_print_comp.part.10+0xa7c>
 800450e:	9b02      	ldr	r3, [sp, #8]
 8004510:	f7fe bed6 	b.w	80032c0 <d_print_comp.part.10+0xf70>
 8004514:	2500      	movs	r5, #0
 8004516:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800451a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800451e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004522:	4620      	mov	r0, r4
 8004524:	4798      	blx	r3
 8004526:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800452a:	3301      	adds	r3, #1
 800452c:	4629      	mov	r1, r5
 800452e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004532:	2201      	movs	r2, #1
 8004534:	f7ff bbaa 	b.w	8003c8c <d_print_comp.part.10+0x193c>
 8004538:	4620      	mov	r0, r4
 800453a:	215b      	movs	r1, #91	; 0x5b
 800453c:	f7fc f80e 	bl	800055c <d_append_char>
 8004540:	68ab      	ldr	r3, [r5, #8]
 8004542:	4631      	mov	r1, r6
 8004544:	4620      	mov	r0, r4
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	f000 f998 	bl	800487c <d_print_comp>
 800454c:	4620      	mov	r0, r4
 800454e:	215d      	movs	r1, #93	; 0x5d
 8004550:	f7fc f804 	bl	800055c <d_append_char>
 8004554:	f7ff bbdb 	b.w	8003d0e <d_print_comp.part.10+0x19be>
 8004558:	6899      	ldr	r1, [r3, #8]
 800455a:	2901      	cmp	r1, #1
 800455c:	f47f abae 	bne.w	8003cbc <d_print_comp.part.10+0x196c>
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b3e      	cmp	r3, #62	; 0x3e
 8004566:	f47f aba9 	bne.w	8003cbc <d_print_comp.part.10+0x196c>
 800456a:	4620      	mov	r0, r4
 800456c:	2128      	movs	r1, #40	; 0x28
 800456e:	f7fb fff5 	bl	800055c <d_append_char>
 8004572:	686a      	ldr	r2, [r5, #4]
 8004574:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8004578:	f7ff bba0 	b.w	8003cbc <d_print_comp.part.10+0x196c>
 800457c:	4642      	mov	r2, r8
 800457e:	4620      	mov	r0, r4
 8004580:	4631      	mov	r1, r6
 8004582:	f000 ffdd 	bl	8005540 <d_print_expr_op>
 8004586:	f7ff bbbc 	b.w	8003d02 <d_print_comp.part.10+0x19b2>
 800458a:	6893      	ldr	r3, [r2, #8]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b29      	cmp	r3, #41	; 0x29
 8004590:	bf1c      	itt	ne
 8004592:	2301      	movne	r3, #1
 8004594:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8004598:	6852      	ldr	r2, [r2, #4]
 800459a:	4620      	mov	r0, r4
 800459c:	4631      	mov	r1, r6
 800459e:	f001 f809 	bl	80055b4 <d_print_subexpr>
 80045a2:	f7ff bb9b 	b.w	8003cdc <d_print_comp.part.10+0x198c>
 80045a6:	4642      	mov	r2, r8
 80045a8:	4620      	mov	r0, r4
 80045aa:	4631      	mov	r1, r6
 80045ac:	f001 f802 	bl	80055b4 <d_print_subexpr>
 80045b0:	4620      	mov	r0, r4
 80045b2:	4631      	mov	r1, r6
 80045b4:	4652      	mov	r2, sl
 80045b6:	f000 ffc3 	bl	8005540 <d_print_expr_op>
 80045ba:	464a      	mov	r2, r9
 80045bc:	4620      	mov	r0, r4
 80045be:	4631      	mov	r1, r6
 80045c0:	f000 fff8 	bl	80055b4 <d_print_subexpr>
 80045c4:	4620      	mov	r0, r4
 80045c6:	497c      	ldr	r1, [pc, #496]	; (80047b8 <d_print_comp.part.10+0x2468>)
 80045c8:	f7fd fe8e 	bl	80022e8 <d_append_string>
 80045cc:	4620      	mov	r0, r4
 80045ce:	4631      	mov	r1, r6
 80045d0:	462a      	mov	r2, r5
 80045d2:	f000 ffef 	bl	80055b4 <d_print_subexpr>
 80045d6:	f7fd bf2f 	b.w	8002438 <d_print_comp.part.10+0xe8>
 80045da:	2700      	movs	r7, #0
 80045dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80045e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045e4:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80045e8:	4620      	mov	r0, r4
 80045ea:	4798      	blx	r3
 80045ec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80045f0:	3301      	adds	r3, #1
 80045f2:	4639      	mov	r1, r7
 80045f4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80045f8:	2201      	movs	r2, #1
 80045fa:	e462      	b.n	8003ec2 <d_print_comp.part.10+0x1b72>
 80045fc:	f04f 0800 	mov.w	r8, #0
 8004600:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004604:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004608:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 800460c:	4798      	blx	r3
 800460e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004612:	3301      	adds	r3, #1
 8004614:	4641      	mov	r1, r8
 8004616:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800461a:	2201      	movs	r2, #1
 800461c:	e440      	b.n	8003ea0 <d_print_comp.part.10+0x1b50>
 800461e:	2500      	movs	r5, #0
 8004620:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004624:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004628:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800462c:	4620      	mov	r0, r4
 800462e:	4798      	blx	r3
 8004630:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004634:	3301      	adds	r3, #1
 8004636:	4629      	mov	r1, r5
 8004638:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800463c:	2201      	movs	r2, #1
 800463e:	f7ff bbce 	b.w	8003dde <d_print_comp.part.10+0x1a8e>
 8004642:	686b      	ldr	r3, [r5, #4]
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	2a01      	cmp	r2, #1
 8004648:	f47f abed 	bne.w	8003e26 <d_print_comp.part.10+0x1ad6>
 800464c:	68aa      	ldr	r2, [r5, #8]
 800464e:	7812      	ldrb	r2, [r2, #0]
 8004650:	2a29      	cmp	r2, #41	; 0x29
 8004652:	bf08      	it	eq
 8004654:	461d      	moveq	r5, r3
 8004656:	f7ff bbe6 	b.w	8003e26 <d_print_comp.part.10+0x1ad6>
 800465a:	ab16      	add	r3, sp, #88	; 0x58
 800465c:	9705      	str	r7, [sp, #20]
 800465e:	f843 ad48 	str.w	sl, [r3, #-72]!
 8004662:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004666:	f7fe ba05 	b.w	8002a74 <d_print_comp.part.10+0x724>
 800466a:	4631      	mov	r1, r6
 800466c:	4620      	mov	r0, r4
 800466e:	686a      	ldr	r2, [r5, #4]
 8004670:	f000 ffa0 	bl	80055b4 <d_print_subexpr>
 8004674:	4620      	mov	r0, r4
 8004676:	4951      	ldr	r1, [pc, #324]	; (80047bc <d_print_comp.part.10+0x246c>)
 8004678:	f7fd fe36 	bl	80022e8 <d_append_string>
 800467c:	f7fd bedc 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8004680:	2500      	movs	r5, #0
 8004682:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004686:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800468a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800468e:	4620      	mov	r0, r4
 8004690:	4798      	blx	r3
 8004692:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004696:	3301      	adds	r3, #1
 8004698:	4629      	mov	r1, r5
 800469a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800469e:	f7ff bbf0 	b.w	8003e82 <d_print_comp.part.10+0x1b32>
 80046a2:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 80046a6:	4619      	mov	r1, r3
 80046a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80046ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80046b0:	4620      	mov	r0, r4
 80046b2:	4798      	blx	r3
 80046b4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80046be:	463b      	mov	r3, r7
 80046c0:	f7ff bbce 	b.w	8003e60 <d_print_comp.part.10+0x1b10>
 80046c4:	1cf3      	adds	r3, r6, #3
 80046c6:	429f      	cmp	r7, r3
 80046c8:	f67f acac 	bls.w	8004024 <d_print_comp.part.10+0x1cd4>
 80046cc:	2100      	movs	r1, #0
 80046ce:	e004      	b.n	80046da <d_print_comp.part.10+0x238a>
 80046d0:	4615      	mov	r5, r2
 80046d2:	42bb      	cmp	r3, r7
 80046d4:	eb05 1101 	add.w	r1, r5, r1, lsl #4
 80046d8:	d015      	beq.n	8004706 <d_print_comp.part.10+0x23b6>
 80046da:	469c      	mov	ip, r3
 80046dc:	f813 5b01 	ldrb.w	r5, [r3], #1
 80046e0:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 80046e4:	b2d0      	uxtb	r0, r2
 80046e6:	2809      	cmp	r0, #9
 80046e8:	f1a5 0941 	sub.w	r9, r5, #65	; 0x41
 80046ec:	d9f0      	bls.n	80046d0 <d_print_comp.part.10+0x2380>
 80046ee:	f1b9 0f05 	cmp.w	r9, #5
 80046f2:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 80046f6:	d801      	bhi.n	80046fc <d_print_comp.part.10+0x23ac>
 80046f8:	3d37      	subs	r5, #55	; 0x37
 80046fa:	e7ea      	b.n	80046d2 <d_print_comp.part.10+0x2382>
 80046fc:	2a05      	cmp	r2, #5
 80046fe:	f200 8087 	bhi.w	8004810 <d_print_comp.part.10+0x24c0>
 8004702:	3d57      	subs	r5, #87	; 0x57
 8004704:	e7e5      	b.n	80046d2 <d_print_comp.part.10+0x2382>
 8004706:	255f      	movs	r5, #95	; 0x5f
 8004708:	e471      	b.n	8003fee <d_print_comp.part.10+0x1c9e>
 800470a:	464c      	mov	r4, r9
 800470c:	2301      	movs	r3, #1
 800470e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8004712:	f7fd be91 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8004716:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800471a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800471e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004722:	4620      	mov	r0, r4
 8004724:	4798      	blx	r3
 8004726:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800472a:	3301      	adds	r3, #1
 800472c:	4631      	mov	r1, r6
 800472e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004732:	e636      	b.n	80043a2 <d_print_comp.part.10+0x2052>
 8004734:	686a      	ldr	r2, [r5, #4]
 8004736:	4620      	mov	r0, r4
 8004738:	4631      	mov	r1, r6
 800473a:	f000 ff3b 	bl	80055b4 <d_print_subexpr>
 800473e:	4620      	mov	r0, r4
 8004740:	4631      	mov	r1, r6
 8004742:	463a      	mov	r2, r7
 8004744:	f000 fefc 	bl	8005540 <d_print_expr_op>
 8004748:	f7fd be76 	b.w	8002438 <d_print_comp.part.10+0xe8>
 800474c:	2b3b      	cmp	r3, #59	; 0x3b
 800474e:	f47e ac50 	bne.w	8002ff2 <d_print_comp.part.10+0xca2>
 8004752:	6853      	ldr	r3, [r2, #4]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b30      	cmp	r3, #48	; 0x30
 8004758:	f000 8088 	beq.w	800486c <d_print_comp.part.10+0x251c>
 800475c:	2b31      	cmp	r3, #49	; 0x31
 800475e:	f47e ac48 	bne.w	8002ff2 <d_print_comp.part.10+0xca2>
 8004762:	4917      	ldr	r1, [pc, #92]	; (80047c0 <d_print_comp.part.10+0x2470>)
 8004764:	f7fd fdc0 	bl	80022e8 <d_append_string>
 8004768:	f7fd be66 	b.w	8002438 <d_print_comp.part.10+0xe8>
 800476c:	2500      	movs	r5, #0
 800476e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004772:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004776:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800477a:	4620      	mov	r0, r4
 800477c:	4798      	blx	r3
 800477e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004782:	3301      	adds	r3, #1
 8004784:	4629      	mov	r1, r5
 8004786:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800478a:	e650      	b.n	800442e <d_print_comp.part.10+0x20de>
 800478c:	2500      	movs	r5, #0
 800478e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004792:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004796:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800479a:	4620      	mov	r0, r4
 800479c:	4798      	blx	r3
 800479e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80047a2:	3301      	adds	r3, #1
 80047a4:	4629      	mov	r1, r5
 80047a6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80047aa:	e613      	b.n	80043d4 <d_print_comp.part.10+0x2084>
 80047ac:	0800edc8 	.word	0x0800edc8
 80047b0:	0800eb70 	.word	0x0800eb70
 80047b4:	0800eb78 	.word	0x0800eb78
 80047b8:	0800ed04 	.word	0x0800ed04
 80047bc:	0800ed48 	.word	0x0800ed48
 80047c0:	0800ed24 	.word	0x0800ed24
 80047c4:	2700      	movs	r7, #0
 80047c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80047ca:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80047ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80047d2:	4620      	mov	r0, r4
 80047d4:	4798      	blx	r3
 80047d6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80047da:	3301      	adds	r3, #1
 80047dc:	4639      	mov	r1, r7
 80047de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80047e2:	e605      	b.n	80043f0 <d_print_comp.part.10+0x20a0>
 80047e4:	2700      	movs	r7, #0
 80047e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80047ea:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80047ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80047f2:	4620      	mov	r0, r4
 80047f4:	4798      	blx	r3
 80047f6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80047fa:	3301      	adds	r3, #1
 80047fc:	4639      	mov	r1, r7
 80047fe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004802:	e603      	b.n	800440c <d_print_comp.part.10+0x20bc>
 8004804:	212d      	movs	r1, #45	; 0x2d
 8004806:	f7fb fea9 	bl	800055c <d_append_char>
 800480a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800480e:	e569      	b.n	80042e4 <d_print_comp.part.10+0x1f94>
 8004810:	4567      	cmp	r7, ip
 8004812:	f67f af78 	bls.w	8004706 <d_print_comp.part.10+0x23b6>
 8004816:	2d5f      	cmp	r5, #95	; 0x5f
 8004818:	f47f af75 	bne.w	8004706 <d_print_comp.part.10+0x23b6>
 800481c:	29ff      	cmp	r1, #255	; 0xff
 800481e:	f63f abe6 	bhi.w	8003fee <d_print_comp.part.10+0x1c9e>
 8004822:	b2c9      	uxtb	r1, r1
 8004824:	4620      	mov	r0, r4
 8004826:	4666      	mov	r6, ip
 8004828:	f7fb fe98 	bl	800055c <d_append_char>
 800482c:	f7ff bbe9 	b.w	8004002 <d_print_comp.part.10+0x1cb2>
 8004830:	6840      	ldr	r0, [r0, #4]
 8004832:	2800      	cmp	r0, #0
 8004834:	f43f adab 	beq.w	800438e <d_print_comp.part.10+0x203e>
 8004838:	7803      	ldrb	r3, [r0, #0]
 800483a:	f7fe be87 	b.w	800354c <d_print_comp.part.10+0x11fc>
 800483e:	f47f aa8c 	bne.w	8003d5a <d_print_comp.part.10+0x1a0a>
 8004842:	6840      	ldr	r0, [r0, #4]
 8004844:	2800      	cmp	r0, #0
 8004846:	f47e aa79 	bne.w	8002d3c <d_print_comp.part.10+0x9ec>
 800484a:	f7ff ba86 	b.w	8003d5a <d_print_comp.part.10+0x1a0a>
 800484e:	4631      	mov	r1, r6
 8004850:	4620      	mov	r0, r4
 8004852:	68aa      	ldr	r2, [r5, #8]
 8004854:	f000 f812 	bl	800487c <d_print_comp>
 8004858:	9b08      	ldr	r3, [sp, #32]
 800485a:	9902      	ldr	r1, [sp, #8]
 800485c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 8004860:	2b00      	cmp	r3, #0
 8004862:	f47d ade9 	bne.w	8002438 <d_print_comp.part.10+0xe8>
 8004866:	460b      	mov	r3, r1
 8004868:	f7fe bd2a 	b.w	80032c0 <d_print_comp.part.10+0xf70>
 800486c:	4902      	ldr	r1, [pc, #8]	; (8004878 <d_print_comp.part.10+0x2528>)
 800486e:	f7fd fd3b 	bl	80022e8 <d_append_string>
 8004872:	f7fd bde1 	b.w	8002438 <d_print_comp.part.10+0xe8>
 8004876:	bf00      	nop
 8004878:	0800ed1c 	.word	0x0800ed1c

0800487c <d_print_comp>:
 800487c:	b12a      	cbz	r2, 800488a <d_print_comp+0xe>
 800487e:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8004882:	b90b      	cbnz	r3, 8004888 <d_print_comp+0xc>
 8004884:	f7fd bd64 	b.w	8002350 <d_print_comp.part.10>
 8004888:	4770      	bx	lr
 800488a:	2201      	movs	r2, #1
 800488c:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop

08004894 <d_print_mod>:
 8004894:	7813      	ldrb	r3, [r2, #0]
 8004896:	3b03      	subs	r3, #3
 8004898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800489c:	4615      	mov	r5, r2
 800489e:	4604      	mov	r4, r0
 80048a0:	4689      	mov	r9, r1
 80048a2:	2b2a      	cmp	r3, #42	; 0x2a
 80048a4:	f200 81d3 	bhi.w	8004c4e <d_print_mod+0x3ba>
 80048a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80048ac:	01d10052 	.word	0x01d10052
 80048b0:	01d101d1 	.word	0x01d101d1
 80048b4:	01d101d1 	.word	0x01d101d1
 80048b8:	01d101d1 	.word	0x01d101d1
 80048bc:	01d101d1 	.word	0x01d101d1
 80048c0:	01d101d1 	.word	0x01d101d1
 80048c4:	01d101d1 	.word	0x01d101d1
 80048c8:	01d101d1 	.word	0x01d101d1
 80048cc:	01d101d1 	.word	0x01d101d1
 80048d0:	01d101d1 	.word	0x01d101d1
 80048d4:	01d101d1 	.word	0x01d101d1
 80048d8:	0083005d 	.word	0x0083005d
 80048dc:	005d00a9 	.word	0x005d00a9
 80048e0:	00a90083 	.word	0x00a90083
 80048e4:	00e600ce 	.word	0x00e600ce
 80048e8:	0132011d 	.word	0x0132011d
 80048ec:	01470144 	.word	0x01470144
 80048f0:	0170014a 	.word	0x0170014a
 80048f4:	01d101d1 	.word	0x01d101d1
 80048f8:	01d101d1 	.word	0x01d101d1
 80048fc:	01d10195 	.word	0x01d10195
 8004900:	002b      	.short	0x002b
 8004902:	4ed9      	ldr	r6, [pc, #868]	; (8004c68 <d_print_mod+0x3d4>)
 8004904:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004908:	f106 0a0a 	add.w	sl, r6, #10
 800490c:	f04f 0800 	mov.w	r8, #0
 8004910:	e009      	b.n	8004926 <d_print_mod+0x92>
 8004912:	461a      	mov	r2, r3
 8004914:	3301      	adds	r3, #1
 8004916:	4556      	cmp	r6, sl
 8004918:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800491c:	54a7      	strb	r7, [r4, r2]
 800491e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004922:	f000 81b9 	beq.w	8004c98 <d_print_mod+0x404>
 8004926:	2bff      	cmp	r3, #255	; 0xff
 8004928:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800492c:	d1f1      	bne.n	8004912 <d_print_mod+0x7e>
 800492e:	4619      	mov	r1, r3
 8004930:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004934:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004938:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800493c:	4620      	mov	r0, r4
 800493e:	4798      	blx	r3
 8004940:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004944:	3301      	adds	r3, #1
 8004946:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800494a:	2200      	movs	r2, #0
 800494c:	2301      	movs	r3, #1
 800494e:	e7e2      	b.n	8004916 <d_print_mod+0x82>
 8004950:	686a      	ldr	r2, [r5, #4]
 8004952:	2a00      	cmp	r2, #0
 8004954:	f000 80d7 	beq.w	8004b06 <d_print_mod+0x272>
 8004958:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 81ba 	beq.w	8004cd6 <d_print_mod+0x442>
 8004962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004966:	4dc1      	ldr	r5, [pc, #772]	; (8004c6c <d_print_mod+0x3d8>)
 8004968:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800496c:	f105 0709 	add.w	r7, r5, #9
 8004970:	f04f 0800 	mov.w	r8, #0
 8004974:	e009      	b.n	800498a <d_print_mod+0xf6>
 8004976:	460b      	mov	r3, r1
 8004978:	3101      	adds	r1, #1
 800497a:	42bd      	cmp	r5, r7
 800497c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004980:	54e6      	strb	r6, [r4, r3]
 8004982:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004986:	f000 8183 	beq.w	8004c90 <d_print_mod+0x3fc>
 800498a:	29ff      	cmp	r1, #255	; 0xff
 800498c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004990:	d1f1      	bne.n	8004976 <d_print_mod+0xe2>
 8004992:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004996:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800499a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800499e:	4620      	mov	r0, r4
 80049a0:	4798      	blx	r3
 80049a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80049a6:	3301      	adds	r3, #1
 80049a8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80049ac:	2101      	movs	r1, #1
 80049ae:	2300      	movs	r3, #0
 80049b0:	e7e3      	b.n	800497a <d_print_mod+0xe6>
 80049b2:	4daf      	ldr	r5, [pc, #700]	; (8004c70 <d_print_mod+0x3dc>)
 80049b4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80049b8:	f105 0709 	add.w	r7, r5, #9
 80049bc:	f04f 0800 	mov.w	r8, #0
 80049c0:	e009      	b.n	80049d6 <d_print_mod+0x142>
 80049c2:	460b      	mov	r3, r1
 80049c4:	3101      	adds	r1, #1
 80049c6:	42bd      	cmp	r5, r7
 80049c8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80049cc:	54e6      	strb	r6, [r4, r3]
 80049ce:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80049d2:	f000 815f 	beq.w	8004c94 <d_print_mod+0x400>
 80049d6:	29ff      	cmp	r1, #255	; 0xff
 80049d8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80049dc:	d1f1      	bne.n	80049c2 <d_print_mod+0x12e>
 80049de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80049e2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80049e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80049ea:	4620      	mov	r0, r4
 80049ec:	4798      	blx	r3
 80049ee:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80049f2:	3301      	adds	r3, #1
 80049f4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80049f8:	2101      	movs	r1, #1
 80049fa:	2300      	movs	r3, #0
 80049fc:	e7e3      	b.n	80049c6 <d_print_mod+0x132>
 80049fe:	4d9d      	ldr	r5, [pc, #628]	; (8004c74 <d_print_mod+0x3e0>)
 8004a00:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004a04:	1daf      	adds	r7, r5, #6
 8004a06:	f04f 0800 	mov.w	r8, #0
 8004a0a:	e009      	b.n	8004a20 <d_print_mod+0x18c>
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	3101      	adds	r1, #1
 8004a10:	42bd      	cmp	r5, r7
 8004a12:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004a16:	54e6      	strb	r6, [r4, r3]
 8004a18:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004a1c:	f000 8121 	beq.w	8004c62 <d_print_mod+0x3ce>
 8004a20:	29ff      	cmp	r1, #255	; 0xff
 8004a22:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004a26:	d1f1      	bne.n	8004a0c <d_print_mod+0x178>
 8004a28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a2c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004a30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a34:	4620      	mov	r0, r4
 8004a36:	4798      	blx	r3
 8004a38:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004a42:	2101      	movs	r1, #1
 8004a44:	2300      	movs	r3, #0
 8004a46:	e7e3      	b.n	8004a10 <d_print_mod+0x17c>
 8004a48:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004a4c:	2bff      	cmp	r3, #255	; 0xff
 8004a4e:	f000 8159 	beq.w	8004d04 <d_print_mod+0x470>
 8004a52:	1c59      	adds	r1, r3, #1
 8004a54:	2220      	movs	r2, #32
 8004a56:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004a5a:	54e2      	strb	r2, [r4, r3]
 8004a5c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004a60:	29ff      	cmp	r1, #255	; 0xff
 8004a62:	f000 813e 	beq.w	8004ce2 <d_print_mod+0x44e>
 8004a66:	1c4a      	adds	r2, r1, #1
 8004a68:	2326      	movs	r3, #38	; 0x26
 8004a6a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004a6e:	5463      	strb	r3, [r4, r1]
 8004a70:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a78:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004a7c:	2bff      	cmp	r3, #255	; 0xff
 8004a7e:	f000 8162 	beq.w	8004d46 <d_print_mod+0x4b2>
 8004a82:	1c59      	adds	r1, r3, #1
 8004a84:	2220      	movs	r2, #32
 8004a86:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004a8a:	54e2      	strb	r2, [r4, r3]
 8004a8c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004a90:	4d79      	ldr	r5, [pc, #484]	; (8004c78 <d_print_mod+0x3e4>)
 8004a92:	f04f 0800 	mov.w	r8, #0
 8004a96:	1caf      	adds	r7, r5, #2
 8004a98:	e009      	b.n	8004aae <d_print_mod+0x21a>
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	42bd      	cmp	r5, r7
 8004a9e:	f101 0101 	add.w	r1, r1, #1
 8004aa2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004aa6:	54e6      	strb	r6, [r4, r3]
 8004aa8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004aac:	d019      	beq.n	8004ae2 <d_print_mod+0x24e>
 8004aae:	29ff      	cmp	r1, #255	; 0xff
 8004ab0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004ab4:	d1f1      	bne.n	8004a9a <d_print_mod+0x206>
 8004ab6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004aba:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004abe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	4798      	blx	r3
 8004ac6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004aca:	3301      	adds	r3, #1
 8004acc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	42bd      	cmp	r5, r7
 8004ad6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004ada:	54e6      	strb	r6, [r4, r3]
 8004adc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004ae0:	d1e5      	bne.n	8004aae <d_print_mod+0x21a>
 8004ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004aea:	29ff      	cmp	r1, #255	; 0xff
 8004aec:	f000 811b 	beq.w	8004d26 <d_print_mod+0x492>
 8004af0:	1c4a      	adds	r2, r1, #1
 8004af2:	2320      	movs	r3, #32
 8004af4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004af8:	5463      	strb	r3, [r4, r1]
 8004afa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004afe:	68aa      	ldr	r2, [r5, #8]
 8004b00:	2a00      	cmp	r2, #0
 8004b02:	f47f af29 	bne.w	8004958 <d_print_mod+0xc4>
 8004b06:	2301      	movs	r3, #1
 8004b08:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8004b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b10:	f011 0904 	ands.w	r9, r1, #4
 8004b14:	f47f af25 	bne.w	8004962 <d_print_mod+0xce>
 8004b18:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004b1c:	29ff      	cmp	r1, #255	; 0xff
 8004b1e:	f000 814d 	beq.w	8004dbc <d_print_mod+0x528>
 8004b22:	1c4a      	adds	r2, r1, #1
 8004b24:	232a      	movs	r3, #42	; 0x2a
 8004b26:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004b2a:	5463      	strb	r3, [r4, r1]
 8004b2c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b34:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004b38:	e792      	b.n	8004a60 <d_print_mod+0x1cc>
 8004b3a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004b3e:	e7a7      	b.n	8004a90 <d_print_mod+0x1fc>
 8004b40:	4d4e      	ldr	r5, [pc, #312]	; (8004c7c <d_print_mod+0x3e8>)
 8004b42:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004b46:	f105 0708 	add.w	r7, r5, #8
 8004b4a:	f04f 0800 	mov.w	r8, #0
 8004b4e:	e009      	b.n	8004b64 <d_print_mod+0x2d0>
 8004b50:	460b      	mov	r3, r1
 8004b52:	3101      	adds	r1, #1
 8004b54:	42bd      	cmp	r5, r7
 8004b56:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004b5a:	54e6      	strb	r6, [r4, r3]
 8004b5c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004b60:	f000 8094 	beq.w	8004c8c <d_print_mod+0x3f8>
 8004b64:	29ff      	cmp	r1, #255	; 0xff
 8004b66:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004b6a:	d1f1      	bne.n	8004b50 <d_print_mod+0x2bc>
 8004b6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004b70:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004b74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004b78:	4620      	mov	r0, r4
 8004b7a:	4798      	blx	r3
 8004b7c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004b80:	3301      	adds	r3, #1
 8004b82:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004b86:	2101      	movs	r1, #1
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e7e3      	b.n	8004b54 <d_print_mod+0x2c0>
 8004b8c:	4d3c      	ldr	r5, [pc, #240]	; (8004c80 <d_print_mod+0x3ec>)
 8004b8e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004b92:	f105 070a 	add.w	r7, r5, #10
 8004b96:	f04f 0800 	mov.w	r8, #0
 8004b9a:	e008      	b.n	8004bae <d_print_mod+0x31a>
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	3101      	adds	r1, #1
 8004ba0:	42bd      	cmp	r5, r7
 8004ba2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004ba6:	54e6      	strb	r6, [r4, r3]
 8004ba8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004bac:	d06c      	beq.n	8004c88 <d_print_mod+0x3f4>
 8004bae:	29ff      	cmp	r1, #255	; 0xff
 8004bb0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004bb4:	d1f2      	bne.n	8004b9c <d_print_mod+0x308>
 8004bb6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004bba:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004bbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	4798      	blx	r3
 8004bc6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004bca:	3301      	adds	r3, #1
 8004bcc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e7e4      	b.n	8004ba0 <d_print_mod+0x30c>
 8004bd6:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8004bda:	2b28      	cmp	r3, #40	; 0x28
 8004bdc:	d00b      	beq.n	8004bf6 <d_print_mod+0x362>
 8004bde:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004be2:	29ff      	cmp	r1, #255	; 0xff
 8004be4:	f000 80da 	beq.w	8004d9c <d_print_mod+0x508>
 8004be8:	1c4a      	adds	r2, r1, #1
 8004bea:	2320      	movs	r3, #32
 8004bec:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004bf0:	5463      	strb	r3, [r4, r1]
 8004bf2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004bf6:	686a      	ldr	r2, [r5, #4]
 8004bf8:	2a00      	cmp	r2, #0
 8004bfa:	f000 80c7 	beq.w	8004d8c <d_print_mod+0x4f8>
 8004bfe:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d062      	beq.n	8004ccc <d_print_mod+0x438>
 8004c06:	4d1f      	ldr	r5, [pc, #124]	; (8004c84 <d_print_mod+0x3f0>)
 8004c08:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004c0c:	1cef      	adds	r7, r5, #3
 8004c0e:	f04f 0800 	mov.w	r8, #0
 8004c12:	e008      	b.n	8004c26 <d_print_mod+0x392>
 8004c14:	460b      	mov	r3, r1
 8004c16:	3101      	adds	r1, #1
 8004c18:	42bd      	cmp	r5, r7
 8004c1a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004c1e:	54e6      	strb	r6, [r4, r3]
 8004c20:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004c24:	d049      	beq.n	8004cba <d_print_mod+0x426>
 8004c26:	29ff      	cmp	r1, #255	; 0xff
 8004c28:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004c2c:	d1f2      	bne.n	8004c14 <d_print_mod+0x380>
 8004c2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c32:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004c36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	4798      	blx	r3
 8004c3e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004c42:	3301      	adds	r3, #1
 8004c44:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004c48:	2101      	movs	r1, #1
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e7e4      	b.n	8004c18 <d_print_mod+0x384>
 8004c4e:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f47f ae85 	bne.w	8004962 <d_print_mod+0xce>
 8004c58:	462a      	mov	r2, r5
 8004c5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c5e:	f7fd bb77 	b.w	8002350 <d_print_comp.part.10>
 8004c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c66:	bf00      	nop
 8004c68:	0800ee0b 	.word	0x0800ee0b
 8004c6c:	0800edcb 	.word	0x0800edcb
 8004c70:	0800edd7 	.word	0x0800edd7
 8004c74:	0800ede3 	.word	0x0800ede3
 8004c78:	0800edeb 	.word	0x0800edeb
 8004c7c:	0800edef 	.word	0x0800edef
 8004c80:	0800edfb 	.word	0x0800edfb
 8004c84:	0800ee07 	.word	0x0800ee07
 8004c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c98:	686a      	ldr	r2, [r5, #4]
 8004c9a:	2a00      	cmp	r2, #0
 8004c9c:	d07a      	beq.n	8004d94 <d_print_mod+0x500>
 8004c9e:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
 8004ca2:	b161      	cbz	r1, 8004cbe <d_print_mod+0x42a>
 8004ca4:	2bff      	cmp	r3, #255	; 0xff
 8004ca6:	d05f      	beq.n	8004d68 <d_print_mod+0x4d4>
 8004ca8:	1c59      	adds	r1, r3, #1
 8004caa:	2229      	movs	r2, #41	; 0x29
 8004cac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004cb0:	54e2      	strb	r2, [r4, r3]
 8004cb2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f7fd fb45 	bl	8002350 <d_print_comp.part.10>
 8004cc6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004cca:	e7eb      	b.n	8004ca4 <d_print_mod+0x410>
 8004ccc:	4649      	mov	r1, r9
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f7fd fb3e 	bl	8002350 <d_print_comp.part.10>
 8004cd4:	e797      	b.n	8004c06 <d_print_mod+0x372>
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	4649      	mov	r1, r9
 8004cda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cde:	f7fd bb37 	b.w	8002350 <d_print_comp.part.10>
 8004ce2:	2500      	movs	r5, #0
 8004ce4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ce8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cec:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	4798      	blx	r3
 8004cf4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004d00:	2201      	movs	r2, #1
 8004d02:	e6b1      	b.n	8004a68 <d_print_mod+0x1d4>
 8004d04:	2500      	movs	r5, #0
 8004d06:	4619      	mov	r1, r3
 8004d08:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004d0c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004d10:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8004d14:	4798      	blx	r3
 8004d16:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8004d20:	462b      	mov	r3, r5
 8004d22:	2101      	movs	r1, #1
 8004d24:	e696      	b.n	8004a54 <d_print_mod+0x1c0>
 8004d26:	2600      	movs	r6, #0
 8004d28:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004d2c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004d30:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8004d34:	4798      	blx	r3
 8004d36:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004d42:	2201      	movs	r2, #1
 8004d44:	e6d5      	b.n	8004af2 <d_print_mod+0x25e>
 8004d46:	2500      	movs	r5, #0
 8004d48:	4619      	mov	r1, r3
 8004d4a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004d4e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004d52:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8004d56:	4798      	blx	r3
 8004d58:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8004d62:	462b      	mov	r3, r5
 8004d64:	2101      	movs	r1, #1
 8004d66:	e68d      	b.n	8004a84 <d_print_mod+0x1f0>
 8004d68:	2500      	movs	r5, #0
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d74:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004d78:	4620      	mov	r0, r4
 8004d7a:	4798      	blx	r3
 8004d7c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8004d86:	462b      	mov	r3, r5
 8004d88:	2101      	movs	r1, #1
 8004d8a:	e78e      	b.n	8004caa <d_print_mod+0x416>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8004d92:	e738      	b.n	8004c06 <d_print_mod+0x372>
 8004d94:	2201      	movs	r2, #1
 8004d96:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
 8004d9a:	e783      	b.n	8004ca4 <d_print_mod+0x410>
 8004d9c:	2600      	movs	r6, #0
 8004d9e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004da2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004da6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8004daa:	4798      	blx	r3
 8004dac:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004db0:	3301      	adds	r3, #1
 8004db2:	4631      	mov	r1, r6
 8004db4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004db8:	2201      	movs	r2, #1
 8004dba:	e716      	b.n	8004bea <d_print_mod+0x356>
 8004dbc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004dc0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004dc4:	f880 90ff 	strb.w	r9, [r0, #255]	; 0xff
 8004dc8:	4798      	blx	r3
 8004dca:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004dce:	3301      	adds	r3, #1
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	e6a4      	b.n	8004b24 <d_print_mod+0x290>
 8004dda:	bf00      	nop

08004ddc <d_print_mod_list>:
 8004ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de0:	4614      	mov	r4, r2
 8004de2:	b089      	sub	sp, #36	; 0x24
 8004de4:	4605      	mov	r5, r0
 8004de6:	460f      	mov	r7, r1
 8004de8:	461e      	mov	r6, r3
 8004dea:	b33a      	cbz	r2, 8004e3c <d_print_mod_list+0x60>
 8004dec:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8004df0:	bb23      	cbnz	r3, 8004e3c <d_print_mod_list+0x60>
 8004df2:	f04f 0801 	mov.w	r8, #1
 8004df6:	e002      	b.n	8004dfe <d_print_mod_list+0x22>
 8004df8:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8004dfc:	b9f2      	cbnz	r2, 8004e3c <d_print_mod_list+0x60>
 8004dfe:	68a2      	ldr	r2, [r4, #8]
 8004e00:	b9ca      	cbnz	r2, 8004e36 <d_print_mod_list+0x5a>
 8004e02:	6862      	ldr	r2, [r4, #4]
 8004e04:	7810      	ldrb	r0, [r2, #0]
 8004e06:	b91e      	cbnz	r6, 8004e10 <d_print_mod_list+0x34>
 8004e08:	f1a0 031c 	sub.w	r3, r0, #28
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d912      	bls.n	8004e36 <d_print_mod_list+0x5a>
 8004e10:	68e3      	ldr	r3, [r4, #12]
 8004e12:	f8c4 8008 	str.w	r8, [r4, #8]
 8004e16:	2829      	cmp	r0, #41	; 0x29
 8004e18:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 8004e1c:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 8004e20:	d00f      	beq.n	8004e42 <d_print_mod_list+0x66>
 8004e22:	282a      	cmp	r0, #42	; 0x2a
 8004e24:	d018      	beq.n	8004e58 <d_print_mod_list+0x7c>
 8004e26:	2802      	cmp	r0, #2
 8004e28:	d021      	beq.n	8004e6e <d_print_mod_list+0x92>
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	4639      	mov	r1, r7
 8004e2e:	f7ff fd31 	bl	8004894 <d_print_mod>
 8004e32:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8004e36:	6824      	ldr	r4, [r4, #0]
 8004e38:	2c00      	cmp	r4, #0
 8004e3a:	d1dd      	bne.n	8004df8 <d_print_mod_list+0x1c>
 8004e3c:	b009      	add	sp, #36	; 0x24
 8004e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e42:	4639      	mov	r1, r7
 8004e44:	3208      	adds	r2, #8
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 f9c9 	bl	80051e0 <d_print_function_type.isra.11>
 8004e4e:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8004e52:	b009      	add	sp, #36	; 0x24
 8004e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e58:	4639      	mov	r1, r7
 8004e5a:	3204      	adds	r2, #4
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f000 f8ee 	bl	8005040 <d_print_array_type.isra.9>
 8004e64:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8004e68:	b009      	add	sp, #36	; 0x24
 8004e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6e:	2600      	movs	r6, #0
 8004e70:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 8004e74:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 8004e78:	6852      	ldr	r2, [r2, #4]
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	4639      	mov	r1, r7
 8004e7e:	f7ff fcfd 	bl	800487c <d_print_comp>
 8004e82:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 8004e86:	f017 0804 	ands.w	r8, r7, #4
 8004e8a:	d123      	bne.n	8004ed4 <d_print_mod_list+0xf8>
 8004e8c:	4e68      	ldr	r6, [pc, #416]	; (8005030 <d_print_mod_list+0x254>)
 8004e8e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8004e92:	f106 0b02 	add.w	fp, r6, #2
 8004e96:	e009      	b.n	8004eac <d_print_mod_list+0xd0>
 8004e98:	460b      	mov	r3, r1
 8004e9a:	3101      	adds	r1, #1
 8004e9c:	455e      	cmp	r6, fp
 8004e9e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8004ea2:	f805 a003 	strb.w	sl, [r5, r3]
 8004ea6:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 8004eaa:	d01e      	beq.n	8004eea <d_print_mod_list+0x10e>
 8004eac:	29ff      	cmp	r1, #255	; 0xff
 8004eae:	f816 af01 	ldrb.w	sl, [r6, #1]!
 8004eb2:	d1f1      	bne.n	8004e98 <d_print_mod_list+0xbc>
 8004eb4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8004eb8:	f885 80ff 	strb.w	r8, [r5, #255]	; 0xff
 8004ebc:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	4798      	blx	r3
 8004ec4:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8004ec8:	3301      	adds	r3, #1
 8004eca:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8004ece:	2101      	movs	r1, #1
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e7e3      	b.n	8004e9c <d_print_mod_list+0xc0>
 8004ed4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8004ed8:	29ff      	cmp	r1, #255	; 0xff
 8004eda:	d01b      	beq.n	8004f14 <d_print_mod_list+0x138>
 8004edc:	1c4a      	adds	r2, r1, #1
 8004ede:	232e      	movs	r3, #46	; 0x2e
 8004ee0:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8004ee4:	546b      	strb	r3, [r5, r1]
 8004ee6:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 8004eea:	6863      	ldr	r3, [r4, #4]
 8004eec:	689c      	ldr	r4, [r3, #8]
 8004eee:	7823      	ldrb	r3, [r4, #0]
 8004ef0:	2b45      	cmp	r3, #69	; 0x45
 8004ef2:	d102      	bne.n	8004efa <d_print_mod_list+0x11e>
 8004ef4:	e01e      	b.n	8004f34 <d_print_mod_list+0x158>
 8004ef6:	6864      	ldr	r4, [r4, #4]
 8004ef8:	7823      	ldrb	r3, [r4, #0]
 8004efa:	3b1c      	subs	r3, #28
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d9fa      	bls.n	8004ef6 <d_print_mod_list+0x11a>
 8004f00:	4639      	mov	r1, r7
 8004f02:	4622      	mov	r2, r4
 8004f04:	4628      	mov	r0, r5
 8004f06:	f7ff fcb9 	bl	800487c <d_print_comp>
 8004f0a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8004f0e:	b009      	add	sp, #36	; 0x24
 8004f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f14:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8004f18:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8004f1c:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 8004f20:	4628      	mov	r0, r5
 8004f22:	4798      	blx	r3
 8004f24:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8004f28:	3301      	adds	r3, #1
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8004f30:	2201      	movs	r2, #1
 8004f32:	e7d4      	b.n	8004ede <d_print_mod_list+0x102>
 8004f34:	4e3f      	ldr	r6, [pc, #252]	; (8005034 <d_print_mod_list+0x258>)
 8004f36:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8004f3a:	f106 0a0d 	add.w	sl, r6, #13
 8004f3e:	f04f 0b00 	mov.w	fp, #0
 8004f42:	e009      	b.n	8004f58 <d_print_mod_list+0x17c>
 8004f44:	460b      	mov	r3, r1
 8004f46:	3101      	adds	r1, #1
 8004f48:	4556      	cmp	r6, sl
 8004f4a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8004f4e:	f805 8003 	strb.w	r8, [r5, r3]
 8004f52:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8004f56:	d013      	beq.n	8004f80 <d_print_mod_list+0x1a4>
 8004f58:	29ff      	cmp	r1, #255	; 0xff
 8004f5a:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8004f5e:	d1f1      	bne.n	8004f44 <d_print_mod_list+0x168>
 8004f60:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8004f64:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8004f68:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	4798      	blx	r3
 8004f70:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8004f74:	3301      	adds	r3, #1
 8004f76:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e7e3      	b.n	8004f48 <d_print_mod_list+0x16c>
 8004f80:	68a2      	ldr	r2, [r4, #8]
 8004f82:	492d      	ldr	r1, [pc, #180]	; (8005038 <d_print_mod_list+0x25c>)
 8004f84:	3201      	adds	r2, #1
 8004f86:	a801      	add	r0, sp, #4
 8004f88:	f001 fd4e 	bl	8006a28 <siprintf>
 8004f8c:	a801      	add	r0, sp, #4
 8004f8e:	f008 fae9 	bl	800d564 <strlen>
 8004f92:	b330      	cbz	r0, 8004fe2 <d_print_mod_list+0x206>
 8004f94:	f10d 0603 	add.w	r6, sp, #3
 8004f98:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8004f9c:	eb06 0a00 	add.w	sl, r6, r0
 8004fa0:	f04f 0b00 	mov.w	fp, #0
 8004fa4:	e009      	b.n	8004fba <d_print_mod_list+0x1de>
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	3101      	adds	r1, #1
 8004faa:	4556      	cmp	r6, sl
 8004fac:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8004fb0:	f805 8003 	strb.w	r8, [r5, r3]
 8004fb4:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8004fb8:	d015      	beq.n	8004fe6 <d_print_mod_list+0x20a>
 8004fba:	29ff      	cmp	r1, #255	; 0xff
 8004fbc:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8004fc0:	d1f1      	bne.n	8004fa6 <d_print_mod_list+0x1ca>
 8004fc2:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8004fc6:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8004fca:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8004fce:	4628      	mov	r0, r5
 8004fd0:	4798      	blx	r3
 8004fd2:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8004fdc:	2101      	movs	r1, #1
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e7e3      	b.n	8004faa <d_print_mod_list+0x1ce>
 8004fe2:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8004fe6:	4e15      	ldr	r6, [pc, #84]	; (800503c <d_print_mod_list+0x260>)
 8004fe8:	f04f 0b00 	mov.w	fp, #0
 8004fec:	f106 0a03 	add.w	sl, r6, #3
 8004ff0:	e00a      	b.n	8005008 <d_print_mod_list+0x22c>
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	3101      	adds	r1, #1
 8004ff6:	4556      	cmp	r6, sl
 8004ff8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8004ffc:	f805 8003 	strb.w	r8, [r5, r3]
 8005000:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005004:	f43f af77 	beq.w	8004ef6 <d_print_mod_list+0x11a>
 8005008:	29ff      	cmp	r1, #255	; 0xff
 800500a:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800500e:	d1f0      	bne.n	8004ff2 <d_print_mod_list+0x216>
 8005010:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005014:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005018:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800501c:	4628      	mov	r0, r5
 800501e:	4798      	blx	r3
 8005020:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8005024:	3301      	adds	r3, #1
 8005026:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800502a:	2101      	movs	r1, #1
 800502c:	2300      	movs	r3, #0
 800502e:	e7e2      	b.n	8004ff6 <d_print_mod_list+0x21a>
 8005030:	0800eb53 	.word	0x0800eb53
 8005034:	0800eb57 	.word	0x0800eb57
 8005038:	0800eb68 	.word	0x0800eb68
 800503c:	0800eb6b 	.word	0x0800eb6b

08005040 <d_print_array_type.isra.9>:
 8005040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	4699      	mov	r9, r3
 8005046:	4605      	mov	r5, r0
 8005048:	460f      	mov	r7, r1
 800504a:	4690      	mov	r8, r2
 800504c:	b14b      	cbz	r3, 8005062 <d_print_array_type.isra.9+0x22>
 800504e:	6898      	ldr	r0, [r3, #8]
 8005050:	b380      	cbz	r0, 80050b4 <d_print_array_type.isra.9+0x74>
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1fa      	bne.n	800504e <d_print_array_type.isra.9+0xe>
 8005058:	464a      	mov	r2, r9
 800505a:	4628      	mov	r0, r5
 800505c:	4639      	mov	r1, r7
 800505e:	f7ff febd 	bl	8004ddc <d_print_mod_list>
 8005062:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8005066:	2bff      	cmp	r3, #255	; 0xff
 8005068:	d069      	beq.n	800513e <d_print_array_type.isra.9+0xfe>
 800506a:	1c59      	adds	r1, r3, #1
 800506c:	2220      	movs	r2, #32
 800506e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005072:	54ea      	strb	r2, [r5, r3]
 8005074:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
 8005078:	29ff      	cmp	r1, #255	; 0xff
 800507a:	f000 8095 	beq.w	80051a8 <d_print_array_type.isra.9+0x168>
 800507e:	1c4b      	adds	r3, r1, #1
 8005080:	225b      	movs	r2, #91	; 0x5b
 8005082:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8005086:	546a      	strb	r2, [r5, r1]
 8005088:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
 800508c:	f8d8 2000 	ldr.w	r2, [r8]
 8005090:	b12a      	cbz	r2, 800509e <d_print_array_type.isra.9+0x5e>
 8005092:	4639      	mov	r1, r7
 8005094:	4628      	mov	r0, r5
 8005096:	f7ff fbf1 	bl	800487c <d_print_comp>
 800509a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 800509e:	2bff      	cmp	r3, #255	; 0xff
 80050a0:	d070      	beq.n	8005184 <d_print_array_type.isra.9+0x144>
 80050a2:	1c59      	adds	r1, r3, #1
 80050a4:	225d      	movs	r2, #93	; 0x5d
 80050a6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80050aa:	54ea      	strb	r2, [r5, r3]
 80050ac:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
 80050b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b2a      	cmp	r3, #42	; 0x2a
 80050ba:	f000 8086 	beq.w	80051ca <d_print_array_type.isra.9+0x18a>
 80050be:	4e47      	ldr	r6, [pc, #284]	; (80051dc <d_print_array_type.isra.9+0x19c>)
 80050c0:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80050c4:	f106 0a02 	add.w	sl, r6, #2
 80050c8:	e00a      	b.n	80050e0 <d_print_array_type.isra.9+0xa0>
 80050ca:	460a      	mov	r2, r1
 80050cc:	4556      	cmp	r6, sl
 80050ce:	f101 0101 	add.w	r1, r1, #1
 80050d2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80050d6:	f805 b002 	strb.w	fp, [r5, r2]
 80050da:	f885 b104 	strb.w	fp, [r5, #260]	; 0x104
 80050de:	d01c      	beq.n	800511a <d_print_array_type.isra.9+0xda>
 80050e0:	29ff      	cmp	r1, #255	; 0xff
 80050e2:	f816 bf01 	ldrb.w	fp, [r6, #1]!
 80050e6:	d1f0      	bne.n	80050ca <d_print_array_type.isra.9+0x8a>
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80050f0:	f885 30ff 	strb.w	r3, [r5, #255]	; 0xff
 80050f4:	f8d5 4108 	ldr.w	r4, [r5, #264]	; 0x108
 80050f8:	4628      	mov	r0, r5
 80050fa:	47a0      	blx	r4
 80050fc:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 8005100:	3201      	adds	r2, #1
 8005102:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
 8005106:	2200      	movs	r2, #0
 8005108:	2101      	movs	r1, #1
 800510a:	4556      	cmp	r6, sl
 800510c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005110:	f805 b002 	strb.w	fp, [r5, r2]
 8005114:	f885 b104 	strb.w	fp, [r5, #260]	; 0x104
 8005118:	d1e2      	bne.n	80050e0 <d_print_array_type.isra.9+0xa0>
 800511a:	4639      	mov	r1, r7
 800511c:	464a      	mov	r2, r9
 800511e:	4628      	mov	r0, r5
 8005120:	2300      	movs	r3, #0
 8005122:	f7ff fe5b 	bl	8004ddc <d_print_mod_list>
 8005126:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800512a:	29ff      	cmp	r1, #255	; 0xff
 800512c:	d019      	beq.n	8005162 <d_print_array_type.isra.9+0x122>
 800512e:	1c4b      	adds	r3, r1, #1
 8005130:	2229      	movs	r2, #41	; 0x29
 8005132:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8005136:	546a      	strb	r2, [r5, r1]
 8005138:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
 800513c:	e793      	b.n	8005066 <d_print_array_type.isra.9+0x26>
 800513e:	2400      	movs	r4, #0
 8005140:	4619      	mov	r1, r3
 8005142:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005146:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800514a:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
 800514e:	4628      	mov	r0, r5
 8005150:	4798      	blx	r3
 8005152:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
 800515c:	4623      	mov	r3, r4
 800515e:	2101      	movs	r1, #1
 8005160:	e784      	b.n	800506c <d_print_array_type.isra.9+0x2c>
 8005162:	2400      	movs	r4, #0
 8005164:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005168:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
 800516c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005170:	4628      	mov	r0, r5
 8005172:	4798      	blx	r3
 8005174:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8005178:	3301      	adds	r3, #1
 800517a:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800517e:	4621      	mov	r1, r4
 8005180:	2301      	movs	r3, #1
 8005182:	e7d5      	b.n	8005130 <d_print_array_type.isra.9+0xf0>
 8005184:	2400      	movs	r4, #0
 8005186:	4619      	mov	r1, r3
 8005188:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800518c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005190:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
 8005194:	4628      	mov	r0, r5
 8005196:	4798      	blx	r3
 8005198:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
 80051a2:	4623      	mov	r3, r4
 80051a4:	2101      	movs	r1, #1
 80051a6:	e77d      	b.n	80050a4 <d_print_array_type.isra.9+0x64>
 80051a8:	2400      	movs	r4, #0
 80051aa:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80051ae:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
 80051b2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80051b6:	4628      	mov	r0, r5
 80051b8:	4798      	blx	r3
 80051ba:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80051be:	3301      	adds	r3, #1
 80051c0:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 80051c4:	4621      	mov	r1, r4
 80051c6:	2301      	movs	r3, #1
 80051c8:	e75a      	b.n	8005080 <d_print_array_type.isra.9+0x40>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4639      	mov	r1, r7
 80051ce:	464a      	mov	r2, r9
 80051d0:	4628      	mov	r0, r5
 80051d2:	f7ff fe03 	bl	8004ddc <d_print_mod_list>
 80051d6:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80051da:	e74d      	b.n	8005078 <d_print_array_type.isra.9+0x38>
 80051dc:	0800ed43 	.word	0x0800ed43

080051e0 <d_print_function_type.isra.11>:
 80051e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e4:	469a      	mov	sl, r3
 80051e6:	4607      	mov	r7, r0
 80051e8:	4688      	mov	r8, r1
 80051ea:	4691      	mov	r9, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d03b      	beq.n	8005268 <d_print_function_type.isra.11+0x88>
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d138      	bne.n	8005268 <d_print_function_type.isra.11+0x88>
 80051f6:	4654      	mov	r4, sl
 80051f8:	2201      	movs	r2, #1
 80051fa:	e006      	b.n	800520a <d_print_function_type.isra.11+0x2a>
 80051fc:	f416 6f60 	tst.w	r6, #3584	; 0xe00
 8005200:	d17a      	bne.n	80052f8 <d_print_function_type.isra.11+0x118>
 8005202:	6824      	ldr	r4, [r4, #0]
 8005204:	b384      	cbz	r4, 8005268 <d_print_function_type.isra.11+0x88>
 8005206:	68a3      	ldr	r3, [r4, #8]
 8005208:	bb73      	cbnz	r3, 8005268 <d_print_function_type.isra.11+0x88>
 800520a:	6860      	ldr	r0, [r4, #4]
 800520c:	4d69      	ldr	r5, [pc, #420]	; (80053b4 <d_print_function_type.isra.11+0x1d4>)
 800520e:	7806      	ldrb	r6, [r0, #0]
 8005210:	3e19      	subs	r6, #25
 8005212:	b2f6      	uxtb	r6, r6
 8005214:	2e12      	cmp	r6, #18
 8005216:	d8f4      	bhi.n	8005202 <d_print_function_type.isra.11+0x22>
 8005218:	fa02 f606 	lsl.w	r6, r2, r6
 800521c:	4035      	ands	r5, r6
 800521e:	2d00      	cmp	r5, #0
 8005220:	d0ec      	beq.n	80051fc <d_print_function_type.isra.11+0x1c>
 8005222:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8005226:	2b20      	cmp	r3, #32
 8005228:	d06c      	beq.n	8005304 <d_print_function_type.isra.11+0x124>
 800522a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800522e:	2bff      	cmp	r3, #255	; 0xff
 8005230:	f000 80ad 	beq.w	800538e <d_print_function_type.isra.11+0x1ae>
 8005234:	1c59      	adds	r1, r3, #1
 8005236:	2220      	movs	r2, #32
 8005238:	29ff      	cmp	r1, #255	; 0xff
 800523a:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800523e:	54fa      	strb	r2, [r7, r3]
 8005240:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
 8005244:	d162      	bne.n	800530c <d_print_function_type.isra.11+0x12c>
 8005246:	2400      	movs	r4, #0
 8005248:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800524c:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
 8005250:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005254:	4638      	mov	r0, r7
 8005256:	4798      	blx	r3
 8005258:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800525c:	3301      	adds	r3, #1
 800525e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005262:	4621      	mov	r1, r4
 8005264:	2301      	movs	r3, #1
 8005266:	e052      	b.n	800530e <d_print_function_type.isra.11+0x12e>
 8005268:	2300      	movs	r3, #0
 800526a:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
 800526e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005272:	4641      	mov	r1, r8
 8005274:	4638      	mov	r0, r7
 8005276:	4652      	mov	r2, sl
 8005278:	f7ff fdb0 	bl	8004ddc <d_print_mod_list>
 800527c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8005280:	29ff      	cmp	r1, #255	; 0xff
 8005282:	d062      	beq.n	800534a <d_print_function_type.isra.11+0x16a>
 8005284:	1c4b      	adds	r3, r1, #1
 8005286:	2228      	movs	r2, #40	; 0x28
 8005288:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800528c:	547a      	strb	r2, [r7, r1]
 800528e:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
 8005292:	f8d9 2000 	ldr.w	r2, [r9]
 8005296:	b112      	cbz	r2, 800529e <d_print_function_type.isra.11+0xbe>
 8005298:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800529c:	b191      	cbz	r1, 80052c4 <d_print_function_type.isra.11+0xe4>
 800529e:	2bff      	cmp	r3, #255	; 0xff
 80052a0:	d018      	beq.n	80052d4 <d_print_function_type.isra.11+0xf4>
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	2429      	movs	r4, #41	; 0x29
 80052a6:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80052aa:	4641      	mov	r1, r8
 80052ac:	54fc      	strb	r4, [r7, r3]
 80052ae:	4652      	mov	r2, sl
 80052b0:	4638      	mov	r0, r7
 80052b2:	f887 4104 	strb.w	r4, [r7, #260]	; 0x104
 80052b6:	2301      	movs	r3, #1
 80052b8:	f7ff fd90 	bl	8004ddc <d_print_mod_list>
 80052bc:	f8c7 5114 	str.w	r5, [r7, #276]	; 0x114
 80052c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c4:	4638      	mov	r0, r7
 80052c6:	4641      	mov	r1, r8
 80052c8:	f7fd f842 	bl	8002350 <d_print_comp.part.10>
 80052cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052d0:	2bff      	cmp	r3, #255	; 0xff
 80052d2:	d1e6      	bne.n	80052a2 <d_print_function_type.isra.11+0xc2>
 80052d4:	2400      	movs	r4, #0
 80052d6:	4619      	mov	r1, r3
 80052d8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80052dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052e0:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
 80052e4:	4638      	mov	r0, r7
 80052e6:	4798      	blx	r3
 80052e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 80052f2:	4623      	mov	r3, r4
 80052f4:	2201      	movs	r2, #1
 80052f6:	e7d5      	b.n	80052a4 <d_print_function_type.isra.11+0xc4>
 80052f8:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80052fc:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8005300:	2a28      	cmp	r2, #40	; 0x28
 8005302:	d190      	bne.n	8005226 <d_print_function_type.isra.11+0x46>
 8005304:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8005308:	29ff      	cmp	r1, #255	; 0xff
 800530a:	d09c      	beq.n	8005246 <d_print_function_type.isra.11+0x66>
 800530c:	1c4b      	adds	r3, r1, #1
 800530e:	2228      	movs	r2, #40	; 0x28
 8005310:	2400      	movs	r4, #0
 8005312:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005316:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
 800531a:	547a      	strb	r2, [r7, r1]
 800531c:	4623      	mov	r3, r4
 800531e:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
 8005322:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 8005326:	4652      	mov	r2, sl
 8005328:	4638      	mov	r0, r7
 800532a:	4641      	mov	r1, r8
 800532c:	f7ff fd56 	bl	8004ddc <d_print_mod_list>
 8005330:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8005334:	2aff      	cmp	r2, #255	; 0xff
 8005336:	d019      	beq.n	800536c <d_print_function_type.isra.11+0x18c>
 8005338:	1c51      	adds	r1, r2, #1
 800533a:	2329      	movs	r3, #41	; 0x29
 800533c:	29ff      	cmp	r1, #255	; 0xff
 800533e:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8005342:	54bb      	strb	r3, [r7, r2]
 8005344:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 8005348:	d19c      	bne.n	8005284 <d_print_function_type.isra.11+0xa4>
 800534a:	2400      	movs	r4, #0
 800534c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005350:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
 8005354:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005358:	4638      	mov	r0, r7
 800535a:	4798      	blx	r3
 800535c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005360:	3301      	adds	r3, #1
 8005362:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005366:	4621      	mov	r1, r4
 8005368:	2301      	movs	r3, #1
 800536a:	e78c      	b.n	8005286 <d_print_function_type.isra.11+0xa6>
 800536c:	4611      	mov	r1, r2
 800536e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005372:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005376:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
 800537a:	4638      	mov	r0, r7
 800537c:	4798      	blx	r3
 800537e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005382:	3301      	adds	r3, #1
 8005384:	4622      	mov	r2, r4
 8005386:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800538a:	2101      	movs	r1, #1
 800538c:	e7d5      	b.n	800533a <d_print_function_type.isra.11+0x15a>
 800538e:	2400      	movs	r4, #0
 8005390:	4619      	mov	r1, r3
 8005392:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005396:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800539a:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
 800539e:	4638      	mov	r0, r7
 80053a0:	4798      	blx	r3
 80053a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 80053ac:	4623      	mov	r3, r4
 80053ae:	2101      	movs	r1, #1
 80053b0:	e741      	b.n	8005236 <d_print_function_type.isra.11+0x56>
 80053b2:	bf00      	nop
 80053b4:	00043107 	.word	0x00043107

080053b8 <d_print_cast.isra.12>:
 80053b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053bc:	4615      	mov	r5, r2
 80053be:	6812      	ldr	r2, [r2, #0]
 80053c0:	7813      	ldrb	r3, [r2, #0]
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	b082      	sub	sp, #8
 80053c6:	4604      	mov	r4, r0
 80053c8:	460e      	mov	r6, r1
 80053ca:	d006      	beq.n	80053da <d_print_cast.isra.12+0x22>
 80053cc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d03d      	beq.n	8005450 <d_print_cast.isra.12+0x98>
 80053d4:	b002      	add	sp, #8
 80053d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053da:	ab02      	add	r3, sp, #8
 80053dc:	f8d0 7110 	ldr.w	r7, [r0, #272]	; 0x110
 80053e0:	f843 7d08 	str.w	r7, [r3, #-8]!
 80053e4:	2200      	movs	r2, #0
 80053e6:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 80053ea:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
 80053ee:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 80053f2:	682b      	ldr	r3, [r5, #0]
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	d06f      	beq.n	80054dc <d_print_cast.isra.12+0x124>
 80053fc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8005400:	2b00      	cmp	r3, #0
 8005402:	d03f      	beq.n	8005484 <d_print_cast.isra.12+0xcc>
 8005404:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005408:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 800540c:	2b3c      	cmp	r3, #60	; 0x3c
 800540e:	d069      	beq.n	80054e4 <d_print_cast.isra.12+0x12c>
 8005410:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8005414:	2aff      	cmp	r2, #255	; 0xff
 8005416:	d04b      	beq.n	80054b0 <d_print_cast.isra.12+0xf8>
 8005418:	1c53      	adds	r3, r2, #1
 800541a:	213c      	movs	r1, #60	; 0x3c
 800541c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005420:	54a1      	strb	r1, [r4, r2]
 8005422:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 8005426:	682a      	ldr	r2, [r5, #0]
 8005428:	6892      	ldr	r2, [r2, #8]
 800542a:	2a00      	cmp	r2, #0
 800542c:	d052      	beq.n	80054d4 <d_print_cast.isra.12+0x11c>
 800542e:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
 8005432:	b195      	cbz	r5, 800545a <d_print_cast.isra.12+0xa2>
 8005434:	2bff      	cmp	r3, #255	; 0xff
 8005436:	d029      	beq.n	800548c <d_print_cast.isra.12+0xd4>
 8005438:	1c59      	adds	r1, r3, #1
 800543a:	223e      	movs	r2, #62	; 0x3e
 800543c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005440:	54e2      	strb	r2, [r4, r3]
 8005442:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005446:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 800544a:	b002      	add	sp, #8
 800544c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005450:	f7fc ff7e 	bl	8002350 <d_print_comp.part.10>
 8005454:	b002      	add	sp, #8
 8005456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800545a:	4631      	mov	r1, r6
 800545c:	4620      	mov	r0, r4
 800545e:	f7fc ff77 	bl	8002350 <d_print_comp.part.10>
 8005462:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
 8005466:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800546a:	2a3e      	cmp	r2, #62	; 0x3e
 800546c:	d1e2      	bne.n	8005434 <d_print_cast.isra.12+0x7c>
 800546e:	2bff      	cmp	r3, #255	; 0xff
 8005470:	d044      	beq.n	80054fc <d_print_cast.isra.12+0x144>
 8005472:	461d      	mov	r5, r3
 8005474:	3301      	adds	r3, #1
 8005476:	2220      	movs	r2, #32
 8005478:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800547c:	5562      	strb	r2, [r4, r5]
 800547e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005482:	e7d7      	b.n	8005434 <d_print_cast.isra.12+0x7c>
 8005484:	f7fc ff64 	bl	8002350 <d_print_comp.part.10>
 8005488:	9f00      	ldr	r7, [sp, #0]
 800548a:	e7bb      	b.n	8005404 <d_print_cast.isra.12+0x4c>
 800548c:	2500      	movs	r5, #0
 800548e:	4619      	mov	r1, r3
 8005490:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005494:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005498:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800549c:	4620      	mov	r0, r4
 800549e:	4798      	blx	r3
 80054a0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80054aa:	462b      	mov	r3, r5
 80054ac:	2101      	movs	r1, #1
 80054ae:	e7c4      	b.n	800543a <d_print_cast.isra.12+0x82>
 80054b0:	2700      	movs	r7, #0
 80054b2:	4611      	mov	r1, r2
 80054b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80054b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80054bc:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80054c0:	4620      	mov	r0, r4
 80054c2:	4798      	blx	r3
 80054c4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80054c8:	3301      	adds	r3, #1
 80054ca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80054ce:	463a      	mov	r2, r7
 80054d0:	2301      	movs	r3, #1
 80054d2:	e7a2      	b.n	800541a <d_print_cast.isra.12+0x62>
 80054d4:	2201      	movs	r2, #1
 80054d6:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
 80054da:	e7ab      	b.n	8005434 <d_print_cast.isra.12+0x7c>
 80054dc:	2301      	movs	r3, #1
 80054de:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 80054e2:	e78f      	b.n	8005404 <d_print_cast.isra.12+0x4c>
 80054e4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80054e8:	29ff      	cmp	r1, #255	; 0xff
 80054ea:	d017      	beq.n	800551c <d_print_cast.isra.12+0x164>
 80054ec:	1c4a      	adds	r2, r1, #1
 80054ee:	2320      	movs	r3, #32
 80054f0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80054f4:	5463      	strb	r3, [r4, r1]
 80054f6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80054fa:	e78b      	b.n	8005414 <d_print_cast.isra.12+0x5c>
 80054fc:	4619      	mov	r1, r3
 80054fe:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005502:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005506:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800550a:	4620      	mov	r0, r4
 800550c:	4798      	blx	r3
 800550e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005512:	3301      	adds	r3, #1
 8005514:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005518:	2301      	movs	r3, #1
 800551a:	e7ac      	b.n	8005476 <d_print_cast.isra.12+0xbe>
 800551c:	2700      	movs	r7, #0
 800551e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005522:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005526:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800552a:	4620      	mov	r0, r4
 800552c:	4798      	blx	r3
 800552e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005532:	3301      	adds	r3, #1
 8005534:	4639      	mov	r1, r7
 8005536:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800553a:	2201      	movs	r2, #1
 800553c:	e7d7      	b.n	80054ee <d_print_cast.isra.12+0x136>
 800553e:	bf00      	nop

08005540 <d_print_expr_op>:
 8005540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005544:	7815      	ldrb	r5, [r2, #0]
 8005546:	2d31      	cmp	r5, #49	; 0x31
 8005548:	4604      	mov	r4, r0
 800554a:	d008      	beq.n	800555e <d_print_expr_op+0x1e>
 800554c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8005550:	b10b      	cbz	r3, 8005556 <d_print_expr_op+0x16>
 8005552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005556:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800555a:	f7fc bef9 	b.w	8002350 <d_print_comp.part.10>
 800555e:	6853      	ldr	r3, [r2, #4]
 8005560:	689f      	ldr	r7, [r3, #8]
 8005562:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8005566:	2f00      	cmp	r7, #0
 8005568:	d0f3      	beq.n	8005552 <d_print_expr_op+0x12>
 800556a:	2500      	movs	r5, #0
 800556c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005570:	46a8      	mov	r8, r5
 8005572:	e009      	b.n	8005588 <d_print_expr_op+0x48>
 8005574:	460b      	mov	r3, r1
 8005576:	3101      	adds	r1, #1
 8005578:	3501      	adds	r5, #1
 800557a:	42af      	cmp	r7, r5
 800557c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005580:	54e6      	strb	r6, [r4, r3]
 8005582:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005586:	d013      	beq.n	80055b0 <d_print_expr_op+0x70>
 8005588:	29ff      	cmp	r1, #255	; 0xff
 800558a:	f819 6005 	ldrb.w	r6, [r9, r5]
 800558e:	d1f1      	bne.n	8005574 <d_print_expr_op+0x34>
 8005590:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005594:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005598:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800559c:	4620      	mov	r0, r4
 800559e:	4798      	blx	r3
 80055a0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80055a4:	3301      	adds	r3, #1
 80055a6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80055aa:	2101      	movs	r1, #1
 80055ac:	2300      	movs	r3, #0
 80055ae:	e7e3      	b.n	8005578 <d_print_expr_op+0x38>
 80055b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080055b4 <d_print_subexpr>:
 80055b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b6:	7813      	ldrb	r3, [r2, #0]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	4615      	mov	r5, r2
 80055bc:	460f      	mov	r7, r1
 80055be:	4604      	mov	r4, r0
 80055c0:	d914      	bls.n	80055ec <d_print_subexpr+0x38>
 80055c2:	2b30      	cmp	r3, #48	; 0x30
 80055c4:	d012      	beq.n	80055ec <d_print_subexpr+0x38>
 80055c6:	2b06      	cmp	r3, #6
 80055c8:	d010      	beq.n	80055ec <d_print_subexpr+0x38>
 80055ca:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80055ce:	2bff      	cmp	r3, #255	; 0xff
 80055d0:	d034      	beq.n	800563c <d_print_subexpr+0x88>
 80055d2:	1c59      	adds	r1, r3, #1
 80055d4:	2228      	movs	r2, #40	; 0x28
 80055d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80055da:	54e2      	strb	r2, [r4, r3]
 80055dc:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80055e0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80055e4:	2600      	movs	r6, #0
 80055e6:	b133      	cbz	r3, 80055f6 <d_print_subexpr+0x42>
 80055e8:	b166      	cbz	r6, 8005604 <d_print_subexpr+0x50>
 80055ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ec:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80055f0:	2601      	movs	r6, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f8      	bne.n	80055e8 <d_print_subexpr+0x34>
 80055f6:	4639      	mov	r1, r7
 80055f8:	462a      	mov	r2, r5
 80055fa:	4620      	mov	r0, r4
 80055fc:	f7fc fea8 	bl	8002350 <d_print_comp.part.10>
 8005600:	2e00      	cmp	r6, #0
 8005602:	d1f2      	bne.n	80055ea <d_print_subexpr+0x36>
 8005604:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005608:	29ff      	cmp	r1, #255	; 0xff
 800560a:	d007      	beq.n	800561c <d_print_subexpr+0x68>
 800560c:	1c4a      	adds	r2, r1, #1
 800560e:	2329      	movs	r3, #41	; 0x29
 8005610:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005614:	5463      	strb	r3, [r4, r1]
 8005616:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800561a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800561c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005620:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005624:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005628:	4620      	mov	r0, r4
 800562a:	4798      	blx	r3
 800562c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005630:	3301      	adds	r3, #1
 8005632:	4631      	mov	r1, r6
 8005634:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005638:	2201      	movs	r2, #1
 800563a:	e7e8      	b.n	800560e <d_print_subexpr+0x5a>
 800563c:	2600      	movs	r6, #0
 800563e:	4619      	mov	r1, r3
 8005640:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005644:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005648:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800564c:	4798      	blx	r3
 800564e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8005658:	4633      	mov	r3, r6
 800565a:	2101      	movs	r1, #1
 800565c:	e7ba      	b.n	80055d4 <d_print_subexpr+0x20>
 800565e:	bf00      	nop

08005660 <d_demangle_callback.constprop.16>:
 8005660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	b0d7      	sub	sp, #348	; 0x15c
 8005666:	4604      	mov	r4, r0
 8005668:	7805      	ldrb	r5, [r0, #0]
 800566a:	2d5f      	cmp	r5, #95	; 0x5f
 800566c:	af00      	add	r7, sp, #0
 800566e:	460e      	mov	r6, r1
 8005670:	4690      	mov	r8, r2
 8005672:	d072      	beq.n	800575a <d_demangle_callback.constprop.16+0xfa>
 8005674:	4620      	mov	r0, r4
 8005676:	497c      	ldr	r1, [pc, #496]	; (8005868 <d_demangle_callback.constprop.16+0x208>)
 8005678:	2208      	movs	r2, #8
 800567a:	f007 ff7b 	bl	800d574 <strncmp>
 800567e:	b978      	cbnz	r0, 80056a0 <d_demangle_callback.constprop.16+0x40>
 8005680:	7a23      	ldrb	r3, [r4, #8]
 8005682:	2b2e      	cmp	r3, #46	; 0x2e
 8005684:	d005      	beq.n	8005692 <d_demangle_callback.constprop.16+0x32>
 8005686:	2b5f      	cmp	r3, #95	; 0x5f
 8005688:	d003      	beq.n	8005692 <d_demangle_callback.constprop.16+0x32>
 800568a:	2b24      	cmp	r3, #36	; 0x24
 800568c:	d001      	beq.n	8005692 <d_demangle_callback.constprop.16+0x32>
 800568e:	4681      	mov	r9, r0
 8005690:	e008      	b.n	80056a4 <d_demangle_callback.constprop.16+0x44>
 8005692:	7a63      	ldrb	r3, [r4, #9]
 8005694:	2b44      	cmp	r3, #68	; 0x44
 8005696:	f000 80df 	beq.w	8005858 <d_demangle_callback.constprop.16+0x1f8>
 800569a:	2b49      	cmp	r3, #73	; 0x49
 800569c:	f000 8098 	beq.w	80057d0 <d_demangle_callback.constprop.16+0x170>
 80056a0:	f04f 0900 	mov.w	r9, #0
 80056a4:	4620      	mov	r0, r4
 80056a6:	f007 ff5d 	bl	800d564 <strlen>
 80056aa:	0042      	lsls	r2, r0, #1
 80056ac:	0083      	lsls	r3, r0, #2
 80056ae:	1899      	adds	r1, r3, r2
 80056b0:	0089      	lsls	r1, r1, #2
 80056b2:	3108      	adds	r1, #8
 80056b4:	330a      	adds	r3, #10
 80056b6:	ebad 0d01 	sub.w	sp, sp, r1
 80056ba:	f023 0307 	bic.w	r3, r3, #7
 80056be:	46ea      	mov	sl, sp
 80056c0:	eb04 0c00 	add.w	ip, r4, r0
 80056c4:	ebad 0d03 	sub.w	sp, sp, r3
 80056c8:	f04f 0b11 	mov.w	fp, #17
 80056cc:	2300      	movs	r3, #0
 80056ce:	f1b9 0f01 	cmp.w	r9, #1
 80056d2:	f8c7 a010 	str.w	sl, [r7, #16]
 80056d6:	f8c7 d01c 	str.w	sp, [r7, #28]
 80056da:	61ba      	str	r2, [r7, #24]
 80056dc:	603c      	str	r4, [r7, #0]
 80056de:	60fc      	str	r4, [r7, #12]
 80056e0:	6278      	str	r0, [r7, #36]	; 0x24
 80056e2:	f8c7 c004 	str.w	ip, [r7, #4]
 80056e6:	f8c7 b008 	str.w	fp, [r7, #8]
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	623b      	str	r3, [r7, #32]
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f2:	633b      	str	r3, [r7, #48]	; 0x30
 80056f4:	d037      	beq.n	8005766 <d_demangle_callback.constprop.16+0x106>
 80056f6:	d373      	bcc.n	80057e0 <d_demangle_callback.constprop.16+0x180>
 80056f8:	f1b9 0f03 	cmp.w	r9, #3
 80056fc:	d870      	bhi.n	80057e0 <d_demangle_callback.constprop.16+0x180>
 80056fe:	7ae2      	ldrb	r2, [r4, #11]
 8005700:	f1b9 0f02 	cmp.w	r9, #2
 8005704:	f104 050b 	add.w	r5, r4, #11
 8005708:	bf14      	ite	ne
 800570a:	f04f 0943 	movne.w	r9, #67	; 0x43
 800570e:	f04f 0942 	moveq.w	r9, #66	; 0x42
 8005712:	2a5f      	cmp	r2, #95	; 0x5f
 8005714:	60fd      	str	r5, [r7, #12]
 8005716:	d103      	bne.n	8005720 <d_demangle_callback.constprop.16+0xc0>
 8005718:	7b22      	ldrb	r2, [r4, #12]
 800571a:	2a5a      	cmp	r2, #90	; 0x5a
 800571c:	f000 8091 	beq.w	8005842 <d_demangle_callback.constprop.16+0x1e2>
 8005720:	4628      	mov	r0, r5
 8005722:	f007 ff1f 	bl	800d564 <strlen>
 8005726:	4629      	mov	r1, r5
 8005728:	4602      	mov	r2, r0
 800572a:	4638      	mov	r0, r7
 800572c:	f7fa fd98 	bl	8000260 <d_make_name>
 8005730:	4602      	mov	r2, r0
 8005732:	4649      	mov	r1, r9
 8005734:	2300      	movs	r3, #0
 8005736:	4638      	mov	r0, r7
 8005738:	f7fa fd46 	bl	80001c8 <d_make_comp>
 800573c:	68fc      	ldr	r4, [r7, #12]
 800573e:	4681      	mov	r9, r0
 8005740:	4620      	mov	r0, r4
 8005742:	f007 ff0f 	bl	800d564 <strlen>
 8005746:	1823      	adds	r3, r4, r0
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	5c25      	ldrb	r5, [r4, r0]
 800574c:	b185      	cbz	r5, 8005770 <d_demangle_callback.constprop.16+0x110>
 800574e:	2000      	movs	r0, #0
 8005750:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8005754:	46bd      	mov	sp, r7
 8005756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575a:	7843      	ldrb	r3, [r0, #1]
 800575c:	2b5a      	cmp	r3, #90	; 0x5a
 800575e:	d189      	bne.n	8005674 <d_demangle_callback.constprop.16+0x14>
 8005760:	f04f 0901 	mov.w	r9, #1
 8005764:	e79e      	b.n	80056a4 <d_demangle_callback.constprop.16+0x44>
 8005766:	2d5f      	cmp	r5, #95	; 0x5f
 8005768:	d041      	beq.n	80057ee <d_demangle_callback.constprop.16+0x18e>
 800576a:	4699      	mov	r9, r3
 800576c:	2d00      	cmp	r5, #0
 800576e:	d1ee      	bne.n	800574e <d_demangle_callback.constprop.16+0xee>
 8005770:	f1b9 0f00 	cmp.w	r9, #0
 8005774:	d063      	beq.n	800583e <d_demangle_callback.constprop.16+0x1de>
 8005776:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800577a:	464a      	mov	r2, r9
 800577c:	4620      	mov	r0, r4
 800577e:	2111      	movs	r1, #17
 8005780:	f8c7 5134 	str.w	r5, [r7, #308]	; 0x134
 8005784:	f887 5138 	strb.w	r5, [r7, #312]	; 0x138
 8005788:	f8c7 5144 	str.w	r5, [r7, #324]	; 0x144
 800578c:	f8c7 5148 	str.w	r5, [r7, #328]	; 0x148
 8005790:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 8005794:	f8c7 5154 	str.w	r5, [r7, #340]	; 0x154
 8005798:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
 800579c:	f8c7 8140 	str.w	r8, [r7, #320]	; 0x140
 80057a0:	f8c7 514c 	str.w	r5, [r7, #332]	; 0x14c
 80057a4:	f7fc fdd4 	bl	8002350 <d_print_comp.part.10>
 80057a8:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80057ac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80057b0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80057b4:	5465      	strb	r5, [r4, r1]
 80057b6:	4620      	mov	r0, r4
 80057b8:	4798      	blx	r3
 80057ba:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 80057be:	f1d0 0001 	rsbs	r0, r0, #1
 80057c2:	bf38      	it	cc
 80057c4:	2000      	movcc	r0, #0
 80057c6:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80057ca:	46bd      	mov	sp, r7
 80057cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d0:	7aa3      	ldrb	r3, [r4, #10]
 80057d2:	2b5f      	cmp	r3, #95	; 0x5f
 80057d4:	bf14      	ite	ne
 80057d6:	f04f 0900 	movne.w	r9, #0
 80057da:	f04f 0902 	moveq.w	r9, #2
 80057de:	e761      	b.n	80056a4 <d_demangle_callback.constprop.16+0x44>
 80057e0:	4638      	mov	r0, r7
 80057e2:	f7fb fa9f 	bl	8000d24 <d_type>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4681      	mov	r9, r0
 80057ea:	781d      	ldrb	r5, [r3, #0]
 80057ec:	e7ae      	b.n	800574c <d_demangle_callback.constprop.16+0xec>
 80057ee:	7865      	ldrb	r5, [r4, #1]
 80057f0:	1c62      	adds	r2, r4, #1
 80057f2:	2d5a      	cmp	r5, #90	; 0x5a
 80057f4:	60fa      	str	r2, [r7, #12]
 80057f6:	d1b8      	bne.n	800576a <d_demangle_callback.constprop.16+0x10a>
 80057f8:	4649      	mov	r1, r9
 80057fa:	3402      	adds	r4, #2
 80057fc:	4638      	mov	r0, r7
 80057fe:	60fc      	str	r4, [r7, #12]
 8005800:	f7fb fe76 	bl	80014f0 <d_encoding>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f013 0f01 	tst.w	r3, #1
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4681      	mov	r9, r0
 800580e:	781d      	ldrb	r5, [r3, #0]
 8005810:	d112      	bne.n	8005838 <d_demangle_callback.constprop.16+0x1d8>
 8005812:	e79b      	b.n	800574c <d_demangle_callback.constprop.16+0xec>
 8005814:	785b      	ldrb	r3, [r3, #1]
 8005816:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800581a:	2a19      	cmp	r2, #25
 800581c:	4638      	mov	r0, r7
 800581e:	4649      	mov	r1, r9
 8005820:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8005824:	d903      	bls.n	800582e <d_demangle_callback.constprop.16+0x1ce>
 8005826:	2b5f      	cmp	r3, #95	; 0x5f
 8005828:	d001      	beq.n	800582e <d_demangle_callback.constprop.16+0x1ce>
 800582a:	2c09      	cmp	r4, #9
 800582c:	d811      	bhi.n	8005852 <d_demangle_callback.constprop.16+0x1f2>
 800582e:	f7fa fda7 	bl	8000380 <d_clone_suffix>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	781d      	ldrb	r5, [r3, #0]
 8005836:	4681      	mov	r9, r0
 8005838:	2d2e      	cmp	r5, #46	; 0x2e
 800583a:	d0eb      	beq.n	8005814 <d_demangle_callback.constprop.16+0x1b4>
 800583c:	e786      	b.n	800574c <d_demangle_callback.constprop.16+0xec>
 800583e:	4648      	mov	r0, r9
 8005840:	e786      	b.n	8005750 <d_demangle_callback.constprop.16+0xf0>
 8005842:	340d      	adds	r4, #13
 8005844:	4619      	mov	r1, r3
 8005846:	4638      	mov	r0, r7
 8005848:	60fc      	str	r4, [r7, #12]
 800584a:	f7fb fe51 	bl	80014f0 <d_encoding>
 800584e:	4602      	mov	r2, r0
 8005850:	e76f      	b.n	8005732 <d_demangle_callback.constprop.16+0xd2>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	781d      	ldrb	r5, [r3, #0]
 8005856:	e779      	b.n	800574c <d_demangle_callback.constprop.16+0xec>
 8005858:	7aa3      	ldrb	r3, [r4, #10]
 800585a:	2b5f      	cmp	r3, #95	; 0x5f
 800585c:	bf0c      	ite	eq
 800585e:	f04f 0903 	moveq.w	r9, #3
 8005862:	f04f 0900 	movne.w	r9, #0
 8005866:	e71d      	b.n	80056a4 <d_demangle_callback.constprop.16+0x44>
 8005868:	0800eaf8 	.word	0x0800eaf8

0800586c <__cxa_demangle>:
 800586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005870:	460d      	mov	r5, r1
 8005872:	b084      	sub	sp, #16
 8005874:	4617      	mov	r7, r2
 8005876:	461e      	mov	r6, r3
 8005878:	2800      	cmp	r0, #0
 800587a:	d02e      	beq.n	80058da <__cxa_demangle+0x6e>
 800587c:	b109      	cbz	r1, 8005882 <__cxa_demangle+0x16>
 800587e:	2a00      	cmp	r2, #0
 8005880:	d02b      	beq.n	80058da <__cxa_demangle+0x6e>
 8005882:	2400      	movs	r4, #0
 8005884:	4929      	ldr	r1, [pc, #164]	; (800592c <__cxa_demangle+0xc0>)
 8005886:	9400      	str	r4, [sp, #0]
 8005888:	466a      	mov	r2, sp
 800588a:	9401      	str	r4, [sp, #4]
 800588c:	9402      	str	r4, [sp, #8]
 800588e:	9403      	str	r4, [sp, #12]
 8005890:	f7ff fee6 	bl	8005660 <d_demangle_callback.constprop.16>
 8005894:	2800      	cmp	r0, #0
 8005896:	d03e      	beq.n	8005916 <__cxa_demangle+0xaa>
 8005898:	9b03      	ldr	r3, [sp, #12]
 800589a:	b1db      	cbz	r3, 80058d4 <__cxa_demangle+0x68>
 800589c:	f04f 0801 	mov.w	r8, #1
 80058a0:	9c00      	ldr	r4, [sp, #0]
 80058a2:	b344      	cbz	r4, 80058f6 <__cxa_demangle+0x8a>
 80058a4:	2d00      	cmp	r5, #0
 80058a6:	d033      	beq.n	8005910 <__cxa_demangle+0xa4>
 80058a8:	4620      	mov	r0, r4
 80058aa:	f007 fe5b 	bl	800d564 <strlen>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	4298      	cmp	r0, r3
 80058b2:	d21a      	bcs.n	80058ea <__cxa_demangle+0x7e>
 80058b4:	1c42      	adds	r2, r0, #1
 80058b6:	4621      	mov	r1, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f007 fbfe 	bl	800d0ba <memcpy>
 80058be:	4620      	mov	r0, r4
 80058c0:	f007 f9d2 	bl	800cc68 <free>
 80058c4:	462c      	mov	r4, r5
 80058c6:	b30e      	cbz	r6, 800590c <__cxa_demangle+0xa0>
 80058c8:	2300      	movs	r3, #0
 80058ca:	4620      	mov	r0, r4
 80058cc:	6033      	str	r3, [r6, #0]
 80058ce:	b004      	add	sp, #16
 80058d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80058d8:	e7e2      	b.n	80058a0 <__cxa_demangle+0x34>
 80058da:	b19e      	cbz	r6, 8005904 <__cxa_demangle+0x98>
 80058dc:	f06f 0302 	mvn.w	r3, #2
 80058e0:	2000      	movs	r0, #0
 80058e2:	6033      	str	r3, [r6, #0]
 80058e4:	b004      	add	sp, #16
 80058e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ea:	4628      	mov	r0, r5
 80058ec:	f007 f9bc 	bl	800cc68 <free>
 80058f0:	f8c7 8000 	str.w	r8, [r7]
 80058f4:	e7e7      	b.n	80058c6 <__cxa_demangle+0x5a>
 80058f6:	b12e      	cbz	r6, 8005904 <__cxa_demangle+0x98>
 80058f8:	f1b8 0f01 	cmp.w	r8, #1
 80058fc:	d011      	beq.n	8005922 <__cxa_demangle+0xb6>
 80058fe:	f06f 0301 	mvn.w	r3, #1
 8005902:	6033      	str	r3, [r6, #0]
 8005904:	2000      	movs	r0, #0
 8005906:	b004      	add	sp, #16
 8005908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800590c:	4620      	mov	r0, r4
 800590e:	e7de      	b.n	80058ce <__cxa_demangle+0x62>
 8005910:	2f00      	cmp	r7, #0
 8005912:	d1ed      	bne.n	80058f0 <__cxa_demangle+0x84>
 8005914:	e7d7      	b.n	80058c6 <__cxa_demangle+0x5a>
 8005916:	9800      	ldr	r0, [sp, #0]
 8005918:	f007 f9a6 	bl	800cc68 <free>
 800591c:	2e00      	cmp	r6, #0
 800591e:	d1ee      	bne.n	80058fe <__cxa_demangle+0x92>
 8005920:	e7f0      	b.n	8005904 <__cxa_demangle+0x98>
 8005922:	f04f 33ff 	mov.w	r3, #4294967295
 8005926:	4620      	mov	r0, r4
 8005928:	6033      	str	r3, [r6, #0]
 800592a:	e7d0      	b.n	80058ce <__cxa_demangle+0x62>
 800592c:	08000861 	.word	0x08000861

08005930 <__gcclibcxx_demangle_callback>:
 8005930:	b508      	push	{r3, lr}
 8005932:	b140      	cbz	r0, 8005946 <__gcclibcxx_demangle_callback+0x16>
 8005934:	b139      	cbz	r1, 8005946 <__gcclibcxx_demangle_callback+0x16>
 8005936:	f7ff fe93 	bl	8005660 <d_demangle_callback.constprop.16>
 800593a:	2800      	cmp	r0, #0
 800593c:	bf14      	ite	ne
 800593e:	2000      	movne	r0, #0
 8005940:	f06f 0001 	mvneq.w	r0, #1
 8005944:	bd08      	pop	{r3, pc}
 8005946:	f06f 0002 	mvn.w	r0, #2
 800594a:	bd08      	pop	{r3, pc}

0800594c <strcmp>:
 800594c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005950:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005954:	2a01      	cmp	r2, #1
 8005956:	bf28      	it	cs
 8005958:	429a      	cmpcs	r2, r3
 800595a:	d0f7      	beq.n	800594c <strcmp>
 800595c:	1ad0      	subs	r0, r2, r3
 800595e:	4770      	bx	lr

08005960 <selfrel_offset31>:
 8005960:	6803      	ldr	r3, [r0, #0]
 8005962:	005a      	lsls	r2, r3, #1
 8005964:	bf4c      	ite	mi
 8005966:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800596a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800596e:	4418      	add	r0, r3
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop

08005974 <search_EIT_table>:
 8005974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005978:	4606      	mov	r6, r0
 800597a:	b083      	sub	sp, #12
 800597c:	4691      	mov	r9, r2
 800597e:	b321      	cbz	r1, 80059ca <search_EIT_table+0x56>
 8005980:	3901      	subs	r1, #1
 8005982:	9101      	str	r1, [sp, #4]
 8005984:	4688      	mov	r8, r1
 8005986:	2700      	movs	r7, #0
 8005988:	eb07 0408 	add.w	r4, r7, r8
 800598c:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8005990:	1064      	asrs	r4, r4, #1
 8005992:	00e5      	lsls	r5, r4, #3
 8005994:	eb06 0b05 	add.w	fp, r6, r5
 8005998:	4658      	mov	r0, fp
 800599a:	f7ff ffe1 	bl	8005960 <selfrel_offset31>
 800599e:	9b01      	ldr	r3, [sp, #4]
 80059a0:	4682      	mov	sl, r0
 80059a2:	42a3      	cmp	r3, r4
 80059a4:	f105 0008 	add.w	r0, r5, #8
 80059a8:	4430      	add	r0, r6
 80059aa:	d019      	beq.n	80059e0 <search_EIT_table+0x6c>
 80059ac:	f7ff ffd8 	bl	8005960 <selfrel_offset31>
 80059b0:	45ca      	cmp	sl, r9
 80059b2:	f100 30ff 	add.w	r0, r0, #4294967295
 80059b6:	d904      	bls.n	80059c2 <search_EIT_table+0x4e>
 80059b8:	42bc      	cmp	r4, r7
 80059ba:	d00b      	beq.n	80059d4 <search_EIT_table+0x60>
 80059bc:	f104 38ff 	add.w	r8, r4, #4294967295
 80059c0:	e7e2      	b.n	8005988 <search_EIT_table+0x14>
 80059c2:	4548      	cmp	r0, r9
 80059c4:	d202      	bcs.n	80059cc <search_EIT_table+0x58>
 80059c6:	1c67      	adds	r7, r4, #1
 80059c8:	e7de      	b.n	8005988 <search_EIT_table+0x14>
 80059ca:	468b      	mov	fp, r1
 80059cc:	4658      	mov	r0, fp
 80059ce:	b003      	add	sp, #12
 80059d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d4:	f04f 0b00 	mov.w	fp, #0
 80059d8:	4658      	mov	r0, fp
 80059da:	b003      	add	sp, #12
 80059dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e0:	45ca      	cmp	sl, r9
 80059e2:	d8e9      	bhi.n	80059b8 <search_EIT_table+0x44>
 80059e4:	e7f2      	b.n	80059cc <search_EIT_table+0x58>
 80059e6:	bf00      	nop

080059e8 <__gnu_unwind_get_pr_addr>:
 80059e8:	2801      	cmp	r0, #1
 80059ea:	d007      	beq.n	80059fc <__gnu_unwind_get_pr_addr+0x14>
 80059ec:	2802      	cmp	r0, #2
 80059ee:	d007      	beq.n	8005a00 <__gnu_unwind_get_pr_addr+0x18>
 80059f0:	4b04      	ldr	r3, [pc, #16]	; (8005a04 <__gnu_unwind_get_pr_addr+0x1c>)
 80059f2:	2800      	cmp	r0, #0
 80059f4:	bf0c      	ite	eq
 80059f6:	4618      	moveq	r0, r3
 80059f8:	2000      	movne	r0, #0
 80059fa:	4770      	bx	lr
 80059fc:	4802      	ldr	r0, [pc, #8]	; (8005a08 <__gnu_unwind_get_pr_addr+0x20>)
 80059fe:	4770      	bx	lr
 8005a00:	4802      	ldr	r0, [pc, #8]	; (8005a0c <__gnu_unwind_get_pr_addr+0x24>)
 8005a02:	4770      	bx	lr
 8005a04:	08006119 	.word	0x08006119
 8005a08:	08006121 	.word	0x08006121
 8005a0c:	08006129 	.word	0x08006129

08005a10 <get_eit_entry>:
 8005a10:	b530      	push	{r4, r5, lr}
 8005a12:	4b27      	ldr	r3, [pc, #156]	; (8005ab0 <get_eit_entry+0xa0>)
 8005a14:	b083      	sub	sp, #12
 8005a16:	4604      	mov	r4, r0
 8005a18:	1e8d      	subs	r5, r1, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d042      	beq.n	8005aa4 <get_eit_entry+0x94>
 8005a1e:	4628      	mov	r0, r5
 8005a20:	a901      	add	r1, sp, #4
 8005a22:	f3af 8000 	nop.w
 8005a26:	4603      	mov	r3, r0
 8005a28:	b323      	cbz	r3, 8005a74 <get_eit_entry+0x64>
 8005a2a:	462a      	mov	r2, r5
 8005a2c:	9901      	ldr	r1, [sp, #4]
 8005a2e:	f7ff ffa1 	bl	8005974 <search_EIT_table>
 8005a32:	4605      	mov	r5, r0
 8005a34:	b318      	cbz	r0, 8005a7e <get_eit_entry+0x6e>
 8005a36:	f7ff ff93 	bl	8005960 <selfrel_offset31>
 8005a3a:	686b      	ldr	r3, [r5, #4]
 8005a3c:	64a0      	str	r0, [r4, #72]	; 0x48
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d012      	beq.n	8005a68 <get_eit_entry+0x58>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f105 0004 	add.w	r0, r5, #4
 8005a48:	db28      	blt.n	8005a9c <get_eit_entry+0x8c>
 8005a4a:	f7ff ff89 	bl	8005960 <selfrel_offset31>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005a52:	6523      	str	r3, [r4, #80]	; 0x50
 8005a54:	6803      	ldr	r3, [r0, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	db16      	blt.n	8005a88 <get_eit_entry+0x78>
 8005a5a:	f7ff ff81 	bl	8005960 <selfrel_offset31>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	6120      	str	r0, [r4, #16]
 8005a62:	4618      	mov	r0, r3
 8005a64:	b003      	add	sp, #12
 8005a66:	bd30      	pop	{r4, r5, pc}
 8005a68:	2300      	movs	r3, #0
 8005a6a:	6123      	str	r3, [r4, #16]
 8005a6c:	2305      	movs	r3, #5
 8005a6e:	4618      	mov	r0, r3
 8005a70:	b003      	add	sp, #12
 8005a72:	bd30      	pop	{r4, r5, pc}
 8005a74:	6123      	str	r3, [r4, #16]
 8005a76:	2309      	movs	r3, #9
 8005a78:	4618      	mov	r0, r3
 8005a7a:	b003      	add	sp, #12
 8005a7c:	bd30      	pop	{r4, r5, pc}
 8005a7e:	2309      	movs	r3, #9
 8005a80:	6120      	str	r0, [r4, #16]
 8005a82:	4618      	mov	r0, r3
 8005a84:	b003      	add	sp, #12
 8005a86:	bd30      	pop	{r4, r5, pc}
 8005a88:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8005a8c:	f7ff ffac 	bl	80059e8 <__gnu_unwind_get_pr_addr>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	6120      	str	r0, [r4, #16]
 8005a94:	bf14      	ite	ne
 8005a96:	2300      	movne	r3, #0
 8005a98:	2309      	moveq	r3, #9
 8005a9a:	e7e2      	b.n	8005a62 <get_eit_entry+0x52>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005aa0:	6523      	str	r3, [r4, #80]	; 0x50
 8005aa2:	e7d7      	b.n	8005a54 <get_eit_entry+0x44>
 8005aa4:	4b03      	ldr	r3, [pc, #12]	; (8005ab4 <get_eit_entry+0xa4>)
 8005aa6:	4804      	ldr	r0, [pc, #16]	; (8005ab8 <get_eit_entry+0xa8>)
 8005aa8:	1a1b      	subs	r3, r3, r0
 8005aaa:	10db      	asrs	r3, r3, #3
 8005aac:	9301      	str	r3, [sp, #4]
 8005aae:	e7bc      	b.n	8005a2a <get_eit_entry+0x1a>
 8005ab0:	00000000 	.word	0x00000000
 8005ab4:	0800f65c 	.word	0x0800f65c
 8005ab8:	0800f484 	.word	0x0800f484

08005abc <restore_non_core_regs>:
 8005abc:	6803      	ldr	r3, [r0, #0]
 8005abe:	07da      	lsls	r2, r3, #31
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	d406      	bmi.n	8005ad4 <restore_non_core_regs+0x18>
 8005ac6:	079b      	lsls	r3, r3, #30
 8005ac8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8005acc:	d509      	bpl.n	8005ae2 <restore_non_core_regs+0x26>
 8005ace:	f000 fc69 	bl	80063a4 <__gnu_Unwind_Restore_VFP_D>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	0759      	lsls	r1, r3, #29
 8005ad6:	d509      	bpl.n	8005aec <restore_non_core_regs+0x30>
 8005ad8:	071a      	lsls	r2, r3, #28
 8005ada:	d50e      	bpl.n	8005afa <restore_non_core_regs+0x3e>
 8005adc:	06db      	lsls	r3, r3, #27
 8005ade:	d513      	bpl.n	8005b08 <restore_non_core_regs+0x4c>
 8005ae0:	bd10      	pop	{r4, pc}
 8005ae2:	f000 fc57 	bl	8006394 <__gnu_Unwind_Restore_VFP>
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	0759      	lsls	r1, r3, #29
 8005aea:	d4f5      	bmi.n	8005ad8 <restore_non_core_regs+0x1c>
 8005aec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005af0:	f000 fc60 	bl	80063b4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	071a      	lsls	r2, r3, #28
 8005af8:	d4f0      	bmi.n	8005adc <restore_non_core_regs+0x20>
 8005afa:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8005afe:	f000 fc61 	bl	80063c4 <__gnu_Unwind_Restore_WMMXD>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	06db      	lsls	r3, r3, #27
 8005b06:	d4eb      	bmi.n	8005ae0 <restore_non_core_regs+0x24>
 8005b08:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8005b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b10:	f000 bc9c 	b.w	800644c <__gnu_Unwind_Restore_WMMXC>

08005b14 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8005b14:	6803      	ldr	r3, [r0, #0]
 8005b16:	b10b      	cbz	r3, 8005b1c <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8005b18:	4418      	add	r0, r3
 8005b1a:	4770      	bx	lr
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	4770      	bx	lr

08005b20 <__gnu_unwind_24bit.isra.1>:
 8005b20:	2009      	movs	r0, #9
 8005b22:	4770      	bx	lr

08005b24 <_Unwind_DebugHook>:
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop

08005b28 <unwind_phase2>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	e008      	b.n	8005b42 <unwind_phase2+0x1a>
 8005b30:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005b32:	6163      	str	r3, [r4, #20]
 8005b34:	2001      	movs	r0, #1
 8005b36:	6923      	ldr	r3, [r4, #16]
 8005b38:	4621      	mov	r1, r4
 8005b3a:	462a      	mov	r2, r5
 8005b3c:	4798      	blx	r3
 8005b3e:	2808      	cmp	r0, #8
 8005b40:	d108      	bne.n	8005b54 <unwind_phase2+0x2c>
 8005b42:	4620      	mov	r0, r4
 8005b44:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005b46:	f7ff ff63 	bl	8005a10 <get_eit_entry>
 8005b4a:	4606      	mov	r6, r0
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d0ef      	beq.n	8005b30 <unwind_phase2+0x8>
 8005b50:	f007 f826 	bl	800cba0 <abort>
 8005b54:	2807      	cmp	r0, #7
 8005b56:	d1fb      	bne.n	8005b50 <unwind_phase2+0x28>
 8005b58:	4630      	mov	r0, r6
 8005b5a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005b5c:	f7ff ffe2 	bl	8005b24 <_Unwind_DebugHook>
 8005b60:	1d28      	adds	r0, r5, #4
 8005b62:	f000 fc0b 	bl	800637c <__restore_core_regs>
 8005b66:	bf00      	nop

08005b68 <unwind_phase2_forced>:
 8005b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b6c:	1d0c      	adds	r4, r1, #4
 8005b6e:	4605      	mov	r5, r0
 8005b70:	4617      	mov	r7, r2
 8005b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b74:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8005b78:	ae03      	add	r6, sp, #12
 8005b7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b82:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005b84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005b88:	ac02      	add	r4, sp, #8
 8005b8a:	f04f 0e00 	mov.w	lr, #0
 8005b8e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8005b92:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8005b96:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005b9e:	f8c4 e000 	str.w	lr, [r4]
 8005ba2:	f7ff ff35 	bl	8005a10 <get_eit_entry>
 8005ba6:	2f00      	cmp	r7, #0
 8005ba8:	4606      	mov	r6, r0
 8005baa:	bf14      	ite	ne
 8005bac:	270a      	movne	r7, #10
 8005bae:	2709      	moveq	r7, #9
 8005bb0:	b186      	cbz	r6, 8005bd4 <unwind_phase2_forced+0x6c>
 8005bb2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005bb4:	462a      	mov	r2, r5
 8005bb6:	e88d 0210 	stmia.w	sp, {r4, r9}
 8005bba:	f047 0110 	orr.w	r1, r7, #16
 8005bbe:	6460      	str	r0, [r4, #68]	; 0x44
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	47c0      	blx	r8
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d12f      	bne.n	8005c2a <unwind_phase2_forced+0xc2>
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8005bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bd6:	616b      	str	r3, [r5, #20]
 8005bd8:	4621      	mov	r1, r4
 8005bda:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005bde:	a87a      	add	r0, sp, #488	; 0x1e8
 8005be0:	f007 fa6b 	bl	800d0ba <memcpy>
 8005be4:	692b      	ldr	r3, [r5, #16]
 8005be6:	4629      	mov	r1, r5
 8005be8:	aa7a      	add	r2, sp, #488	; 0x1e8
 8005bea:	4638      	mov	r0, r7
 8005bec:	4798      	blx	r3
 8005bee:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8005bf0:	4682      	mov	sl, r0
 8005bf2:	e88d 0210 	stmia.w	sp, {r4, r9}
 8005bf6:	4639      	mov	r1, r7
 8005bf8:	6463      	str	r3, [r4, #68]	; 0x44
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	462a      	mov	r2, r5
 8005bfe:	462b      	mov	r3, r5
 8005c00:	47c0      	blx	r8
 8005c02:	b990      	cbnz	r0, 8005c2a <unwind_phase2_forced+0xc2>
 8005c04:	4620      	mov	r0, r4
 8005c06:	a97a      	add	r1, sp, #488	; 0x1e8
 8005c08:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005c0c:	f007 fa55 	bl	800d0ba <memcpy>
 8005c10:	f1ba 0f08 	cmp.w	sl, #8
 8005c14:	d106      	bne.n	8005c24 <unwind_phase2_forced+0xbc>
 8005c16:	4628      	mov	r0, r5
 8005c18:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005c1a:	f7ff fef9 	bl	8005a10 <get_eit_entry>
 8005c1e:	2709      	movs	r7, #9
 8005c20:	4606      	mov	r6, r0
 8005c22:	e7c5      	b.n	8005bb0 <unwind_phase2_forced+0x48>
 8005c24:	f1ba 0f07 	cmp.w	sl, #7
 8005c28:	d004      	beq.n	8005c34 <unwind_phase2_forced+0xcc>
 8005c2a:	2009      	movs	r0, #9
 8005c2c:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8005c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c34:	4630      	mov	r0, r6
 8005c36:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005c38:	f7ff ff74 	bl	8005b24 <_Unwind_DebugHook>
 8005c3c:	a803      	add	r0, sp, #12
 8005c3e:	f000 fb9d 	bl	800637c <__restore_core_regs>
 8005c42:	bf00      	nop

08005c44 <_Unwind_GetCFA>:
 8005c44:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8005c46:	4770      	bx	lr

08005c48 <__gnu_Unwind_RaiseException>:
 8005c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c4a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005c4c:	640b      	str	r3, [r1, #64]	; 0x40
 8005c4e:	1d0e      	adds	r6, r1, #4
 8005c50:	460f      	mov	r7, r1
 8005c52:	4604      	mov	r4, r0
 8005c54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005c56:	b0f9      	sub	sp, #484	; 0x1e4
 8005c58:	ad01      	add	r5, sp, #4
 8005c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c5c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c64:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005c68:	f04f 36ff 	mov.w	r6, #4294967295
 8005c6c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005c70:	9600      	str	r6, [sp, #0]
 8005c72:	e006      	b.n	8005c82 <__gnu_Unwind_RaiseException+0x3a>
 8005c74:	6923      	ldr	r3, [r4, #16]
 8005c76:	4621      	mov	r1, r4
 8005c78:	466a      	mov	r2, sp
 8005c7a:	4798      	blx	r3
 8005c7c:	2808      	cmp	r0, #8
 8005c7e:	4605      	mov	r5, r0
 8005c80:	d108      	bne.n	8005c94 <__gnu_Unwind_RaiseException+0x4c>
 8005c82:	4620      	mov	r0, r4
 8005c84:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005c86:	f7ff fec3 	bl	8005a10 <get_eit_entry>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d0f2      	beq.n	8005c74 <__gnu_Unwind_RaiseException+0x2c>
 8005c8e:	2009      	movs	r0, #9
 8005c90:	b079      	add	sp, #484	; 0x1e4
 8005c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c94:	4668      	mov	r0, sp
 8005c96:	f7ff ff11 	bl	8005abc <restore_non_core_regs>
 8005c9a:	2d06      	cmp	r5, #6
 8005c9c:	d1f7      	bne.n	8005c8e <__gnu_Unwind_RaiseException+0x46>
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	4639      	mov	r1, r7
 8005ca2:	f7ff ff41 	bl	8005b28 <unwind_phase2>
 8005ca6:	bf00      	nop

08005ca8 <__gnu_Unwind_ForcedUnwind>:
 8005ca8:	b430      	push	{r4, r5}
 8005caa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8005cac:	60c1      	str	r1, [r0, #12]
 8005cae:	6182      	str	r2, [r0, #24]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	641d      	str	r5, [r3, #64]	; 0x40
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	bc30      	pop	{r4, r5}
 8005cb8:	f7ff bf56 	b.w	8005b68 <unwind_phase2_forced>

08005cbc <__gnu_Unwind_Resume>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	68c6      	ldr	r6, [r0, #12]
 8005cc0:	6943      	ldr	r3, [r0, #20]
 8005cc2:	640b      	str	r3, [r1, #64]	; 0x40
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	460d      	mov	r5, r1
 8005cc8:	b126      	cbz	r6, 8005cd4 <__gnu_Unwind_Resume+0x18>
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f7ff ff4c 	bl	8005b68 <unwind_phase2_forced>
 8005cd0:	f006 ff66 	bl	800cba0 <abort>
 8005cd4:	6903      	ldr	r3, [r0, #16]
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	2002      	movs	r0, #2
 8005cda:	462a      	mov	r2, r5
 8005cdc:	4798      	blx	r3
 8005cde:	2807      	cmp	r0, #7
 8005ce0:	d007      	beq.n	8005cf2 <__gnu_Unwind_Resume+0x36>
 8005ce2:	2808      	cmp	r0, #8
 8005ce4:	d103      	bne.n	8005cee <__gnu_Unwind_Resume+0x32>
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	4629      	mov	r1, r5
 8005cea:	f7ff ff1d 	bl	8005b28 <unwind_phase2>
 8005cee:	f006 ff57 	bl	800cba0 <abort>
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005cf6:	f7ff ff15 	bl	8005b24 <_Unwind_DebugHook>
 8005cfa:	1d28      	adds	r0, r5, #4
 8005cfc:	f000 fb3e 	bl	800637c <__restore_core_regs>

08005d00 <__gnu_Unwind_Resume_or_Rethrow>:
 8005d00:	68c2      	ldr	r2, [r0, #12]
 8005d02:	b122      	cbz	r2, 8005d0e <__gnu_Unwind_Resume_or_Rethrow+0xe>
 8005d04:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8005d06:	640a      	str	r2, [r1, #64]	; 0x40
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f7ff bf2d 	b.w	8005b68 <unwind_phase2_forced>
 8005d0e:	e79b      	b.n	8005c48 <__gnu_Unwind_RaiseException>

08005d10 <_Unwind_Complete>:
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop

08005d14 <_Unwind_DeleteException>:
 8005d14:	b508      	push	{r3, lr}
 8005d16:	6883      	ldr	r3, [r0, #8]
 8005d18:	b113      	cbz	r3, 8005d20 <_Unwind_DeleteException+0xc>
 8005d1a:	4601      	mov	r1, r0
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	4798      	blx	r3
 8005d20:	bd08      	pop	{r3, pc}
 8005d22:	bf00      	nop

08005d24 <_Unwind_VRS_Get>:
 8005d24:	b410      	push	{r4}
 8005d26:	2904      	cmp	r1, #4
 8005d28:	d809      	bhi.n	8005d3e <_Unwind_VRS_Get+0x1a>
 8005d2a:	e8df f001 	tbb	[pc, r1]
 8005d2e:	0307      	.short	0x0307
 8005d30:	0308      	.short	0x0308
 8005d32:	03          	.byte	0x03
 8005d33:	00          	.byte	0x00
 8005d34:	2001      	movs	r0, #1
 8005d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	b11b      	cbz	r3, 8005d46 <_Unwind_VRS_Get+0x22>
 8005d3e:	2002      	movs	r0, #2
 8005d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	2a0f      	cmp	r2, #15
 8005d48:	d8f9      	bhi.n	8005d3e <_Unwind_VRS_Get+0x1a>
 8005d4a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	6853      	ldr	r3, [r2, #4]
 8005d52:	9a01      	ldr	r2, [sp, #4]
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	e7ee      	b.n	8005d36 <_Unwind_VRS_Get+0x12>

08005d58 <_Unwind_GetGR>:
 8005d58:	b500      	push	{lr}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	460a      	mov	r2, r1
 8005d5e:	ab03      	add	r3, sp, #12
 8005d60:	2100      	movs	r1, #0
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	460b      	mov	r3, r1
 8005d66:	f7ff ffdd 	bl	8005d24 <_Unwind_VRS_Get>
 8005d6a:	9803      	ldr	r0, [sp, #12]
 8005d6c:	b005      	add	sp, #20
 8005d6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d72:	bf00      	nop

08005d74 <_Unwind_VRS_Set>:
 8005d74:	b410      	push	{r4}
 8005d76:	2904      	cmp	r1, #4
 8005d78:	d809      	bhi.n	8005d8e <_Unwind_VRS_Set+0x1a>
 8005d7a:	e8df f001 	tbb	[pc, r1]
 8005d7e:	0307      	.short	0x0307
 8005d80:	0308      	.short	0x0308
 8005d82:	03          	.byte	0x03
 8005d83:	00          	.byte	0x00
 8005d84:	2001      	movs	r0, #1
 8005d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	b11b      	cbz	r3, 8005d96 <_Unwind_VRS_Set+0x22>
 8005d8e:	2002      	movs	r0, #2
 8005d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	2a0f      	cmp	r2, #15
 8005d98:	d8f9      	bhi.n	8005d8e <_Unwind_VRS_Set+0x1a>
 8005d9a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005d9e:	9801      	ldr	r0, [sp, #4]
 8005da0:	6801      	ldr	r1, [r0, #0]
 8005da2:	6051      	str	r1, [r2, #4]
 8005da4:	4618      	mov	r0, r3
 8005da6:	e7ee      	b.n	8005d86 <_Unwind_VRS_Set+0x12>

08005da8 <_Unwind_SetGR>:
 8005da8:	b510      	push	{r4, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	ab04      	add	r3, sp, #16
 8005dae:	460c      	mov	r4, r1
 8005db0:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005db4:	2100      	movs	r1, #0
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	4622      	mov	r2, r4
 8005dba:	460b      	mov	r3, r1
 8005dbc:	f7ff ffda 	bl	8005d74 <_Unwind_VRS_Set>
 8005dc0:	b004      	add	sp, #16
 8005dc2:	bd10      	pop	{r4, pc}

08005dc4 <__gnu_Unwind_Backtrace>:
 8005dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dc6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8005dca:	1d15      	adds	r5, r2, #4
 8005dcc:	4607      	mov	r7, r0
 8005dce:	460e      	mov	r6, r1
 8005dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dd2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8005dd6:	ac17      	add	r4, sp, #92	; 0x5c
 8005dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005de2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005de6:	f04f 35ff 	mov.w	r5, #4294967295
 8005dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005dee:	9516      	str	r5, [sp, #88]	; 0x58
 8005df0:	e010      	b.n	8005e14 <__gnu_Unwind_Backtrace+0x50>
 8005df2:	a816      	add	r0, sp, #88	; 0x58
 8005df4:	f7ff ffd8 	bl	8005da8 <_Unwind_SetGR>
 8005df8:	4631      	mov	r1, r6
 8005dfa:	a816      	add	r0, sp, #88	; 0x58
 8005dfc:	47b8      	blx	r7
 8005dfe:	4669      	mov	r1, sp
 8005e00:	aa16      	add	r2, sp, #88	; 0x58
 8005e02:	b978      	cbnz	r0, 8005e24 <__gnu_Unwind_Backtrace+0x60>
 8005e04:	9b04      	ldr	r3, [sp, #16]
 8005e06:	2008      	movs	r0, #8
 8005e08:	4798      	blx	r3
 8005e0a:	2805      	cmp	r0, #5
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	d00a      	beq.n	8005e26 <__gnu_Unwind_Backtrace+0x62>
 8005e10:	2809      	cmp	r0, #9
 8005e12:	d007      	beq.n	8005e24 <__gnu_Unwind_Backtrace+0x60>
 8005e14:	9926      	ldr	r1, [sp, #152]	; 0x98
 8005e16:	4668      	mov	r0, sp
 8005e18:	f7ff fdfa 	bl	8005a10 <get_eit_entry>
 8005e1c:	466a      	mov	r2, sp
 8005e1e:	210c      	movs	r1, #12
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d0e6      	beq.n	8005df2 <__gnu_Unwind_Backtrace+0x2e>
 8005e24:	2409      	movs	r4, #9
 8005e26:	a816      	add	r0, sp, #88	; 0x58
 8005e28:	f7ff fe48 	bl	8005abc <restore_non_core_regs>
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8005e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e34 <__gnu_unwind_pr_common>:
 8005e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	460c      	mov	r4, r1
 8005e3a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005e3c:	b08b      	sub	sp, #44	; 0x2c
 8005e3e:	461d      	mov	r5, r3
 8005e40:	1d0e      	adds	r6, r1, #4
 8005e42:	680b      	ldr	r3, [r1, #0]
 8005e44:	9307      	str	r3, [sp, #28]
 8005e46:	4690      	mov	r8, r2
 8005e48:	9608      	str	r6, [sp, #32]
 8005e4a:	f000 0903 	and.w	r9, r0, #3
 8005e4e:	2d00      	cmp	r5, #0
 8005e50:	f040 8089 	bne.w	8005f66 <__gnu_unwind_pr_common+0x132>
 8005e54:	021b      	lsls	r3, r3, #8
 8005e56:	2203      	movs	r2, #3
 8005e58:	9307      	str	r3, [sp, #28]
 8005e5a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8005e5e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8005e62:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005e64:	f1b9 0f02 	cmp.w	r9, #2
 8005e68:	bf08      	it	eq
 8005e6a:	6ba6      	ldreq	r6, [r4, #56]	; 0x38
 8005e6c:	f013 0301 	ands.w	r3, r3, #1
 8005e70:	d142      	bne.n	8005ef8 <__gnu_unwind_pr_common+0xc4>
 8005e72:	f000 0008 	and.w	r0, r0, #8
 8005e76:	b2c0      	uxtb	r0, r0
 8005e78:	9003      	str	r0, [sp, #12]
 8005e7a:	9302      	str	r3, [sp, #8]
 8005e7c:	6837      	ldr	r7, [r6, #0]
 8005e7e:	2f00      	cmp	r7, #0
 8005e80:	d03c      	beq.n	8005efc <__gnu_unwind_pr_common+0xc8>
 8005e82:	2d02      	cmp	r5, #2
 8005e84:	d06b      	beq.n	8005f5e <__gnu_unwind_pr_common+0x12a>
 8005e86:	8837      	ldrh	r7, [r6, #0]
 8005e88:	f8b6 a002 	ldrh.w	sl, [r6, #2]
 8005e8c:	3604      	adds	r6, #4
 8005e8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005e90:	f02a 0b01 	bic.w	fp, sl, #1
 8005e94:	4640      	mov	r0, r8
 8005e96:	210f      	movs	r1, #15
 8005e98:	449b      	add	fp, r3
 8005e9a:	f7ff ff5d 	bl	8005d58 <_Unwind_GetGR>
 8005e9e:	4583      	cmp	fp, r0
 8005ea0:	d836      	bhi.n	8005f10 <__gnu_unwind_pr_common+0xdc>
 8005ea2:	f027 0301 	bic.w	r3, r7, #1
 8005ea6:	449b      	add	fp, r3
 8005ea8:	f00a 0a01 	and.w	sl, sl, #1
 8005eac:	f007 0701 	and.w	r7, r7, #1
 8005eb0:	4558      	cmp	r0, fp
 8005eb2:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
 8005eb6:	bf2c      	ite	cs
 8005eb8:	2000      	movcs	r0, #0
 8005eba:	2001      	movcc	r0, #1
 8005ebc:	2f01      	cmp	r7, #1
 8005ebe:	d031      	beq.n	8005f24 <__gnu_unwind_pr_common+0xf0>
 8005ec0:	d360      	bcc.n	8005f84 <__gnu_unwind_pr_common+0x150>
 8005ec2:	2f02      	cmp	r7, #2
 8005ec4:	d120      	bne.n	8005f08 <__gnu_unwind_pr_common+0xd4>
 8005ec6:	6833      	ldr	r3, [r6, #0]
 8005ec8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005ecc:	9101      	str	r1, [sp, #4]
 8005ece:	f1b9 0f00 	cmp.w	r9, #0
 8005ed2:	f040 8085 	bne.w	8005fe0 <__gnu_unwind_pr_common+0x1ac>
 8005ed6:	b130      	cbz	r0, 8005ee6 <__gnu_unwind_pr_common+0xb2>
 8005ed8:	9a03      	ldr	r2, [sp, #12]
 8005eda:	2a00      	cmp	r2, #0
 8005edc:	f000 808d 	beq.w	8005ffa <__gnu_unwind_pr_common+0x1c6>
 8005ee0:	2900      	cmp	r1, #0
 8005ee2:	f000 80b0 	beq.w	8006046 <__gnu_unwind_pr_common+0x212>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f2c0 8085 	blt.w	8005ff6 <__gnu_unwind_pr_common+0x1c2>
 8005eec:	9b01      	ldr	r3, [sp, #4]
 8005eee:	f103 0a01 	add.w	sl, r3, #1
 8005ef2:	eb06 068a 	add.w	r6, r6, sl, lsl #2
 8005ef6:	e7c1      	b.n	8005e7c <__gnu_unwind_pr_common+0x48>
 8005ef8:	2100      	movs	r1, #0
 8005efa:	9102      	str	r1, [sp, #8]
 8005efc:	2d02      	cmp	r5, #2
 8005efe:	dd49      	ble.n	8005f94 <__gnu_unwind_pr_common+0x160>
 8005f00:	f7ff fe0e 	bl	8005b20 <__gnu_unwind_24bit.isra.1>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d04b      	beq.n	8005fa0 <__gnu_unwind_pr_common+0x16c>
 8005f08:	2009      	movs	r0, #9
 8005f0a:	b00b      	add	sp, #44	; 0x2c
 8005f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f10:	f00a 0a01 	and.w	sl, sl, #1
 8005f14:	f007 0701 	and.w	r7, r7, #1
 8005f18:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
 8005f1c:	2f01      	cmp	r7, #1
 8005f1e:	f04f 0000 	mov.w	r0, #0
 8005f22:	d1cd      	bne.n	8005ec0 <__gnu_unwind_pr_common+0x8c>
 8005f24:	f1b9 0f00 	cmp.w	r9, #0
 8005f28:	d141      	bne.n	8005fae <__gnu_unwind_pr_common+0x17a>
 8005f2a:	b1b0      	cbz	r0, 8005f5a <__gnu_unwind_pr_common+0x126>
 8005f2c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8005f30:	0fd7      	lsrs	r7, r2, #31
 8005f32:	1c9a      	adds	r2, r3, #2
 8005f34:	d0e8      	beq.n	8005f08 <__gnu_unwind_pr_common+0xd4>
 8005f36:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	9106      	str	r1, [sp, #24]
 8005f3e:	f000 80ad 	beq.w	800609c <__gnu_unwind_pr_common+0x268>
 8005f42:	1d30      	adds	r0, r6, #4
 8005f44:	f7ff fde6 	bl	8005b14 <_Unwind_decode_typeinfo_ptr.isra.0>
 8005f48:	463a      	mov	r2, r7
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	ab06      	add	r3, sp, #24
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f005 fe2c 	bl	800bbac <__cxa_type_match>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	f040 80cf 	bne.w	80060f8 <__gnu_unwind_pr_common+0x2c4>
 8005f5a:	3608      	adds	r6, #8
 8005f5c:	e78e      	b.n	8005e7c <__gnu_unwind_pr_common+0x48>
 8005f5e:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8005f62:	3608      	adds	r6, #8
 8005f64:	e793      	b.n	8005e8e <__gnu_unwind_pr_common+0x5a>
 8005f66:	2d02      	cmp	r5, #2
 8005f68:	f73f af7b 	bgt.w	8005e62 <__gnu_unwind_pr_common+0x2e>
 8005f6c:	0c1a      	lsrs	r2, r3, #16
 8005f6e:	b2d7      	uxtb	r7, r2
 8005f70:	041b      	lsls	r3, r3, #16
 8005f72:	2102      	movs	r1, #2
 8005f74:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 8005f78:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8005f7c:	9307      	str	r3, [sp, #28]
 8005f7e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8005f82:	e76e      	b.n	8005e62 <__gnu_unwind_pr_common+0x2e>
 8005f84:	f1b9 0f00 	cmp.w	r9, #0
 8005f88:	d002      	beq.n	8005f90 <__gnu_unwind_pr_common+0x15c>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	f040 8090 	bne.w	80060b0 <__gnu_unwind_pr_common+0x27c>
 8005f90:	3604      	adds	r6, #4
 8005f92:	e773      	b.n	8005e7c <__gnu_unwind_pr_common+0x48>
 8005f94:	4640      	mov	r0, r8
 8005f96:	a907      	add	r1, sp, #28
 8005f98:	f000 faf0 	bl	800657c <__gnu_unwind_execute>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d1b3      	bne.n	8005f08 <__gnu_unwind_pr_common+0xd4>
 8005fa0:	9a02      	ldr	r2, [sp, #8]
 8005fa2:	2a00      	cmp	r2, #0
 8005fa4:	d159      	bne.n	800605a <__gnu_unwind_pr_common+0x226>
 8005fa6:	2008      	movs	r0, #8
 8005fa8:	b00b      	add	sp, #44	; 0x2c
 8005faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fae:	4640      	mov	r0, r8
 8005fb0:	210d      	movs	r1, #13
 8005fb2:	6a27      	ldr	r7, [r4, #32]
 8005fb4:	f7ff fed0 	bl	8005d58 <_Unwind_GetGR>
 8005fb8:	4287      	cmp	r7, r0
 8005fba:	d1ce      	bne.n	8005f5a <__gnu_unwind_pr_common+0x126>
 8005fbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fbe:	429e      	cmp	r6, r3
 8005fc0:	d1cb      	bne.n	8005f5a <__gnu_unwind_pr_common+0x126>
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	f7ff fccc 	bl	8005960 <selfrel_offset31>
 8005fc8:	210f      	movs	r1, #15
 8005fca:	4602      	mov	r2, r0
 8005fcc:	4640      	mov	r0, r8
 8005fce:	f7ff feeb 	bl	8005da8 <_Unwind_SetGR>
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	4622      	mov	r2, r4
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	f7ff fee6 	bl	8005da8 <_Unwind_SetGR>
 8005fdc:	2007      	movs	r0, #7
 8005fde:	e794      	b.n	8005f0a <__gnu_unwind_pr_common+0xd6>
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	210d      	movs	r1, #13
 8005fe4:	6a27      	ldr	r7, [r4, #32]
 8005fe6:	f7ff feb7 	bl	8005d58 <_Unwind_GetGR>
 8005fea:	4287      	cmp	r7, r0
 8005fec:	d045      	beq.n	800607a <__gnu_unwind_pr_common+0x246>
 8005fee:	6833      	ldr	r3, [r6, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f6bf af7b 	bge.w	8005eec <__gnu_unwind_pr_common+0xb8>
 8005ff6:	3604      	adds	r6, #4
 8005ff8:	e778      	b.n	8005eec <__gnu_unwind_pr_common+0xb8>
 8005ffa:	9901      	ldr	r1, [sp, #4]
 8005ffc:	b319      	cbz	r1, 8006046 <__gnu_unwind_pr_common+0x212>
 8005ffe:	f104 0c58 	add.w	ip, r4, #88	; 0x58
 8006002:	f8cd 9010 	str.w	r9, [sp, #16]
 8006006:	9505      	str	r5, [sp, #20]
 8006008:	1d37      	adds	r7, r6, #4
 800600a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800600e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006012:	4665      	mov	r5, ip
 8006014:	e002      	b.n	800601c <__gnu_unwind_pr_common+0x1e8>
 8006016:	45ca      	cmp	sl, r9
 8006018:	d015      	beq.n	8006046 <__gnu_unwind_pr_common+0x212>
 800601a:	46d3      	mov	fp, sl
 800601c:	4638      	mov	r0, r7
 800601e:	9506      	str	r5, [sp, #24]
 8006020:	f7ff fd78 	bl	8005b14 <_Unwind_decode_typeinfo_ptr.isra.0>
 8006024:	2200      	movs	r2, #0
 8006026:	4601      	mov	r1, r0
 8006028:	ab06      	add	r3, sp, #24
 800602a:	4620      	mov	r0, r4
 800602c:	f005 fdbe 	bl	800bbac <__cxa_type_match>
 8006030:	f10b 0a01 	add.w	sl, fp, #1
 8006034:	3704      	adds	r7, #4
 8006036:	2800      	cmp	r0, #0
 8006038:	d0ed      	beq.n	8006016 <__gnu_unwind_pr_common+0x1e2>
 800603a:	9b01      	ldr	r3, [sp, #4]
 800603c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8006040:	9d05      	ldr	r5, [sp, #20]
 8006042:	455b      	cmp	r3, fp
 8006044:	d1d3      	bne.n	8005fee <__gnu_unwind_pr_common+0x1ba>
 8006046:	4640      	mov	r0, r8
 8006048:	210d      	movs	r1, #13
 800604a:	f7ff fe85 	bl	8005d58 <_Unwind_GetGR>
 800604e:	9b06      	ldr	r3, [sp, #24]
 8006050:	6220      	str	r0, [r4, #32]
 8006052:	62a6      	str	r6, [r4, #40]	; 0x28
 8006054:	6263      	str	r3, [r4, #36]	; 0x24
 8006056:	2006      	movs	r0, #6
 8006058:	e757      	b.n	8005f0a <__gnu_unwind_pr_common+0xd6>
 800605a:	210f      	movs	r1, #15
 800605c:	4640      	mov	r0, r8
 800605e:	f7ff fe7b 	bl	8005d58 <_Unwind_GetGR>
 8006062:	210e      	movs	r1, #14
 8006064:	4602      	mov	r2, r0
 8006066:	4640      	mov	r0, r8
 8006068:	f7ff fe9e 	bl	8005da8 <_Unwind_SetGR>
 800606c:	4640      	mov	r0, r8
 800606e:	210f      	movs	r1, #15
 8006070:	4a28      	ldr	r2, [pc, #160]	; (8006114 <__gnu_unwind_pr_common+0x2e0>)
 8006072:	f7ff fe99 	bl	8005da8 <_Unwind_SetGR>
 8006076:	2007      	movs	r0, #7
 8006078:	e747      	b.n	8005f0a <__gnu_unwind_pr_common+0xd6>
 800607a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800607c:	429e      	cmp	r6, r3
 800607e:	d1b6      	bne.n	8005fee <__gnu_unwind_pr_common+0x1ba>
 8006080:	2204      	movs	r2, #4
 8006082:	2700      	movs	r7, #0
 8006084:	18b3      	adds	r3, r6, r2
 8006086:	9901      	ldr	r1, [sp, #4]
 8006088:	62a1      	str	r1, [r4, #40]	; 0x28
 800608a:	62e7      	str	r7, [r4, #44]	; 0x2c
 800608c:	6322      	str	r2, [r4, #48]	; 0x30
 800608e:	6363      	str	r3, [r4, #52]	; 0x34
 8006090:	6833      	ldr	r3, [r6, #0]
 8006092:	42bb      	cmp	r3, r7
 8006094:	db1f      	blt.n	80060d6 <__gnu_unwind_pr_common+0x2a2>
 8006096:	2201      	movs	r2, #1
 8006098:	9202      	str	r2, [sp, #8]
 800609a:	e727      	b.n	8005eec <__gnu_unwind_pr_common+0xb8>
 800609c:	4640      	mov	r0, r8
 800609e:	210d      	movs	r1, #13
 80060a0:	f7ff fe5a 	bl	8005d58 <_Unwind_GetGR>
 80060a4:	6220      	str	r0, [r4, #32]
 80060a6:	9b06      	ldr	r3, [sp, #24]
 80060a8:	6263      	str	r3, [r4, #36]	; 0x24
 80060aa:	62a6      	str	r6, [r4, #40]	; 0x28
 80060ac:	2006      	movs	r0, #6
 80060ae:	e72c      	b.n	8005f0a <__gnu_unwind_pr_common+0xd6>
 80060b0:	4630      	mov	r0, r6
 80060b2:	f7ff fc55 	bl	8005960 <selfrel_offset31>
 80060b6:	3604      	adds	r6, #4
 80060b8:	4605      	mov	r5, r0
 80060ba:	63a6      	str	r6, [r4, #56]	; 0x38
 80060bc:	4620      	mov	r0, r4
 80060be:	f005 fdcb 	bl	800bc58 <__cxa_begin_cleanup>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	f43f af20 	beq.w	8005f08 <__gnu_unwind_pr_common+0xd4>
 80060c8:	4640      	mov	r0, r8
 80060ca:	462a      	mov	r2, r5
 80060cc:	210f      	movs	r1, #15
 80060ce:	f7ff fe6b 	bl	8005da8 <_Unwind_SetGR>
 80060d2:	2007      	movs	r0, #7
 80060d4:	e719      	b.n	8005f0a <__gnu_unwind_pr_common+0xd6>
 80060d6:	1c48      	adds	r0, r1, #1
 80060d8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80060dc:	f7ff fc40 	bl	8005960 <selfrel_offset31>
 80060e0:	210f      	movs	r1, #15
 80060e2:	4602      	mov	r2, r0
 80060e4:	4640      	mov	r0, r8
 80060e6:	f7ff fe5f 	bl	8005da8 <_Unwind_SetGR>
 80060ea:	4640      	mov	r0, r8
 80060ec:	4639      	mov	r1, r7
 80060ee:	4622      	mov	r2, r4
 80060f0:	f7ff fe5a 	bl	8005da8 <_Unwind_SetGR>
 80060f4:	2007      	movs	r0, #7
 80060f6:	e708      	b.n	8005f0a <__gnu_unwind_pr_common+0xd6>
 80060f8:	4607      	mov	r7, r0
 80060fa:	210d      	movs	r1, #13
 80060fc:	4640      	mov	r0, r8
 80060fe:	f7ff fe2b 	bl	8005d58 <_Unwind_GetGR>
 8006102:	2f02      	cmp	r7, #2
 8006104:	6220      	str	r0, [r4, #32]
 8006106:	d1ce      	bne.n	80060a6 <__gnu_unwind_pr_common+0x272>
 8006108:	4623      	mov	r3, r4
 800610a:	9a06      	ldr	r2, [sp, #24]
 800610c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8006110:	6263      	str	r3, [r4, #36]	; 0x24
 8006112:	e7ca      	b.n	80060aa <__gnu_unwind_pr_common+0x276>
 8006114:	0800bdc1 	.word	0x0800bdc1

08006118 <__aeabi_unwind_cpp_pr0>:
 8006118:	2300      	movs	r3, #0
 800611a:	f7ff be8b 	b.w	8005e34 <__gnu_unwind_pr_common>
 800611e:	bf00      	nop

08006120 <__aeabi_unwind_cpp_pr1>:
 8006120:	2301      	movs	r3, #1
 8006122:	f7ff be87 	b.w	8005e34 <__gnu_unwind_pr_common>
 8006126:	bf00      	nop

08006128 <__aeabi_unwind_cpp_pr2>:
 8006128:	2302      	movs	r3, #2
 800612a:	f7ff be83 	b.w	8005e34 <__gnu_unwind_pr_common>
 800612e:	bf00      	nop

08006130 <_Unwind_VRS_Pop>:
 8006130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006134:	4604      	mov	r4, r0
 8006136:	b0c4      	sub	sp, #272	; 0x110
 8006138:	2904      	cmp	r1, #4
 800613a:	d80b      	bhi.n	8006154 <_Unwind_VRS_Pop+0x24>
 800613c:	e8df f001 	tbb	[pc, r1]
 8006140:	300a0359 	.word	0x300a0359
 8006144:	0e          	.byte	0x0e
 8006145:	00          	.byte	0x00
 8006146:	2b01      	cmp	r3, #1
 8006148:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800614c:	b296      	uxth	r6, r2
 800614e:	d066      	beq.n	800621e <_Unwind_VRS_Pop+0xee>
 8006150:	2b05      	cmp	r3, #5
 8006152:	d06b      	beq.n	800622c <_Unwind_VRS_Pop+0xfc>
 8006154:	2002      	movs	r0, #2
 8006156:	b044      	add	sp, #272	; 0x110
 8006158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f9      	bne.n	8006154 <_Unwind_VRS_Pop+0x24>
 8006160:	2a10      	cmp	r2, #16
 8006162:	d8f7      	bhi.n	8006154 <_Unwind_VRS_Pop+0x24>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	06d9      	lsls	r1, r3, #27
 8006168:	f100 80d3 	bmi.w	8006312 <_Unwind_VRS_Pop+0x1e2>
 800616c:	ae22      	add	r6, sp, #136	; 0x88
 800616e:	4630      	mov	r0, r6
 8006170:	9201      	str	r2, [sp, #4]
 8006172:	f000 f975 	bl	8006460 <__gnu_Unwind_Save_WMMXC>
 8006176:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006178:	9a01      	ldr	r2, [sp, #4]
 800617a:	2300      	movs	r3, #0
 800617c:	2001      	movs	r0, #1
 800617e:	fa00 f103 	lsl.w	r1, r0, r3
 8006182:	4211      	tst	r1, r2
 8006184:	d003      	beq.n	800618e <_Unwind_VRS_Pop+0x5e>
 8006186:	6829      	ldr	r1, [r5, #0]
 8006188:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800618c:	3504      	adds	r5, #4
 800618e:	3301      	adds	r3, #1
 8006190:	2b04      	cmp	r3, #4
 8006192:	d1f4      	bne.n	800617e <_Unwind_VRS_Pop+0x4e>
 8006194:	4630      	mov	r0, r6
 8006196:	63a5      	str	r5, [r4, #56]	; 0x38
 8006198:	f000 f958 	bl	800644c <__gnu_Unwind_Restore_WMMXC>
 800619c:	2000      	movs	r0, #0
 800619e:	e7da      	b.n	8006156 <_Unwind_VRS_Pop+0x26>
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d1d7      	bne.n	8006154 <_Unwind_VRS_Pop+0x24>
 80061a4:	0c15      	lsrs	r5, r2, #16
 80061a6:	b297      	uxth	r7, r2
 80061a8:	197b      	adds	r3, r7, r5
 80061aa:	2b10      	cmp	r3, #16
 80061ac:	d8d2      	bhi.n	8006154 <_Unwind_VRS_Pop+0x24>
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	071e      	lsls	r6, r3, #28
 80061b2:	f100 80bf 	bmi.w	8006334 <_Unwind_VRS_Pop+0x204>
 80061b6:	ae22      	add	r6, sp, #136	; 0x88
 80061b8:	4630      	mov	r0, r6
 80061ba:	f000 f925 	bl	8006408 <__gnu_Unwind_Save_WMMXD>
 80061be:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 80061c2:	007f      	lsls	r7, r7, #1
 80061c4:	eb06 00c5 	add.w	r0, r6, r5, lsl #3
 80061c8:	1e7b      	subs	r3, r7, #1
 80061ca:	4672      	mov	r2, lr
 80061cc:	b15f      	cbz	r7, 80061e6 <_Unwind_VRS_Pop+0xb6>
 80061ce:	ebce 0000 	rsb	r0, lr, r0
 80061d2:	f1ae 0204 	sub.w	r2, lr, #4
 80061d6:	3b01      	subs	r3, #1
 80061d8:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80061dc:	5081      	str	r1, [r0, r2]
 80061de:	1c5d      	adds	r5, r3, #1
 80061e0:	d1f9      	bne.n	80061d6 <_Unwind_VRS_Pop+0xa6>
 80061e2:	eb0e 0287 	add.w	r2, lr, r7, lsl #2
 80061e6:	4630      	mov	r0, r6
 80061e8:	63a2      	str	r2, [r4, #56]	; 0x38
 80061ea:	f000 f8eb 	bl	80063c4 <__gnu_Unwind_Restore_WMMXD>
 80061ee:	2000      	movs	r0, #0
 80061f0:	e7b1      	b.n	8006156 <_Unwind_VRS_Pop+0x26>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1ae      	bne.n	8006154 <_Unwind_VRS_Pop+0x24>
 80061f6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80061f8:	b296      	uxth	r6, r2
 80061fa:	2001      	movs	r0, #1
 80061fc:	fa00 f103 	lsl.w	r1, r0, r3
 8006200:	4231      	tst	r1, r6
 8006202:	d004      	beq.n	800620e <_Unwind_VRS_Pop+0xde>
 8006204:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8006208:	6829      	ldr	r1, [r5, #0]
 800620a:	6079      	str	r1, [r7, #4]
 800620c:	3504      	adds	r5, #4
 800620e:	3301      	adds	r3, #1
 8006210:	2b10      	cmp	r3, #16
 8006212:	d1f3      	bne.n	80061fc <_Unwind_VRS_Pop+0xcc>
 8006214:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8006218:	d175      	bne.n	8006306 <_Unwind_VRS_Pop+0x1d6>
 800621a:	63a5      	str	r5, [r4, #56]	; 0x38
 800621c:	e79b      	b.n	8006156 <_Unwind_VRS_Pop+0x26>
 800621e:	1972      	adds	r2, r6, r5
 8006220:	2a10      	cmp	r2, #16
 8006222:	d897      	bhi.n	8006154 <_Unwind_VRS_Pop+0x24>
 8006224:	2d0f      	cmp	r5, #15
 8006226:	d895      	bhi.n	8006154 <_Unwind_VRS_Pop+0x24>
 8006228:	2700      	movs	r7, #0
 800622a:	e008      	b.n	800623e <_Unwind_VRS_Pop+0x10e>
 800622c:	1977      	adds	r7, r6, r5
 800622e:	2f20      	cmp	r7, #32
 8006230:	d890      	bhi.n	8006154 <_Unwind_VRS_Pop+0x24>
 8006232:	2d0f      	cmp	r5, #15
 8006234:	d969      	bls.n	800630a <_Unwind_VRS_Pop+0x1da>
 8006236:	4637      	mov	r7, r6
 8006238:	b346      	cbz	r6, 800628c <_Unwind_VRS_Pop+0x15c>
 800623a:	2d0f      	cmp	r5, #15
 800623c:	d811      	bhi.n	8006262 <_Unwind_VRS_Pop+0x132>
 800623e:	6822      	ldr	r2, [r4, #0]
 8006240:	07d0      	lsls	r0, r2, #31
 8006242:	d50e      	bpl.n	8006262 <_Unwind_VRS_Pop+0x132>
 8006244:	f022 0101 	bic.w	r1, r2, #1
 8006248:	2b05      	cmp	r3, #5
 800624a:	6021      	str	r1, [r4, #0]
 800624c:	4620      	mov	r0, r4
 800624e:	f000 808b 	beq.w	8006368 <_Unwind_VRS_Pop+0x238>
 8006252:	f022 0203 	bic.w	r2, r2, #3
 8006256:	f840 2b48 	str.w	r2, [r0], #72
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	f000 f89e 	bl	800639c <__gnu_Unwind_Save_VFP>
 8006260:	9b01      	ldr	r3, [sp, #4]
 8006262:	b117      	cbz	r7, 800626a <_Unwind_VRS_Pop+0x13a>
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	0751      	lsls	r1, r2, #29
 8006268:	d46c      	bmi.n	8006344 <_Unwind_VRS_Pop+0x214>
 800626a:	2b01      	cmp	r3, #1
 800626c:	d074      	beq.n	8006358 <_Unwind_VRS_Pop+0x228>
 800626e:	2d0f      	cmp	r5, #15
 8006270:	d804      	bhi.n	800627c <_Unwind_VRS_Pop+0x14c>
 8006272:	a822      	add	r0, sp, #136	; 0x88
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	f000 f899 	bl	80063ac <__gnu_Unwind_Save_VFP_D>
 800627a:	9b01      	ldr	r3, [sp, #4]
 800627c:	b137      	cbz	r7, 800628c <_Unwind_VRS_Pop+0x15c>
 800627e:	a802      	add	r0, sp, #8
 8006280:	9301      	str	r3, [sp, #4]
 8006282:	f000 f89b 	bl	80063bc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8006286:	9b01      	ldr	r3, [sp, #4]
 8006288:	f1c5 0610 	rsb	r6, r5, #16
 800628c:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 8006290:	2e00      	cmp	r6, #0
 8006292:	46c4      	mov	ip, r8
 8006294:	dd12      	ble.n	80062bc <_Unwind_VRS_Pop+0x18c>
 8006296:	aa22      	add	r2, sp, #136	; 0x88
 8006298:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 800629c:	eb02 06c5 	add.w	r6, r2, r5, lsl #3
 80062a0:	ebc8 0606 	rsb	r6, r8, r6
 80062a4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80062a8:	f1a8 0204 	sub.w	r2, r8, #4
 80062ac:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80062b0:	50b0      	str	r0, [r6, r2]
 80062b2:	3901      	subs	r1, #1
 80062b4:	1c48      	adds	r0, r1, #1
 80062b6:	d1f9      	bne.n	80062ac <_Unwind_VRS_Pop+0x17c>
 80062b8:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
 80062bc:	b1b7      	cbz	r7, 80062ec <_Unwind_VRS_Pop+0x1bc>
 80062be:	aa44      	add	r2, sp, #272	; 0x110
 80062c0:	2d10      	cmp	r5, #16
 80062c2:	bf2c      	ite	cs
 80062c4:	4628      	movcs	r0, r5
 80062c6:	2010      	movcc	r0, #16
 80062c8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80062cc:	ea4f 0847 	mov.w	r8, r7, lsl #1
 80062d0:	f5a0 70c4 	sub.w	r0, r0, #392	; 0x188
 80062d4:	f108 32ff 	add.w	r2, r8, #4294967295
 80062d8:	4661      	mov	r1, ip
 80062da:	f851 6b04 	ldr.w	r6, [r1], #4
 80062de:	f840 6b04 	str.w	r6, [r0], #4
 80062e2:	3a01      	subs	r2, #1
 80062e4:	1c56      	adds	r6, r2, #1
 80062e6:	d1f8      	bne.n	80062da <_Unwind_VRS_Pop+0x1aa>
 80062e8:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d01a      	beq.n	8006326 <_Unwind_VRS_Pop+0x1f6>
 80062f0:	2d0f      	cmp	r5, #15
 80062f2:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
 80062f6:	d802      	bhi.n	80062fe <_Unwind_VRS_Pop+0x1ce>
 80062f8:	a822      	add	r0, sp, #136	; 0x88
 80062fa:	f000 f853 	bl	80063a4 <__gnu_Unwind_Restore_VFP_D>
 80062fe:	b117      	cbz	r7, 8006306 <_Unwind_VRS_Pop+0x1d6>
 8006300:	a802      	add	r0, sp, #8
 8006302:	f000 f857 	bl	80063b4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8006306:	2000      	movs	r0, #0
 8006308:	e725      	b.n	8006156 <_Unwind_VRS_Pop+0x26>
 800630a:	2f10      	cmp	r7, #16
 800630c:	d98c      	bls.n	8006228 <_Unwind_VRS_Pop+0xf8>
 800630e:	3f10      	subs	r7, #16
 8006310:	e793      	b.n	800623a <_Unwind_VRS_Pop+0x10a>
 8006312:	f023 0310 	bic.w	r3, r3, #16
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800631c:	9201      	str	r2, [sp, #4]
 800631e:	f000 f89f 	bl	8006460 <__gnu_Unwind_Save_WMMXC>
 8006322:	9a01      	ldr	r2, [sp, #4]
 8006324:	e722      	b.n	800616c <_Unwind_VRS_Pop+0x3c>
 8006326:	f10c 0304 	add.w	r3, ip, #4
 800632a:	63a3      	str	r3, [r4, #56]	; 0x38
 800632c:	a822      	add	r0, sp, #136	; 0x88
 800632e:	f000 f831 	bl	8006394 <__gnu_Unwind_Restore_VFP>
 8006332:	e7e8      	b.n	8006306 <_Unwind_VRS_Pop+0x1d6>
 8006334:	f023 0308 	bic.w	r3, r3, #8
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800633e:	f000 f863 	bl	8006408 <__gnu_Unwind_Save_WMMXD>
 8006342:	e738      	b.n	80061b6 <_Unwind_VRS_Pop+0x86>
 8006344:	4620      	mov	r0, r4
 8006346:	f022 0204 	bic.w	r2, r2, #4
 800634a:	f840 2bd0 	str.w	r2, [r0], #208
 800634e:	9301      	str	r3, [sp, #4]
 8006350:	f000 f834 	bl	80063bc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8006354:	9b01      	ldr	r3, [sp, #4]
 8006356:	e788      	b.n	800626a <_Unwind_VRS_Pop+0x13a>
 8006358:	a822      	add	r0, sp, #136	; 0x88
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	f000 f81e 	bl	800639c <__gnu_Unwind_Save_VFP>
 8006360:	9b01      	ldr	r3, [sp, #4]
 8006362:	2f00      	cmp	r7, #0
 8006364:	d190      	bne.n	8006288 <_Unwind_VRS_Pop+0x158>
 8006366:	e791      	b.n	800628c <_Unwind_VRS_Pop+0x15c>
 8006368:	f041 0102 	orr.w	r1, r1, #2
 800636c:	f840 1b48 	str.w	r1, [r0], #72
 8006370:	9301      	str	r3, [sp, #4]
 8006372:	f000 f81b 	bl	80063ac <__gnu_Unwind_Save_VFP_D>
 8006376:	9b01      	ldr	r3, [sp, #4]
 8006378:	e773      	b.n	8006262 <_Unwind_VRS_Pop+0x132>
 800637a:	bf00      	nop

0800637c <__restore_core_regs>:
 800637c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8006380:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8006384:	469c      	mov	ip, r3
 8006386:	46a6      	mov	lr, r4
 8006388:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800638c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8006390:	46e5      	mov	sp, ip
 8006392:	bd00      	pop	{pc}

08006394 <__gnu_Unwind_Restore_VFP>:
 8006394:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop

0800639c <__gnu_Unwind_Save_VFP>:
 800639c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop

080063a4 <__gnu_Unwind_Restore_VFP_D>:
 80063a4:	ec90 0b20 	vldmia	r0, {d0-d15}
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop

080063ac <__gnu_Unwind_Save_VFP_D>:
 80063ac:	ec80 0b20 	vstmia	r0, {d0-d15}
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop

080063b4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80063b4:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop

080063bc <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80063bc:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop

080063c4 <__gnu_Unwind_Restore_WMMXD>:
 80063c4:	ecf0 0102 	ldfe	f0, [r0], #8
 80063c8:	ecf0 1102 	ldfe	f1, [r0], #8
 80063cc:	ecf0 2102 	ldfe	f2, [r0], #8
 80063d0:	ecf0 3102 	ldfe	f3, [r0], #8
 80063d4:	ecf0 4102 	ldfe	f4, [r0], #8
 80063d8:	ecf0 5102 	ldfe	f5, [r0], #8
 80063dc:	ecf0 6102 	ldfe	f6, [r0], #8
 80063e0:	ecf0 7102 	ldfe	f7, [r0], #8
 80063e4:	ecf0 8102 	ldfp	f0, [r0], #8
 80063e8:	ecf0 9102 	ldfp	f1, [r0], #8
 80063ec:	ecf0 a102 	ldfp	f2, [r0], #8
 80063f0:	ecf0 b102 	ldfp	f3, [r0], #8
 80063f4:	ecf0 c102 	ldfp	f4, [r0], #8
 80063f8:	ecf0 d102 	ldfp	f5, [r0], #8
 80063fc:	ecf0 e102 	ldfp	f6, [r0], #8
 8006400:	ecf0 f102 	ldfp	f7, [r0], #8
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop

08006408 <__gnu_Unwind_Save_WMMXD>:
 8006408:	ece0 0102 	stfe	f0, [r0], #8
 800640c:	ece0 1102 	stfe	f1, [r0], #8
 8006410:	ece0 2102 	stfe	f2, [r0], #8
 8006414:	ece0 3102 	stfe	f3, [r0], #8
 8006418:	ece0 4102 	stfe	f4, [r0], #8
 800641c:	ece0 5102 	stfe	f5, [r0], #8
 8006420:	ece0 6102 	stfe	f6, [r0], #8
 8006424:	ece0 7102 	stfe	f7, [r0], #8
 8006428:	ece0 8102 	stfp	f0, [r0], #8
 800642c:	ece0 9102 	stfp	f1, [r0], #8
 8006430:	ece0 a102 	stfp	f2, [r0], #8
 8006434:	ece0 b102 	stfp	f3, [r0], #8
 8006438:	ece0 c102 	stfp	f4, [r0], #8
 800643c:	ece0 d102 	stfp	f5, [r0], #8
 8006440:	ece0 e102 	stfp	f6, [r0], #8
 8006444:	ece0 f102 	stfp	f7, [r0], #8
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop

0800644c <__gnu_Unwind_Restore_WMMXC>:
 800644c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8006450:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8006454:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8006458:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop

08006460 <__gnu_Unwind_Save_WMMXC>:
 8006460:	fca0 8101 	stc2	1, cr8, [r0], #4
 8006464:	fca0 9101 	stc2	1, cr9, [r0], #4
 8006468:	fca0 a101 	stc2	1, cr10, [r0], #4
 800646c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop

08006474 <_Unwind_RaiseException>:
 8006474:	46ec      	mov	ip, sp
 8006476:	b500      	push	{lr}
 8006478:	e92d 5000 	stmdb	sp!, {ip, lr}
 800647c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006480:	f04f 0300 	mov.w	r3, #0
 8006484:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006488:	a901      	add	r1, sp, #4
 800648a:	f7ff fbdd 	bl	8005c48 <__gnu_Unwind_RaiseException>
 800648e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8006492:	b012      	add	sp, #72	; 0x48
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop

08006498 <_Unwind_Resume>:
 8006498:	46ec      	mov	ip, sp
 800649a:	b500      	push	{lr}
 800649c:	e92d 5000 	stmdb	sp!, {ip, lr}
 80064a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80064a4:	f04f 0300 	mov.w	r3, #0
 80064a8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80064ac:	a901      	add	r1, sp, #4
 80064ae:	f7ff fc05 	bl	8005cbc <__gnu_Unwind_Resume>
 80064b2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80064b6:	b012      	add	sp, #72	; 0x48
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop

080064bc <_Unwind_Resume_or_Rethrow>:
 80064bc:	46ec      	mov	ip, sp
 80064be:	b500      	push	{lr}
 80064c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80064c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80064d0:	a901      	add	r1, sp, #4
 80064d2:	f7ff fc15 	bl	8005d00 <__gnu_Unwind_Resume_or_Rethrow>
 80064d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80064da:	b012      	add	sp, #72	; 0x48
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop

080064e0 <_Unwind_ForcedUnwind>:
 80064e0:	46ec      	mov	ip, sp
 80064e2:	b500      	push	{lr}
 80064e4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80064e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80064f4:	ab01      	add	r3, sp, #4
 80064f6:	f7ff fbd7 	bl	8005ca8 <__gnu_Unwind_ForcedUnwind>
 80064fa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80064fe:	b012      	add	sp, #72	; 0x48
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop

08006504 <_Unwind_Backtrace>:
 8006504:	46ec      	mov	ip, sp
 8006506:	b500      	push	{lr}
 8006508:	e92d 5000 	stmdb	sp!, {ip, lr}
 800650c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006518:	aa01      	add	r2, sp, #4
 800651a:	f7ff fc53 	bl	8005dc4 <__gnu_Unwind_Backtrace>
 800651e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8006522:	b012      	add	sp, #72	; 0x48
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop

08006528 <next_unwind_byte>:
 8006528:	7a03      	ldrb	r3, [r0, #8]
 800652a:	b91b      	cbnz	r3, 8006534 <next_unwind_byte+0xc>
 800652c:	7a43      	ldrb	r3, [r0, #9]
 800652e:	b943      	cbnz	r3, 8006542 <next_unwind_byte+0x1a>
 8006530:	20b0      	movs	r0, #176	; 0xb0
 8006532:	4770      	bx	lr
 8006534:	6802      	ldr	r2, [r0, #0]
 8006536:	3b01      	subs	r3, #1
 8006538:	7203      	strb	r3, [r0, #8]
 800653a:	0213      	lsls	r3, r2, #8
 800653c:	6003      	str	r3, [r0, #0]
 800653e:	0e10      	lsrs	r0, r2, #24
 8006540:	4770      	bx	lr
 8006542:	6842      	ldr	r2, [r0, #4]
 8006544:	3b01      	subs	r3, #1
 8006546:	7243      	strb	r3, [r0, #9]
 8006548:	1d11      	adds	r1, r2, #4
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	6041      	str	r1, [r0, #4]
 800654e:	2303      	movs	r3, #3
 8006550:	7203      	strb	r3, [r0, #8]
 8006552:	0213      	lsls	r3, r2, #8
 8006554:	6003      	str	r3, [r0, #0]
 8006556:	0e10      	lsrs	r0, r2, #24
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop

0800655c <_Unwind_GetGR.constprop.0>:
 800655c:	b500      	push	{lr}
 800655e:	b085      	sub	sp, #20
 8006560:	ab03      	add	r3, sp, #12
 8006562:	2100      	movs	r1, #0
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	220c      	movs	r2, #12
 8006568:	460b      	mov	r3, r1
 800656a:	f7ff fbdb 	bl	8005d24 <_Unwind_VRS_Get>
 800656e:	9803      	ldr	r0, [sp, #12]
 8006570:	b005      	add	sp, #20
 8006572:	f85d fb04 	ldr.w	pc, [sp], #4
 8006576:	bf00      	nop

08006578 <unwind_UCB_from_context>:
 8006578:	f7ff bff0 	b.w	800655c <_Unwind_GetGR.constprop.0>

0800657c <__gnu_unwind_execute>:
 800657c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006580:	4606      	mov	r6, r0
 8006582:	b085      	sub	sp, #20
 8006584:	460d      	mov	r5, r1
 8006586:	f04f 0800 	mov.w	r8, #0
 800658a:	4628      	mov	r0, r5
 800658c:	f7ff ffcc 	bl	8006528 <next_unwind_byte>
 8006590:	28b0      	cmp	r0, #176	; 0xb0
 8006592:	4604      	mov	r4, r0
 8006594:	f000 80ac 	beq.w	80066f0 <__gnu_unwind_execute+0x174>
 8006598:	f020 027f 	bic.w	r2, r0, #127	; 0x7f
 800659c:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
 80065a0:	d020      	beq.n	80065e4 <__gnu_unwind_execute+0x68>
 80065a2:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80065a6:	2a80      	cmp	r2, #128	; 0x80
 80065a8:	d073      	beq.n	8006692 <__gnu_unwind_execute+0x116>
 80065aa:	2a90      	cmp	r2, #144	; 0x90
 80065ac:	d036      	beq.n	800661c <__gnu_unwind_execute+0xa0>
 80065ae:	2aa0      	cmp	r2, #160	; 0xa0
 80065b0:	d042      	beq.n	8006638 <__gnu_unwind_execute+0xbc>
 80065b2:	2ab0      	cmp	r2, #176	; 0xb0
 80065b4:	d056      	beq.n	8006664 <__gnu_unwind_execute+0xe8>
 80065b6:	2ac0      	cmp	r2, #192	; 0xc0
 80065b8:	f000 8082 	beq.w	80066c0 <__gnu_unwind_execute+0x144>
 80065bc:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80065c0:	2bd0      	cmp	r3, #208	; 0xd0
 80065c2:	d10b      	bne.n	80065dc <__gnu_unwind_execute+0x60>
 80065c4:	f000 0407 	and.w	r4, r0, #7
 80065c8:	1c62      	adds	r2, r4, #1
 80065ca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80065ce:	4630      	mov	r0, r6
 80065d0:	2101      	movs	r1, #1
 80065d2:	2305      	movs	r3, #5
 80065d4:	f7ff fdac 	bl	8006130 <_Unwind_VRS_Pop>
 80065d8:	2800      	cmp	r0, #0
 80065da:	d0d6      	beq.n	800658a <__gnu_unwind_execute+0xe>
 80065dc:	2009      	movs	r0, #9
 80065de:	b005      	add	sp, #20
 80065e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065e4:	af03      	add	r7, sp, #12
 80065e6:	ea4f 0980 	mov.w	r9, r0, lsl #2
 80065ea:	460b      	mov	r3, r1
 80065ec:	9700      	str	r7, [sp, #0]
 80065ee:	4630      	mov	r0, r6
 80065f0:	220d      	movs	r2, #13
 80065f2:	f7ff fb97 	bl	8005d24 <_Unwind_VRS_Get>
 80065f6:	fa5f f989 	uxtb.w	r9, r9
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	f109 0904 	add.w	r9, r9, #4
 8006600:	0660      	lsls	r0, r4, #25
 8006602:	bf4c      	ite	mi
 8006604:	ebc9 0303 	rsbmi	r3, r9, r3
 8006608:	444b      	addpl	r3, r9
 800660a:	9303      	str	r3, [sp, #12]
 800660c:	2100      	movs	r1, #0
 800660e:	9700      	str	r7, [sp, #0]
 8006610:	460b      	mov	r3, r1
 8006612:	4630      	mov	r0, r6
 8006614:	220d      	movs	r2, #13
 8006616:	f7ff fbad 	bl	8005d74 <_Unwind_VRS_Set>
 800661a:	e7b6      	b.n	800658a <__gnu_unwind_execute+0xe>
 800661c:	f000 030d 	and.w	r3, r0, #13
 8006620:	2b0d      	cmp	r3, #13
 8006622:	d0db      	beq.n	80065dc <__gnu_unwind_execute+0x60>
 8006624:	af03      	add	r7, sp, #12
 8006626:	2100      	movs	r1, #0
 8006628:	f000 020f 	and.w	r2, r0, #15
 800662c:	9700      	str	r7, [sp, #0]
 800662e:	460b      	mov	r3, r1
 8006630:	4630      	mov	r0, r6
 8006632:	f7ff fb77 	bl	8005d24 <_Unwind_VRS_Get>
 8006636:	e7e9      	b.n	800660c <__gnu_unwind_execute+0x90>
 8006638:	43c2      	mvns	r2, r0
 800663a:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 800663e:	f002 0207 	and.w	r2, r2, #7
 8006642:	fa43 f202 	asr.w	r2, r3, r2
 8006646:	0701      	lsls	r1, r0, #28
 8006648:	ea02 0203 	and.w	r2, r2, r3
 800664c:	f04f 0100 	mov.w	r1, #0
 8006650:	bf48      	it	mi
 8006652:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8006656:	460b      	mov	r3, r1
 8006658:	4630      	mov	r0, r6
 800665a:	f7ff fd69 	bl	8006130 <_Unwind_VRS_Pop>
 800665e:	2800      	cmp	r0, #0
 8006660:	d1bc      	bne.n	80065dc <__gnu_unwind_execute+0x60>
 8006662:	e792      	b.n	800658a <__gnu_unwind_execute+0xe>
 8006664:	28b1      	cmp	r0, #177	; 0xb1
 8006666:	d048      	beq.n	80066fa <__gnu_unwind_execute+0x17e>
 8006668:	28b2      	cmp	r0, #178	; 0xb2
 800666a:	d051      	beq.n	8006710 <__gnu_unwind_execute+0x194>
 800666c:	28b3      	cmp	r0, #179	; 0xb3
 800666e:	d07c      	beq.n	800676a <__gnu_unwind_execute+0x1ee>
 8006670:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8006674:	2bb4      	cmp	r3, #180	; 0xb4
 8006676:	d0b1      	beq.n	80065dc <__gnu_unwind_execute+0x60>
 8006678:	f000 0207 	and.w	r2, r0, #7
 800667c:	3201      	adds	r2, #1
 800667e:	2101      	movs	r1, #1
 8006680:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006684:	460b      	mov	r3, r1
 8006686:	4630      	mov	r0, r6
 8006688:	f7ff fd52 	bl	8006130 <_Unwind_VRS_Pop>
 800668c:	2800      	cmp	r0, #0
 800668e:	d1a5      	bne.n	80065dc <__gnu_unwind_execute+0x60>
 8006690:	e77b      	b.n	800658a <__gnu_unwind_execute+0xe>
 8006692:	4628      	mov	r0, r5
 8006694:	f7ff ff48 	bl	8006528 <next_unwind_byte>
 8006698:	0224      	lsls	r4, r4, #8
 800669a:	4320      	orrs	r0, r4
 800669c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80066a0:	d09c      	beq.n	80065dc <__gnu_unwind_execute+0x60>
 80066a2:	0104      	lsls	r4, r0, #4
 80066a4:	2100      	movs	r1, #0
 80066a6:	b2a2      	uxth	r2, r4
 80066a8:	460b      	mov	r3, r1
 80066aa:	4630      	mov	r0, r6
 80066ac:	f7ff fd40 	bl	8006130 <_Unwind_VRS_Pop>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d193      	bne.n	80065dc <__gnu_unwind_execute+0x60>
 80066b4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80066b8:	bf18      	it	ne
 80066ba:	f04f 0801 	movne.w	r8, #1
 80066be:	e764      	b.n	800658a <__gnu_unwind_execute+0xe>
 80066c0:	28c6      	cmp	r0, #198	; 0xc6
 80066c2:	d05e      	beq.n	8006782 <__gnu_unwind_execute+0x206>
 80066c4:	28c7      	cmp	r0, #199	; 0xc7
 80066c6:	d068      	beq.n	800679a <__gnu_unwind_execute+0x21e>
 80066c8:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80066cc:	2bc0      	cmp	r3, #192	; 0xc0
 80066ce:	d077      	beq.n	80067c0 <__gnu_unwind_execute+0x244>
 80066d0:	28c8      	cmp	r0, #200	; 0xc8
 80066d2:	f000 808d 	beq.w	80067f0 <__gnu_unwind_execute+0x274>
 80066d6:	28c9      	cmp	r0, #201	; 0xc9
 80066d8:	d180      	bne.n	80065dc <__gnu_unwind_execute+0x60>
 80066da:	4628      	mov	r0, r5
 80066dc:	f7ff ff24 	bl	8006528 <next_unwind_byte>
 80066e0:	f000 030f 	and.w	r3, r0, #15
 80066e4:	3301      	adds	r3, #1
 80066e6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80066ea:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80066ee:	e76e      	b.n	80065ce <__gnu_unwind_execute+0x52>
 80066f0:	f1b8 0f00 	cmp.w	r8, #0
 80066f4:	d06b      	beq.n	80067ce <__gnu_unwind_execute+0x252>
 80066f6:	2000      	movs	r0, #0
 80066f8:	e771      	b.n	80065de <__gnu_unwind_execute+0x62>
 80066fa:	4628      	mov	r0, r5
 80066fc:	f7ff ff14 	bl	8006528 <next_unwind_byte>
 8006700:	4602      	mov	r2, r0
 8006702:	2800      	cmp	r0, #0
 8006704:	f43f af6a 	beq.w	80065dc <__gnu_unwind_execute+0x60>
 8006708:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
 800670c:	d0ba      	beq.n	8006684 <__gnu_unwind_execute+0x108>
 800670e:	e765      	b.n	80065dc <__gnu_unwind_execute+0x60>
 8006710:	2100      	movs	r1, #0
 8006712:	af03      	add	r7, sp, #12
 8006714:	220d      	movs	r2, #13
 8006716:	460b      	mov	r3, r1
 8006718:	9700      	str	r7, [sp, #0]
 800671a:	4630      	mov	r0, r6
 800671c:	f7ff fb02 	bl	8005d24 <_Unwind_VRS_Get>
 8006720:	4628      	mov	r0, r5
 8006722:	f7ff ff01 	bl	8006528 <next_unwind_byte>
 8006726:	0602      	lsls	r2, r0, #24
 8006728:	f04f 0402 	mov.w	r4, #2
 800672c:	d50c      	bpl.n	8006748 <__gnu_unwind_execute+0x1cc>
 800672e:	9b03      	ldr	r3, [sp, #12]
 8006730:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006734:	40a0      	lsls	r0, r4
 8006736:	4403      	add	r3, r0
 8006738:	4628      	mov	r0, r5
 800673a:	9303      	str	r3, [sp, #12]
 800673c:	f7ff fef4 	bl	8006528 <next_unwind_byte>
 8006740:	0603      	lsls	r3, r0, #24
 8006742:	f104 0407 	add.w	r4, r4, #7
 8006746:	d4f2      	bmi.n	800672e <__gnu_unwind_execute+0x1b2>
 8006748:	9b03      	ldr	r3, [sp, #12]
 800674a:	9700      	str	r7, [sp, #0]
 800674c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006750:	fa00 f404 	lsl.w	r4, r0, r4
 8006754:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006758:	2100      	movs	r1, #0
 800675a:	441c      	add	r4, r3
 800675c:	4630      	mov	r0, r6
 800675e:	460b      	mov	r3, r1
 8006760:	220d      	movs	r2, #13
 8006762:	9403      	str	r4, [sp, #12]
 8006764:	f7ff fb06 	bl	8005d74 <_Unwind_VRS_Set>
 8006768:	e70f      	b.n	800658a <__gnu_unwind_execute+0xe>
 800676a:	4628      	mov	r0, r5
 800676c:	f7ff fedc 	bl	8006528 <next_unwind_byte>
 8006770:	f000 030f 	and.w	r3, r0, #15
 8006774:	3301      	adds	r3, #1
 8006776:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800677a:	2101      	movs	r1, #1
 800677c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8006780:	e780      	b.n	8006684 <__gnu_unwind_execute+0x108>
 8006782:	4628      	mov	r0, r5
 8006784:	f7ff fed0 	bl	8006528 <next_unwind_byte>
 8006788:	f000 030f 	and.w	r3, r0, #15
 800678c:	3301      	adds	r3, #1
 800678e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8006792:	2103      	movs	r1, #3
 8006794:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8006798:	e774      	b.n	8006684 <__gnu_unwind_execute+0x108>
 800679a:	4628      	mov	r0, r5
 800679c:	f7ff fec4 	bl	8006528 <next_unwind_byte>
 80067a0:	4602      	mov	r2, r0
 80067a2:	2800      	cmp	r0, #0
 80067a4:	f43f af1a 	beq.w	80065dc <__gnu_unwind_execute+0x60>
 80067a8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80067ac:	f47f af16 	bne.w	80065dc <__gnu_unwind_execute+0x60>
 80067b0:	4630      	mov	r0, r6
 80067b2:	2104      	movs	r1, #4
 80067b4:	f7ff fcbc 	bl	8006130 <_Unwind_VRS_Pop>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	f47f af0f 	bne.w	80065dc <__gnu_unwind_execute+0x60>
 80067be:	e6e4      	b.n	800658a <__gnu_unwind_execute+0xe>
 80067c0:	f000 020f 	and.w	r2, r0, #15
 80067c4:	3201      	adds	r2, #1
 80067c6:	2103      	movs	r1, #3
 80067c8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80067cc:	e75a      	b.n	8006684 <__gnu_unwind_execute+0x108>
 80067ce:	ac03      	add	r4, sp, #12
 80067d0:	4641      	mov	r1, r8
 80067d2:	220e      	movs	r2, #14
 80067d4:	4643      	mov	r3, r8
 80067d6:	9400      	str	r4, [sp, #0]
 80067d8:	4630      	mov	r0, r6
 80067da:	f7ff faa3 	bl	8005d24 <_Unwind_VRS_Get>
 80067de:	9400      	str	r4, [sp, #0]
 80067e0:	4630      	mov	r0, r6
 80067e2:	4641      	mov	r1, r8
 80067e4:	220f      	movs	r2, #15
 80067e6:	4643      	mov	r3, r8
 80067e8:	f7ff fac4 	bl	8005d74 <_Unwind_VRS_Set>
 80067ec:	4640      	mov	r0, r8
 80067ee:	e6f6      	b.n	80065de <__gnu_unwind_execute+0x62>
 80067f0:	4628      	mov	r0, r5
 80067f2:	f7ff fe99 	bl	8006528 <next_unwind_byte>
 80067f6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80067fa:	f000 030f 	and.w	r3, r0, #15
 80067fe:	3210      	adds	r2, #16
 8006800:	3301      	adds	r3, #1
 8006802:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8006806:	e6e2      	b.n	80065ce <__gnu_unwind_execute+0x52>

08006808 <__gnu_unwind_frame>:
 8006808:	b500      	push	{lr}
 800680a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800680c:	b085      	sub	sp, #20
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	2003      	movs	r0, #3
 8006812:	f88d 000c 	strb.w	r0, [sp, #12]
 8006816:	4608      	mov	r0, r1
 8006818:	0211      	lsls	r1, r2, #8
 800681a:	9101      	str	r1, [sp, #4]
 800681c:	79da      	ldrb	r2, [r3, #7]
 800681e:	f88d 200d 	strb.w	r2, [sp, #13]
 8006822:	3308      	adds	r3, #8
 8006824:	a901      	add	r1, sp, #4
 8006826:	9302      	str	r3, [sp, #8]
 8006828:	f7ff fea8 	bl	800657c <__gnu_unwind_execute>
 800682c:	b005      	add	sp, #20
 800682e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006832:	bf00      	nop

08006834 <_Unwind_GetRegionStart>:
 8006834:	b508      	push	{r3, lr}
 8006836:	f7ff fe9f 	bl	8006578 <unwind_UCB_from_context>
 800683a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800683c:	bd08      	pop	{r3, pc}
 800683e:	bf00      	nop

08006840 <_Unwind_GetLanguageSpecificData>:
 8006840:	b508      	push	{r3, lr}
 8006842:	f7ff fe99 	bl	8006578 <unwind_UCB_from_context>
 8006846:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006848:	79da      	ldrb	r2, [r3, #7]
 800684a:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800684e:	3008      	adds	r0, #8
 8006850:	bd08      	pop	{r3, pc}
 8006852:	bf00      	nop

08006854 <_Unwind_GetDataRelBase>:
 8006854:	b508      	push	{r3, lr}
 8006856:	f006 f9a3 	bl	800cba0 <abort>
 800685a:	bf00      	nop

0800685c <_Unwind_GetTextRelBase>:
 800685c:	b508      	push	{r3, lr}
 800685e:	f006 f99f 	bl	800cba0 <abort>
 8006862:	bf00      	nop

08006864 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8006870:	2301      	movs	r3, #1
 8006872:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8006874:	e004      	b.n	8006880 <ts_itoa+0x1c>
		div *= base;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	fb02 f303 	mul.w	r3, r2, r3
 800687e:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	fbb2 f2f3 	udiv	r2, r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	429a      	cmp	r2, r3
 800688c:	d2f3      	bcs.n	8006876 <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 800688e:	e029      	b.n	80068e4 <ts_itoa+0x80>
	{
		int num = d/div;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	fbb2 f3f3 	udiv	r3, r2, r3
 8006898:	613b      	str	r3, [r7, #16]
		d = d%div;
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	fbb3 f1f2 	udiv	r1, r3, r2
 80068a2:	fb02 f201 	mul.w	r2, r2, r1
 80068a6:	1a9b      	subs	r3, r3, r2
 80068a8:	60bb      	str	r3, [r7, #8]
		div /= base;
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80068b2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b09      	cmp	r3, #9
 80068b8:	dd0a      	ble.n	80068d0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	1c59      	adds	r1, r3, #1
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	6011      	str	r1, [r2, #0]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	3237      	adds	r2, #55	; 0x37
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	e009      	b.n	80068e4 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	1c59      	adds	r1, r3, #1
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	6011      	str	r1, [r2, #0]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	3230      	adds	r2, #48	; 0x30
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1d2      	bne.n	8006890 <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 80068ea:	371c      	adds	r7, #28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8006904:	e07f      	b.n	8006a06 <ts_formatstring+0x112>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b25      	cmp	r3, #37	; 0x25
 800690c:	d173      	bne.n	80069f6 <ts_formatstring+0x102>
		{
			switch (*(++fmt))
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	3301      	adds	r3, #1
 8006912:	60bb      	str	r3, [r7, #8]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b64      	cmp	r3, #100	; 0x64
 800691a:	d01e      	beq.n	800695a <ts_formatstring+0x66>
 800691c:	2b64      	cmp	r3, #100	; 0x64
 800691e:	dc06      	bgt.n	800692e <ts_formatstring+0x3a>
 8006920:	2b58      	cmp	r3, #88	; 0x58
 8006922:	d052      	beq.n	80069ca <ts_formatstring+0xd6>
 8006924:	2b63      	cmp	r3, #99	; 0x63
 8006926:	d00e      	beq.n	8006946 <ts_formatstring+0x52>
 8006928:	2b25      	cmp	r3, #37	; 0x25
 800692a:	d05a      	beq.n	80069e2 <ts_formatstring+0xee>
 800692c:	e05f      	b.n	80069ee <ts_formatstring+0xfa>
 800692e:	2b73      	cmp	r3, #115	; 0x73
 8006930:	d02c      	beq.n	800698c <ts_formatstring+0x98>
 8006932:	2b73      	cmp	r3, #115	; 0x73
 8006934:	dc02      	bgt.n	800693c <ts_formatstring+0x48>
 8006936:	2b69      	cmp	r3, #105	; 0x69
 8006938:	d00f      	beq.n	800695a <ts_formatstring+0x66>
 800693a:	e058      	b.n	80069ee <ts_formatstring+0xfa>
 800693c:	2b75      	cmp	r3, #117	; 0x75
 800693e:	d038      	beq.n	80069b2 <ts_formatstring+0xbe>
 8006940:	2b78      	cmp	r3, #120	; 0x78
 8006942:	d042      	beq.n	80069ca <ts_formatstring+0xd6>
 8006944:	e053      	b.n	80069ee <ts_formatstring+0xfa>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	60fa      	str	r2, [r7, #12]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	1d11      	adds	r1, r2, #4
 8006950:	6079      	str	r1, [r7, #4]
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	701a      	strb	r2, [r3, #0]
				break;
 8006958:	e049      	b.n	80069ee <ts_formatstring+0xfa>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	1d1a      	adds	r2, r3, #4
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	2b00      	cmp	r3, #0
 8006968:	da07      	bge.n	800697a <ts_formatstring+0x86>
					{
						val *= -1;
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	425b      	negs	r3, r3
 800696e:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	60fa      	str	r2, [r7, #12]
 8006976:	222d      	movs	r2, #45	; 0x2d
 8006978:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	f107 020c 	add.w	r2, r7, #12
 8006980:	4610      	mov	r0, r2
 8006982:	4619      	mov	r1, r3
 8006984:	220a      	movs	r2, #10
 8006986:	f7ff ff6d 	bl	8006864 <ts_itoa>
				}
				break;
 800698a:	e030      	b.n	80069ee <ts_formatstring+0xfa>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	1d1a      	adds	r2, r3, #4
 8006990:	607a      	str	r2, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8006996:	e007      	b.n	80069a8 <ts_formatstring+0xb4>
					{
						*buf++ = *arg++;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	60fa      	str	r2, [r7, #12]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	1c51      	adds	r1, r2, #1
 80069a2:	61b9      	str	r1, [r7, #24]
 80069a4:	7812      	ldrb	r2, [r2, #0]
 80069a6:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1f3      	bne.n	8006998 <ts_formatstring+0xa4>
					{
						*buf++ = *arg++;
					}
				}
				break;
 80069b0:	e01d      	b.n	80069ee <ts_formatstring+0xfa>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	1d1a      	adds	r2, r3, #4
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f107 020c 	add.w	r2, r7, #12
 80069be:	4610      	mov	r0, r2
 80069c0:	4619      	mov	r1, r3
 80069c2:	220a      	movs	r2, #10
 80069c4:	f7ff ff4e 	bl	8006864 <ts_itoa>
				break;
 80069c8:	e011      	b.n	80069ee <ts_formatstring+0xfa>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	1d1a      	adds	r2, r3, #4
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f107 020c 	add.w	r2, r7, #12
 80069d6:	4610      	mov	r0, r2
 80069d8:	4619      	mov	r1, r3
 80069da:	2210      	movs	r2, #16
 80069dc:	f7ff ff42 	bl	8006864 <ts_itoa>
				break;
 80069e0:	e005      	b.n	80069ee <ts_formatstring+0xfa>
			  case '%':
				  *buf++ = '%';
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	60fa      	str	r2, [r7, #12]
 80069e8:	2225      	movs	r2, #37	; 0x25
 80069ea:	701a      	strb	r2, [r3, #0]
				  break;
 80069ec:	bf00      	nop
			}
			fmt++;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	3301      	adds	r3, #1
 80069f2:	60bb      	str	r3, [r7, #8]
 80069f4:	e007      	b.n	8006a06 <ts_formatstring+0x112>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	60fa      	str	r2, [r7, #12]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	1c51      	adds	r1, r2, #1
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	7812      	ldrb	r2, [r2, #0]
 8006a04:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f47f af7b 	bne.w	8006906 <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	1ad3      	subs	r3, r2, r3
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3720      	adds	r7, #32
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop

08006a28 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8006a28:	b40e      	push	{r1, r2, r3}
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b085      	sub	sp, #20
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8006a32:	f107 0320 	add.w	r3, r7, #32
 8006a36:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	69f9      	ldr	r1, [r7, #28]
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	f7ff ff59 	bl	80068f4 <ts_formatstring>
 8006a42:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8006a44:	68fb      	ldr	r3, [r7, #12]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a50:	b003      	add	sp, #12
 8006a52:	4770      	bx	lr

08006a54 <fputs>:
**  Returns:  If successful, the result is 0; otherwise, the result is EOF.
**
**===========================================================================
*/
int fputs(const char *s, FILE *fp)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
	int length = strlen(s);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f006 fd80 	bl	800d564 <strlen>
 8006a64:	4603      	mov	r3, r0
 8006a66:	613b      	str	r3, [r7, #16]
	int wlen = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]
	int res;

	wlen = _write((fp->_file), (char*)s, length);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	89db      	ldrh	r3, [r3, #14]
 8006a70:	b21b      	sxth	r3, r3
 8006a72:	4618      	mov	r0, r3
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	f006 fda4 	bl	800d5c4 <_write>
 8006a7c:	60f8      	str	r0, [r7, #12]
	wlen += _write((fp->_file), "\n", 1);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	89db      	ldrh	r3, [r3, #14]
 8006a82:	b21b      	sxth	r3, r3
 8006a84:	4618      	mov	r0, r3
 8006a86:	490c      	ldr	r1, [pc, #48]	; (8006ab8 <fputs+0x64>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f006 fd9b 	bl	800d5c4 <_write>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

	if (wlen == (length+1))
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d102      	bne.n	8006aa6 <fputs+0x52>
	{
		res = 0;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	e002      	b.n	8006aac <fputs+0x58>
	}
	else
	{
		res = EOF;
 8006aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aaa:	617b      	str	r3, [r7, #20]
	}

	return res;
 8006aac:	697b      	ldr	r3, [r7, #20]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	0800e048 	.word	0x0800e048

08006abc <fwrite>:
**  Returns:  Number of elements written
**
**===========================================================================
*/
size_t fwrite(const void * buf, size_t size, size_t count, FILE * fp)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
	return (_write((fp->_file), (char*)buf, size * count) / size);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	89db      	ldrh	r3, [r3, #14]
 8006ace:	b21a      	sxth	r2, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	fb01 f303 	mul.w	r3, r1, r3
 8006ad8:	4610      	mov	r0, r2
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	461a      	mov	r2, r3
 8006ade:	f006 fd71 	bl	800d5c4 <_write>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006af8:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <SystemInit+0x5c>)
 8006afa:	4a15      	ldr	r2, [pc, #84]	; (8006b50 <SystemInit+0x5c>)
 8006afc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006b00:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006b08:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <SystemInit+0x60>)
 8006b0a:	4a12      	ldr	r2, [pc, #72]	; (8006b54 <SystemInit+0x60>)
 8006b0c:	6812      	ldr	r2, [r2, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006b14:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <SystemInit+0x60>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006b1a:	4a0e      	ldr	r2, [pc, #56]	; (8006b54 <SystemInit+0x60>)
 8006b1c:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <SystemInit+0x60>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <SystemInit+0x60>)
 8006b2c:	4a0a      	ldr	r2, [pc, #40]	; (8006b58 <SystemInit+0x64>)
 8006b2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006b30:	4b08      	ldr	r3, [pc, #32]	; (8006b54 <SystemInit+0x60>)
 8006b32:	4a08      	ldr	r2, [pc, #32]	; (8006b54 <SystemInit+0x60>)
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b3a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006b3c:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <SystemInit+0x60>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8006b42:	f000 f80b 	bl	8006b5c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006b46:	4b02      	ldr	r3, [pc, #8]	; (8006b50 <SystemInit+0x5c>)
 8006b48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b4c:	609a      	str	r2, [r3, #8]
#endif
}
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	e000ed00 	.word	0xe000ed00
 8006b54:	40023800 	.word	0x40023800
 8006b58:	24003010 	.word	0x24003010

08006b5c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	607b      	str	r3, [r7, #4]
 8006b66:	2300      	movs	r3, #0
 8006b68:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8006b6a:	4b35      	ldr	r3, [pc, #212]	; (8006c40 <SetSysClock+0xe4>)
 8006b6c:	4a34      	ldr	r2, [pc, #208]	; (8006c40 <SetSysClock+0xe4>)
 8006b6e:	6812      	ldr	r2, [r2, #0]
 8006b70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b74:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8006b76:	4b32      	ldr	r3, [pc, #200]	; (8006c40 <SetSysClock+0xe4>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3301      	adds	r3, #1
 8006b84:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d103      	bne.n	8006b94 <SetSysClock+0x38>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006b92:	d1f0      	bne.n	8006b76 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8006b94:	4b2a      	ldr	r3, [pc, #168]	; (8006c40 <SetSysClock+0xe4>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	603b      	str	r3, [r7, #0]
 8006ba4:	e001      	b.n	8006baa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d142      	bne.n	8006c36 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8006bb0:	4b23      	ldr	r3, [pc, #140]	; (8006c40 <SetSysClock+0xe4>)
 8006bb2:	4a23      	ldr	r2, [pc, #140]	; (8006c40 <SetSysClock+0xe4>)
 8006bb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006bb6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8006bbc:	4b21      	ldr	r3, [pc, #132]	; (8006c44 <SetSysClock+0xe8>)
 8006bbe:	4a21      	ldr	r2, [pc, #132]	; (8006c44 <SetSysClock+0xe8>)
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006bc6:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8006bc8:	4b1d      	ldr	r3, [pc, #116]	; (8006c40 <SetSysClock+0xe4>)
 8006bca:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <SetSysClock+0xe4>)
 8006bcc:	6892      	ldr	r2, [r2, #8]
 8006bce:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8006bd0:	4b1b      	ldr	r3, [pc, #108]	; (8006c40 <SetSysClock+0xe4>)
 8006bd2:	4a1b      	ldr	r2, [pc, #108]	; (8006c40 <SetSysClock+0xe4>)
 8006bd4:	6892      	ldr	r2, [r2, #8]
 8006bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bda:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8006bdc:	4b18      	ldr	r3, [pc, #96]	; (8006c40 <SetSysClock+0xe4>)
 8006bde:	4a18      	ldr	r2, [pc, #96]	; (8006c40 <SetSysClock+0xe4>)
 8006be0:	6892      	ldr	r2, [r2, #8]
 8006be2:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8006be6:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8006be8:	4b15      	ldr	r3, [pc, #84]	; (8006c40 <SetSysClock+0xe4>)
 8006bea:	4a17      	ldr	r2, [pc, #92]	; (8006c48 <SetSysClock+0xec>)
 8006bec:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8006bee:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <SetSysClock+0xe4>)
 8006bf0:	4a13      	ldr	r2, [pc, #76]	; (8006c40 <SetSysClock+0xe4>)
 8006bf2:	6812      	ldr	r2, [r2, #0]
 8006bf4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006bf8:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8006bfa:	bf00      	nop
 8006bfc:	4b10      	ldr	r3, [pc, #64]	; (8006c40 <SetSysClock+0xe4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0f9      	beq.n	8006bfc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8006c08:	4b10      	ldr	r3, [pc, #64]	; (8006c4c <SetSysClock+0xf0>)
 8006c0a:	f240 6205 	movw	r2, #1541	; 0x605
 8006c0e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8006c10:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <SetSysClock+0xe4>)
 8006c12:	4a0b      	ldr	r2, [pc, #44]	; (8006c40 <SetSysClock+0xe4>)
 8006c14:	6892      	ldr	r2, [r2, #8]
 8006c16:	f022 0203 	bic.w	r2, r2, #3
 8006c1a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8006c1c:	4b08      	ldr	r3, [pc, #32]	; (8006c40 <SetSysClock+0xe4>)
 8006c1e:	4a08      	ldr	r2, [pc, #32]	; (8006c40 <SetSysClock+0xe4>)
 8006c20:	6892      	ldr	r2, [r2, #8]
 8006c22:	f042 0202 	orr.w	r2, r2, #2
 8006c26:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8006c28:	bf00      	nop
 8006c2a:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <SetSysClock+0xe4>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 030c 	and.w	r3, r3, #12
 8006c32:	2b08      	cmp	r3, #8
 8006c34:	d1f9      	bne.n	8006c2a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	40023800 	.word	0x40023800
 8006c44:	40007000 	.word	0x40007000
 8006c48:	07405408 	.word	0x07405408
 8006c4c:	40023c00 	.word	0x40023c00

08006c50 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
}
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8006c60:	e7fe      	b.n	8006c60 <HardFault_Handler+0x4>
 8006c62:	bf00      	nop

08006c64 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8006c68:	e7fe      	b.n	8006c68 <MemManage_Handler+0x4>
 8006c6a:	bf00      	nop

08006c6c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8006c70:	e7fe      	b.n	8006c70 <BusFault_Handler+0x4>
 8006c72:	bf00      	nop

08006c74 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8006c78:	e7fe      	b.n	8006c78 <UsageFault_Handler+0x4>
 8006c7a:	bf00      	nop

08006c7c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
}
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
}
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8006c94:	b480      	push	{r7}
 8006c96:	af00      	add	r7, sp, #0
}
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006ca0:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8006ce0 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006ca4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006ca6:	f000 b804 	b.w	8006cb2 <LoopCopyDataInit>

08006caa <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006caa:	4b0e      	ldr	r3, [pc, #56]	; (8006ce4 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8006cac:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006cae:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006cb0:	3104      	adds	r1, #4

08006cb2 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006cb2:	480d      	ldr	r0, [pc, #52]	; (8006ce8 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8006cb4:	4b0d      	ldr	r3, [pc, #52]	; (8006cec <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8006cb6:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006cb8:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006cba:	f4ff aff6 	bcc.w	8006caa <CopyDataInit>
  ldr  r2, =_sbss
 8006cbe:	4a0c      	ldr	r2, [pc, #48]	; (8006cf0 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8006cc0:	f000 b803 	b.w	8006cca <LoopFillZerobss>

08006cc4 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006cc4:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006cc6:	f842 3b04 	str.w	r3, [r2], #4

08006cca <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006cca:	4b0a      	ldr	r3, [pc, #40]	; (8006cf4 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8006ccc:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006cce:	f4ff aff9 	bcc.w	8006cc4 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006cd2:	f7ff ff0f 	bl	8006af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006cd6:	f005 ff99 	bl	800cc0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006cda:	f000 fc7b 	bl	80075d4 <main>
  bx  lr    
 8006cde:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006ce0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8006ce4:	0800f664 	.word	0x0800f664
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006ce8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006cec:	20000640 	.word	0x20000640
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8006cf0:	20000640 	.word	0x20000640
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006cf4:	20001ea8 	.word	0x20001ea8

08006cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006cf8:	f7ff bffe 	b.w	8006cf8 <ADC_IRQHandler>

08006cfc <_ZN5MySpiC1Ev>:
 *  Created on: Aug 17, 2016
 *      Author: lenovoi7
 */
#include "my_spi.h"

 MySpi::MySpi(){
 8006cfc:	b590      	push	{r4, r7, lr}
 8006cfe:	b08b      	sub	sp, #44	; 0x2c
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  CS_Gpio = new GPIO(GPIOA, GPIO_Pin_4);
 8006d04:	2008      	movs	r0, #8
 8006d06:	f004 ff1f 	bl	800bb48 <_Znwj>
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	492e      	ldr	r1, [pc, #184]	; (8006dc8 <_ZN5MySpiC1Ev+0xcc>)
 8006d10:	2210      	movs	r2, #16
 8006d12:	f000 fb99 	bl	8007448 <_ZN4GPIOC1EP12GPIO_TypeDeft>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	601c      	str	r4, [r3, #0]
  Spi_TimeOut=0x4000;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006d20:	605a      	str	r2, [r3, #4]

  //MOSI, MISO, SCK GPIO configuration
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8006d22:	2001      	movs	r0, #1
 8006d24:	2101      	movs	r1, #1
 8006d26:	f004 fc1b 	bl	800b560 <RCC_AHB1PeriphClockCmd>
  GPIO_InitTypeDef GPIO_SPI_Pins_initstruct;
  GPIO_SPI_Pins_initstruct.GPIO_Mode	= GPIO_Mode_AF;
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  GPIO_SPI_Pins_initstruct.GPIO_OType = GPIO_OType_PP;
 8006d30:	2300      	movs	r3, #0
 8006d32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  GPIO_SPI_Pins_initstruct.GPIO_PuPd	= GPIO_PuPd_NOPULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  GPIO_SPI_Pins_initstruct.GPIO_Speed = GPIO_Speed_50MHz;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  GPIO_SPI_Pins_initstruct.GPIO_Pin = GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;
 8006d42:	23e0      	movs	r3, #224	; 0xe0
 8006d44:	623b      	str	r3, [r7, #32]
  GPIO_Init(GPIOA, &GPIO_SPI_Pins_initstruct);
 8006d46:	f107 0320 	add.w	r3, r7, #32
 8006d4a:	481f      	ldr	r0, [pc, #124]	; (8006dc8 <_ZN5MySpiC1Ev+0xcc>)
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	f004 fc7f 	bl	800b650 <GPIO_Init>
  GPIO_PinAFConfig(GPIOA , GPIO_PinSource5 , GPIO_AF_SPI1);
 8006d52:	481d      	ldr	r0, [pc, #116]	; (8006dc8 <_ZN5MySpiC1Ev+0xcc>)
 8006d54:	2105      	movs	r1, #5
 8006d56:	2205      	movs	r2, #5
 8006d58:	f004 fd24 	bl	800b7a4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1);
 8006d5c:	481a      	ldr	r0, [pc, #104]	; (8006dc8 <_ZN5MySpiC1Ev+0xcc>)
 8006d5e:	2106      	movs	r1, #6
 8006d60:	2205      	movs	r2, #5
 8006d62:	f004 fd1f 	bl	800b7a4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1);
 8006d66:	4818      	ldr	r0, [pc, #96]	; (8006dc8 <_ZN5MySpiC1Ev+0xcc>)
 8006d68:	2107      	movs	r1, #7
 8006d6a:	2205      	movs	r2, #5
 8006d6c:	f004 fd1a 	bl	800b7a4 <GPIO_PinAFConfig>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8006d70:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006d74:	2101      	movs	r1, #1
 8006d76:	f004 fc2f 	bl	800b5d8 <RCC_APB2PeriphClockCmd>
  SPI_InitTypeDef SPI_InitStruct;
  SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8006d7a:	2318      	movs	r3, #24
 8006d7c:	833b      	strh	r3, [r7, #24]
  SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	82bb      	strh	r3, [r7, #20]
  SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8006d82:	2300      	movs	r3, #0
 8006d84:	827b      	strh	r3, [r7, #18]
  SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8006d86:	2300      	movs	r3, #0
 8006d88:	823b      	strh	r3, [r7, #16]
  SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	81bb      	strh	r3, [r7, #12]
  SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	837b      	strh	r3, [r7, #26]
  SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8006d92:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006d96:	81fb      	strh	r3, [r7, #14]
  SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8006d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d9c:	82fb      	strh	r3, [r7, #22]
  SPI_Init(SPI1, &SPI_InitStruct);
 8006d9e:	f107 030c 	add.w	r3, r7, #12
 8006da2:	480a      	ldr	r0, [pc, #40]	; (8006dcc <_ZN5MySpiC1Ev+0xd0>)
 8006da4:	4619      	mov	r1, r3
 8006da6:	f004 fb3f 	bl	800b428 <SPI_Init>
  SPI_Cmd(SPI1,ENABLE);
 8006daa:	4808      	ldr	r0, [pc, #32]	; (8006dcc <_ZN5MySpiC1Ev+0xd0>)
 8006dac:	2101      	movs	r1, #1
 8006dae:	f004 fb7f 	bl	800b4b0 <SPI_Cmd>

  CS_Gpio->Set();
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fba0 	bl	80074fc <_ZN4GPIO3SetEv>
 }
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	372c      	adds	r7, #44	; 0x2c
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd90      	pop	{r4, r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40020000 	.word	0x40020000
 8006dcc:	40013000 	.word	0x40013000

08006dd0 <_ZN5MySpi8TransferEPhS0_i>:
int MySpi::Transfer(uint8_t *Data_IN, uint8_t *Data_OUT, int size){
 8006dd0:	b590      	push	{r4, r7, lr}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	603b      	str	r3, [r7, #0]
  CS_Gpio->Reset();
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fb9a 	bl	800751c <_ZN4GPIO5ResetEv>
  SPI_I2S_ReceiveData(SPI1);
 8006de8:	483a      	ldr	r0, [pc, #232]	; (8006ed4 <_ZN5MySpi8TransferEPhS0_i+0x104>)
 8006dea:	f004 fb81 	bl	800b4f0 <SPI_I2S_ReceiveData>
  while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 8006dee:	bf00      	nop
 8006df0:	4838      	ldr	r0, [pc, #224]	; (8006ed4 <_ZN5MySpi8TransferEPhS0_i+0x104>)
 8006df2:	2102      	movs	r1, #2
 8006df4:	f004 fb98 	bl	800b528 <SPI_I2S_GetFlagStatus>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	bf14      	ite	ne
 8006dfe:	2300      	movne	r3, #0
 8006e00:	2301      	moveq	r3, #1
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1f3      	bne.n	8006df0 <_ZN5MySpi8TransferEPhS0_i+0x20>

  for(int i=0; i<size; i++){
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	e03a      	b.n	8006e84 <_ZN5MySpi8TransferEPhS0_i+0xb4>
	SPI_I2S_SendData(SPI1, Data_OUT[i]);
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	4413      	add	r3, r2
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	482f      	ldr	r0, [pc, #188]	; (8006ed4 <_ZN5MySpi8TransferEPhS0_i+0x104>)
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f004 fb77 	bl	800b50c <SPI_I2S_SendData>
	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 8006e1e:	bf00      	nop
 8006e20:	482c      	ldr	r0, [pc, #176]	; (8006ed4 <_ZN5MySpi8TransferEPhS0_i+0x104>)
 8006e22:	2102      	movs	r1, #2
 8006e24:	f004 fb80 	bl	800b528 <SPI_I2S_GetFlagStatus>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	bf14      	ite	ne
 8006e2e:	2300      	movne	r3, #0
 8006e30:	2301      	moveq	r3, #1
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1f3      	bne.n	8006e20 <_ZN5MySpi8TransferEPhS0_i+0x50>

	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET);
 8006e38:	bf00      	nop
 8006e3a:	4826      	ldr	r0, [pc, #152]	; (8006ed4 <_ZN5MySpi8TransferEPhS0_i+0x104>)
 8006e3c:	2180      	movs	r1, #128	; 0x80
 8006e3e:	f004 fb73 	bl	800b528 <SPI_I2S_GetFlagStatus>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	bf14      	ite	ne
 8006e48:	2300      	movne	r3, #0
 8006e4a:	2301      	moveq	r3, #1
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1f3      	bne.n	8006e3a <_ZN5MySpi8TransferEPhS0_i+0x6a>

	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 8006e52:	bf00      	nop
 8006e54:	481f      	ldr	r0, [pc, #124]	; (8006ed4 <_ZN5MySpi8TransferEPhS0_i+0x104>)
 8006e56:	2101      	movs	r1, #1
 8006e58:	f004 fb66 	bl	800b528 <SPI_I2S_GetFlagStatus>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bf14      	ite	ne
 8006e62:	2300      	movne	r3, #0
 8006e64:	2301      	moveq	r3, #1
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1f3      	bne.n	8006e54 <_ZN5MySpi8TransferEPhS0_i+0x84>
    Data_IN[i] = SPI_I2S_ReceiveData(SPI1);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	18d4      	adds	r4, r2, r3
 8006e72:	4818      	ldr	r0, [pc, #96]	; (8006ed4 <_ZN5MySpi8TransferEPhS0_i+0x104>)
 8006e74:	f004 fb3c 	bl	800b4f0 <SPI_I2S_ReceiveData>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	7023      	strb	r3, [r4, #0]
int MySpi::Transfer(uint8_t *Data_IN, uint8_t *Data_OUT, int size){
  CS_Gpio->Reset();
  SPI_I2S_ReceiveData(SPI1);
  while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);

  for(int i=0; i<size; i++){
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	3301      	adds	r3, #1
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	dbc0      	blt.n	8006e0e <_ZN5MySpi8TransferEPhS0_i+0x3e>

	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
    Data_IN[i] = SPI_I2S_ReceiveData(SPI1);
  }

  while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET);
 8006e8c:	bf00      	nop
 8006e8e:	4811      	ldr	r0, [pc, #68]	; (8006ed4 <_ZN5MySpi8TransferEPhS0_i+0x104>)
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	f004 fb49 	bl	800b528 <SPI_I2S_GetFlagStatus>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	bf14      	ite	ne
 8006e9c:	2300      	movne	r3, #0
 8006e9e:	2301      	moveq	r3, #1
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f3      	bne.n	8006e8e <_ZN5MySpi8TransferEPhS0_i+0xbe>
  while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 8006ea6:	bf00      	nop
 8006ea8:	480a      	ldr	r0, [pc, #40]	; (8006ed4 <_ZN5MySpi8TransferEPhS0_i+0x104>)
 8006eaa:	2102      	movs	r1, #2
 8006eac:	f004 fb3c 	bl	800b528 <SPI_I2S_GetFlagStatus>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	bf14      	ite	ne
 8006eb6:	2300      	movne	r3, #0
 8006eb8:	2301      	moveq	r3, #1
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1f3      	bne.n	8006ea8 <_ZN5MySpi8TransferEPhS0_i+0xd8>
  CS_Gpio->Set();
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fb19 	bl	80074fc <_ZN4GPIO3SetEv>

  return 1;
 8006eca:	2301      	movs	r3, #1
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd90      	pop	{r4, r7, pc}
 8006ed4:	40013000 	.word	0x40013000

08006ed8 <_ZN5NRF24C1Ev>:
 *      Author: lenovoi7
 */

#include <NRF24.h>

NRF24::NRF24() {
 8006ed8:	b590      	push	{r4, r7, lr}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  NRF_Spi = new MySpi();
 8006ee0:	2008      	movs	r0, #8
 8006ee2:	f004 fe31 	bl	800bb48 <_Znwj>
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f7ff ff07 	bl	8006cfc <_ZN5MySpiC1Ev>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	611c      	str	r4, [r3, #16]
  NRF_CE = new GPIO(GPIOA, GPIO_Pin_3);
 8006ef2:	2008      	movs	r0, #8
 8006ef4:	f004 fe28 	bl	800bb48 <_Znwj>
 8006ef8:	4604      	mov	r4, r0
 8006efa:	4620      	mov	r0, r4
 8006efc:	4907      	ldr	r1, [pc, #28]	; (8006f1c <_ZN5NRF24C1Ev+0x44>)
 8006efe:	2208      	movs	r2, #8
 8006f00:	f000 faa2 	bl	8007448 <_ZN4GPIOC1EP12GPIO_TypeDeft>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	601c      	str	r4, [r3, #0]
  NRF_CE->Reset();
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fb05 	bl	800751c <_ZN4GPIO5ResetEv>
}
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd90      	pop	{r4, r7, pc}
 8006f1c:	40020000 	.word	0x40020000

08006f20 <_ZN5NRF246ConfigEv>:
int NRF24::Config(){
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint8_t reg_value;
  if(is_rx)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	791b      	ldrb	r3, [r3, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <_ZN5NRF246ConfigEv+0x16>
    reg_value=0b00001011;
 8006f30:	230b      	movs	r3, #11
 8006f32:	72fb      	strb	r3, [r7, #11]
 8006f34:	e001      	b.n	8006f3a <_ZN5NRF246ConfigEv+0x1a>
  else
	reg_value=0b00001010;
 8006f36:	230a      	movs	r3, #10
 8006f38:	72fb      	strb	r3, [r7, #11]
  WriteRegister(0x00, &reg_value, 1);
 8006f3a:	f107 030b 	add.w	r3, r7, #11
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	2100      	movs	r1, #0
 8006f42:	461a      	mov	r2, r3
 8006f44:	2301      	movs	r3, #1
 8006f46:	f000 f849 	bl	8006fdc <_ZN5NRF2413WriteRegisterEhPhi>
  reg_value=0b11110011;
 8006f4a:	23f3      	movs	r3, #243	; 0xf3
 8006f4c:	72fb      	strb	r3, [r7, #11]
  WriteRegister(0x04, &reg_value, 1);
 8006f4e:	f107 030b 	add.w	r3, r7, #11
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	2104      	movs	r1, #4
 8006f56:	461a      	mov	r2, r3
 8006f58:	2301      	movs	r3, #1
 8006f5a:	f000 f83f 	bl	8006fdc <_ZN5NRF2413WriteRegisterEhPhi>
  reg_value=0b00000111;
 8006f5e:	2307      	movs	r3, #7
 8006f60:	72fb      	strb	r3, [r7, #11]
  WriteRegister(0x05, &reg_value, 1);
 8006f62:	f107 030b 	add.w	r3, r7, #11
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	2105      	movs	r1, #5
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	f000 f835 	bl	8006fdc <_ZN5NRF2413WriteRegisterEhPhi>
  reg_value=0b00000011;
 8006f72:	2303      	movs	r3, #3
 8006f74:	72fb      	strb	r3, [r7, #11]
  WriteRegister(0x1c, &reg_value, 1);
 8006f76:	f107 030b 	add.w	r3, r7, #11
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	211c      	movs	r1, #28
 8006f7e:	461a      	mov	r2, r3
 8006f80:	2301      	movs	r3, #1
 8006f82:	f000 f82b 	bl	8006fdc <_ZN5NRF2413WriteRegisterEhPhi>
  reg_value=0b00000110;
 8006f86:	2306      	movs	r3, #6
 8006f88:	72fb      	strb	r3, [r7, #11]
  WriteRegister(0x1d, &reg_value, 1);
 8006f8a:	f107 030b 	add.w	r3, r7, #11
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	211d      	movs	r1, #29
 8006f92:	461a      	mov	r2, r3
 8006f94:	2301      	movs	r3, #1
 8006f96:	f000 f821 	bl	8006fdc <_ZN5NRF2413WriteRegisterEhPhi>
  FlushRx();
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f9c4 	bl	8007328 <_ZN5NRF247FlushRxEv>
  FlushTx();
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f995 	bl	80072d0 <_ZN5NRF247FlushTxEv>
  reg_value=0b01110000;
 8006fa6:	2370      	movs	r3, #112	; 0x70
 8006fa8:	72fb      	strb	r3, [r7, #11]
  WriteRegister((uint8_t) 0x07, &reg_value, 1);
 8006faa:	f107 030b 	add.w	r3, r7, #11
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	2107      	movs	r1, #7
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	f000 f811 	bl	8006fdc <_ZN5NRF2413WriteRegisterEhPhi>
  for(int i=0;i<0xeeeee2;i++);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	e002      	b.n	8006fc6 <_ZN5NRF246ConfigEv+0xa6>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4b03      	ldr	r3, [pc, #12]	; (8006fd8 <_ZN5NRF246ConfigEv+0xb8>)
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	ddf8      	ble.n	8006fc0 <_ZN5NRF246ConfigEv+0xa0>
  return 1;
 8006fce:	2301      	movs	r3, #1
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	00eeeee1 	.word	0x00eeeee1

08006fdc <_ZN5NRF2413WriteRegisterEhPhi>:
int NRF24::WriteRegister(uint8_t adress, uint8_t *new_value, int size){
 8006fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe0:	b08d      	sub	sp, #52	; 0x34
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6178      	str	r0, [r7, #20]
 8006fe6:	60fa      	str	r2, [r7, #12]
 8006fe8:	60bb      	str	r3, [r7, #8]
 8006fea:	460b      	mov	r3, r1
 8006fec:	74fb      	strb	r3, [r7, #19]
 8006fee:	466b      	mov	r3, sp
 8006ff0:	461e      	mov	r6, r3
  uint8_t buf_in[size+1];
 8006ff2:	68b9      	ldr	r1, [r7, #8]
 8006ff4:	62b9      	str	r1, [r7, #40]	; 0x28
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	00d8      	lsls	r0, r3, #3
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	00d0      	lsls	r0, r2, #3
 800700e:	460b      	mov	r3, r1
 8007010:	3301      	adds	r3, #1
 8007012:	461a      	mov	r2, r3
 8007014:	f04f 0300 	mov.w	r3, #0
 8007018:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 800701c:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 8007020:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8007024:	460b      	mov	r3, r1
 8007026:	3301      	adds	r3, #1
 8007028:	3307      	adds	r3, #7
 800702a:	08db      	lsrs	r3, r3, #3
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	ebad 0d03 	sub.w	sp, sp, r3
 8007032:	466b      	mov	r3, sp
 8007034:	3300      	adds	r3, #0
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf_out[size+1];
 8007038:	68b9      	ldr	r1, [r7, #8]
 800703a:	6239      	str	r1, [r7, #32]
 800703c:	460b      	mov	r3, r1
 800703e:	3301      	adds	r3, #1
 8007040:	461a      	mov	r2, r3
 8007042:	f04f 0300 	mov.w	r3, #0
 8007046:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800704a:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800704e:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8007052:	460b      	mov	r3, r1
 8007054:	3301      	adds	r3, #1
 8007056:	461a      	mov	r2, r3
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	00dd      	lsls	r5, r3, #3
 800705e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007062:	00d4      	lsls	r4, r2, #3
 8007064:	460b      	mov	r3, r1
 8007066:	3301      	adds	r3, #1
 8007068:	3307      	adds	r3, #7
 800706a:	08db      	lsrs	r3, r3, #3
 800706c:	00db      	lsls	r3, r3, #3
 800706e:	ebad 0d03 	sub.w	sp, sp, r3
 8007072:	466b      	mov	r3, sp
 8007074:	3300      	adds	r3, #0
 8007076:	61fb      	str	r3, [r7, #28]
  buf_out[0]=0x20|adress;
 8007078:	7cfb      	ldrb	r3, [r7, #19]
 800707a:	f043 0320 	orr.w	r3, r3, #32
 800707e:	b2da      	uxtb	r2, r3
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	701a      	strb	r2, [r3, #0]
  for(int i=1; i<size+1; i++){
 8007084:	2301      	movs	r3, #1
 8007086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007088:	e00b      	b.n	80070a2 <_ZN5NRF2413WriteRegisterEhPhi+0xc6>
    buf_out[i]=new_value[i-1];
 800708a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708c:	3b01      	subs	r3, #1
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	781a      	ldrb	r2, [r3, #0]
 8007094:	69f9      	ldr	r1, [r7, #28]
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	440b      	add	r3, r1
 800709a:	701a      	strb	r2, [r3, #0]
}
int NRF24::WriteRegister(uint8_t adress, uint8_t *new_value, int size){
  uint8_t buf_in[size+1];
  uint8_t buf_out[size+1];
  buf_out[0]=0x20|adress;
  for(int i=1; i<size+1; i++){
 800709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709e:	3301      	adds	r3, #1
 80070a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a8:	429a      	cmp	r2, r3
 80070aa:	dcee      	bgt.n	800708a <_ZN5NRF2413WriteRegisterEhPhi+0xae>
    buf_out[i]=new_value[i-1];
  }
  if(!NRF_Spi->Transfer(buf_in, buf_out, (int) size+1))
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	6918      	ldr	r0, [r3, #16]
 80070b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070b2:	69fa      	ldr	r2, [r7, #28]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	3301      	adds	r3, #1
 80070b8:	f7ff fe8a 	bl	8006dd0 <_ZN5MySpi8TransferEPhS0_i>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bf14      	ite	ne
 80070c2:	2300      	movne	r3, #0
 80070c4:	2301      	moveq	r3, #1
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <_ZN5NRF2413WriteRegisterEhPhi+0xf4>
    return 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	e000      	b.n	80070d2 <_ZN5NRF2413WriteRegisterEhPhi+0xf6>
  //for(int i=0;i<0xee2;i++);
  return 1;
 80070d0:	2301      	movs	r3, #1
 80070d2:	46b5      	mov	sp, r6
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3734      	adds	r7, #52	; 0x34
 80070d8:	46bd      	mov	sp, r7
 80070da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070de:	bf00      	nop

080070e0 <_ZN5NRF2412ReadRegisterEhPhi>:

int NRF24::ReadRegister(uint8_t adress, uint8_t *value, int size){
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	b08d      	sub	sp, #52	; 0x34
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6178      	str	r0, [r7, #20]
 80070ea:	60fa      	str	r2, [r7, #12]
 80070ec:	60bb      	str	r3, [r7, #8]
 80070ee:	460b      	mov	r3, r1
 80070f0:	74fb      	strb	r3, [r7, #19]
 80070f2:	466b      	mov	r3, sp
 80070f4:	461e      	mov	r6, r3
  uint8_t buf_in[size+1];
 80070f6:	68b9      	ldr	r1, [r7, #8]
 80070f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80070fa:	460b      	mov	r3, r1
 80070fc:	3301      	adds	r3, #1
 80070fe:	461a      	mov	r2, r3
 8007100:	f04f 0300 	mov.w	r3, #0
 8007104:	00d8      	lsls	r0, r3, #3
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	00d0      	lsls	r0, r2, #3
 8007112:	460b      	mov	r3, r1
 8007114:	3301      	adds	r3, #1
 8007116:	461a      	mov	r2, r3
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8007120:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 8007124:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8007128:	460b      	mov	r3, r1
 800712a:	3301      	adds	r3, #1
 800712c:	3307      	adds	r3, #7
 800712e:	08db      	lsrs	r3, r3, #3
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	ebad 0d03 	sub.w	sp, sp, r3
 8007136:	466b      	mov	r3, sp
 8007138:	3300      	adds	r3, #0
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf_out[size+1];
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	6239      	str	r1, [r7, #32]
 8007140:	460b      	mov	r3, r1
 8007142:	3301      	adds	r3, #1
 8007144:	461a      	mov	r2, r3
 8007146:	f04f 0300 	mov.w	r3, #0
 800714a:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800714e:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8007152:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8007156:	460b      	mov	r3, r1
 8007158:	3301      	adds	r3, #1
 800715a:	461a      	mov	r2, r3
 800715c:	f04f 0300 	mov.w	r3, #0
 8007160:	00dd      	lsls	r5, r3, #3
 8007162:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007166:	00d4      	lsls	r4, r2, #3
 8007168:	460b      	mov	r3, r1
 800716a:	3301      	adds	r3, #1
 800716c:	3307      	adds	r3, #7
 800716e:	08db      	lsrs	r3, r3, #3
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	ebad 0d03 	sub.w	sp, sp, r3
 8007176:	466b      	mov	r3, sp
 8007178:	3300      	adds	r3, #0
 800717a:	61fb      	str	r3, [r7, #28]
  buf_out[0]=adress;
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	7cfa      	ldrb	r2, [r7, #19]
 8007180:	701a      	strb	r2, [r3, #0]
  if(!NRF_Spi->Transfer(buf_in, buf_out, (int) size+1))
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	6918      	ldr	r0, [r3, #16]
 8007186:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007188:	69fa      	ldr	r2, [r7, #28]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	3301      	adds	r3, #1
 800718e:	f7ff fe1f 	bl	8006dd0 <_ZN5MySpi8TransferEPhS0_i>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	bf14      	ite	ne
 8007198:	2300      	movne	r3, #0
 800719a:	2301      	moveq	r3, #1
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <_ZN5NRF2412ReadRegisterEhPhi+0xc6>
	return 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e012      	b.n	80071cc <_ZN5NRF2412ReadRegisterEhPhi+0xec>
  for(int i=0; i<size; i++){
 80071a6:	2300      	movs	r3, #0
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071aa:	e00a      	b.n	80071c2 <_ZN5NRF2412ReadRegisterEhPhi+0xe2>
    value[i]=buf_in[i+1];
 80071ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4413      	add	r3, r2
 80071b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b4:	3201      	adds	r2, #1
 80071b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071b8:	5c8a      	ldrb	r2, [r1, r2]
 80071ba:	701a      	strb	r2, [r3, #0]
  uint8_t buf_in[size+1];
  uint8_t buf_out[size+1];
  buf_out[0]=adress;
  if(!NRF_Spi->Transfer(buf_in, buf_out, (int) size+1))
	return 0;
  for(int i=0; i<size; i++){
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071be:	3301      	adds	r3, #1
 80071c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	dbf0      	blt.n	80071ac <_ZN5NRF2412ReadRegisterEhPhi+0xcc>
    value[i]=buf_in[i+1];
  }
  return 1;
 80071ca:	2301      	movs	r3, #1
 80071cc:	46b5      	mov	sp, r6
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3734      	adds	r7, #52	; 0x34
 80071d2:	46bd      	mov	sp, r7
 80071d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080071d8 <_ZN5NRF2412WritePayloadEPhi>:
int NRF24::WritePayload(uint8_t *data, int size){
 80071d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	b08d      	sub	sp, #52	; 0x34
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6178      	str	r0, [r7, #20]
 80071e2:	6139      	str	r1, [r7, #16]
 80071e4:	60fa      	str	r2, [r7, #12]
 80071e6:	466b      	mov	r3, sp
 80071e8:	461e      	mov	r6, r3
  uint8_t buf_in[size+1];
 80071ea:	68f9      	ldr	r1, [r7, #12]
 80071ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80071ee:	460b      	mov	r3, r1
 80071f0:	3301      	adds	r3, #1
 80071f2:	461a      	mov	r2, r3
 80071f4:	f04f 0300 	mov.w	r3, #0
 80071f8:	00d8      	lsls	r0, r3, #3
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	00d0      	lsls	r0, r2, #3
 8007206:	460b      	mov	r3, r1
 8007208:	3301      	adds	r3, #1
 800720a:	461a      	mov	r2, r3
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8007214:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 8007218:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 800721c:	460b      	mov	r3, r1
 800721e:	3301      	adds	r3, #1
 8007220:	3307      	adds	r3, #7
 8007222:	08db      	lsrs	r3, r3, #3
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	ebad 0d03 	sub.w	sp, sp, r3
 800722a:	466b      	mov	r3, sp
 800722c:	3300      	adds	r3, #0
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf_out[size+1];
 8007230:	68f9      	ldr	r1, [r7, #12]
 8007232:	6239      	str	r1, [r7, #32]
 8007234:	460b      	mov	r3, r1
 8007236:	3301      	adds	r3, #1
 8007238:	461a      	mov	r2, r3
 800723a:	f04f 0300 	mov.w	r3, #0
 800723e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8007242:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8007246:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800724a:	460b      	mov	r3, r1
 800724c:	3301      	adds	r3, #1
 800724e:	461a      	mov	r2, r3
 8007250:	f04f 0300 	mov.w	r3, #0
 8007254:	00dd      	lsls	r5, r3, #3
 8007256:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800725a:	00d4      	lsls	r4, r2, #3
 800725c:	460b      	mov	r3, r1
 800725e:	3301      	adds	r3, #1
 8007260:	3307      	adds	r3, #7
 8007262:	08db      	lsrs	r3, r3, #3
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	ebad 0d03 	sub.w	sp, sp, r3
 800726a:	466b      	mov	r3, sp
 800726c:	3300      	adds	r3, #0
 800726e:	61fb      	str	r3, [r7, #28]
  buf_out[0]=0b10100000;
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	22a0      	movs	r2, #160	; 0xa0
 8007274:	701a      	strb	r2, [r3, #0]
  for(int i=1; i<size+1; i++){
 8007276:	2301      	movs	r3, #1
 8007278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800727a:	e00b      	b.n	8007294 <_ZN5NRF2412WritePayloadEPhi+0xbc>
	buf_out[i]=data[i-1];
 800727c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727e:	3b01      	subs	r3, #1
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4413      	add	r3, r2
 8007284:	781a      	ldrb	r2, [r3, #0]
 8007286:	69f9      	ldr	r1, [r7, #28]
 8007288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728a:	440b      	add	r3, r1
 800728c:	701a      	strb	r2, [r3, #0]
}
int NRF24::WritePayload(uint8_t *data, int size){
  uint8_t buf_in[size+1];
  uint8_t buf_out[size+1];
  buf_out[0]=0b10100000;
  for(int i=1; i<size+1; i++){
 800728e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007290:	3301      	adds	r3, #1
 8007292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	429a      	cmp	r2, r3
 800729c:	dcee      	bgt.n	800727c <_ZN5NRF2412WritePayloadEPhi+0xa4>
	buf_out[i]=data[i-1];
  }
  if(!NRF_Spi->Transfer(buf_in, buf_out, (int) size+1))
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	6918      	ldr	r0, [r3, #16]
 80072a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072a4:	69fa      	ldr	r2, [r7, #28]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3301      	adds	r3, #1
 80072aa:	f7ff fd91 	bl	8006dd0 <_ZN5MySpi8TransferEPhS0_i>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	bf14      	ite	ne
 80072b4:	2300      	movne	r3, #0
 80072b6:	2301      	moveq	r3, #1
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <_ZN5NRF2412WritePayloadEPhi+0xea>
	return 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	e000      	b.n	80072c4 <_ZN5NRF2412WritePayloadEPhi+0xec>
  return 1;
 80072c2:	2301      	movs	r3, #1
 80072c4:	46b5      	mov	sp, r6
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3734      	adds	r7, #52	; 0x34
 80072ca:	46bd      	mov	sp, r7
 80072cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072d0 <_ZN5NRF247FlushTxEv>:
  for(int i=0; i<size; i++){
    data[i]=buf_in[i+1];
  }
  return 1;
}
int NRF24::FlushTx(){
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint8_t buf_in[1];
  uint8_t buf_out[1];
  buf_out[0]=0b11100001;
 80072d8:	23e1      	movs	r3, #225	; 0xe1
 80072da:	733b      	strb	r3, [r7, #12]
  if(!NRF_Spi->Transfer(buf_in, buf_out, (int) 1))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6919      	ldr	r1, [r3, #16]
 80072e0:	f107 0210 	add.w	r2, r7, #16
 80072e4:	f107 030c 	add.w	r3, r7, #12
 80072e8:	4608      	mov	r0, r1
 80072ea:	4611      	mov	r1, r2
 80072ec:	461a      	mov	r2, r3
 80072ee:	2301      	movs	r3, #1
 80072f0:	f7ff fd6e 	bl	8006dd0 <_ZN5MySpi8TransferEPhS0_i>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bf14      	ite	ne
 80072fa:	2300      	movne	r3, #0
 80072fc:	2301      	moveq	r3, #1
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <_ZN5NRF247FlushTxEv+0x38>
	return 0;
 8007304:	2300      	movs	r3, #0
 8007306:	e00b      	b.n	8007320 <_ZN5NRF247FlushTxEv+0x50>
  for(int i=0;i<0xee2;i++);
 8007308:	2300      	movs	r3, #0
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	e002      	b.n	8007314 <_ZN5NRF247FlushTxEv+0x44>
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	3301      	adds	r3, #1
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	f640 63e1 	movw	r3, #3809	; 0xee1
 800731a:	429a      	cmp	r2, r3
 800731c:	ddf7      	ble.n	800730e <_ZN5NRF247FlushTxEv+0x3e>
  return 1;
 800731e:	2301      	movs	r3, #1
}
 8007320:	4618      	mov	r0, r3
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <_ZN5NRF247FlushRxEv>:
int NRF24::FlushRx(){
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint8_t buf_in[1];
  uint8_t buf_out[1];
  buf_out[0]=0b11100010;
 8007330:	23e2      	movs	r3, #226	; 0xe2
 8007332:	733b      	strb	r3, [r7, #12]
  if(!NRF_Spi->Transfer(buf_in, buf_out, (int) 1))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6919      	ldr	r1, [r3, #16]
 8007338:	f107 0210 	add.w	r2, r7, #16
 800733c:	f107 030c 	add.w	r3, r7, #12
 8007340:	4608      	mov	r0, r1
 8007342:	4611      	mov	r1, r2
 8007344:	461a      	mov	r2, r3
 8007346:	2301      	movs	r3, #1
 8007348:	f7ff fd42 	bl	8006dd0 <_ZN5MySpi8TransferEPhS0_i>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	bf14      	ite	ne
 8007352:	2300      	movne	r3, #0
 8007354:	2301      	moveq	r3, #1
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <_ZN5NRF247FlushRxEv+0x38>
	return 0;
 800735c:	2300      	movs	r3, #0
 800735e:	e00b      	b.n	8007378 <_ZN5NRF247FlushRxEv+0x50>
  for(int i=0;i<0xee2;i++);
 8007360:	2300      	movs	r3, #0
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	e002      	b.n	800736c <_ZN5NRF247FlushRxEv+0x44>
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	3301      	adds	r3, #1
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	f640 63e1 	movw	r3, #3809	; 0xee1
 8007372:	429a      	cmp	r2, r3
 8007374:	ddf7      	ble.n	8007366 <_ZN5NRF247FlushRxEv+0x3e>
  return 1;
 8007376:	2301      	movs	r3, #1
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <_ZN5NRF248DataSentEv>:
  uint8_t value;
  WriteRegister(0x0F, &new_value, 1);
  ReadRegister(0x0F, &value, 1);
  return (value==new_value);
}
int NRF24::DataSent(){
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint8_t value;
  ReadRegister(REG_STATUS, &value, 1);
 8007388:	f107 030f 	add.w	r3, r7, #15
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	2107      	movs	r1, #7
 8007390:	461a      	mov	r2, r3
 8007392:	2301      	movs	r3, #1
 8007394:	f7ff fea4 	bl	80070e0 <_ZN5NRF2412ReadRegisterEhPhi>
  return (value&0b00100000);
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	f003 0320 	and.w	r3, r3, #32
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop

080073a8 <_ZN5NRF245MaxRtEv>:
int NRF24::DataReady(){
  uint8_t value;
  ReadRegister(REG_STATUS, &value, 1);
  return (value&0b01000000);
}
int NRF24::MaxRt(){
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint8_t value;
  ReadRegister(REG_STATUS, &value, 1);
 80073b0:	f107 030f 	add.w	r3, r7, #15
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	2107      	movs	r1, #7
 80073b8:	461a      	mov	r2, r3
 80073ba:	2301      	movs	r3, #1
 80073bc:	f7ff fe90 	bl	80070e0 <_ZN5NRF2412ReadRegisterEhPhi>
  return (value&0b00010000);
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	f003 0310 	and.w	r3, r3, #16
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop

080073d0 <_ZN5NRF2413CleanDataSentEv>:
int NRF24::CleanDataSent(){
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint8_t new_value=0b00100000;
 80073d8:	2320      	movs	r3, #32
 80073da:	73fb      	strb	r3, [r7, #15]
  return WriteRegister(REG_STATUS, &new_value, 1);
 80073dc:	f107 030f 	add.w	r3, r7, #15
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	2107      	movs	r1, #7
 80073e4:	461a      	mov	r2, r3
 80073e6:	2301      	movs	r3, #1
 80073e8:	f7ff fdf8 	bl	8006fdc <_ZN5NRF2413WriteRegisterEhPhi>
 80073ec:	4603      	mov	r3, r0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop

080073f8 <_ZN5NRF2410CleanMaxRtEv>:
int NRF24::CleanDataReady(){
  uint8_t new_value=0b01000000;
  return WriteRegister(REG_STATUS, &new_value, 1);
}
int NRF24::CleanMaxRt(){
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint8_t new_value=0b00010000;
 8007400:	2310      	movs	r3, #16
 8007402:	73fb      	strb	r3, [r7, #15]
  return WriteRegister(REG_STATUS, &new_value, 1);
 8007404:	f107 030f 	add.w	r3, r7, #15
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	2107      	movs	r1, #7
 800740c:	461a      	mov	r2, r3
 800740e:	2301      	movs	r3, #1
 8007410:	f7ff fde4 	bl	8006fdc <_ZN5NRF2413WriteRegisterEhPhi>
 8007414:	4603      	mov	r3, r0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop

08007420 <_ZN5NRF247TxEmptyEv>:
int NRF24::RxFull(){
  uint8_t value;
  ReadRegister(REG_FIFO_STATUS, &value, 1);
  return (value&0b00000010);
}
int NRF24::TxEmpty(){
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint8_t value;
  ReadRegister(REG_FIFO_STATUS, &value, 1);
 8007428:	f107 030f 	add.w	r3, r7, #15
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	2117      	movs	r1, #23
 8007430:	461a      	mov	r2, r3
 8007432:	2301      	movs	r3, #1
 8007434:	f7ff fe54 	bl	80070e0 <_ZN5NRF2412ReadRegisterEhPhi>
  return (value&0b00010000);
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	f003 0310 	and.w	r3, r3, #16
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop

08007448 <_ZN4GPIOC1EP12GPIO_TypeDeft>:
 *  Created on: Mar 12, 2016
 *      Author: lenovoi7
 */

#include "GPIO.h"
GPIO::GPIO(GPIO_TypeDef* Port, uint16_t Pin) {
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	4613      	mov	r3, r2
 8007454:	80fb      	strh	r3, [r7, #6]
	if(Port == GPIOA)
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	4b23      	ldr	r3, [pc, #140]	; (80074e8 <_ZN4GPIOC1EP12GPIO_TypeDeft+0xa0>)
 800745a:	429a      	cmp	r2, r3
 800745c:	d103      	bne.n	8007466 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x1e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800745e:	2001      	movs	r0, #1
 8007460:	2101      	movs	r1, #1
 8007462:	f004 f87d 	bl	800b560 <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOB)
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	4b20      	ldr	r3, [pc, #128]	; (80074ec <_ZN4GPIOC1EP12GPIO_TypeDeft+0xa4>)
 800746a:	429a      	cmp	r2, r3
 800746c:	d103      	bne.n	8007476 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x2e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800746e:	2002      	movs	r0, #2
 8007470:	2101      	movs	r1, #1
 8007472:	f004 f875 	bl	800b560 <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOC)
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	4b1d      	ldr	r3, [pc, #116]	; (80074f0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0xa8>)
 800747a:	429a      	cmp	r2, r3
 800747c:	d103      	bne.n	8007486 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x3e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800747e:	2004      	movs	r0, #4
 8007480:	2101      	movs	r1, #1
 8007482:	f004 f86d 	bl	800b560 <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOD)
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	4b1a      	ldr	r3, [pc, #104]	; (80074f4 <_ZN4GPIOC1EP12GPIO_TypeDeft+0xac>)
 800748a:	429a      	cmp	r2, r3
 800748c:	d103      	bne.n	8007496 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x4e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800748e:	2008      	movs	r0, #8
 8007490:	2101      	movs	r1, #1
 8007492:	f004 f865 	bl	800b560 <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOE)
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	4b17      	ldr	r3, [pc, #92]	; (80074f8 <_ZN4GPIOC1EP12GPIO_TypeDeft+0xb0>)
 800749a:	429a      	cmp	r2, r3
 800749c:	d103      	bne.n	80074a6 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800749e:	2010      	movs	r0, #16
 80074a0:	2101      	movs	r1, #1
 80074a2:	f004 f85d 	bl	800b560 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80074a6:	2301      	movs	r3, #1
 80074a8:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80074aa:	2300      	movs	r3, #0
 80074ac:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80074ae:	2302      	movs	r3, #2
 80074b0:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80074b2:	2301      	movs	r3, #1
 80074b4:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Pin = Pin;
 80074b6:	88fb      	ldrh	r3, [r7, #6]
 80074b8:	613b      	str	r3, [r7, #16]
	GPIO_Init(Port,&GPIO_InitStructure);
 80074ba:	f107 0310 	add.w	r3, r7, #16
 80074be:	68b8      	ldr	r0, [r7, #8]
 80074c0:	4619      	mov	r1, r3
 80074c2:	f004 f8c5 	bl	800b650 <GPIO_Init>

	GPIO_ResetBits(Port, Pin);
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	68b8      	ldr	r0, [r7, #8]
 80074ca:	4619      	mov	r1, r3
 80074cc:	f004 f95c 	bl	800b788 <GPIO_ResetBits>
	GPIO_Port = Port;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	601a      	str	r2, [r3, #0]
	GPIO_Pin = Pin;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	88fa      	ldrh	r2, [r7, #6]
 80074da:	809a      	strh	r2, [r3, #4]
}
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4618      	mov	r0, r3
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	40020000 	.word	0x40020000
 80074ec:	40020400 	.word	0x40020400
 80074f0:	40020800 	.word	0x40020800
 80074f4:	40020c00 	.word	0x40020c00
 80074f8:	40021000 	.word	0x40021000

080074fc <_ZN4GPIO3SetEv>:
void GPIO::Set(){
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
	GPIO_SetBits(GPIO_Port, GPIO_Pin);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	889b      	ldrh	r3, [r3, #4]
 800750c:	4610      	mov	r0, r2
 800750e:	4619      	mov	r1, r3
 8007510:	f004 f92c 	bl	800b76c <GPIO_SetBits>
	return;
 8007514:	bf00      	nop
}
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <_ZN4GPIO5ResetEv>:
void GPIO::Reset(){
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
	GPIO_ResetBits(GPIO_Port, GPIO_Pin);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	889b      	ldrh	r3, [r3, #4]
 800752c:	4610      	mov	r0, r2
 800752e:	4619      	mov	r1, r3
 8007530:	f004 f92a 	bl	800b788 <GPIO_ResetBits>
	return;
 8007534:	bf00      	nop
}
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	6039      	str	r1, [r7, #0]
 8007546:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8007548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800754c:	2b00      	cmp	r3, #0
 800754e:	da0b      	bge.n	8007568 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8007550:	490d      	ldr	r1, [pc, #52]	; (8007588 <NVIC_SetPriority+0x4c>)
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	f003 030f 	and.w	r3, r3, #15
 8007558:	3b04      	subs	r3, #4
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	0112      	lsls	r2, r2, #4
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	440b      	add	r3, r1
 8007564:	761a      	strb	r2, [r3, #24]
 8007566:	e009      	b.n	800757c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8007568:	4908      	ldr	r1, [pc, #32]	; (800758c <NVIC_SetPriority+0x50>)
 800756a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	0112      	lsls	r2, r2, #4
 8007574:	b2d2      	uxtb	r2, r2
 8007576:	440b      	add	r3, r1
 8007578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	e000ed00 	.word	0xe000ed00
 800758c:	e000e100 	.word	0xe000e100

08007590 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800759e:	d301      	bcc.n	80075a4 <SysTick_Config+0x14>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e011      	b.n	80075c8 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80075a4:	4b0a      	ldr	r3, [pc, #40]	; (80075d0 <SysTick_Config+0x40>)
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80075ac:	3a01      	subs	r2, #1
 80075ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295
 80075b4:	210f      	movs	r1, #15
 80075b6:	f7ff ffc1 	bl	800753c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80075ba:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <SysTick_Config+0x40>)
 80075bc:	2200      	movs	r2, #0
 80075be:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 80075c0:	4b03      	ldr	r3, [pc, #12]	; (80075d0 <SysTick_Config+0x40>)
 80075c2:	2207      	movs	r2, #7
 80075c4:	601a      	str	r2, [r3, #0]
  return (0);                                                  /* Function successful */
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	e000e010 	.word	0xe000e010

080075d4 <main>:
 void OTG_FS_WKUP_IRQHandler(void);
}

__ALIGN_BEGIN USB_OTG_CORE_HANDLE  USB_OTG_dev __ALIGN_END;

int main(void){
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08c      	sub	sp, #48	; 0x30
 80075d8:	af02      	add	r7, sp, #8
  SysTick_Config(SystemCoreClock/1000);
 80075da:	4b5e      	ldr	r3, [pc, #376]	; (8007754 <main+0x180>)
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	4b5e      	ldr	r3, [pc, #376]	; (8007758 <main+0x184>)
 80075e0:	fba3 1302 	umull	r1, r3, r3, r2
 80075e4:	099b      	lsrs	r3, r3, #6
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff ffd2 	bl	8007590 <SysTick_Config>
  USBD_Init(&USB_OTG_dev, USB_OTG_FS_CORE_ID, &USR_desc, &USBD_CDC_cb, &USR_cb);
 80075ec:	4b5b      	ldr	r3, [pc, #364]	; (800775c <main+0x188>)
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	485b      	ldr	r0, [pc, #364]	; (8007760 <main+0x18c>)
 80075f2:	2101      	movs	r1, #1
 80075f4:	4a5b      	ldr	r2, [pc, #364]	; (8007764 <main+0x190>)
 80075f6:	4b5c      	ldr	r3, [pc, #368]	; (8007768 <main+0x194>)
 80075f8:	f003 f808 	bl	800a60c <USBD_Init>
  STM_EVAL_LEDInit(LED5);
 80075fc:	2002      	movs	r0, #2
 80075fe:	f000 f9b3 	bl	8007968 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED6);
 8007602:	2003      	movs	r0, #3
 8007604:	f000 f9b0 	bl	8007968 <STM_EVAL_LEDInit>
  NRF24 radio;
 8007608:	f107 030c 	add.w	r3, r7, #12
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff fc63 	bl	8006ed8 <_ZN5NRF24C1Ev>
  radio.is_rx=false;
 8007612:	2300      	movs	r3, #0
 8007614:	743b      	strb	r3, [r7, #16]
  radio.Config();
 8007616:	f107 030c 	add.w	r3, r7, #12
 800761a:	4618      	mov	r0, r3
 800761c:	f7ff fc80 	bl	8006f20 <_ZN5NRF246ConfigEv>
  radio.NRF_CE->Set();
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff ff6a 	bl	80074fc <_ZN4GPIO3SetEv>
  while (1)
  {
	int i=0;
 8007628:	2300      	movs	r3, #0
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t buf[] = {0,0,0,0,0,0};
 800762c:	2300      	movs	r3, #0
 800762e:	713b      	strb	r3, [r7, #4]
 8007630:	2300      	movs	r3, #0
 8007632:	717b      	strb	r3, [r7, #5]
 8007634:	2300      	movs	r3, #0
 8007636:	71bb      	strb	r3, [r7, #6]
 8007638:	2300      	movs	r3, #0
 800763a:	71fb      	strb	r3, [r7, #7]
 800763c:	2300      	movs	r3, #0
 800763e:	723b      	strb	r3, [r7, #8]
 8007640:	2300      	movs	r3, #0
 8007642:	727b      	strb	r3, [r7, #9]
	uint8_t symbol;
	while(i<6){
 8007644:	e01f      	b.n	8007686 <main+0xb2>
	  if(VCP_get_char(&symbol)){
 8007646:	1cfb      	adds	r3, r7, #3
 8007648:	4618      	mov	r0, r3
 800764a:	f003 faeb 	bl	800ac24 <VCP_get_char>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	bf0c      	ite	eq
 8007654:	2300      	moveq	r3, #0
 8007656:	2301      	movne	r3, #1
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d013      	beq.n	8007686 <main+0xb2>
		if((symbol=='a')&&(i==0)){
 800765e:	78fb      	ldrb	r3, [r7, #3]
 8007660:	2b61      	cmp	r3, #97	; 0x61
 8007662:	d105      	bne.n	8007670 <main+0x9c>
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	2b00      	cmp	r3, #0
 8007668:	d102      	bne.n	8007670 <main+0x9c>
	      i=1;
 800766a:	2301      	movs	r3, #1
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
 800766e:	e00a      	b.n	8007686 <main+0xb2>
		}
		else if(i>0){
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	2b00      	cmp	r3, #0
 8007674:	dd07      	ble.n	8007686 <main+0xb2>
		  buf[i]=symbol;
 8007676:	78fa      	ldrb	r2, [r7, #3]
 8007678:	1d39      	adds	r1, r7, #4
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	440b      	add	r3, r1
 800767e:	701a      	strb	r2, [r3, #0]
		  i=i+1;
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	3301      	adds	r3, #1
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
  while (1)
  {
	int i=0;
	uint8_t buf[] = {0,0,0,0,0,0};
	uint8_t symbol;
	while(i<6){
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	2b05      	cmp	r3, #5
 800768a:	dddc      	ble.n	8007646 <main+0x72>
		  buf[i]=symbol;
		  i=i+1;
		}
	  }
	}
	buf[0]='a';
 800768c:	2361      	movs	r3, #97	; 0x61
 800768e:	713b      	strb	r3, [r7, #4]
	VCP_send_buffer(buf, 5);
 8007690:	1d3b      	adds	r3, r7, #4
 8007692:	4618      	mov	r0, r3
 8007694:	2105      	movs	r1, #5
 8007696:	f003 fa4f 	bl	800ab38 <VCP_send_buffer>
    radio.WritePayload(buf, 6);
 800769a:	f107 020c 	add.w	r2, r7, #12
 800769e:	1d3b      	adds	r3, r7, #4
 80076a0:	4610      	mov	r0, r2
 80076a2:	4619      	mov	r1, r3
 80076a4:	2206      	movs	r2, #6
 80076a6:	f7ff fd97 	bl	80071d8 <_ZN5NRF2412WritePayloadEPhi>
	radio.NRF_CE->Set();
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff ff25 	bl	80074fc <_ZN4GPIO3SetEv>
    int counter;
	STM_EVAL_LEDToggle(LED5);
 80076b2:	2002      	movs	r0, #2
 80076b4:	f000 f986 	bl	80079c4 <STM_EVAL_LEDToggle>
    while(radio.TxEmpty()!=0){
 80076b8:	e00b      	b.n	80076d2 <main+0xfe>
      counter++;
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	3301      	adds	r3, #1
 80076be:	623b      	str	r3, [r7, #32]
      if(counter==0xeeee2){
 80076c0:	6a3a      	ldr	r2, [r7, #32]
 80076c2:	4b2a      	ldr	r3, [pc, #168]	; (800776c <main+0x198>)
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d104      	bne.n	80076d2 <main+0xfe>
    	radio.FlushTx();
 80076c8:	f107 030c 	add.w	r3, r7, #12
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff fdff 	bl	80072d0 <_ZN5NRF247FlushTxEv>
	VCP_send_buffer(buf, 5);
    radio.WritePayload(buf, 6);
	radio.NRF_CE->Set();
    int counter;
	STM_EVAL_LEDToggle(LED5);
    while(radio.TxEmpty()!=0){
 80076d2:	f107 030c 	add.w	r3, r7, #12
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7ff fea2 	bl	8007420 <_ZN5NRF247TxEmptyEv>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bf0c      	ite	eq
 80076e2:	2300      	moveq	r3, #0
 80076e4:	2301      	movne	r3, #1
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e6      	bne.n	80076ba <main+0xe6>
      counter++;
      if(counter==0xeeee2){
    	radio.FlushTx();
      }
    }
    if(radio.DataSent()){
 80076ec:	f107 030c 	add.w	r3, r7, #12
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7ff fe45 	bl	8007380 <_ZN5NRF248DataSentEv>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	bf0c      	ite	eq
 80076fc:	2300      	moveq	r3, #0
 80076fe:	2301      	movne	r3, #1
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d007      	beq.n	8007716 <main+0x142>
	  radio.CleanDataSent();
 8007706:	f107 030c 	add.w	r3, r7, #12
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff fe60 	bl	80073d0 <_ZN5NRF2413CleanDataSentEv>
	  STM_EVAL_LEDToggle(LED6);
 8007710:	2003      	movs	r0, #3
 8007712:	f000 f957 	bl	80079c4 <STM_EVAL_LEDToggle>
	}
	if(radio.MaxRt()){
 8007716:	f107 030c 	add.w	r3, r7, #12
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff fe44 	bl	80073a8 <_ZN5NRF245MaxRtEv>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	bf0c      	ite	eq
 8007726:	2300      	moveq	r3, #0
 8007728:	2301      	movne	r3, #1
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00c      	beq.n	800774a <main+0x176>
	  radio.CleanMaxRt();
 8007730:	f107 030c 	add.w	r3, r7, #12
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff fe5f 	bl	80073f8 <_ZN5NRF2410CleanMaxRtEv>
	  radio.FlushTx();
 800773a:	f107 030c 	add.w	r3, r7, #12
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff fdc6 	bl	80072d0 <_ZN5NRF247FlushTxEv>
	  STM_EVAL_LEDToggle(LED5);
 8007744:	2002      	movs	r0, #2
 8007746:	f000 f93d 	bl	80079c4 <STM_EVAL_LEDToggle>
	}
	radio.NRF_CE->Reset();
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff fee5 	bl	800751c <_ZN4GPIO5ResetEv>
  }
 8007752:	e769      	b.n	8007628 <main+0x54>
 8007754:	20000000 	.word	0x20000000
 8007758:	10624dd3 	.word	0x10624dd3
 800775c:	200000e4 	.word	0x200000e4
 8007760:	20000660 	.word	0x20000660
 8007764:	20000100 	.word	0x20000100
 8007768:	200000b8 	.word	0x200000b8
 800776c:	000eeee2 	.word	0x000eeee2

08007770 <SysTick_Handler>:
}

extern "C"{
  void SysTick_Handler(void){
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
    TimingDelay_Decrement();
 8007774:	f000 f802 	bl	800777c <_Z21TimingDelay_Decrementv>
  }
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop

0800777c <_Z21TimingDelay_Decrementv>:
}

void TimingDelay_Decrement(void){
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
  if(TimingDelay != 0x00){
 8007780:	4b08      	ldr	r3, [pc, #32]	; (80077a4 <_Z21TimingDelay_Decrementv+0x28>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	bf0c      	ite	eq
 8007788:	2300      	moveq	r3, #0
 800778a:	2301      	movne	r3, #1
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d004      	beq.n	800779c <_Z21TimingDelay_Decrementv+0x20>
    TimingDelay--;
 8007792:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <_Z21TimingDelay_Decrementv+0x28>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	1e5a      	subs	r2, r3, #1
 8007798:	4b02      	ldr	r3, [pc, #8]	; (80077a4 <_Z21TimingDelay_Decrementv+0x28>)
 800779a:	601a      	str	r2, [r3, #0]
  }
}
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	2000065c 	.word	0x2000065c

080077a8 <OTG_FS_IRQHandler>:
void Delay_ms(uint32_t time_ms){
  TimingDelay = time_ms;
  while(TimingDelay != 0);
}
void OTG_FS_IRQHandler(void){
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
  USBD_OTG_ISR_Handler (&USB_OTG_dev);
 80077ac:	4801      	ldr	r0, [pc, #4]	; (80077b4 <OTG_FS_IRQHandler+0xc>)
 80077ae:	f000 f927 	bl	8007a00 <USBD_OTG_ISR_Handler>
}
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	20000660 	.word	0x20000660

080077b8 <OTG_FS_WKUP_IRQHandler>:

void OTG_FS_WKUP_IRQHandler(void){
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  if(USB_OTG_dev.cfg.low_power)
 80077bc:	4b09      	ldr	r3, [pc, #36]	; (80077e4 <OTG_FS_WKUP_IRQHandler+0x2c>)
 80077be:	7a9b      	ldrb	r3, [r3, #10]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00a      	beq.n	80077da <OTG_FS_WKUP_IRQHandler+0x22>
  {
    *(uint32_t *)(0xE000ED10) &= 0xFFFFFFF9 ;
 80077c4:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <OTG_FS_WKUP_IRQHandler+0x30>)
 80077c6:	4a08      	ldr	r2, [pc, #32]	; (80077e8 <OTG_FS_WKUP_IRQHandler+0x30>)
 80077c8:	6812      	ldr	r2, [r2, #0]
 80077ca:	f022 0206 	bic.w	r2, r2, #6
 80077ce:	601a      	str	r2, [r3, #0]
    SystemInit();
 80077d0:	f7ff f990 	bl	8006af4 <SystemInit>
    USB_OTG_UngateClock(&USB_OTG_dev);
 80077d4:	4803      	ldr	r0, [pc, #12]	; (80077e4 <OTG_FS_WKUP_IRQHandler+0x2c>)
 80077d6:	f002 f9c1 	bl	8009b5c <USB_OTG_UngateClock>
  }
  EXTI_ClearITPendingBit(EXTI_Line18);
 80077da:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80077de:	f004 f827 	bl	800b830 <EXTI_ClearITPendingBit>
}
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	20000660 	.word	0x20000660
 80077e8:	e000ed10 	.word	0xe000ed10

080077ec <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
extern "C" void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 80077f6:	bf00      	nop
}
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop

08007804 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
extern "C" uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8007804:	b480      	push	{r7}
 8007806:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8007808:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800780c:	4618      	mov	r0, r3
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop

08007818 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8007818:	b580      	push	{r7, lr}
 800781a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800781c:	4b37      	ldr	r3, [pc, #220]	; (80078fc <Audio_MAL_IRQHandler+0xe4>)
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	4b37      	ldr	r3, [pc, #220]	; (8007900 <Audio_MAL_IRQHandler+0xe8>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4610      	mov	r0, r2
 8007826:	4619      	mov	r1, r3
 8007828:	f004 f89a 	bl	800b960 <DMA_GetFlagStatus>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d062      	beq.n	80078f8 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8007832:	4b34      	ldr	r3, [pc, #208]	; (8007904 <Audio_MAL_IRQHandler+0xec>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d04a      	beq.n	80078d0 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800783a:	bf00      	nop
 800783c:	4b2f      	ldr	r3, [pc, #188]	; (80078fc <Audio_MAL_IRQHandler+0xe4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4618      	mov	r0, r3
 8007842:	f004 f875 	bl	800b930 <DMA_GetCmdStatus>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1f7      	bne.n	800783c <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 800784c:	4b2b      	ldr	r3, [pc, #172]	; (80078fc <Audio_MAL_IRQHandler+0xe4>)
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	4b2b      	ldr	r3, [pc, #172]	; (8007900 <Audio_MAL_IRQHandler+0xe8>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4610      	mov	r0, r2
 8007856:	4619      	mov	r1, r3
 8007858:	f004 f8be 	bl	800b9d8 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 800785c:	4b2a      	ldr	r3, [pc, #168]	; (8007908 <Audio_MAL_IRQHandler+0xf0>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	4b2a      	ldr	r3, [pc, #168]	; (800790c <Audio_MAL_IRQHandler+0xf4>)
 8007864:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8007866:	4b27      	ldr	r3, [pc, #156]	; (8007904 <Audio_MAL_IRQHandler+0xec>)
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800786e:	429a      	cmp	r2, r3
 8007870:	bf28      	it	cs
 8007872:	461a      	movcs	r2, r3
 8007874:	4b25      	ldr	r3, [pc, #148]	; (800790c <Audio_MAL_IRQHandler+0xf4>)
 8007876:	611a      	str	r2, [r3, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8007878:	4b20      	ldr	r3, [pc, #128]	; (80078fc <Audio_MAL_IRQHandler+0xe4>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4618      	mov	r0, r3
 800787e:	4923      	ldr	r1, [pc, #140]	; (800790c <Audio_MAL_IRQHandler+0xf4>)
 8007880:	f003 ffe4 	bl	800b84c <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8007884:	4b1d      	ldr	r3, [pc, #116]	; (80078fc <Audio_MAL_IRQHandler+0xe4>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4618      	mov	r0, r3
 800788a:	2101      	movs	r1, #1
 800788c:	f004 f834 	bl	800b8f8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8007890:	4b1d      	ldr	r3, [pc, #116]	; (8007908 <Audio_MAL_IRQHandler+0xf0>)
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	4b1b      	ldr	r3, [pc, #108]	; (8007904 <Audio_MAL_IRQHandler+0xec>)
 8007896:	6819      	ldr	r1, [r3, #0]
 8007898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800789c:	4299      	cmp	r1, r3
 800789e:	bf38      	it	cc
 80078a0:	460b      	movcc	r3, r1
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	441a      	add	r2, r3
 80078a6:	4b18      	ldr	r3, [pc, #96]	; (8007908 <Audio_MAL_IRQHandler+0xf0>)
 80078a8:	601a      	str	r2, [r3, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80078aa:	4b16      	ldr	r3, [pc, #88]	; (8007904 <Audio_MAL_IRQHandler+0xec>)
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4b15      	ldr	r3, [pc, #84]	; (8007904 <Audio_MAL_IRQHandler+0xec>)
 80078b0:	6819      	ldr	r1, [r3, #0]
 80078b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078b6:	4299      	cmp	r1, r3
 80078b8:	bf38      	it	cc
 80078ba:	460b      	movcc	r3, r1
 80078bc:	1ad2      	subs	r2, r2, r3
 80078be:	4b11      	ldr	r3, [pc, #68]	; (8007904 <Audio_MAL_IRQHandler+0xec>)
 80078c0:	601a      	str	r2, [r3, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80078c2:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <Audio_MAL_IRQHandler+0xe4>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4618      	mov	r0, r3
 80078c8:	2101      	movs	r1, #1
 80078ca:	f004 f815 	bl	800b8f8 <DMA_Cmd>
 80078ce:	e013      	b.n	80078f8 <Audio_MAL_IRQHandler+0xe0>
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80078d0:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <Audio_MAL_IRQHandler+0xe4>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4618      	mov	r0, r3
 80078d6:	2100      	movs	r1, #0
 80078d8:	f004 f80e 	bl	800b8f8 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <Audio_MAL_IRQHandler+0xe4>)
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	4b07      	ldr	r3, [pc, #28]	; (8007900 <Audio_MAL_IRQHandler+0xe8>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4610      	mov	r0, r2
 80078e6:	4619      	mov	r1, r3
 80078e8:	f004 f876 	bl	800b9d8 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80078ec:	4b06      	ldr	r3, [pc, #24]	; (8007908 <Audio_MAL_IRQHandler+0xf0>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4618      	mov	r0, r3
 80078f2:	2100      	movs	r1, #0
 80078f4:	f7ff ff7a 	bl	80077ec <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	2000000c 	.word	0x2000000c
 8007900:	20000010 	.word	0x20000010
 8007904:	20000004 	.word	0x20000004
 8007908:	200014d0 	.word	0x200014d0
 800790c:	20001510 	.word	0x20001510

08007910 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8007914:	f7ff ff80 	bl	8007818 <Audio_MAL_IRQHandler>
}
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop

0800791c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8007920:	f7ff ff7a 	bl	8007818 <Audio_MAL_IRQHandler>
}
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop

08007928 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 800792c:	480c      	ldr	r0, [pc, #48]	; (8007960 <SPI3_IRQHandler+0x38>)
 800792e:	2102      	movs	r1, #2
 8007930:	f003 fdfa 	bl	800b528 <SPI_I2S_GetFlagStatus>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d011      	beq.n	800795e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800793a:	4b0a      	ldr	r3, [pc, #40]	; (8007964 <SPI3_IRQHandler+0x3c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b02      	cmp	r3, #2
 8007940:	d106      	bne.n	8007950 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8007942:	f7ff ff5f 	bl	8007804 <EVAL_AUDIO_GetSampleCallBack>
 8007946:	4603      	mov	r3, r0
 8007948:	2004      	movs	r0, #4
 800794a:	4619      	mov	r1, r3
 800794c:	f004 f872 	bl	800ba34 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8007950:	f7ff ff58 	bl	8007804 <EVAL_AUDIO_GetSampleCallBack>
 8007954:	4603      	mov	r3, r0
 8007956:	4802      	ldr	r0, [pc, #8]	; (8007960 <SPI3_IRQHandler+0x38>)
 8007958:	4619      	mov	r1, r3
 800795a:	f003 fdd7 	bl	800b50c <SPI_I2S_SendData>
  }
}
 800795e:	bd80      	pop	{r7, pc}
 8007960:	40003c00 	.word	0x40003c00
 8007964:	20000008 	.word	0x20000008

08007968 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8007972:	79fa      	ldrb	r2, [r7, #7]
 8007974:	4b10      	ldr	r3, [pc, #64]	; (80079b8 <STM_EVAL_LEDInit+0x50>)
 8007976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797a:	4618      	mov	r0, r3
 800797c:	2101      	movs	r1, #1
 800797e:	f003 fdef 	bl	800b560 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8007982:	79fa      	ldrb	r2, [r7, #7]
 8007984:	4b0d      	ldr	r3, [pc, #52]	; (80079bc <STM_EVAL_LEDInit+0x54>)
 8007986:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800798a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800798c:	2301      	movs	r3, #1
 800798e:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007990:	2300      	movs	r3, #0
 8007992:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8007994:	2301      	movs	r3, #1
 8007996:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007998:	2302      	movs	r3, #2
 800799a:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 800799c:	79fa      	ldrb	r2, [r7, #7]
 800799e:	4b08      	ldr	r3, [pc, #32]	; (80079c0 <STM_EVAL_LEDInit+0x58>)
 80079a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079a4:	f107 0308 	add.w	r3, r7, #8
 80079a8:	4610      	mov	r0, r2
 80079aa:	4619      	mov	r1, r3
 80079ac:	f003 fe50 	bl	800b650 <GPIO_Init>
}
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	0800e824 	.word	0x0800e824
 80079bc:	0800e81c 	.word	0x0800e81c
 80079c0:	20000014 	.word	0x20000014

080079c4 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	4603      	mov	r3, r0
 80079cc:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80079ce:	79fa      	ldrb	r2, [r7, #7]
 80079d0:	4b09      	ldr	r3, [pc, #36]	; (80079f8 <STM_EVAL_LEDToggle+0x34>)
 80079d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d6:	79f9      	ldrb	r1, [r7, #7]
 80079d8:	4a07      	ldr	r2, [pc, #28]	; (80079f8 <STM_EVAL_LEDToggle+0x34>)
 80079da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80079de:	6951      	ldr	r1, [r2, #20]
 80079e0:	79f8      	ldrb	r0, [r7, #7]
 80079e2:	4a06      	ldr	r2, [pc, #24]	; (80079fc <STM_EVAL_LEDToggle+0x38>)
 80079e4:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 80079e8:	404a      	eors	r2, r1
 80079ea:	615a      	str	r2, [r3, #20]
}
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	20000014 	.word	0x20000014
 80079fc:	0800e81c 	.word	0x0800e81c

08007a00 <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	617b      	str	r3, [r7, #20]
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 fa97 	bl	8008f40 <USB_OTG_IsDeviceMode>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 809c 	beq.w	8007b52 <USBD_OTG_ISR_Handler+0x152>
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f001 faa2 	bl	8008f64 <USB_OTG_ReadCoreItr>
 8007a20:	4603      	mov	r3, r0
 8007a22:	613b      	str	r3, [r7, #16]
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <USBD_OTG_ISR_Handler+0x2e>
    {
      return 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e092      	b.n	8007b54 <USBD_OTG_ISR_Handler+0x154>
    }
    
    if (gintr_status.b.outepintr)
 8007a2e:	7cbb      	ldrb	r3, [r7, #18]
 8007a30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d006      	beq.n	8007a48 <USBD_OTG_ISR_Handler+0x48>
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fa12 	bl	8007e64 <DCD_HandleOutEP_ISR>
 8007a40:	4603      	mov	r3, r0
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]
    }    
    
    if (gintr_status.b.inepint)
 8007a48:	7cbb      	ldrb	r3, [r7, #18]
 8007a4a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d006      	beq.n	8007a62 <USBD_OTG_ISR_Handler+0x62>
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f90f 	bl	8007c78 <DCD_HandleInEP_ISR>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.modemismatch)
 8007a62:	7c3b      	ldrb	r3, [r7, #16]
 8007a64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d009      	beq.n	8007a82 <USBD_OTG_ISR_Handler+0x82>
    {
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]
      gintsts.b.modemismatch = 1;
 8007a72:	7b3b      	ldrb	r3, [r7, #12]
 8007a74:	f043 0302 	orr.w	r3, r3, #2
 8007a78:	733b      	strb	r3, [r7, #12]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	615a      	str	r2, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 8007a82:	7cfb      	ldrb	r3, [r7, #19]
 8007a84:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d006      	beq.n	8007a9c <USBD_OTG_ISR_Handler+0x9c>
    {
      retval |= DCD_HandleResume_ISR(pdev);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f864 	bl	8007b5c <DCD_HandleResume_ISR>
 8007a94:	4603      	mov	r3, r0
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.usbsuspend)
 8007a9c:	7c7b      	ldrb	r3, [r7, #17]
 8007a9e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d006      	beq.n	8007ab6 <USBD_OTG_ISR_Handler+0xb6>
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f897 	bl	8007bdc <DCD_HandleUSBSuspend_ISR>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	617b      	str	r3, [r7, #20]
    }
    if (gintr_status.b.sofintr)
 8007ab6:	7c3b      	ldrb	r3, [r7, #16]
 8007ab8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d006      	beq.n	8007ad0 <USBD_OTG_ISR_Handler+0xd0>
    {
      retval |= DCD_HandleSof_ISR(pdev);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa8a 	bl	8007fdc <DCD_HandleSof_ISR>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 8007ad0:	7c3b      	ldrb	r3, [r7, #16]
 8007ad2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d006      	beq.n	8007aea <USBD_OTG_ISR_Handler+0xea>
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fa97 	bl	8008010 <DCD_HandleRxStatusQueueLevel_ISR>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.usbreset)
 8007aea:	7c7b      	ldrb	r3, [r7, #17]
 8007aec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d006      	beq.n	8007b04 <USBD_OTG_ISR_Handler+0x104>
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fb7e 	bl	80081f8 <DCD_HandleUsbReset_ISR>
 8007afc:	4603      	mov	r3, r0
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	617b      	str	r3, [r7, #20]
      
    }
    if (gintr_status.b.enumdone)
 8007b04:	7c7b      	ldrb	r3, [r7, #17]
 8007b06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d006      	beq.n	8007b1e <USBD_OTG_ISR_Handler+0x11e>
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fc13 	bl	800833c <DCD_HandleEnumDone_ISR>
 8007b16:	4603      	mov	r3, r0
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.incomplisoin)
 8007b1e:	7cbb      	ldrb	r3, [r7, #18]
 8007b20:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d006      	beq.n	8007b38 <USBD_OTG_ISR_Handler+0x138>
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fc42 	bl	80083b4 <DCD_IsoINIncomplete_ISR>
 8007b30:	4603      	mov	r3, r0
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	617b      	str	r3, [r7, #20]
    }

    if (gintr_status.b.incomplisoout)
 8007b38:	7cbb      	ldrb	r3, [r7, #18]
 8007b3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d006      	beq.n	8007b52 <USBD_OTG_ISR_Handler+0x152>
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fc4f 	bl	80083e8 <DCD_IsoOUTIncomplete_ISR>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	617b      	str	r3, [r7, #20]
    {
      retval |= DCD_OTG_ISR(pdev);
    }   
#endif    
  }
  return retval;
 8007b52:	697b      	ldr	r3, [r7, #20]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <DCD_HandleResume_ISR>:
*                 remote Wake-up sequence
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleResume_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	7a9b      	ldrb	r3, [r3, #10]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d011      	beq.n	8007b90 <DCD_HandleResume_ISR+0x34>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	60fb      	str	r3, [r7, #12]
    power.b.gatehclk = 0;
 8007b76:	7b3b      	ldrb	r3, [r7, #12]
 8007b78:	f36f 0341 	bfc	r3, #1, #1
 8007b7c:	733b      	strb	r3, [r7, #12]
    power.b.stoppclk = 0;
 8007b7e:	7b3b      	ldrb	r3, [r7, #12]
 8007b80:	f36f 0300 	bfc	r3, #0, #1
 8007b84:	733b      	strb	r3, [r7, #12]
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	601a      	str	r2, [r3, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
 8007b90:	2300      	movs	r3, #0
 8007b92:	613b      	str	r3, [r7, #16]
  devctl.b.rmtwkupsig = 1;
 8007b94:	7c3b      	ldrb	r3, [r7, #16]
 8007b96:	f043 0301 	orr.w	r3, r3, #1
 8007b9a:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6912      	ldr	r2, [r2, #16]
 8007ba4:	6851      	ldr	r1, [r2, #4]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	43d2      	mvns	r2, r2
 8007baa:	400a      	ands	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 8007bae:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <DCD_HandleResume_ISR+0x7c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	617b      	str	r3, [r7, #20]
  gintsts.b.wkupintr = 1;
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc2:	75fb      	strb	r3, [r7, #23]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	615a      	str	r2, [r3, #20]
  return 1;
 8007bcc:	2301      	movs	r3, #1
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000050 	.word	0x20000050

08007bdc <DCD_HandleUSBSuspend_ISR>:
*         Indicates that SUSPEND state has been detected on the USB
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  
  USBD_DCD_INT_fops->Suspend (pdev);      
 8007be4:	4b22      	ldr	r3, [pc, #136]	; (8007c70 <DCD_HandleUSBSuspend_ISR+0x94>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	4798      	blx	r3
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	60fb      	str	r3, [r7, #12]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	617b      	str	r3, [r7, #20]
  gintsts.b.usbsuspend = 1;
 8007bfa:	7d7b      	ldrb	r3, [r7, #21]
 8007bfc:	f043 0308 	orr.w	r3, r3, #8
 8007c00:	757b      	strb	r3, [r7, #21]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	615a      	str	r2, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	7a9b      	ldrb	r3, [r3, #10]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d029      	beq.n	8007c66 <DCD_HandleUSBSuspend_ISR+0x8a>
 8007c12:	7b3b      	ldrb	r3, [r7, #12]
 8007c14:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d123      	bne.n	8007c66 <DCD_HandleUSBSuspend_ISR+0x8a>
  {
	/*  switch-off the clocks */
    power.d32 = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	613b      	str	r3, [r7, #16]
    power.b.stoppclk = 1;
 8007c22:	7c3b      	ldrb	r3, [r7, #16]
 8007c24:	f043 0301 	orr.w	r3, r3, #1
 8007c28:	743b      	strb	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8007c36:	6811      	ldr	r1, [r2, #0]
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	601a      	str	r2, [r3, #0]
    
    power.b.gatehclk = 1;
 8007c3e:	7c3b      	ldrb	r3, [r7, #16]
 8007c40:	f043 0302 	orr.w	r3, r3, #2
 8007c44:	743b      	strb	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8007c52:	6811      	ldr	r1, [r2, #0]
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	601a      	str	r2, [r3, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 8007c5a:	4b06      	ldr	r3, [pc, #24]	; (8007c74 <DCD_HandleUSBSuspend_ISR+0x98>)
 8007c5c:	4a05      	ldr	r2, [pc, #20]	; (8007c74 <DCD_HandleUSBSuspend_ISR+0x98>)
 8007c5e:	6912      	ldr	r2, [r2, #16]
 8007c60:	f042 0206 	orr.w	r2, r2, #6
 8007c64:	611a      	str	r2, [r3, #16]
  }
  return 1;
 8007c66:	2301      	movs	r3, #1
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3718      	adds	r7, #24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	20000050 	.word	0x20000050
 8007c74:	e000ed00 	.word	0xe000ed00

08007c78 <DCD_HandleInEP_ISR>:
*         Indicates that an IN EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	613b      	str	r3, [r7, #16]
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
 8007c84:	2300      	movs	r3, #0
 8007c86:	60bb      	str	r3, [r7, #8]
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 ff19 	bl	8009ac0 <USB_OTG_ReadDevAllInEPItr>
 8007c8e:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 8007c90:	e0dc      	b.n	8007e4c <DCD_HandleInEP_ISR+0x1d4>
  {
    if (ep_intr&0x1) /* In ITR */
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 80d1 	beq.w	8007e40 <DCD_HandleInEP_ISR+0x1c8>
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	f000 fbb9 	bl	800841c <DCD_ReadDevInEP>
 8007caa:	4603      	mov	r3, r0
 8007cac:	60bb      	str	r3, [r7, #8]
      if ( diepint.b.xfercompl )
 8007cae:	7a3b      	ldrb	r3, [r7, #8]
 8007cb0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d032      	beq.n	8007d20 <DCD_HandleInEP_ISR+0xa8>
      {
        fifoemptymsk = 0x1 << epnum;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	60fb      	str	r3, [r7, #12]
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	6912      	ldr	r2, [r2, #16]
 8007ccc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	43d2      	mvns	r2, r2
 8007cd2:	400a      	ands	r2, r1
 8007cd4:	635a      	str	r2, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60bb      	str	r3, [r7, #8]
 8007cda:	7a3b      	ldrb	r3, [r7, #8]
 8007cdc:	f043 0301 	orr.w	r3, r3, #1
 8007ce0:	723b      	strb	r3, [r7, #8]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	609a      	str	r2, [r3, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8007cf2:	4b5b      	ldr	r3, [pc, #364]	; (8007e60 <DCD_HandleInEP_ISR+0x1e8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	b2d2      	uxtb	r2, r2
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	4611      	mov	r1, r2
 8007d00:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	78db      	ldrb	r3, [r3, #3]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d10a      	bne.n	8007d20 <DCD_HandleInEP_ISR+0xa8>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d107      	bne.n	8007d20 <DCD_HandleInEP_ISR+0xa8>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d102      	bne.n	8007d20 <DCD_HandleInEP_ISR+0xa8>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 fee6 	bl	8009aec <USB_OTG_EP0_OutStart>
          }
        }           
      }
      if ( diepint.b.ahberr )
 8007d20:	7a3b      	ldrb	r3, [r7, #8]
 8007d22:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00d      	beq.n	8007d48 <DCD_HandleInEP_ISR+0xd0>
      {
        CLEAR_IN_EP_INTR(epnum, ahberr);
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60bb      	str	r3, [r7, #8]
 8007d30:	7a3b      	ldrb	r3, [r7, #8]
 8007d32:	f043 0304 	orr.w	r3, r3, #4
 8007d36:	723b      	strb	r3, [r7, #8]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	609a      	str	r2, [r3, #8]
      }
      if ( diepint.b.timeout )
 8007d48:	7a3b      	ldrb	r3, [r7, #8]
 8007d4a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00d      	beq.n	8007d70 <DCD_HandleInEP_ISR+0xf8>
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 8007d54:	2300      	movs	r3, #0
 8007d56:	60bb      	str	r3, [r7, #8]
 8007d58:	7a3b      	ldrb	r3, [r7, #8]
 8007d5a:	f043 0308 	orr.w	r3, r3, #8
 8007d5e:	723b      	strb	r3, [r7, #8]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	3304      	adds	r3, #4
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.intktxfemp)
 8007d70:	7a3b      	ldrb	r3, [r7, #8]
 8007d72:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00d      	beq.n	8007d98 <DCD_HandleInEP_ISR+0x120>
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60bb      	str	r3, [r7, #8]
 8007d80:	7a3b      	ldrb	r3, [r7, #8]
 8007d82:	f043 0310 	orr.w	r3, r3, #16
 8007d86:	723b      	strb	r3, [r7, #8]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.intknepmis)
 8007d98:	7a3b      	ldrb	r3, [r7, #8]
 8007d9a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00d      	beq.n	8007dc0 <DCD_HandleInEP_ISR+0x148>
      {
        CLEAR_IN_EP_INTR(epnum, intknepmis);
 8007da4:	2300      	movs	r3, #0
 8007da6:	60bb      	str	r3, [r7, #8]
 8007da8:	7a3b      	ldrb	r3, [r7, #8]
 8007daa:	f043 0320 	orr.w	r3, r3, #32
 8007dae:	723b      	strb	r3, [r7, #8]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	3304      	adds	r3, #4
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 8007dc0:	7a3b      	ldrb	r3, [r7, #8]
 8007dc2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00d      	beq.n	8007de8 <DCD_HandleInEP_ISR+0x170>
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60bb      	str	r3, [r7, #8]
 8007dd0:	7a3b      	ldrb	r3, [r7, #8]
 8007dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dd6:	723b      	strb	r3, [r7, #8]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	3304      	adds	r3, #4
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	609a      	str	r2, [r3, #8]
      }
      if ( diepint.b.epdisabled )
 8007de8:	7a3b      	ldrb	r3, [r7, #8]
 8007dea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00d      	beq.n	8007e10 <DCD_HandleInEP_ISR+0x198>
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 8007df4:	2300      	movs	r3, #0
 8007df6:	60bb      	str	r3, [r7, #8]
 8007df8:	7a3b      	ldrb	r3, [r7, #8]
 8007dfa:	f043 0302 	orr.w	r3, r3, #2
 8007dfe:	723b      	strb	r3, [r7, #8]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	3304      	adds	r3, #4
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	609a      	str	r2, [r3, #8]
      }       
      if (diepint.b.emptyintr)
 8007e10:	7a3b      	ldrb	r3, [r7, #8]
 8007e12:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d011      	beq.n	8007e40 <DCD_HandleInEP_ISR+0x1c8>
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	6939      	ldr	r1, [r7, #16]
 8007e20:	f000 f978 	bl	8008114 <DCD_WriteEmptyTxFifo>
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 8007e24:	2300      	movs	r3, #0
 8007e26:	60bb      	str	r3, [r7, #8]
 8007e28:	7a3b      	ldrb	r3, [r7, #8]
 8007e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2e:	723b      	strb	r3, [r7, #8]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	3304      	adds	r3, #4
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	3301      	adds	r3, #1
 8007e44:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	085b      	lsrs	r3, r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]
  uint32_t epnum = 0;
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
  
  while ( ep_intr )
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f47f af1f 	bne.w	8007c92 <DCD_HandleInEP_ISR+0x1a>
    }
    epnum++;
    ep_intr >>= 1;
  }
  
  return 1;
 8007e54:	2301      	movs	r3, #1
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000050 	.word	0x20000050

08007e64 <DCD_HandleOutEP_ISR>:
*         Indicates that an OUT EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	613b      	str	r3, [r7, #16]
  
  doepint.d32 = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 fdf1 	bl	8009a5c <USB_OTG_ReadDevAllOutEp_itr>
 8007e7a:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 8007e7c:	e0a3      	b.n	8007fc6 <DCD_HandleOutEP_ISR+0x162>
  {
    if (ep_intr&0x1)
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 8098 	beq.w	8007fba <DCD_HandleOutEP_ISR+0x156>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	4619      	mov	r1, r3
 8007e92:	f001 fdf9 	bl	8009a88 <USB_OTG_ReadDevOutEP_itr>
 8007e96:	4603      	mov	r3, r0
 8007e98:	60fb      	str	r3, [r7, #12]
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 8007e9a:	7b3b      	ldrb	r3, [r7, #12]
 8007e9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d048      	beq.n	8007f38 <DCD_HandleOutEP_ISR+0xd4>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	7b3b      	ldrb	r3, [r7, #12]
 8007eac:	f043 0301 	orr.w	r3, r3, #1
 8007eb0:	733b      	strb	r3, [r7, #12]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	3314      	adds	r3, #20
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	609a      	str	r2, [r3, #8]
        if (pdev->cfg.dma_enable == 1)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	78db      	ldrb	r3, [r3, #3]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d11f      	bne.n	8007f0a <DCD_HandleOutEP_ISR+0xa6>
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	3314      	adds	r3, #20
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	60bb      	str	r3, [r7, #8]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8007eda:	6879      	ldr	r1, [r7, #4]
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	440b      	add	r3, r1
 8007ee8:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8007eec:	681a      	ldr	r2, [r3, #0]
            deptsiz.b.xfersize;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
        if (pdev->cfg.dma_enable == 1)
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8007ef4:	1ad1      	subs	r1, r2, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	00db      	lsls	r3, r3, #3
 8007f02:	4403      	add	r3, r0
 8007f04:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8007f08:	6019      	str	r1, [r3, #0]
            deptsiz.b.xfersize;
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 8007f0a:	4b33      	ldr	r3, [pc, #204]	; (8007fd8 <DCD_HandleOutEP_ISR+0x174>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4611      	mov	r1, r2
 8007f18:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	78db      	ldrb	r3, [r3, #3]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d10a      	bne.n	8007f38 <DCD_HandleOutEP_ISR+0xd4>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d107      	bne.n	8007f38 <DCD_HandleOutEP_ISR+0xd4>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8007f2e:	2b05      	cmp	r3, #5
 8007f30:	d102      	bne.n	8007f38 <DCD_HandleOutEP_ISR+0xd4>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 fdda 	bl	8009aec <USB_OTG_EP0_OutStart>
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 8007f38:	7b3b      	ldrb	r3, [r7, #12]
 8007f3a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00d      	beq.n	8007f60 <DCD_HandleOutEP_ISR+0xfc>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 8007f44:	2300      	movs	r3, #0
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	7b3b      	ldrb	r3, [r7, #12]
 8007f4a:	f043 0302 	orr.w	r3, r3, #2
 8007f4e:	733b      	strb	r3, [r7, #12]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	3314      	adds	r3, #20
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	609a      	str	r2, [r3, #8]
      }
      /* AHB Error */
      if ( doepint.b.ahberr )
 8007f60:	7b3b      	ldrb	r3, [r7, #12]
 8007f62:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00d      	beq.n	8007f88 <DCD_HandleOutEP_ISR+0x124>
      {
        CLEAR_OUT_EP_INTR(epnum, ahberr);
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	7b3b      	ldrb	r3, [r7, #12]
 8007f72:	f043 0304 	orr.w	r3, r3, #4
 8007f76:	733b      	strb	r3, [r7, #12]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	3314      	adds	r3, #20
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	609a      	str	r2, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 8007f88:	7b3b      	ldrb	r3, [r7, #12]
 8007f8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d012      	beq.n	8007fba <DCD_HandleOutEP_ISR+0x156>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 8007f94:	4b10      	ldr	r3, [pc, #64]	; (8007fd8 <DCD_HandleOutEP_ISR+0x174>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]
 8007fa2:	7b3b      	ldrb	r3, [r7, #12]
 8007fa4:	f043 0308 	orr.w	r3, r3, #8
 8007fa8:	733b      	strb	r3, [r7, #12]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	3314      	adds	r3, #20
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	085b      	lsrs	r3, r3, #1
 8007fc4:	617b      	str	r3, [r7, #20]
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
  
  while ( ep_intr )
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f47f af58 	bne.w	8007e7e <DCD_HandleOutEP_ISR+0x1a>
      }
    }
    epnum++;
    ep_intr >>= 1;
  }
  return 1;
 8007fce:	2301      	movs	r3, #1
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20000050 	.word	0x20000050

08007fdc <DCD_HandleSof_ISR>:
*         Handles the SOF Interrupts
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 8007fe4:	4b09      	ldr	r3, [pc, #36]	; (800800c <DCD_HandleSof_ISR+0x30>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60fb      	str	r3, [r7, #12]
  GINTSTS.b.sofintr = 1;
 8007ff2:	7b3b      	ldrb	r3, [r7, #12]
 8007ff4:	f043 0308 	orr.w	r3, r3, #8
 8007ff8:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	615a      	str	r2, [r3, #20]
  
  return 1;
 8008002:	2301      	movs	r3, #1
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20000050 	.word	0x20000050

08008010 <DCD_HandleRxStatusQueueLevel_ISR>:
*         Handles the Rx Status Queue Level Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleRxStatusQueueLevel_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  USB_OTG_DRXSTS_TypeDef   status;
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
 8008018:	2300      	movs	r3, #0
 800801a:	613b      	str	r3, [r7, #16]
  int_mask.b.rxstsqlvl = 1;
 800801c:	7c3b      	ldrb	r3, [r7, #16]
 800801e:	f043 0310 	orr.w	r3, r3, #16
 8008022:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	68d2      	ldr	r2, [r2, #12]
 800802c:	6991      	ldr	r1, [r2, #24]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	43d2      	mvns	r2, r2
 8008032:	400a      	ands	r2, r1
 8008034:	619a      	str	r2, [r3, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	60fb      	str	r3, [r7, #12]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 800803e:	7b3b      	ldrb	r3, [r7, #12]
 8008040:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008044:	b2db      	uxtb	r3, r3
 8008046:	461a      	mov	r2, r3
 8008048:	4613      	mov	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	4413      	add	r3, r2
 8008058:	617b      	str	r3, [r7, #20]
  
  switch (status.b.pktsts)
 800805a:	7bbb      	ldrb	r3, [r7, #14]
 800805c:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8008060:	b2db      	uxtb	r3, r3
 8008062:	3b01      	subs	r3, #1
 8008064:	2b05      	cmp	r3, #5
 8008066:	d846      	bhi.n	80080f6 <DCD_HandleRxStatusQueueLevel_ISR+0xe6>
 8008068:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <DCD_HandleRxStatusQueueLevel_ISR+0x60>)
 800806a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806e:	bf00      	nop
 8008070:	080080f7 	.word	0x080080f7
 8008074:	08008089 	.word	0x08008089
 8008078:	080080f7 	.word	0x080080f7
 800807c:	080080f7 	.word	0x080080f7
 8008080:	080080f7 	.word	0x080080f7
 8008084:	080080d3 	.word	0x080080d3
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 8008088:	89bb      	ldrh	r3, [r7, #12]
 800808a:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800808e:	b29b      	uxth	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	d01d      	beq.n	80080d0 <DCD_HandleRxStatusQueueLevel_ISR+0xc0>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	89bb      	ldrh	r3, [r7, #12]
 800809a:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800809e:	b29b      	uxth	r3, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	4611      	mov	r1, r2
 80080a4:	461a      	mov	r2, r3
 80080a6:	f000 fc95 	bl	80089d4 <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	89bb      	ldrh	r3, [r7, #12]
 80080b0:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	441a      	add	r2, r3
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	60da      	str	r2, [r3, #12]
      ep->xfer_count += status.b.bcnt;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	699a      	ldr	r2, [r3, #24]
 80080c0:	89bb      	ldrh	r3, [r7, #12]
 80080c2:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	441a      	add	r2, r3
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	619a      	str	r2, [r3, #24]
    }
    break;
 80080ce:	e013      	b.n	80080f8 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
 80080d0:	e012      	b.n	80080f8 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4619      	mov	r1, r3
 80080dc:	2208      	movs	r2, #8
 80080de:	f000 fc79 	bl	80089d4 <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	699a      	ldr	r2, [r3, #24]
 80080e6:	89bb      	ldrh	r3, [r7, #12]
 80080e8:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	441a      	add	r2, r3
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	619a      	str	r2, [r3, #24]
    break;
 80080f4:	e000      	b.n	80080f8 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
  default:
    break;
 80080f6:	bf00      	nop
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	68d2      	ldr	r2, [r2, #12]
 8008100:	6991      	ldr	r1, [r2, #24]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	430a      	orrs	r2, r1
 8008106:	619a      	str	r2, [r3, #24]
  
  return 1;
 8008108:	2301      	movs	r3, #1
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop

08008114 <DCD_WriteEmptyTxFifo>:
*         check FIFO for the next packet to be loaded
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_WriteEmptyTxFifo(USB_OTG_CORE_HANDLE *pdev, uint32_t epnum)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  USB_OTG_DTXFSTSn_TypeDef  txstatus;
  USB_OTG_EP *ep;
  uint32_t len = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	617b      	str	r3, [r7, #20]
  uint32_t len32b;
  txstatus.d32 = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	60bb      	str	r3, [r7, #8]
  
  ep = &pdev->dev.in_ep[epnum];    
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	4413      	add	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]
  
  len = ep->xfer_len - ep->xfer_count;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	695a      	ldr	r2, [r3, #20]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	617b      	str	r3, [r7, #20]
  
  if (len > ep->maxpacket)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	689a      	ldr	r2, [r3, #8]
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	429a      	cmp	r2, r3
 800814e:	d202      	bcs.n	8008156 <DCD_WriteEmptyTxFifo+0x42>
  {
    len = ep->maxpacket;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	617b      	str	r3, [r7, #20]
  }
  
  len32b = (len + 3) / 4;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	3303      	adds	r3, #3
 800815a:	089b      	lsrs	r3, r3, #2
 800815c:	613b      	str	r3, [r7, #16]
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	3304      	adds	r3, #4
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	60bb      	str	r3, [r7, #8]
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 800816e:	e02e      	b.n	80081ce <DCD_WriteEmptyTxFifo+0xba>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	695a      	ldr	r2, [r3, #20]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	617b      	str	r3, [r7, #20]
    
    if (len > ep->maxpacket)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	429a      	cmp	r2, r3
 8008184:	d202      	bcs.n	800818c <DCD_WriteEmptyTxFifo+0x78>
    {
      len = ep->maxpacket;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	617b      	str	r3, [r7, #20]
    }
    len32b = (len + 3) / 4;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	3303      	adds	r3, #3
 8008190:	089b      	lsrs	r3, r3, #2
 8008192:	613b      	str	r3, [r7, #16]
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	68d9      	ldr	r1, [r3, #12]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	b2da      	uxtb	r2, r3
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	b29b      	uxth	r3, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fbdf 	bl	8008964 <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	441a      	add	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	699a      	ldr	r2, [r3, #24]
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	441a      	add	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	619a      	str	r2, [r3, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	3304      	adds	r3, #4
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	60bb      	str	r3, [r7, #8]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 80081ce:	893b      	ldrh	r3, [r7, #8]
 80081d0:	461a      	mov	r2, r3
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d909      	bls.n	80081ec <DCD_WriteEmptyTxFifo+0xd8>
          ep->xfer_count < ep->xfer_len &&
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	699a      	ldr	r2, [r3, #24]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	695b      	ldr	r3, [r3, #20]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d203      	bcs.n	80081ec <DCD_WriteEmptyTxFifo+0xd8>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	695b      	ldr	r3, [r3, #20]
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
          ep->xfer_count < ep->xfer_len &&
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1c1      	bne.n	8008170 <DCD_WriteEmptyTxFifo+0x5c>
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  }
  
  return 1;
 80081ec:	2301      	movs	r3, #1
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop

080081f8 <DCD_HandleUsbReset_ISR>:
*         This interrupt occurs when a USB Reset is detected
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUsbReset_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08a      	sub	sp, #40	; 0x28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	623b      	str	r3, [r7, #32]
  doepmsk.d32 = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	61fb      	str	r3, [r7, #28]
  diepmsk.d32 = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	61bb      	str	r3, [r7, #24]
  dcfg.d32 = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	617b      	str	r3, [r7, #20]
  gintsts.d32 = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
 8008218:	7c3b      	ldrb	r3, [r7, #16]
 800821a:	f043 0301 	orr.w	r3, r3, #1
 800821e:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	6912      	ldr	r2, [r2, #16]
 8008228:	6851      	ldr	r1, [r2, #4]
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	43d2      	mvns	r2, r2
 800822e:	400a      	ands	r2, r1
 8008230:	605a      	str	r2, [r3, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	2100      	movs	r1, #0
 8008236:	f000 fdd9 	bl	8008dec <USB_OTG_FlushTxFifo>
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800823a:	2300      	movs	r3, #0
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
 800823e:	e012      	b.n	8008266 <DCD_HandleUsbReset_ISR+0x6e>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	3304      	adds	r3, #4
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	22ff      	movs	r2, #255	; 0xff
 800824e:	609a      	str	r2, [r3, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	3314      	adds	r3, #20
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	22ff      	movs	r2, #255	; 0xff
 800825e:	609a      	str	r2, [r3, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	3301      	adds	r3, #1
 8008264:	627b      	str	r3, [r7, #36]	; 0x24
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	785b      	ldrb	r3, [r3, #1]
 800826a:	461a      	mov	r2, r3
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	429a      	cmp	r2, r3
 8008270:	d8e6      	bhi.n	8008240 <DCD_HandleUsbReset_ISR+0x48>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f04f 32ff 	mov.w	r2, #4294967295
 800827a:	619a      	str	r2, [r3, #24]
  
  daintmsk.ep.in = 1;
 800827c:	8c3b      	ldrh	r3, [r7, #32]
 800827e:	2201      	movs	r2, #1
 8008280:	f362 030f 	bfi	r3, r2, #0, #16
 8008284:	843b      	strh	r3, [r7, #32]
  daintmsk.ep.out = 1;
 8008286:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008288:	2201      	movs	r2, #1
 800828a:	f362 030f 	bfi	r3, r2, #0, #16
 800828e:	847b      	strh	r3, [r7, #34]	; 0x22
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	6a3a      	ldr	r2, [r7, #32]
 8008296:	61da      	str	r2, [r3, #28]
  
  doepmsk.b.setup = 1;
 8008298:	7f3b      	ldrb	r3, [r7, #28]
 800829a:	f043 0308 	orr.w	r3, r3, #8
 800829e:	773b      	strb	r3, [r7, #28]
  doepmsk.b.xfercompl = 1;
 80082a0:	7f3b      	ldrb	r3, [r7, #28]
 80082a2:	f043 0301 	orr.w	r3, r3, #1
 80082a6:	773b      	strb	r3, [r7, #28]
  doepmsk.b.ahberr = 1;
 80082a8:	7f3b      	ldrb	r3, [r7, #28]
 80082aa:	f043 0304 	orr.w	r3, r3, #4
 80082ae:	773b      	strb	r3, [r7, #28]
  doepmsk.b.epdisabled = 1;
 80082b0:	7f3b      	ldrb	r3, [r7, #28]
 80082b2:	f043 0302 	orr.w	r3, r3, #2
 80082b6:	773b      	strb	r3, [r7, #28]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	69fa      	ldr	r2, [r7, #28]
 80082be:	615a      	str	r2, [r3, #20]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED   
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOUTEP1MSK, doepmsk.d32 );
#endif
  diepmsk.b.xfercompl = 1;
 80082c0:	7e3b      	ldrb	r3, [r7, #24]
 80082c2:	f043 0301 	orr.w	r3, r3, #1
 80082c6:	763b      	strb	r3, [r7, #24]
  diepmsk.b.timeout = 1;
 80082c8:	7e3b      	ldrb	r3, [r7, #24]
 80082ca:	f043 0308 	orr.w	r3, r3, #8
 80082ce:	763b      	strb	r3, [r7, #24]
  diepmsk.b.epdisabled = 1;
 80082d0:	7e3b      	ldrb	r3, [r7, #24]
 80082d2:	f043 0302 	orr.w	r3, r3, #2
 80082d6:	763b      	strb	r3, [r7, #24]
  diepmsk.b.ahberr = 1;
 80082d8:	7e3b      	ldrb	r3, [r7, #24]
 80082da:	f043 0304 	orr.w	r3, r3, #4
 80082de:	763b      	strb	r3, [r7, #24]
  diepmsk.b.intknepmis = 1;
 80082e0:	7e3b      	ldrb	r3, [r7, #24]
 80082e2:	f043 0320 	orr.w	r3, r3, #32
 80082e6:	763b      	strb	r3, [r7, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	611a      	str	r2, [r3, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	617b      	str	r3, [r7, #20]
  dcfg.b.devaddr = 0;
 80082f8:	8abb      	ldrh	r3, [r7, #20]
 80082fa:	f36f 130a 	bfc	r3, #4, #7
 80082fe:	82bb      	strh	r3, [r7, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	601a      	str	r2, [r3, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 fbef 	bl	8009aec <USB_OTG_EP0_OutStart>
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
  gintsts.b.usbreset = 1;
 8008312:	7b7b      	ldrb	r3, [r7, #13]
 8008314:	f043 0310 	orr.w	r3, r3, #16
 8008318:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	615a      	str	r2, [r3, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 8008322:	4b05      	ldr	r3, [pc, #20]	; (8008338 <DCD_HandleUsbReset_ISR+0x140>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	4798      	blx	r3
  return 1;
 800832c:	2301      	movs	r3, #1
}
 800832e:	4618      	mov	r0, r3
 8008330:	3728      	adds	r7, #40	; 0x28
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20000050 	.word	0x20000050

0800833c <DCD_HandleEnumDone_ISR>:
*         Read the device status register and set the device speed
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 ffef 	bl	8009328 <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	60bb      	str	r3, [r7, #8]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 ffc4 	bl	80092e0 <USB_OTG_GetDeviceSpeed>
 8008358:	4603      	mov	r3, r0
 800835a:	2b03      	cmp	r3, #3
 800835c:	d10c      	bne.n	8008378 <DCD_HandleEnumDone_ISR+0x3c>
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800836a:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 9;
 800836c:	7a7b      	ldrb	r3, [r7, #9]
 800836e:	2209      	movs	r2, #9
 8008370:	f362 0385 	bfi	r3, r2, #2, #4
 8008374:	727b      	strb	r3, [r7, #9]
 8008376:	e00a      	b.n	800838e <DCD_HandleEnumDone_ISR+0x52>
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2240      	movs	r2, #64	; 0x40
 8008382:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 5;
 8008384:	7a7b      	ldrb	r3, [r7, #9]
 8008386:	2205      	movs	r2, #5
 8008388:	f362 0385 	bfi	r3, r2, #2, #4
 800838c:	727b      	strb	r3, [r7, #9]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	60da      	str	r2, [r3, #12]
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	60fb      	str	r3, [r7, #12]
  gintsts.b.enumdone = 1;
 800839a:	7b7b      	ldrb	r3, [r7, #13]
 800839c:	f043 0320 	orr.w	r3, r3, #32
 80083a0:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	615a      	str	r2, [r3, #20]
  return 1;
 80083aa:	2301      	movs	r3, #1
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <DCD_IsoINIncomplete_ISR>:
*         handle the ISO IN incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoINIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 80083c0:	4b08      	ldr	r3, [pc, #32]	; (80083e4 <DCD_IsoINIncomplete_ISR+0x30>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	69db      	ldr	r3, [r3, #28]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	f043 0310 	orr.w	r3, r3, #16
 80083d0:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	615a      	str	r2, [r3, #20]
  
  return 1;
 80083da:	2301      	movs	r3, #1
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	20000050 	.word	0x20000050

080083e8 <DCD_IsoOUTIncomplete_ISR>:
*         handle the ISO OUT incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoOUTIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 80083f0:	2300      	movs	r3, #0
 80083f2:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 80083f4:	4b08      	ldr	r3, [pc, #32]	; (8008418 <DCD_IsoOUTIncomplete_ISR+0x30>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	f043 0320 	orr.w	r3, r3, #32
 8008404:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	615a      	str	r2, [r3, #20]
  return 1;
 800840e:	2301      	movs	r3, #1
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	20000050 	.word	0x20000050

0800841c <DCD_ReadDevInEP>:
*         Reads ep flags
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	617b      	str	r3, [r7, #20]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008436:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	fa22 f303 	lsr.w	r3, r2, r3
 8008440:	01db      	lsls	r3, r3, #7
 8008442:	b2db      	uxtb	r3, r3
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	4313      	orrs	r3, r2
 8008448:	617b      	str	r3, [r7, #20]
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 800844a:	78fb      	ldrb	r3, [r7, #3]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	3304      	adds	r3, #4
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	4013      	ands	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]
  return v;
 800845e:	68fb      	ldr	r3, [r7, #12]
}
 8008460:	4618      	mov	r0, r3
 8008462:	371c      	adds	r7, #28
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	70fb      	strb	r3, [r7, #3]
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 8008478:	78fb      	ldrb	r3, [r7, #3]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	4619      	mov	r1, r3
 800847e:	f000 fad5 	bl	8008a2c <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.device_address = 0;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	e023      	b.n	80084e0 <DCD_Init+0x74>
  {
    ep = &pdev->dev.in_ep[i];
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	4613      	mov	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	00db      	lsls	r3, r3, #3
 80084a2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	4413      	add	r3, r2
 80084aa:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 1;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2201      	movs	r2, #1
 80084b0:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	b29a      	uxth	r2, r3
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	80da      	strh	r2, [r3, #6]
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2200      	movs	r2, #0
 80084c6:	70da      	strb	r2, [r3, #3]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2240      	movs	r2, #64	; 0x40
 80084cc:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2200      	movs	r2, #0
 80084d2:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2200      	movs	r2, #0
 80084d8:	615a      	str	r2, [r3, #20]
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.device_address = 0;
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3301      	adds	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	461a      	mov	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d8d5      	bhi.n	8008498 <DCD_Init+0x2c>
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80084ec:	2300      	movs	r3, #0
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	e023      	b.n	800853a <DCD_Init+0xce>
  {
    ep = &pdev->dev.out_ep[i];
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	00db      	lsls	r3, r3, #3
 80084fc:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	4413      	add	r3, r2
 8008504:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 0;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2200      	movs	r2, #0
 800850a:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	b2da      	uxtb	r2, r3
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	b29a      	uxth	r2, r3
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	80da      	strh	r2, [r3, #6]
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2200      	movs	r2, #0
 8008520:	70da      	strb	r2, [r3, #3]
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2240      	movs	r2, #64	; 0x40
 8008526:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2200      	movs	r2, #0
 800852c:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2200      	movs	r2, #0
 8008532:	615a      	str	r2, [r3, #20]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3301      	adds	r3, #1
 8008538:	60fb      	str	r3, [r7, #12]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	461a      	mov	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	429a      	cmp	r2, r3
 8008544:	d8d5      	bhi.n	80084f2 <DCD_Init+0x86>
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fc34 	bl	8008db4 <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fb27 	bl	8008ba0 <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	2100      	movs	r1, #0
 8008556:	f000 fcb3 	bl	8008ec0 <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fd36 	bl	8008fcc <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fc0b 	bl	8008d7c <USB_OTG_EnableGlobalInt>
}
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	70f9      	strb	r1, [r7, #3]
 8008576:	803a      	strh	r2, [r7, #0]
 8008578:	70bb      	strb	r3, [r7, #2]
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800857a:	78fb      	ldrb	r3, [r7, #3]
 800857c:	b25b      	sxtb	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	da0c      	bge.n	800859c <DCD_EP_Open+0x30>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	4413      	add	r3, r2
 8008598:	60fb      	str	r3, [r7, #12]
 800859a:	e00b      	b.n	80085b4 <DCD_EP_Open+0x48>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 800859c:	78fb      	ldrb	r3, [r7, #3]
 800859e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	00db      	lsls	r3, r3, #3
 80085aa:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80085c0:	78fb      	ldrb	r3, [r7, #3]
 80085c2:	09db      	lsrs	r3, r3, #7
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	461a      	mov	r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 80085cc:	883a      	ldrh	r2, [r7, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	78ba      	ldrb	r2, [r7, #2]
 80085d6:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	785b      	ldrb	r3, [r3, #1]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <DCD_EP_Open+0x7e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	461a      	mov	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 80085ea:	78bb      	ldrb	r3, [r7, #2]
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d102      	bne.n	80085f6 <DCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	711a      	strb	r2, [r3, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	68f9      	ldr	r1, [r7, #12]
 80085fa:	f000 fed1 	bl	80093a0 <USB_OTG_EPActivate>
  return 0;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <DCD_EP_Close>:
* @param pdev: device instance
* @param ep_addr: endpoint address
* @retval : status
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	b25b      	sxtb	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	da0c      	bge.n	8008636 <DCD_EP_Close+0x2e>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008622:	4613      	mov	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	00db      	lsls	r3, r3, #3
 800862a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	4413      	add	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	e00b      	b.n	800864e <DCD_EP_Close+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8008636:	78fb      	ldrb	r3, [r7, #3]
 8008638:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800863c:	4613      	mov	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	4413      	add	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008654:	b2da      	uxtb	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	701a      	strb	r2, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 800865a:	78fb      	ldrb	r3, [r7, #3]
 800865c:	09db      	lsrs	r3, r3, #7
 800865e:	b2db      	uxtb	r3, r3
 8008660:	461a      	mov	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	68f9      	ldr	r1, [r7, #12]
 800866a:	f000 ff07 	bl	800947c <USB_OTG_EPDeactivate>
  return 0;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	607a      	str	r2, [r7, #4]
 8008682:	460a      	mov	r2, r1
 8008684:	72fa      	strb	r2, [r7, #11]
 8008686:	813b      	strh	r3, [r7, #8]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8008688:	7afb      	ldrb	r3, [r7, #11]
 800868a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800868e:	4613      	mov	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4413      	add	r3, r2
 800869e:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = buf_len;
 80086a6:	893a      	ldrh	r2, [r7, #8]
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2200      	movs	r2, #0
 80086b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2200      	movs	r2, #0
 80086b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	701a      	strb	r2, [r3, #0]
  
  if (pdev->cfg.dma_enable == 1)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	78db      	ldrb	r3, [r3, #3]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d102      	bne.n	80086d2 <DCD_EP_PrepareRx+0x5a>
  {
    ep->dma_addr = (uint32_t)pbuf;  
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	611a      	str	r2, [r3, #16]
  }
  
  if ( ep->num == 0 )
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d104      	bne.n	80086e4 <DCD_EP_PrepareRx+0x6c>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	6979      	ldr	r1, [r7, #20]
 80086de:	f001 f853 	bl	8009788 <USB_OTG_EP0StartXfer>
 80086e2:	e003      	b.n	80086ec <DCD_EP_PrepareRx+0x74>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	6979      	ldr	r1, [r7, #20]
 80086e8:	f000 ff0e 	bl	8009508 <USB_OTG_EPStartXfer>
  }
  return 0;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop

080086f8 <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	607a      	str	r2, [r7, #4]
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	460b      	mov	r3, r1
 8008706:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8008708:	7afb      	ldrb	r3, [r7, #11]
 800870a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	00db      	lsls	r3, r3, #3
 8008716:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	4413      	add	r3, r2
 800871e:	617b      	str	r3, [r7, #20]
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2201      	movs	r2, #1
 8008724:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;  
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800872c:	b2da      	uxtb	r2, r3
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	701a      	strb	r2, [r3, #0]
  ep->xfer_buff = pbuf;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	60da      	str	r2, [r3, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2200      	movs	r2, #0
 8008742:	619a      	str	r2, [r3, #24]
  ep->xfer_len  = buf_len;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	615a      	str	r2, [r3, #20]
  
  if ( ep->num == 0 )
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d104      	bne.n	800875c <DCD_EP_Tx+0x64>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	6979      	ldr	r1, [r7, #20]
 8008756:	f001 f817 	bl	8009788 <USB_OTG_EP0StartXfer>
 800875a:	e003      	b.n	8008764 <DCD_EP_Tx+0x6c>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	6979      	ldr	r1, [r7, #20]
 8008760:	f000 fed2 	bl	8009508 <USB_OTG_EPStartXfer>
  }
  return 0;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop

08008770 <DCD_EP_Stall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 800877c:	78fb      	ldrb	r3, [r7, #3]
 800877e:	b25b      	sxtb	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	da0c      	bge.n	800879e <DCD_EP_Stall+0x2e>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 8008784:	78fb      	ldrb	r3, [r7, #3]
 8008786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	4413      	add	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	e009      	b.n	80087b2 <DCD_EP_Stall+0x42>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	4413      	add	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2201      	movs	r2, #1
 80087b6:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	09db      	lsrs	r3, r3, #7
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	461a      	mov	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	68f9      	ldr	r1, [r7, #12]
 80087d4:	f001 f8c2 	bl	800995c <USB_OTG_EPSetStall>
  return (0);
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop

080087e4 <DCD_EP_ClrStall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 80087f0:	78fb      	ldrb	r3, [r7, #3]
 80087f2:	b25b      	sxtb	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	da0c      	bge.n	8008812 <DCD_EP_ClrStall+0x2e>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	4413      	add	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	e009      	b.n	8008826 <DCD_EP_ClrStall+0x42>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8008812:	78fa      	ldrb	r2, [r7, #3]
 8008814:	4613      	mov	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	4413      	add	r3, r2
 8008824:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;  
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008832:	b2da      	uxtb	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	09db      	lsrs	r3, r3, #7
 800883c:	b2db      	uxtb	r3, r3
 800883e:	461a      	mov	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	68f9      	ldr	r1, [r7, #12]
 8008848:	f001 f8cc 	bl	80099e4 <USB_OTG_EPClearStall>
  return (0);
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop

08008858 <DCD_EP_SetAddress>:
* @param pdev: device instance
* @param address: new device address
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 8008864:	2300      	movs	r3, #0
 8008866:	60fb      	str	r3, [r7, #12]
  dcfg.b.devaddr = address;
 8008868:	78fb      	ldrb	r3, [r7, #3]
 800886a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800886e:	b2da      	uxtb	r2, r3
 8008870:	89bb      	ldrh	r3, [r7, #12]
 8008872:	f362 130a 	bfi	r3, r2, #4, #7
 8008876:	81bb      	strh	r3, [r7, #12]
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	6912      	ldr	r2, [r2, #16]
 8008880:	6811      	ldr	r1, [r2, #0]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	430a      	orrs	r2, r1
 8008886:	601a      	str	r2, [r3, #0]
}
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop

08008894 <USB_OTG_EnableCommonInt>:
*         Initializes the commmon interrupts, used in both device and modes
* @param  pdev : Selected device
* @retval None
*/
static void USB_OTG_EnableCommonInt(USB_OTG_CORE_HANDLE *pdev)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  
  int_mask.d32 = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	60fb      	str	r3, [r7, #12]
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	f04f 32ff 	mov.w	r2, #4294967295
 80088a8:	605a      	str	r2, [r3, #4]
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f04f 32ff 	mov.w	r2, #4294967295
 80088b2:	615a      	str	r2, [r3, #20]
  /* Enable the interrupts in the INTMSK */
  int_mask.b.wkupintr = 1;
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ba:	73fb      	strb	r3, [r7, #15]
  int_mask.b.usbsuspend = 1; 
 80088bc:	7b7b      	ldrb	r3, [r7, #13]
 80088be:	f043 0308 	orr.w	r3, r3, #8
 80088c2:	737b      	strb	r3, [r7, #13]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	619a      	str	r2, [r3, #24]
}
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop

080088d8 <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	60fb      	str	r3, [r7, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 80088ec:	2003      	movs	r0, #3
 80088ee:	f002 fd67 	bl	800b3c0 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	3301      	adds	r3, #1
 80088fe:	617b      	str	r3, [r7, #20]
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	4b17      	ldr	r3, [pc, #92]	; (8008960 <USB_OTG_CoreReset+0x88>)
 8008904:	429a      	cmp	r2, r3
 8008906:	d901      	bls.n	800890c <USB_OTG_CoreReset+0x34>
    {
      return USB_OTG_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	e024      	b.n	8008956 <USB_OTG_CoreReset+0x7e>
    }
  }
  while (greset.b.ahbidle == 0);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	0fdb      	lsrs	r3, r3, #31
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0ea      	beq.n	80088ec <USB_OTG_CoreReset+0x14>
  /* Core Soft Reset */
  count = 0;
 8008916:	2300      	movs	r3, #0
 8008918:	617b      	str	r3, [r7, #20]
  greset.b.csftrst = 1;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f043 0301 	orr.w	r3, r3, #1
 8008920:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	3301      	adds	r3, #1
 8008936:	617b      	str	r3, [r7, #20]
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	4b09      	ldr	r3, [pc, #36]	; (8008960 <USB_OTG_CoreReset+0x88>)
 800893c:	429a      	cmp	r2, r3
 800893e:	d900      	bls.n	8008942 <USB_OTG_CoreReset+0x6a>
    {
      break;
 8008940:	e005      	b.n	800894e <USB_OTG_CoreReset+0x76>
    }
  }
  while (greset.b.csftrst == 1);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f003 0301 	and.w	r3, r3, #1
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b01      	cmp	r3, #1
 800894c:	d0ed      	beq.n	800892a <USB_OTG_CoreReset+0x52>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 800894e:	2003      	movs	r0, #3
 8008950:	f002 fd36 	bl	800b3c0 <USB_OTG_BSP_uDelay>
  return status;
 8008954:	7cfb      	ldrb	r3, [r7, #19]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3718      	adds	r7, #24
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	00030d40 	.word	0x00030d40

08008964 <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 8008964:	b480      	push	{r7}
 8008966:	b089      	sub	sp, #36	; 0x24
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	71fa      	strb	r2, [r7, #7]
 8008970:	80bb      	strh	r3, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	76fb      	strb	r3, [r7, #27]
  if (pdev->cfg.dma_enable == 0)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	78db      	ldrb	r3, [r3, #3]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d122      	bne.n	80089c4 <USB_OTG_WritePacket+0x60>
  {
    uint32_t count32b= 0 , i= 0;
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	2300      	movs	r3, #0
 8008984:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 8008986:	88bb      	ldrh	r3, [r7, #4]
 8008988:	3303      	adds	r3, #3
 800898a:	2b00      	cmp	r3, #0
 800898c:	da00      	bge.n	8008990 <USB_OTG_WritePacket+0x2c>
 800898e:	3303      	adds	r3, #3
 8008990:	109b      	asrs	r3, r3, #2
 8008992:	617b      	str	r3, [r7, #20]
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8008994:	79fb      	ldrb	r3, [r7, #7]
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	3332      	adds	r3, #50	; 0x32
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src+=4)
 80089a2:	2300      	movs	r3, #0
 80089a4:	61fb      	str	r3, [r7, #28]
 80089a6:	e009      	b.n	80089bc <USB_OTG_WritePacket+0x58>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	601a      	str	r2, [r3, #0]
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	3301      	adds	r3, #1
 80089b4:	61fb      	str	r3, [r7, #28]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	3304      	adds	r3, #4
 80089ba:	60bb      	str	r3, [r7, #8]
 80089bc:	69fa      	ldr	r2, [r7, #28]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d3f1      	bcc.n	80089a8 <USB_OTG_WritePacket+0x44>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
    }
  }
  return status;
 80089c4:	7efb      	ldrb	r3, [r7, #27]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3724      	adds	r7, #36	; 0x24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop

080089d4 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b089      	sub	sp, #36	; 0x24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	4613      	mov	r3, r2
 80089e0:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b = (len + 3) / 4;
 80089e6:	88fb      	ldrh	r3, [r7, #6]
 80089e8:	3303      	adds	r3, #3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	da00      	bge.n	80089f0 <USB_OTG_ReadPacket+0x1c>
 80089ee:	3303      	adds	r3, #3
 80089f0:	109b      	asrs	r3, r3, #2
 80089f2:	61bb      	str	r3, [r7, #24]
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80089fa:	617b      	str	r3, [r7, #20]
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 80089fc:	2300      	movs	r3, #0
 80089fe:	61fb      	str	r3, [r7, #28]
 8008a00:	e009      	b.n	8008a16 <USB_OTG_ReadPacket+0x42>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	601a      	str	r2, [r3, #0]
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	61fb      	str	r3, [r7, #28]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	3304      	adds	r3, #4
 8008a14:	60bb      	str	r3, [r7, #8]
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d3f1      	bcc.n	8008a02 <USB_OTG_ReadPacket+0x2e>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
    
  }
  return ((void *)dest);
 8008a1e:	68bb      	ldr	r3, [r7, #8]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3724      	adds	r7, #36	; 0x24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
  uint32_t i , baseAddress = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	613b      	str	r3, [r7, #16]
  USB_OTG_STS status = USB_OTG_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]
  
  pdev->cfg.dma_enable       = 0;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	70da      	strb	r2, [r3, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	709a      	strb	r2, [r3, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2240      	movs	r2, #64	; 0x40
 8008a50:	809a      	strh	r2, [r3, #4]
    
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8008a52:	78fb      	ldrb	r3, [r7, #3]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d113      	bne.n	8008a80 <USB_OTG_SelectCore+0x54>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 8008a58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008a5c:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2201      	movs	r2, #1
 8008a62:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 8 ;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2208      	movs	r2, #8
 8008a68:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2204      	movs	r2, #4
 8008a6e:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a76:	80da      	strh	r2, [r3, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	721a      	strb	r2, [r3, #8]
 8008a7e:	e011      	b.n	8008aa4 <USB_OTG_SelectCore+0x78>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10e      	bne.n	8008aa4 <USB_OTG_SelectCore+0x78>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8008a86:	4b45      	ldr	r3, [pc, #276]	; (8008b9c <USB_OTG_SelectCore+0x170>)
 8008a88:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 12 ;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	220c      	movs	r2, #12
 8008a94:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2206      	movs	r2, #6
 8008a9a:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8008aa2:	80da      	strh	r2, [r3, #6]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	60da      	str	r2, [r3, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	611a      	str	r2, [r3, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	617b      	str	r3, [r7, #20]
 8008aba:	e01c      	b.n	8008af6 <USB_OTG_SelectCore+0xca>
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	015a      	lsls	r2, r3, #5
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	3304      	adds	r3, #4
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	440b      	add	r3, r1
 8008ad4:	609a      	str	r2, [r3, #8]
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	015a      	lsls	r2, r3, #5
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	6879      	ldr	r1, [r7, #4]
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	3314      	adds	r3, #20
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	605a      	str	r2, [r3, #4]
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	3301      	adds	r3, #1
 8008af4:	617b      	str	r3, [r7, #20]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	785b      	ldrb	r3, [r3, #1]
 8008afa:	461a      	mov	r2, r3
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d8dc      	bhi.n	8008abc <USB_OTG_SelectCore+0x90>
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b08:	461a      	mov	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	615a      	str	r2, [r3, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b14:	461a      	mov	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	617b      	str	r3, [r7, #20]
 8008b20:	e00f      	b.n	8008b42 <USB_OTG_SelectCore+0x116>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	015a      	lsls	r2, r3, #5
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	4413      	add	r3, r2
 8008b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8008b2e:	461a      	mov	r2, r3
 8008b30:	6879      	ldr	r1, [r7, #4]
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	3322      	adds	r3, #34	; 0x22
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	440b      	add	r3, r1
 8008b3a:	609a      	str	r2, [r3, #8]
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	617b      	str	r3, [r7, #20]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d8e9      	bhi.n	8008b22 <USB_OTG_SelectCore+0xf6>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8008b4e:	2300      	movs	r3, #0
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	e00f      	b.n	8008b74 <USB_OTG_SelectCore+0x148>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	031a      	lsls	r2, r3, #12
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b60:	461a      	mov	r2, r3
 8008b62:	6879      	ldr	r1, [r7, #4]
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	3332      	adds	r3, #50	; 0x32
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	440b      	add	r3, r1
 8008b6c:	609a      	str	r2, [r3, #8]
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	3301      	adds	r3, #1
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d8e9      	bhi.n	8008b54 <USB_OTG_SelectCore+0x128>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b86:	461a      	mov	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  return status;
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	371c      	adds	r7, #28
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	40040000 	.word	0x40040000

08008ba0 <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b088      	sub	sp, #32
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	77fb      	strb	r3, [r7, #31]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GI2CCTL_TypeDef  i2cctl;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	61bb      	str	r3, [r7, #24]
  gccfg.d32 = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	617b      	str	r3, [r7, #20]
  ahbcfg.d32 = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60fb      	str	r3, [r7, #12]
  

  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	7a1b      	ldrb	r3, [r3, #8]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d14f      	bne.n	8008c60 <USB_OTG_CoreInit+0xc0>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc6:	617b      	str	r3, [r7, #20]
    gccfg.b.pwdn = 0;
 8008bc8:	7dbb      	ldrb	r3, [r7, #22]
 8008bca:	f36f 0300 	bfc	r3, #0, #1
 8008bce:	75bb      	strb	r3, [r7, #22]
    
    if (pdev->cfg.Sof_output)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	7a5b      	ldrb	r3, [r3, #9]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <USB_OTG_CoreInit+0x40>
    {
      gccfg.b.sofouten = 1;   
 8008bd8:	7dbb      	ldrb	r3, [r7, #22]
 8008bda:	f043 0310 	orr.w	r3, r3, #16
 8008bde:	75bb      	strb	r3, [r7, #22]
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	61bb      	str	r3, [r7, #24]
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	61bb      	str	r3, [r7, #24]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 8008bf4:	7e3b      	ldrb	r3, [r7, #24]
 8008bf6:	f36f 1386 	bfc	r3, #6, #1
 8008bfa:	763b      	strb	r3, [r7, #24]
#else
 #ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
 #endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 8008bfc:	7ebb      	ldrb	r3, [r7, #26]
 8008bfe:	f36f 1386 	bfc	r3, #6, #1
 8008c02:	76bb      	strb	r3, [r7, #26]
    usbcfg.b.ulpi_utmi_sel     = 1; /* ULPI seleInterfacect */
 8008c04:	7e3b      	ldrb	r3, [r7, #24]
 8008c06:	f043 0310 	orr.w	r3, r3, #16
 8008c0a:	763b      	strb	r3, [r7, #24]
    
    usbcfg.b.phyif             = 0; /* 8 bits */
 8008c0c:	7e3b      	ldrb	r3, [r7, #24]
 8008c0e:	f36f 03c3 	bfc	r3, #3, #1
 8008c12:	763b      	strb	r3, [r7, #24]
    usbcfg.b.ddrsel            = 0; /* single data rate */
 8008c14:	7e3b      	ldrb	r3, [r7, #24]
 8008c16:	f36f 13c7 	bfc	r3, #7, #1
 8008c1a:	763b      	strb	r3, [r7, #24]
    
    usbcfg.b.ulpi_fsls = 0;
 8008c1c:	7ebb      	ldrb	r3, [r7, #26]
 8008c1e:	f36f 0341 	bfc	r3, #1, #1
 8008c22:	76bb      	strb	r3, [r7, #26]
    usbcfg.b.ulpi_clk_sus_m = 0;
 8008c24:	7ebb      	ldrb	r3, [r7, #26]
 8008c26:	f36f 03c3 	bfc	r3, #3, #1
 8008c2a:	76bb      	strb	r3, [r7, #26]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7ff fe4f 	bl	80088d8 <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	78db      	ldrb	r3, [r3, #3]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	f040 8082 	bne.w	8008d48 <USB_OTG_CoreInit+0x1a8>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8008c44:	7b3b      	ldrb	r3, [r7, #12]
 8008c46:	2205      	movs	r2, #5
 8008c48:	f362 0344 	bfi	r3, r2, #1, #4
 8008c4c:	733b      	strb	r3, [r7, #12]
      ahbcfg.b.dmaenable = 1;
 8008c4e:	7b3b      	ldrb	r3, [r7, #12]
 8008c50:	f043 0320 	orr.w	r3, r3, #32
 8008c54:	733b      	strb	r3, [r7, #12]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	609a      	str	r2, [r3, #8]
 8008c5e:	e073      	b.n	8008d48 <USB_OTG_CoreInit+0x1a8>
    }    
  }
  else /* FS interface (embedded Phy or I2C Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	61bb      	str	r3, [r7, #24]
    usbcfg.b.physel  = 1; /* FS Interface */
 8008c68:	7e3b      	ldrb	r3, [r7, #24]
 8008c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6e:	763b      	strb	r3, [r7, #24]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	60da      	str	r2, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff fe2d 	bl	80088d8 <USB_OTG_CoreReset>
    /* Enable the I2C interface and deactivate the power down*/
    gccfg.d32 = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	617b      	str	r3, [r7, #20]
    gccfg.b.pwdn = 1;
 8008c82:	7dbb      	ldrb	r3, [r7, #22]
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	75bb      	strb	r3, [r7, #22]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7a1b      	ldrb	r3, [r3, #8]
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d103      	bne.n	8008c9a <USB_OTG_CoreInit+0xfa>
    {
      gccfg.b.i2cifen = 1;
 8008c92:	7dbb      	ldrb	r3, [r7, #22]
 8008c94:	f043 0302 	orr.w	r3, r3, #2
 8008c98:	75bb      	strb	r3, [r7, #22]
    }   
    gccfg.b.vbussensingA = 1 ;
 8008c9a:	7dbb      	ldrb	r3, [r7, #22]
 8008c9c:	f043 0304 	orr.w	r3, r3, #4
 8008ca0:	75bb      	strb	r3, [r7, #22]
    gccfg.b.vbussensingB = 1 ;     
 8008ca2:	7dbb      	ldrb	r3, [r7, #22]
 8008ca4:	f043 0308 	orr.w	r3, r3, #8
 8008ca8:	75bb      	strb	r3, [r7, #22]
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
 8008caa:	7dbb      	ldrb	r3, [r7, #22]
 8008cac:	f043 0320 	orr.w	r3, r3, #32
 8008cb0:	75bb      	strb	r3, [r7, #22]
#endif    
    
    if(pdev->cfg.Sof_output)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	7a5b      	ldrb	r3, [r3, #9]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <USB_OTG_CoreInit+0x122>
    {
      gccfg.b.sofouten = 1;  
 8008cba:	7dbb      	ldrb	r3, [r7, #22]
 8008cbc:	f043 0310 	orr.w	r3, r3, #16
 8008cc0:	75bb      	strb	r3, [r7, #22]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 8008cca:	2014      	movs	r0, #20
 8008ccc:	f002 fb9c 	bl	800b408 <USB_OTG_BSP_mDelay>
    /* Program GUSBCFG.OtgUtmifsSel to I2C*/
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	61bb      	str	r3, [r7, #24]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	7a1b      	ldrb	r3, [r3, #8]
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d103      	bne.n	8008ce8 <USB_OTG_CoreInit+0x148>
    {
      usbcfg.b.otgutmifssel = 1;
 8008ce0:	7ebb      	ldrb	r3, [r7, #26]
 8008ce2:	f043 0301 	orr.w	r3, r3, #1
 8008ce6:	76bb      	strb	r3, [r7, #26]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	60da      	str	r2, [r3, #12]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	7a1b      	ldrb	r3, [r3, #8]
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d127      	bne.n	8008d48 <USB_OTG_CoreInit+0x1a8>
    {
      /*Program GI2CCTL.I2CEn*/
      i2cctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GI2CCTL);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfe:	613b      	str	r3, [r7, #16]
      i2cctl.b.i2cdevaddr = 1;
 8008d00:	7cfb      	ldrb	r3, [r7, #19]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f362 0383 	bfi	r3, r2, #2, #2
 8008d08:	74fb      	strb	r3, [r7, #19]
      i2cctl.b.i2cen = 0;
 8008d0a:	7cbb      	ldrb	r3, [r7, #18]
 8008d0c:	f36f 13c7 	bfc	r3, #7, #1
 8008d10:	74bb      	strb	r3, [r7, #18]
      i2cctl.b.dat_se0 = 1;
 8008d12:	7cfb      	ldrb	r3, [r7, #19]
 8008d14:	f043 0310 	orr.w	r3, r3, #16
 8008d18:	74fb      	strb	r3, [r7, #19]
      i2cctl.b.addr = 0x2D;
 8008d1a:	7cbb      	ldrb	r3, [r7, #18]
 8008d1c:	222d      	movs	r2, #45	; 0x2d
 8008d1e:	f362 0306 	bfi	r3, r2, #0, #7
 8008d22:	74bb      	strb	r3, [r7, #18]
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	631a      	str	r2, [r3, #48]	; 0x30
      
      USB_OTG_BSP_mDelay(200);
 8008d2c:	20c8      	movs	r0, #200	; 0xc8
 8008d2e:	f002 fb6b 	bl	800b408 <USB_OTG_BSP_mDelay>
      
      i2cctl.b.i2cen = 1;
 8008d32:	7cbb      	ldrb	r3, [r7, #18]
 8008d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d38:	74bb      	strb	r3, [r7, #18]
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	631a      	str	r2, [r3, #48]	; 0x30
      USB_OTG_BSP_mDelay(200);
 8008d42:	20c8      	movs	r0, #200	; 0xc8
 8008d44:	f002 fb60 	bl	800b408 <USB_OTG_BSP_mDelay>
    }
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	78db      	ldrb	r3, [r3, #3]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d110      	bne.n	8008d72 <USB_OTG_CoreInit+0x1d2>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	60fb      	str	r3, [r7, #12]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8008d58:	7b3b      	ldrb	r3, [r7, #12]
 8008d5a:	2205      	movs	r2, #5
 8008d5c:	f362 0344 	bfi	r3, r2, #1, #4
 8008d60:	733b      	strb	r3, [r7, #12]
    ahbcfg.b.dmaenable = 1;
 8008d62:	7b3b      	ldrb	r3, [r7, #12]
 8008d64:	f043 0320 	orr.w	r3, r3, #32
 8008d68:	733b      	strb	r3, [r7, #12]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	609a      	str	r2, [r3, #8]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_EnableCommonInt(pdev);
#endif
  return status;
 8008d72:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3720      	adds	r7, #32
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USB_OTG_EnableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8008d8c:	7a3b      	ldrb	r3, [r7, #8]
 8008d8e:	f043 0301 	orr.w	r3, r3, #1
 8008d92:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	68d2      	ldr	r2, [r2, #12]
 8008d9c:	6891      	ldr	r1, [r2, #8]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	430a      	orrs	r2, r1
 8008da2:	609a      	str	r2, [r3, #8]
  return status;
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop

08008db4 <USB_OTG_DisableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_DisableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8008dc4:	7a3b      	ldrb	r3, [r7, #8]
 8008dc6:	f043 0301 	orr.w	r3, r3, #1
 8008dca:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	68d2      	ldr	r2, [r2, #12]
 8008dd4:	6891      	ldr	r1, [r2, #8]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	43d2      	mvns	r2, r2
 8008dda:	400a      	ands	r2, r1
 8008ddc:	609a      	str	r2, [r3, #8]
  return status;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	617b      	str	r3, [r7, #20]
  greset.d32 = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60fb      	str	r3, [r7, #12]
  greset.b.txfflsh = 1;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f043 0320 	orr.w	r3, r3, #32
 8008e08:	60fb      	str	r3, [r7, #12]
  greset.b.txfnum  = num;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	f003 031f 	and.w	r3, r3, #31
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f362 138a 	bfi	r3, r2, #6, #5
 8008e1a:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	617b      	str	r3, [r7, #20]
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <USB_OTG_FlushTxFifo+0x70>)
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d900      	bls.n	8008e3c <USB_OTG_FlushTxFifo+0x50>
    {
      break;
 8008e3a:	e006      	b.n	8008e4a <USB_OTG_FlushTxFifo+0x5e>
    }
  }
  while (greset.b.txfflsh == 1);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	095b      	lsrs	r3, r3, #5
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d0ec      	beq.n	8008e24 <USB_OTG_FlushTxFifo+0x38>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8008e4a:	2003      	movs	r0, #3
 8008e4c:	f002 fab8 	bl	800b3c0 <USB_OTG_BSP_uDelay>
  return status;
 8008e50:	7cfb      	ldrb	r3, [r7, #19]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3718      	adds	r7, #24
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	00030d40 	.word	0x00030d40

08008e60 <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]
  greset.b.rxfflsh = 1;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f043 0310 	orr.w	r3, r3, #16
 8008e7a:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	617b      	str	r3, [r7, #20]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	4b09      	ldr	r3, [pc, #36]	; (8008ebc <USB_OTG_FlushRxFifo+0x5c>)
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d900      	bls.n	8008e9c <USB_OTG_FlushRxFifo+0x3c>
    {
      break;
 8008e9a:	e006      	b.n	8008eaa <USB_OTG_FlushRxFifo+0x4a>
    }
  }
  while (greset.b.rxfflsh == 1);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	091b      	lsrs	r3, r3, #4
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d0ec      	beq.n	8008e84 <USB_OTG_FlushRxFifo+0x24>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8008eaa:	2003      	movs	r0, #3
 8008eac:	f002 fa88 	bl	800b3c0 <USB_OTG_BSP_uDelay>
  return status;
 8008eb0:	7cfb      	ldrb	r3, [r7, #19]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	00030d40 	.word	0x00030d40

08008ec0 <USB_OTG_SetCurrentMode>:
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	60bb      	str	r3, [r7, #8]
  
  usbcfg.b.force_host = 0;
 8008ed8:	7afb      	ldrb	r3, [r7, #11]
 8008eda:	f36f 1345 	bfc	r3, #5, #1
 8008ede:	72fb      	strb	r3, [r7, #11]
  usbcfg.b.force_dev = 0;
 8008ee0:	7afb      	ldrb	r3, [r7, #11]
 8008ee2:	f36f 1386 	bfc	r3, #6, #1
 8008ee6:	72fb      	strb	r3, [r7, #11]
  
  if ( mode == HOST_MODE)
 8008ee8:	78fb      	ldrb	r3, [r7, #3]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d104      	bne.n	8008ef8 <USB_OTG_SetCurrentMode+0x38>
  {
    usbcfg.b.force_host = 1;
 8008eee:	7afb      	ldrb	r3, [r7, #11]
 8008ef0:	f043 0320 	orr.w	r3, r3, #32
 8008ef4:	72fb      	strb	r3, [r7, #11]
 8008ef6:	e006      	b.n	8008f06 <USB_OTG_SetCurrentMode+0x46>
  }
  else if ( mode == DEVICE_MODE)
 8008ef8:	78fb      	ldrb	r3, [r7, #3]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d103      	bne.n	8008f06 <USB_OTG_SetCurrentMode+0x46>
  {
    usbcfg.b.force_dev = 1;
 8008efe:	7afb      	ldrb	r3, [r7, #11]
 8008f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f04:	72fb      	strb	r3, [r7, #11]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	60da      	str	r2, [r3, #12]
  USB_OTG_BSP_mDelay(50);
 8008f0e:	2032      	movs	r0, #50	; 0x32
 8008f10:	f002 fa7a 	bl	800b408 <USB_OTG_BSP_mDelay>
  return status;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop

08008f20 <USB_OTG_GetMode>:
* @brief  USB_OTG_GetMode : Get current mode
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	f003 0301 	and.w	r3, r3, #1
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop

08008f40 <USB_OTG_IsDeviceMode>:
* @brief  USB_OTG_IsDeviceMode : Check if it is device mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7ff ffe9 	bl	8008f20 <USB_OTG_GetMode>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	bf0c      	ite	eq
 8008f54:	2300      	moveq	r3, #0
 8008f56:	2301      	movne	r3, #1
 8008f58:	b2db      	uxtb	r3, r3
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop

08008f64 <USB_OTG_ReadCoreItr>:
* @brief  USB_OTG_ReadCoreItr : returns the Core Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60fb      	str	r3, [r7, #12]
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	4013      	ands	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
  return v;
 8008f84:	68fb      	ldr	r3, [r7, #12]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop

08008f94 <USB_OTG_InitDevSpeed>:
*         depending the PHY type and the enumeration speed of the device.
* @param  pdev : Selected device
* @retval : None
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	60fb      	str	r3, [r7, #12]
  dcfg.b.devspd = speed;
 8008fa8:	78fb      	ldrb	r3, [r7, #3]
 8008faa:	f003 0303 	and.w	r3, r3, #3
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	7b3b      	ldrb	r3, [r7, #12]
 8008fb2:	f362 0301 	bfi	r3, r2, #0, #2
 8008fb6:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	601a      	str	r2, [r3, #0]
}
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop

08008fcc <USB_OTG_CoreInitDev>:
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08c      	sub	sp, #48	; 0x30
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status       = USB_OTG_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  USB_OTG_FSIZ_TypeDef    nptxfifosize;
  USB_OTG_FSIZ_TypeDef    txfifosize;
  USB_OTG_DIEPMSK_TypeDef msk;
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
  dcfg.d32 = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	623b      	str	r3, [r7, #32]
  nptxfifosize.d32 = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	61fb      	str	r3, [r7, #28]
  txfifosize.d32 = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	61bb      	str	r3, [r7, #24]
  msk.d32 = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	617b      	str	r3, [r7, #20]
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	623b      	str	r3, [r7, #32]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 8009000:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009004:	f36f 03c4 	bfc	r3, #3, #2
 8009008:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	6a3a      	ldr	r2, [r7, #32]
 8009012:	601a      	str	r2, [r3, #0]
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	7adb      	ldrb	r3, [r3, #11]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d140      	bne.n	800909e <USB_OTG_CoreInitDev+0xd2>
  {  
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	2103      	movs	r1, #3
 8009020:	f7ff ffb8 	bl	8008f94 <USB_OTG_InitDevSpeed>
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	2280      	movs	r2, #128	; 0x80
 800902a:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 800902c:	8bfb      	ldrh	r3, [r7, #30]
 800902e:	2240      	movs	r2, #64	; 0x40
 8009030:	f362 030f 	bfi	r3, r2, #0, #16
 8009034:	83fb      	strh	r3, [r7, #30]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
 8009036:	8bbb      	ldrh	r3, [r7, #28]
 8009038:	2280      	movs	r2, #128	; 0x80
 800903a:	f362 030f 	bfi	r3, r2, #0, #16
 800903e:	83bb      	strh	r3, [r7, #28]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	69fa      	ldr	r2, [r7, #28]
 8009046:	629a      	str	r2, [r3, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8009048:	8bba      	ldrh	r2, [r7, #28]
 800904a:	8bfb      	ldrh	r3, [r7, #30]
 800904c:	4413      	add	r3, r2
 800904e:	b29b      	uxth	r3, r3
 8009050:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
 8009052:	8b7b      	ldrh	r3, [r7, #26]
 8009054:	2280      	movs	r2, #128	; 0x80
 8009056:	f362 030f 	bfi	r3, r2, #0, #16
 800905a:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	69ba      	ldr	r2, [r7, #24]
 8009062:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8009066:	8b3a      	ldrh	r2, [r7, #24]
 8009068:	8b7b      	ldrh	r3, [r7, #26]
 800906a:	4413      	add	r3, r2
 800906c:	b29b      	uxth	r3, r3
 800906e:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX2_FIFO_FS_SIZE;
 8009070:	8b7b      	ldrh	r3, [r7, #26]
 8009072:	f36f 030f 	bfc	r3, #0, #16
 8009076:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
 8009082:	8b3a      	ldrh	r2, [r7, #24]
 8009084:	8b7b      	ldrh	r3, [r7, #26]
 8009086:	4413      	add	r3, r2
 8009088:	b29b      	uxth	r3, r3
 800908a:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
 800908c:	8b7b      	ldrh	r3, [r7, #26]
 800908e:	f36f 030f 	bfc	r3, #0, #16
 8009092:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	69ba      	ldr	r2, [r7, #24]
 800909a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    txfifosize.b.depth = TX5_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
  }
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	2110      	movs	r1, #16
 80090a2:	f7ff fea3 	bl	8008dec <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff feda 	bl	8008e60 <USB_OTG_FlushRxFifo>
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	2200      	movs	r2, #0
 80090b2:	611a      	str	r2, [r3, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	2200      	movs	r2, #0
 80090ba:	615a      	str	r2, [r3, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295
 80090c4:	619a      	str	r2, [r3, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	2200      	movs	r2, #0
 80090cc:	61da      	str	r2, [r3, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80090ce:	2300      	movs	r3, #0
 80090d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090d2:	e03a      	b.n	800914a <USB_OTG_CoreInitDev+0x17e>
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d8:	3304      	adds	r3, #4
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	627b      	str	r3, [r7, #36]	; 0x24
    if (depctl.b.epena)
 80090e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00e      	beq.n	8009110 <USB_OTG_CoreInitDev+0x144>
    {
      depctl.d32 = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	627b      	str	r3, [r7, #36]	; 0x24
      depctl.b.epdis = 1;
 80090f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      depctl.b.snak = 1;
 8009102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009106:	f043 0308 	orr.w	r3, r3, #8
 800910a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800910e:	e001      	b.n	8009114 <USB_OTG_CoreInitDev+0x148>
    }
    else
    {
      depctl.d32 = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	627b      	str	r3, [r7, #36]	; 0x24
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	3304      	adds	r3, #4
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009122:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009128:	3304      	adds	r3, #4
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4413      	add	r3, r2
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	2200      	movs	r2, #0
 8009132:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009138:	3304      	adds	r3, #4
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	22ff      	movs	r2, #255	; 0xff
 8009142:	609a      	str	r2, [r3, #8]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8009144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009146:	3301      	adds	r3, #1
 8009148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	785b      	ldrb	r3, [r3, #1]
 800914e:	461a      	mov	r2, r3
 8009150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009152:	429a      	cmp	r2, r3
 8009154:	d8be      	bhi.n	80090d4 <USB_OTG_CoreInitDev+0x108>
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8009156:	2300      	movs	r3, #0
 8009158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800915a:	e035      	b.n	80091c8 <USB_OTG_CoreInitDev+0x1fc>
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009160:	3314      	adds	r3, #20
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]
    if (depctl.b.epena)
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00a      	beq.n	800918e <USB_OTG_CoreInitDev+0x1c2>
    {
      depctl.d32 = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	60fb      	str	r3, [r7, #12]
      depctl.b.epdis = 1;
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009182:	73fb      	strb	r3, [r7, #15]
      depctl.b.snak = 1;
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	f043 0308 	orr.w	r3, r3, #8
 800918a:	73fb      	strb	r3, [r7, #15]
 800918c:	e001      	b.n	8009192 <USB_OTG_CoreInitDev+0x1c6>
    }
    else
    {
      depctl.d32 = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009196:	3314      	adds	r3, #20
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	3314      	adds	r3, #20
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	3314      	adds	r3, #20
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	22ff      	movs	r2, #255	; 0xff
 80091c0:	609a      	str	r2, [r3, #8]
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 80091c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c4:	3301      	adds	r3, #1
 80091c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	785b      	ldrb	r3, [r3, #1]
 80091cc:	461a      	mov	r2, r3
 80091ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d8c3      	bhi.n	800915c <USB_OTG_CoreInitDev+0x190>
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  msk.d32 = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	617b      	str	r3, [r7, #20]
  msk.b.txfifoundrn = 1;
 80091d8:	7d7b      	ldrb	r3, [r7, #21]
 80091da:	f043 0301 	orr.w	r3, r3, #1
 80091de:	757b      	strb	r3, [r7, #21]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	6912      	ldr	r2, [r2, #16]
 80091e8:	6911      	ldr	r1, [r2, #16]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	43d2      	mvns	r2, r2
 80091ee:	4011      	ands	r1, r2
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	78db      	ldrb	r3, [r3, #3]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d11b      	bne.n	8009236 <USB_OTG_CoreInitDev+0x26a>
  {
    dthrctl.d32 = 0;
 80091fe:	2300      	movs	r3, #0
 8009200:	613b      	str	r3, [r7, #16]
    dthrctl.b.non_iso_thr_en = 1;
 8009202:	7c3b      	ldrb	r3, [r7, #16]
 8009204:	f043 0301 	orr.w	r3, r3, #1
 8009208:	743b      	strb	r3, [r7, #16]
    dthrctl.b.iso_thr_en = 1;
 800920a:	7c3b      	ldrb	r3, [r7, #16]
 800920c:	f043 0302 	orr.w	r3, r3, #2
 8009210:	743b      	strb	r3, [r7, #16]
    dthrctl.b.tx_thr_len = 64;
 8009212:	8a3b      	ldrh	r3, [r7, #16]
 8009214:	2240      	movs	r2, #64	; 0x40
 8009216:	f362 038a 	bfi	r3, r2, #2, #9
 800921a:	823b      	strh	r3, [r7, #16]
    dthrctl.b.rx_thr_en = 1;
 800921c:	7cbb      	ldrb	r3, [r7, #18]
 800921e:	f043 0301 	orr.w	r3, r3, #1
 8009222:	74bb      	strb	r3, [r7, #18]
    dthrctl.b.rx_thr_len = 64;
 8009224:	8a7b      	ldrh	r3, [r7, #18]
 8009226:	2240      	movs	r2, #64	; 0x40
 8009228:	f362 0349 	bfi	r3, r2, #1, #9
 800922c:	827b      	strh	r3, [r7, #18]
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	631a      	str	r2, [r3, #48]	; 0x30
  }
  USB_OTG_EnableDevInt(pdev);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f806 	bl	8009248 <USB_OTG_EnableDevInt>
  return status;
 800923c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009240:	4618      	mov	r0, r3
 8009242:	3730      	adds	r7, #48	; 0x30
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USB_OTG_EnableDevInt>:
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	60bb      	str	r3, [r7, #8]
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	619a      	str	r2, [r3, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	f04f 32ff 	mov.w	r2, #4294967295
 8009268:	615a      	str	r2, [r3, #20]
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7ff fb12 	bl	8008894 <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	78db      	ldrb	r3, [r3, #3]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d103      	bne.n	8009280 <USB_OTG_EnableDevInt+0x38>
  {
    intmsk.b.rxstsqlvl = 1;
 8009278:	7a3b      	ldrb	r3, [r7, #8]
 800927a:	f043 0310 	orr.w	r3, r3, #16
 800927e:	723b      	strb	r3, [r7, #8]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  intmsk.b.usbsuspend = 1;
 8009280:	7a7b      	ldrb	r3, [r7, #9]
 8009282:	f043 0308 	orr.w	r3, r3, #8
 8009286:	727b      	strb	r3, [r7, #9]
  intmsk.b.usbreset   = 1;
 8009288:	7a7b      	ldrb	r3, [r7, #9]
 800928a:	f043 0310 	orr.w	r3, r3, #16
 800928e:	727b      	strb	r3, [r7, #9]
  intmsk.b.enumdone   = 1;
 8009290:	7a7b      	ldrb	r3, [r7, #9]
 8009292:	f043 0320 	orr.w	r3, r3, #32
 8009296:	727b      	strb	r3, [r7, #9]
  intmsk.b.inepintr   = 1;
 8009298:	7abb      	ldrb	r3, [r7, #10]
 800929a:	f043 0304 	orr.w	r3, r3, #4
 800929e:	72bb      	strb	r3, [r7, #10]
  intmsk.b.outepintr  = 1;
 80092a0:	7abb      	ldrb	r3, [r7, #10]
 80092a2:	f043 0308 	orr.w	r3, r3, #8
 80092a6:	72bb      	strb	r3, [r7, #10]
  intmsk.b.sofintr    = 1; 
 80092a8:	7a3b      	ldrb	r3, [r7, #8]
 80092aa:	f043 0308 	orr.w	r3, r3, #8
 80092ae:	723b      	strb	r3, [r7, #8]

  intmsk.b.incomplisoin    = 1; 
 80092b0:	7abb      	ldrb	r3, [r7, #10]
 80092b2:	f043 0310 	orr.w	r3, r3, #16
 80092b6:	72bb      	strb	r3, [r7, #10]
  intmsk.b.incomplisoout    = 1;   
 80092b8:	7abb      	ldrb	r3, [r7, #10]
 80092ba:	f043 0320 	orr.w	r3, r3, #32
 80092be:	72bb      	strb	r3, [r7, #10]
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	68d2      	ldr	r2, [r2, #12]
 80092c8:	6991      	ldr	r1, [r2, #24]
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	43d2      	mvns	r2, r2
 80092ce:	4011      	ands	r1, r2
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	619a      	str	r2, [r3, #24]
  return status;
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USB_OTG_GetDeviceSpeed>:
*         Get the device speed from the device status register
* @param  None
* @retval status
*/
enum USB_OTG_SPEED USB_OTG_GetDeviceSpeed (USB_OTG_CORE_HANDLE *pdev)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73fb      	strb	r3, [r7, #15]
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	60bb      	str	r3, [r7, #8]
  
  switch (dsts.b.enumspd)
 80092f4:	7a3b      	ldrb	r3, [r7, #8]
 80092f6:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d009      	beq.n	8009314 <USB_OTG_GetDeviceSpeed+0x34>
 8009300:	2b03      	cmp	r3, #3
 8009302:	d004      	beq.n	800930e <USB_OTG_GetDeviceSpeed+0x2e>
 8009304:	2b01      	cmp	r3, #1
 8009306:	d002      	beq.n	800930e <USB_OTG_GetDeviceSpeed+0x2e>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
    speed = USB_SPEED_HIGH;
 8009308:	2303      	movs	r3, #3
 800930a:	73fb      	strb	r3, [r7, #15]
    break;
 800930c:	e005      	b.n	800931a <USB_OTG_GetDeviceSpeed+0x3a>
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    speed = USB_SPEED_FULL;
 800930e:	2302      	movs	r3, #2
 8009310:	73fb      	strb	r3, [r7, #15]
    break;
 8009312:	e002      	b.n	800931a <USB_OTG_GetDeviceSpeed+0x3a>
    
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    speed = USB_SPEED_LOW;
 8009314:	2301      	movs	r3, #1
 8009316:	73fb      	strb	r3, [r7, #15]
    break;
 8009318:	bf00      	nop
  }
  
  return speed;
 800931a:	7bfb      	ldrb	r3, [r7, #15]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USB_OTG_EP0Activate>:
*   for transmitting packets
* @param  None
* @retval USB_OTG_STS : status
*/
USB_OTG_STS  USB_OTG_EP0Activate(USB_OTG_CORE_HANDLE *pdev)
{
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status = USB_OTG_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DSTS_TypeDef    dsts;
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
 8009334:	2300      	movs	r3, #0
 8009336:	60bb      	str	r3, [r7, #8]
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	613b      	str	r3, [r7, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	60fb      	str	r3, [r7, #12]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 8009348:	7c3b      	ldrb	r3, [r7, #16]
 800934a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800934e:	b2db      	uxtb	r3, r3
 8009350:	2b02      	cmp	r3, #2
 8009352:	d004      	beq.n	800935e <USB_OTG_EP0Activate+0x36>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 8009354:	89bb      	ldrh	r3, [r7, #12]
 8009356:	f36f 030a 	bfc	r3, #0, #11
 800935a:	81bb      	strh	r3, [r7, #12]
    break;
 800935c:	e005      	b.n	800936a <USB_OTG_EP0Activate+0x42>
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 800935e:	89bb      	ldrh	r3, [r7, #12]
 8009360:	2203      	movs	r2, #3
 8009362:	f362 030a 	bfi	r3, r2, #0, #11
 8009366:	81bb      	strh	r3, [r7, #12]
    break;
 8009368:	bf00      	nop
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	601a      	str	r2, [r3, #0]
  dctl.b.cgnpinnak = 1;
 8009372:	7a7b      	ldrb	r3, [r7, #9]
 8009374:	f043 0301 	orr.w	r3, r3, #1
 8009378:	727b      	strb	r3, [r7, #9]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	6912      	ldr	r2, [r2, #16]
 8009382:	6851      	ldr	r1, [r2, #4]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	43d2      	mvns	r2, r2
 8009388:	4011      	ands	r1, r2
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	430a      	orrs	r2, r1
 800938e:	605a      	str	r2, [r3, #4]
  return status;
 8009390:	7dfb      	ldrb	r3, [r7, #23]
}
 8009392:	4618      	mov	r0, r3
 8009394:	371c      	adds	r7, #28
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop

080093a0 <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	785b      	ldrb	r3, [r3, #1]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d10f      	bne.n	80093de <USB_OTG_EPActivate+0x3e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	3304      	adds	r3, #4
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	2201      	movs	r2, #1
 80093d4:	fa02 f303 	lsl.w	r3, r2, r3
 80093d8:	b29b      	uxth	r3, r3
 80093da:	813b      	strh	r3, [r7, #8]
 80093dc:	e00e      	b.n	80093fc <USB_OTG_EPActivate+0x5c>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	3314      	adds	r3, #20
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	2201      	movs	r2, #1
 80093f4:	fa02 f303 	lsl.w	r3, r2, r3
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	817b      	strh	r3, [r7, #10]
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	60fb      	str	r3, [r7, #12]
  if (!depctl.b.usbactep)
 8009402:	7b7b      	ldrb	r3, [r7, #13]
 8009404:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d127      	bne.n	800945e <USB_OTG_EPActivate+0xbe>
  {
    depctl.b.mps    = ep->maxpacket;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	b29b      	uxth	r3, r3
 8009414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009418:	b29a      	uxth	r2, r3
 800941a:	89bb      	ldrh	r3, [r7, #12]
 800941c:	f362 030a 	bfi	r3, r2, #0, #11
 8009420:	81bb      	strh	r3, [r7, #12]
    depctl.b.eptype = ep->type;
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	78db      	ldrb	r3, [r3, #3]
 8009426:	f003 0303 	and.w	r3, r3, #3
 800942a:	b2da      	uxtb	r2, r3
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	f362 0383 	bfi	r3, r2, #2, #2
 8009432:	73bb      	strb	r3, [r7, #14]
    depctl.b.txfnum = ep->tx_fifo_num;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	88db      	ldrh	r3, [r3, #6]
 8009438:	b2db      	uxtb	r3, r3
 800943a:	f003 030f 	and.w	r3, r3, #15
 800943e:	b2da      	uxtb	r2, r3
 8009440:	89fb      	ldrh	r3, [r7, #14]
 8009442:	f362 1389 	bfi	r3, r2, #6, #4
 8009446:	81fb      	strh	r3, [r7, #14]
    depctl.b.setd0pid = 1;
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	f043 0310 	orr.w	r3, r3, #16
 800944e:	73fb      	strb	r3, [r7, #15]
    depctl.b.usbactep = 1;
 8009450:	7b7b      	ldrb	r3, [r7, #13]
 8009452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009456:	737b      	strb	r3, [r7, #13]
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	6912      	ldr	r2, [r2, #16]
 8009466:	69d1      	ldr	r1, [r2, #28]
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	430a      	orrs	r2, r1
 800946c:	61da      	str	r2, [r3, #28]
  return status;
 800946e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009470:	4618      	mov	r0, r3
 8009472:	371c      	adds	r7, #28
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800947c:	b480      	push	{r7}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;  
 800948e:	2300      	movs	r3, #0
 8009490:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	785b      	ldrb	r3, [r3, #1]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d10f      	bne.n	80094ba <USB_OTG_EPDeactivate+0x3e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	3304      	adds	r3, #4
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	2201      	movs	r2, #1
 80094b0:	fa02 f303 	lsl.w	r3, r2, r3
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	813b      	strh	r3, [r7, #8]
 80094b8:	e00e      	b.n	80094d8 <USB_OTG_EPDeactivate+0x5c>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	3314      	adds	r3, #20
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	2201      	movs	r2, #1
 80094d0:	fa02 f303 	lsl.w	r3, r2, r3
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	817b      	strh	r3, [r7, #10]
  }
  depctl.b.usbactep = 0;
 80094d8:	7b7b      	ldrb	r3, [r7, #13]
 80094da:	f36f 13c7 	bfc	r3, #7, #1
 80094de:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	6912      	ldr	r2, [r2, #16]
 80094ee:	69d1      	ldr	r1, [r2, #28]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	43d2      	mvns	r2, r2
 80094f4:	400a      	ands	r2, r1
 80094f6:	61da      	str	r2, [r3, #28]
  return status;
 80094f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop

08009508 <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b088      	sub	sp, #32
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef     depctl;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  USB_OTG_DSTS_TypeDef       dsts;    
  uint32_t fifoemptymsk = 0;  
 8009516:	2300      	movs	r3, #0
 8009518:	61bb      	str	r3, [r7, #24]
  
  depctl.d32 = 0;
 800951a:	2300      	movs	r3, #0
 800951c:	617b      	str	r3, [r7, #20]
  deptsiz.d32 = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	613b      	str	r3, [r7, #16]
  /* IN endpoint */
  if (ep->is_in == 1)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	785b      	ldrb	r3, [r3, #1]
 8009526:	2b01      	cmp	r3, #1
 8009528:	f040 80ab 	bne.w	8009682 <USB_OTG_EPStartXfer+0x17a>
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	3304      	adds	r3, #4
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	3304      	adds	r3, #4
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	613b      	str	r3, [r7, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d109      	bne.n	800956c <USB_OTG_EPStartXfer+0x64>
    {
      deptsiz.b.xfersize = 0;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f36f 0312 	bfc	r3, #0, #19
 800955e:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 8009560:	8a7b      	ldrh	r3, [r7, #18]
 8009562:	2201      	movs	r2, #1
 8009564:	f362 03cc 	bfi	r3, r2, #3, #10
 8009568:	827b      	strh	r3, [r7, #18]
 800956a:	e022      	b.n	80095b2 <USB_OTG_EPStartXfer+0xaa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	f362 0312 	bfi	r3, r2, #0, #19
 800957a:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	695a      	ldr	r2, [r3, #20]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	4413      	add	r3, r2
 8009586:	1e5a      	subs	r2, r3, #1
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009590:	b29b      	uxth	r3, r3
 8009592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009596:	b29a      	uxth	r2, r3
 8009598:	8a7b      	ldrh	r3, [r7, #18]
 800959a:	f362 03cc 	bfi	r3, r2, #3, #10
 800959e:	827b      	strh	r3, [r7, #18]

      if (ep->type == EP_TYPE_ISOC)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	78db      	ldrb	r3, [r3, #3]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d104      	bne.n	80095b2 <USB_OTG_EPStartXfer+0xaa>
      {
        deptsiz.b.mc = 1;
 80095a8:	7cfb      	ldrb	r3, [r7, #19]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f362 1346 	bfi	r3, r2, #5, #2
 80095b0:	74fb      	strb	r3, [r7, #19]
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	3304      	adds	r3, #4
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	78db      	ldrb	r3, [r3, #3]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d10a      	bne.n	80095e2 <USB_OTG_EPStartXfer+0xda>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	3304      	adds	r3, #4
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	6912      	ldr	r2, [r2, #16]
 80095de:	615a      	str	r2, [r3, #20]
 80095e0:	e015      	b.n	800960e <USB_OTG_EPStartXfer+0x106>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	78db      	ldrb	r3, [r3, #3]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d011      	beq.n	800960e <USB_OTG_EPStartXfer+0x106>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00d      	beq.n	800960e <USB_OTG_EPStartXfer+0x106>
        {
          fifoemptymsk = 1 << ep->num;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	2201      	movs	r2, #1
 80095f8:	fa02 f303 	lsl.w	r3, r2, r3
 80095fc:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	6912      	ldr	r2, [r2, #16]
 8009606:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8009608:	69ba      	ldr	r2, [r7, #24]
 800960a:	430a      	orrs	r2, r1
 800960c:	635a      	str	r2, [r3, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	78db      	ldrb	r3, [r3, #3]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d114      	bne.n	8009640 <USB_OTG_EPStartXfer+0x138>
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	60fb      	str	r3, [r7, #12]
      
      if (((dsts.b.soffn)&0x1) == 0)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8009624:	b29b      	uxth	r3, r3
 8009626:	f003 0301 	and.w	r3, r3, #1
 800962a:	2b00      	cmp	r3, #0
 800962c:	d104      	bne.n	8009638 <USB_OTG_EPStartXfer+0x130>
      {
        depctl.b.setd1pid = 1;
 800962e:	7dfb      	ldrb	r3, [r7, #23]
 8009630:	f043 0320 	orr.w	r3, r3, #32
 8009634:	75fb      	strb	r3, [r7, #23]
 8009636:	e003      	b.n	8009640 <USB_OTG_EPStartXfer+0x138>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8009638:	7dfb      	ldrb	r3, [r7, #23]
 800963a:	f043 0310 	orr.w	r3, r3, #16
 800963e:	75fb      	strb	r3, [r7, #23]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	f043 0304 	orr.w	r3, r3, #4
 8009646:	75fb      	strb	r3, [r7, #23]
    depctl.b.epena = 1;
 8009648:	7dfb      	ldrb	r3, [r7, #23]
 800964a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800964e:	75fb      	strb	r3, [r7, #23]
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	3304      	adds	r3, #4
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	601a      	str	r2, [r3, #0]

    if (ep->type == EP_TYPE_ISOC)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	78db      	ldrb	r3, [r3, #3]
 8009666:	2b01      	cmp	r3, #1
 8009668:	f040 8088 	bne.w	800977c <USB_OTG_EPStartXfer+0x274>
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	68d9      	ldr	r1, [r3, #12]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	781a      	ldrb	r2, [r3, #0]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	b29b      	uxth	r3, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7ff f972 	bl	8008964 <USB_OTG_WritePacket>
 8009680:	e07c      	b.n	800977c <USB_OTG_EPStartXfer+0x274>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	3314      	adds	r3, #20
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	3314      	adds	r3, #20
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	613b      	str	r3, [r7, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10d      	bne.n	80096ca <USB_OTG_EPStartXfer+0x1c2>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f362 0312 	bfi	r3, r2, #0, #19
 80096bc:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 80096be:	8a7b      	ldrh	r3, [r7, #18]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f362 03cc 	bfi	r3, r2, #3, #10
 80096c6:	827b      	strh	r3, [r7, #18]
 80096c8:	e01f      	b.n	800970a <USB_OTG_EPStartXfer+0x202>
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	695a      	ldr	r2, [r3, #20]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	4413      	add	r3, r2
 80096d4:	1e5a      	subs	r2, r3, #1
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	fbb2 f3f3 	udiv	r3, r2, r3
 80096de:	b29b      	uxth	r3, r3
 80096e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	8a7b      	ldrh	r3, [r7, #18]
 80096e8:	f362 03cc 	bfi	r3, r2, #3, #10
 80096ec:	827b      	strh	r3, [r7, #18]
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 80096ee:	8a7b      	ldrh	r3, [r7, #18]
 80096f0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	6892      	ldr	r2, [r2, #8]
 80096fa:	fb02 f303 	mul.w	r3, r2, r3
 80096fe:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	f362 0312 	bfi	r3, r2, #0, #19
 8009708:	613b      	str	r3, [r7, #16]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	3314      	adds	r3, #20
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	78db      	ldrb	r3, [r3, #3]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d109      	bne.n	8009738 <USB_OTG_EPStartXfer+0x230>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	3314      	adds	r3, #20
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4413      	add	r3, r2
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	6912      	ldr	r2, [r2, #16]
 8009736:	615a      	str	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	78db      	ldrb	r3, [r3, #3]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d10c      	bne.n	800975a <USB_OTG_EPStartXfer+0x252>
    {
      if (ep->even_odd_frame)
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	795b      	ldrb	r3, [r3, #5]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d004      	beq.n	8009752 <USB_OTG_EPStartXfer+0x24a>
      {
        depctl.b.setd1pid = 1;
 8009748:	7dfb      	ldrb	r3, [r7, #23]
 800974a:	f043 0320 	orr.w	r3, r3, #32
 800974e:	75fb      	strb	r3, [r7, #23]
 8009750:	e003      	b.n	800975a <USB_OTG_EPStartXfer+0x252>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8009752:	7dfb      	ldrb	r3, [r7, #23]
 8009754:	f043 0310 	orr.w	r3, r3, #16
 8009758:	75fb      	strb	r3, [r7, #23]
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	f043 0304 	orr.w	r3, r3, #4
 8009760:	75fb      	strb	r3, [r7, #23]
    depctl.b.epena = 1;
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009768:	75fb      	strb	r3, [r7, #23]
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	3314      	adds	r3, #20
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800977c:	7ffb      	ldrb	r3, [r7, #31]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3720      	adds	r7, #32
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop

08009788 <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8009788:	b480      	push	{r7}
 800978a:	b089      	sub	sp, #36	; 0x24
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  USB_OTG_STS                 status = USB_OTG_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef      depctl;
  USB_OTG_DEP0XFRSIZ_TypeDef  deptsiz;
  USB_OTG_INEPREGS          *in_regs;
  uint32_t fifoemptymsk = 0;
 8009796:	2300      	movs	r3, #0
 8009798:	61bb      	str	r3, [r7, #24]
  
  depctl.d32   = 0;
 800979a:	2300      	movs	r3, #0
 800979c:	613b      	str	r3, [r7, #16]
  deptsiz.d32  = 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	60bb      	str	r3, [r7, #8]
  /* IN endpoint */
  if (ep->is_in == 1)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	785b      	ldrb	r3, [r3, #1]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d16f      	bne.n	800988a <USB_OTG_EP0StartXfer+0x102>
  {
    in_regs = pdev->regs.INEP_REGS[0];
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	617b      	str	r3, [r7, #20]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	60bb      	str	r3, [r7, #8]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d109      	bne.n	80097d8 <USB_OTG_EP0StartXfer+0x50>
    {
      deptsiz.b.xfersize = 0;
 80097c4:	7a3b      	ldrb	r3, [r7, #8]
 80097c6:	f36f 0306 	bfc	r3, #0, #7
 80097ca:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80097cc:	7abb      	ldrb	r3, [r7, #10]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f362 03c4 	bfi	r3, r2, #3, #2
 80097d4:	72bb      	strb	r3, [r7, #10]
 80097d6:	e023      	b.n	8009820 <USB_OTG_EP0StartXfer+0x98>
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	695a      	ldr	r2, [r3, #20]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d90e      	bls.n	8009802 <USB_OTG_EP0StartXfer+0x7a>
      {
        ep->xfer_len = ep->maxpacket;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	689a      	ldr	r2, [r3, #8]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	615a      	str	r2, [r3, #20]
        deptsiz.b.xfersize = ep->maxpacket;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	7a3b      	ldrb	r3, [r7, #8]
 80097fa:	f362 0306 	bfi	r3, r2, #0, #7
 80097fe:	723b      	strb	r3, [r7, #8]
 8009800:	e009      	b.n	8009816 <USB_OTG_EP0StartXfer+0x8e>
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	b2db      	uxtb	r3, r3
 8009808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800980c:	b2da      	uxtb	r2, r3
 800980e:	7a3b      	ldrb	r3, [r7, #8]
 8009810:	f362 0306 	bfi	r3, r2, #0, #7
 8009814:	723b      	strb	r3, [r7, #8]
      }
      deptsiz.b.pktcnt = 1;
 8009816:	7abb      	ldrb	r3, [r7, #10]
 8009818:	2201      	movs	r2, #1
 800981a:	f362 03c4 	bfi	r3, r2, #3, #2
 800981e:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	78db      	ldrb	r3, [r3, #3]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d109      	bne.n	8009842 <USB_OTG_EP0StartXfer+0xba>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	3304      	adds	r3, #4
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	683a      	ldr	r2, [r7, #0]
 800983e:	6912      	ldr	r2, [r2, #16]
 8009840:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 8009842:	7cfb      	ldrb	r3, [r7, #19]
 8009844:	f043 0304 	orr.w	r3, r3, #4
 8009848:	74fb      	strb	r3, [r7, #19]
    depctl.b.epena = 1;
 800984a:	7cfb      	ldrb	r3, [r7, #19]
 800984c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009850:	74fb      	strb	r3, [r7, #19]
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	601a      	str	r2, [r3, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	78db      	ldrb	r3, [r3, #3]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d175      	bne.n	800994c <USB_OTG_EP0StartXfer+0x1c4>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d071      	beq.n	800994c <USB_OTG_EP0StartXfer+0x1c4>
      {
        {
          fifoemptymsk |= 1 << ep->num;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2201      	movs	r2, #1
 800986e:	fa02 f303 	lsl.w	r3, r2, r3
 8009872:	69ba      	ldr	r2, [r7, #24]
 8009874:	4313      	orrs	r3, r2
 8009876:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	6912      	ldr	r2, [r2, #16]
 8009880:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	430a      	orrs	r2, r1
 8009886:	635a      	str	r2, [r3, #52]	; 0x34
 8009888:	e060      	b.n	800994c <USB_OTG_EP0StartXfer+0x1c4>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	3314      	adds	r3, #20
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	3314      	adds	r3, #20
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	60bb      	str	r3, [r7, #8]
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	695b      	ldr	r3, [r3, #20]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10f      	bne.n	80098d6 <USB_OTG_EP0StartXfer+0x14e>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	7a3b      	ldrb	r3, [r7, #8]
 80098c4:	f362 0306 	bfi	r3, r2, #0, #7
 80098c8:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80098ca:	7abb      	ldrb	r3, [r7, #10]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f362 03c4 	bfi	r3, r2, #3, #2
 80098d2:	72bb      	strb	r3, [r7, #10]
 80098d4:	e012      	b.n	80098fc <USB_OTG_EP0StartXfer+0x174>
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	689a      	ldr	r2, [r3, #8]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	615a      	str	r2, [r3, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	7a3b      	ldrb	r3, [r7, #8]
 80098ec:	f362 0306 	bfi	r3, r2, #0, #7
 80098f0:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80098f2:	7abb      	ldrb	r3, [r7, #10]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f362 03c4 	bfi	r3, r2, #3, #2
 80098fa:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	3314      	adds	r3, #20
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	611a      	str	r2, [r3, #16]
    if (pdev->cfg.dma_enable == 1)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	78db      	ldrb	r3, [r3, #3]
 8009912:	2b01      	cmp	r3, #1
 8009914:	d109      	bne.n	800992a <USB_OTG_EP0StartXfer+0x1a2>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	3314      	adds	r3, #20
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	683a      	ldr	r2, [r7, #0]
 8009926:	6912      	ldr	r2, [r2, #16]
 8009928:	615a      	str	r2, [r3, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
 800992a:	7cfb      	ldrb	r3, [r7, #19]
 800992c:	f043 0304 	orr.w	r3, r3, #4
 8009930:	74fb      	strb	r3, [r7, #19]
    depctl.b.epena = 1;
 8009932:	7cfb      	ldrb	r3, [r7, #19]
 8009934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009938:	74fb      	strb	r3, [r7, #19]
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	3314      	adds	r3, #20
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	601a      	str	r2, [r3, #0]
    
  }
  return status;
 800994c:	7ffb      	ldrb	r3, [r7, #31]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3724      	adds	r7, #36	; 0x24
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop

0800995c <USB_OTG_EPSetStall>:
* @brief  USB_OTG_EPSetStall : Set the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPSetStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800995c:	b480      	push	{r7}
 800995e:	b087      	sub	sp, #28
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	60fb      	str	r3, [r7, #12]
  if (ep->is_in == 1)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	785b      	ldrb	r3, [r3, #1]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d11c      	bne.n	80099b0 <USB_OTG_EPSetStall+0x54>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	3304      	adds	r3, #4
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	60fb      	str	r3, [r7, #12]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b00      	cmp	r3, #0
 8009996:	d003      	beq.n	80099a0 <USB_OTG_EPSetStall+0x44>
    {
      depctl.b.epdis = 1;
 8009998:	7bfb      	ldrb	r3, [r7, #15]
 800999a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800999e:	73fb      	strb	r3, [r7, #15]
    }
    depctl.b.stall = 1;
 80099a0:	7bbb      	ldrb	r3, [r7, #14]
 80099a2:	f043 0320 	orr.w	r3, r3, #32
 80099a6:	73bb      	strb	r3, [r7, #14]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	e011      	b.n	80099d4 <USB_OTG_EPSetStall+0x78>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	3314      	adds	r3, #20
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	60fb      	str	r3, [r7, #12]
    /* set the stall bit */
    depctl.b.stall = 1;
 80099c6:	7bbb      	ldrb	r3, [r7, #14]
 80099c8:	f043 0320 	orr.w	r3, r3, #32
 80099cc:	73bb      	strb	r3, [r7, #14]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	601a      	str	r2, [r3, #0]
  }
  return status;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	371c      	adds	r7, #28
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop

080099e4 <USB_OTG_EPClearStall>:
* @brief  Clear the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPClearStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]
  
  if (ep->is_in == 1)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	785b      	ldrb	r3, [r3, #1]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d108      	bne.n	8009a10 <USB_OTG_EPClearStall+0x2c>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	3304      	adds	r3, #4
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	617b      	str	r3, [r7, #20]
 8009a0e:	e007      	b.n	8009a20 <USB_OTG_EPClearStall+0x3c>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	3314      	adds	r3, #20
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4413      	add	r3, r2
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	617b      	str	r3, [r7, #20]
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	60fb      	str	r3, [r7, #12]
  /* clear the stall bits */
  depctl.b.stall = 0;
 8009a26:	7bbb      	ldrb	r3, [r7, #14]
 8009a28:	f36f 1345 	bfc	r3, #5, #1
 8009a2c:	73bb      	strb	r3, [r7, #14]
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	78db      	ldrb	r3, [r3, #3]
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	d003      	beq.n	8009a3e <USB_OTG_EPClearStall+0x5a>
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	78db      	ldrb	r3, [r3, #3]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d103      	bne.n	8009a46 <USB_OTG_EPClearStall+0x62>
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	f043 0310 	orr.w	r3, r3, #16
 8009a44:	73fb      	strb	r3, [r7, #15]
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	601a      	str	r2, [r3, #0]
  return status;
 8009a4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	371c      	adds	r7, #28
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop

08009a5c <USB_OTG_ReadDevAllOutEp_itr>:
* @brief  USB_OTG_ReadDevAllOutEp_itr : returns OUT endpoint interrupt bits
* @param  pdev : Selected device
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	4013      	ands	r3, r2
 8009a76:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	0c1b      	lsrs	r3, r3, #16
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <USB_OTG_ReadDevOutEP_itr>:
* @param  pdev : Selected device
* @param  ep : end point number
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	460b      	mov	r3, r1
 8009a92:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 8009a94:	78fb      	ldrb	r3, [r7, #3]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	3314      	adds	r3, #20
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	4013      	ands	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]
  return v;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3714      	adds	r7, #20
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop

08009ac0 <USB_OTG_ReadDevAllInEPItr>:
* @brief  USB_OTG_ReadDevAllInEPItr : Get int status register
* @param  pdev : Selected device
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	4013      	ands	r3, r2
 8009ada:	60fb      	str	r3, [r7, #12]
  return (v & 0xffff);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	b29b      	uxth	r3, r3
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	613b      	str	r3, [r7, #16]
  doeptsize0.b.supcnt = 3;
 8009af8:	7cfb      	ldrb	r3, [r7, #19]
 8009afa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009afe:	74fb      	strb	r3, [r7, #19]
  doeptsize0.b.pktcnt = 1;
 8009b00:	7cbb      	ldrb	r3, [r7, #18]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f362 03c4 	bfi	r3, r2, #3, #2
 8009b08:	74bb      	strb	r3, [r7, #18]
  doeptsize0.b.xfersize = 8 * 3;
 8009b0a:	7c3b      	ldrb	r3, [r7, #16]
 8009b0c:	2218      	movs	r2, #24
 8009b0e:	f362 0306 	bfi	r3, r2, #0, #7
 8009b12:	743b      	strb	r3, [r7, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	78db      	ldrb	r3, [r3, #3]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d116      	bne.n	8009b52 <USB_OTG_EP0_OutStart+0x66>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	f502 62b9 	add.w	r2, r2, #1480	; 0x5c8
 8009b32:	615a      	str	r2, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	60fb      	str	r3, [r7, #12]
    doepctl.b.epena = 1;
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
 8009b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b42:	73fb      	strb	r3, [r7, #15]
    doepctl.d32 = 0x80008000;
 8009b44:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8009b48:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	601a      	str	r2, [r3, #0]
  }
}
 8009b52:	371c      	adds	r7, #28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <USB_OTG_UngateClock>:
* @brief  USB_OTG_UngateClock : active USB Core clock
* @param  None
* @retval : None
*/
void USB_OTG_UngateClock(USB_OTG_CORE_HANDLE *pdev)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  if(pdev->cfg.low_power)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	7a9b      	ldrb	r3, [r3, #10]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d01b      	beq.n	8009ba4 <USB_OTG_UngateClock+0x48>
  {
    
    USB_OTG_DSTS_TypeDef     dsts;
    USB_OTG_PCGCCTL_TypeDef  power; 
    
    dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	60fb      	str	r3, [r7, #12]
    
    if(dsts.b.suspsts == 1)
 8009b74:	7b3b      	ldrb	r3, [r7, #12]
 8009b76:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d111      	bne.n	8009ba4 <USB_OTG_UngateClock+0x48>
    {
      /* un-gate USB Core clock */
      power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	60bb      	str	r3, [r7, #8]
      power.b.gatehclk = 0;
 8009b8a:	7a3b      	ldrb	r3, [r7, #8]
 8009b8c:	f36f 0341 	bfc	r3, #1, #1
 8009b90:	723b      	strb	r3, [r7, #8]
      power.b.stoppclk = 0;
 8009b92:	7a3b      	ldrb	r3, [r7, #8]
 8009b94:	f36f 0300 	bfc	r3, #0, #1
 8009b98:	723b      	strb	r3, [r7, #8]
      USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	601a      	str	r2, [r3, #0]
      
    }
  }
}
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop

08009bb0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK;  
 8009bba:	2300      	movs	r3, #0
 8009bbc:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	785b      	ldrb	r3, [r3, #1]
 8009bc2:	2b09      	cmp	r3, #9
 8009bc4:	d839      	bhi.n	8009c3a <USBD_StdDevReq+0x8a>
 8009bc6:	a201      	add	r2, pc, #4	; (adr r2, 8009bcc <USBD_StdDevReq+0x1c>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009c1d 	.word	0x08009c1d
 8009bd0:	08009c31 	.word	0x08009c31
 8009bd4:	08009c3b 	.word	0x08009c3b
 8009bd8:	08009c27 	.word	0x08009c27
 8009bdc:	08009c3b 	.word	0x08009c3b
 8009be0:	08009bff 	.word	0x08009bff
 8009be4:	08009bf5 	.word	0x08009bf5
 8009be8:	08009c3b 	.word	0x08009c3b
 8009bec:	08009c13 	.word	0x08009c13
 8009bf0:	08009c09 	.word	0x08009c09
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	f000 f936 	bl	8009e68 <USBD_GetDescriptor>
    break;
 8009bfc:	e022      	b.n	8009c44 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	f000 fa0d 	bl	800a020 <USBD_SetAddress>
    break;
 8009c06:	e01d      	b.n	8009c44 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	f000 fa46 	bl	800a09c <USBD_SetConfig>
    break;
 8009c10:	e018      	b.n	8009c44 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	f000 fabb 	bl	800a190 <USBD_GetConfig>
    break;
 8009c1a:	e013      	b.n	8009c44 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	f000 fae6 	bl	800a1f0 <USBD_GetStatus>
    break;
 8009c24:	e00e      	b.n	8009c44 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	f000 fb09 	bl	800a240 <USBD_SetFeature>
    break;
 8009c2e:	e009      	b.n	8009c44 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	f000 fb6a 	bl	800a30c <USBD_ClrFeature>
    break;
 8009c38:	e004      	b.n	8009c44 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	f000 fbd3 	bl	800a3e8 <USBD_CtlError>
    break;
 8009c42:	bf00      	nop
  }
  
  return ret;
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop

08009c50 <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK; 
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev.device_status) 
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8009c64:	2b03      	cmp	r3, #3
 8009c66:	d11c      	bne.n	8009ca2 <USBD_StdItfReq+0x52>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	889b      	ldrh	r3, [r3, #4]
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d811      	bhi.n	8009c96 <USBD_StdItfReq+0x46>
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	88db      	ldrh	r3, [r3, #6]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10b      	bne.n	8009ca0 <USBD_StdItfReq+0x50>
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d108      	bne.n	8009ca0 <USBD_StdItfReq+0x50>
      {
         USBD_CtlSendStatus(pdev);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fc8c 	bl	800a5ac <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8009c94:	e00a      	b.n	8009cac <USBD_StdItfReq+0x5c>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	f000 fba5 	bl	800a3e8 <USBD_CtlError>
    }
    break;
 8009c9e:	e005      	b.n	8009cac <USBD_StdItfReq+0x5c>
 8009ca0:	e004      	b.n	8009cac <USBD_StdItfReq+0x5c>
    
  default:
     USBD_CtlError(pdev , req);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	f000 fb9f 	bl	800a3e8 <USBD_CtlError>
    break;
 8009caa:	bf00      	nop
  }
  return ret;
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop

08009cb8 <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	73fb      	strb	r3, [r7, #15]
  
  ep_addr  = LOBYTE(req->wIndex);   
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	889b      	ldrh	r3, [r3, #4]
 8009cca:	73bb      	strb	r3, [r7, #14]
  
  switch (req->bRequest) 
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	785b      	ldrb	r3, [r3, #1]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d039      	beq.n	8009d48 <USBD_StdEPReq+0x90>
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	d002      	beq.n	8009cde <USBD_StdEPReq+0x26>
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d06b      	beq.n	8009db4 <USBD_StdEPReq+0xfc>
      break;
    }
    break;
    
  default:
    break;
 8009cdc:	e0bc      	b.n	8009e58 <USBD_StdEPReq+0x1a0>
  switch (req->bRequest) 
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev.device_status) 
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d002      	beq.n	8009cee <USBD_StdEPReq+0x36>
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	d00d      	beq.n	8009d08 <USBD_StdEPReq+0x50>
 8009cec:	e026      	b.n	8009d3c <USBD_StdEPReq+0x84>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d008      	beq.n	8009d06 <USBD_StdEPReq+0x4e>
 8009cf4:	7bbb      	ldrb	r3, [r7, #14]
 8009cf6:	2b80      	cmp	r3, #128	; 0x80
 8009cf8:	d005      	beq.n	8009d06 <USBD_StdEPReq+0x4e>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	f7fe fd36 	bl	8008770 <DCD_EP_Stall>
      }
      break;	
 8009d04:	e01f      	b.n	8009d46 <USBD_StdEPReq+0x8e>
 8009d06:	e01e      	b.n	8009d46 <USBD_StdEPReq+0x8e>
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	885b      	ldrh	r3, [r3, #2]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10a      	bne.n	8009d26 <USBD_StdEPReq+0x6e>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d007      	beq.n	8009d26 <USBD_StdEPReq+0x6e>
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	2b80      	cmp	r3, #128	; 0x80
 8009d1a:	d004      	beq.n	8009d26 <USBD_StdEPReq+0x6e>
        { 
          DCD_EP_Stall(pdev , ep_addr);
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	4619      	mov	r1, r3
 8009d22:	f7fe fd25 	bl	8008770 <DCD_EP_Stall>
          
        }
      }
      pdev->dev.class_cb->Setup (pdev, req);   
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fc39 	bl	800a5ac <USBD_CtlSendStatus>
      
      break;
 8009d3a:	e004      	b.n	8009d46 <USBD_StdEPReq+0x8e>
      
    default:                         
      USBD_CtlError(pdev , req);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	6839      	ldr	r1, [r7, #0]
 8009d40:	f000 fb52 	bl	800a3e8 <USBD_CtlError>
      break;    
 8009d44:	bf00      	nop
    }
    break;
 8009d46:	e087      	b.n	8009e58 <USBD_StdEPReq+0x1a0>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev.device_status) 
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d002      	beq.n	8009d58 <USBD_StdEPReq+0xa0>
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d00d      	beq.n	8009d72 <USBD_StdEPReq+0xba>
 8009d56:	e027      	b.n	8009da8 <USBD_StdEPReq+0xf0>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d008      	beq.n	8009d70 <USBD_StdEPReq+0xb8>
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
 8009d60:	2b80      	cmp	r3, #128	; 0x80
 8009d62:	d005      	beq.n	8009d70 <USBD_StdEPReq+0xb8>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	f7fe fd01 	bl	8008770 <DCD_EP_Stall>
      }
      break;	
 8009d6e:	e020      	b.n	8009db2 <USBD_StdEPReq+0xfa>
 8009d70:	e01f      	b.n	8009db2 <USBD_StdEPReq+0xfa>
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	885b      	ldrh	r3, [r3, #2]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d115      	bne.n	8009da6 <USBD_StdEPReq+0xee>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009d7a:	7bbb      	ldrb	r3, [r7, #14]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00e      	beq.n	8009d9e <USBD_StdEPReq+0xe6>
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	2b80      	cmp	r3, #128	; 0x80
 8009d84:	d00b      	beq.n	8009d9e <USBD_StdEPReq+0xe6>
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
 8009d86:	7bbb      	ldrb	r3, [r7, #14]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	f7fe fd2a 	bl	80087e4 <DCD_EP_ClrStall>
          pdev->dev.class_cb->Setup (pdev, req);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fc04 	bl	800a5ac <USBD_CtlSendStatus>
      }
      break;
 8009da4:	e005      	b.n	8009db2 <USBD_StdEPReq+0xfa>
 8009da6:	e004      	b.n	8009db2 <USBD_StdEPReq+0xfa>
      
    default:                         
       USBD_CtlError(pdev , req);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	f000 fb1c 	bl	800a3e8 <USBD_CtlError>
      break;    
 8009db0:	bf00      	nop
    }
    break;
 8009db2:	e051      	b.n	8009e58 <USBD_StdEPReq+0x1a0>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d002      	beq.n	8009dc4 <USBD_StdEPReq+0x10c>
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d00d      	beq.n	8009dde <USBD_StdEPReq+0x126>
 8009dc2:	e043      	b.n	8009e4c <USBD_StdEPReq+0x194>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009dc4:	7bbb      	ldrb	r3, [r7, #14]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d008      	beq.n	8009ddc <USBD_StdEPReq+0x124>
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
 8009dcc:	2b80      	cmp	r3, #128	; 0x80
 8009dce:	d005      	beq.n	8009ddc <USBD_StdEPReq+0x124>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	f7fe fccb 	bl	8008770 <DCD_EP_Stall>
      }
      break;	
 8009dda:	e03c      	b.n	8009e56 <USBD_StdEPReq+0x19e>
 8009ddc:	e03b      	b.n	8009e56 <USBD_StdEPReq+0x19e>
      
    case USB_OTG_CONFIGURED:         
      
      
      if ((ep_addr & 0x80)== 0x80)
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	b25b      	sxtb	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	da15      	bge.n	8009e12 <USBD_StdEPReq+0x15a>
      {
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dec:	6879      	ldr	r1, [r7, #4]
 8009dee:	4613      	mov	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	00db      	lsls	r3, r3, #3
 8009df6:	440b      	add	r3, r1
 8009df8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8009dfc:	789b      	ldrb	r3, [r3, #2]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d003      	beq.n	8009e0a <USBD_StdEPReq+0x152>
        {
          USBD_ep_status = 0x0001;     
 8009e02:	4b18      	ldr	r3, [pc, #96]	; (8009e64 <USBD_StdEPReq+0x1ac>)
 8009e04:	2201      	movs	r2, #1
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	e01a      	b.n	8009e40 <USBD_StdEPReq+0x188>
        }
        else
        {
          USBD_ep_status = 0x0000;  
 8009e0a:	4b16      	ldr	r3, [pc, #88]	; (8009e64 <USBD_StdEPReq+0x1ac>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	601a      	str	r2, [r3, #0]
 8009e10:	e016      	b.n	8009e40 <USBD_StdEPReq+0x188>
        }
      }
      else if ((ep_addr & 0x80)== 0x00)
 8009e12:	7bbb      	ldrb	r3, [r7, #14]
 8009e14:	b25b      	sxtb	r3, r3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	db12      	blt.n	8009e40 <USBD_StdEPReq+0x188>
      {
        if(pdev->dev.out_ep[ep_addr].is_stall)
 8009e1a:	7bba      	ldrb	r2, [r7, #14]
 8009e1c:	6879      	ldr	r1, [r7, #4]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	00db      	lsls	r3, r3, #3
 8009e26:	440b      	add	r3, r1
 8009e28:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8009e2c:	789b      	ldrb	r3, [r3, #2]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d003      	beq.n	8009e3a <USBD_StdEPReq+0x182>
        {
          USBD_ep_status = 0x0001;     
 8009e32:	4b0c      	ldr	r3, [pc, #48]	; (8009e64 <USBD_StdEPReq+0x1ac>)
 8009e34:	2201      	movs	r2, #1
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	e002      	b.n	8009e40 <USBD_StdEPReq+0x188>
        }
        
        else 
        {
          USBD_ep_status = 0x0000;     
 8009e3a:	4b0a      	ldr	r3, [pc, #40]	; (8009e64 <USBD_StdEPReq+0x1ac>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	601a      	str	r2, [r3, #0]
        }      
      }
      USBD_CtlSendData (pdev,
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	4908      	ldr	r1, [pc, #32]	; (8009e64 <USBD_StdEPReq+0x1ac>)
 8009e44:	2202      	movs	r2, #2
 8009e46:	f000 fb49 	bl	800a4dc <USBD_CtlSendData>
                        (uint8_t *)&USBD_ep_status,
                        2);
      break;
 8009e4a:	e004      	b.n	8009e56 <USBD_StdEPReq+0x19e>
      
    default:                         
       USBD_CtlError(pdev , req);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	f000 faca 	bl	800a3e8 <USBD_CtlError>
      break;
 8009e54:	bf00      	nop
    }
    break;
 8009e56:	bf00      	nop
    
  default:
    break;
  }
  return ret;
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	20000c50 	.word	0x20000c50

08009e68 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USB_OTG_CORE_HANDLE  *pdev, 
                               USB_SETUP_REQ *req)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	885b      	ldrh	r3, [r3, #2]
 8009e76:	0a1b      	lsrs	r3, r3, #8
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	2b06      	cmp	r3, #6
 8009e7e:	f200 80b1 	bhi.w	8009fe4 <USBD_GetDescriptor+0x17c>
 8009e82:	a201      	add	r2, pc, #4	; (adr r2, 8009e88 <USBD_GetDescriptor+0x20>)
 8009e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e88:	08009ea5 	.word	0x08009ea5
 8009e8c:	08009ed7 	.word	0x08009ed7
 8009e90:	08009f01 	.word	0x08009f01
 8009e94:	08009fe5 	.word	0x08009fe5
 8009e98:	08009fe5 	.word	0x08009fe5
 8009e9c:	08009fd1 	.word	0x08009fd1
 8009ea0:	08009fdb 	.word	0x08009fdb
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	7891      	ldrb	r1, [r2, #2]
 8009eb0:	f107 020a 	add.w	r2, r7, #10
 8009eb4:	4608      	mov	r0, r1
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	4798      	blx	r3
 8009eba:	60f8      	str	r0, [r7, #12]
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	88db      	ldrh	r3, [r3, #6]
 8009ec0:	2b40      	cmp	r3, #64	; 0x40
 8009ec2:	d004      	beq.n	8009ece <USBD_GetDescriptor+0x66>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d102      	bne.n	8009ed4 <USBD_GetDescriptor+0x6c>
    {                  
      len = 8;
 8009ece:	2308      	movs	r3, #8
 8009ed0:	817b      	strh	r3, [r7, #10]
    }
    break;
 8009ed2:	e08c      	b.n	8009fee <USBD_GetDescriptor+0x186>
 8009ed4:	e08b      	b.n	8009fee <USBD_GetDescriptor+0x186>
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8009edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	7891      	ldrb	r1, [r2, #2]
 8009ee2:	f107 020a 	add.w	r2, r7, #10
 8009ee6:	4608      	mov	r0, r1
 8009ee8:	4611      	mov	r1, r2
 8009eea:	4798      	blx	r3
 8009eec:	60f8      	str	r0, [r7, #12]
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	701a      	strb	r2, [r3, #0]
    pdev->dev.pConfig_descriptor = pbuf;    
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
    break;
 8009efe:	e076      	b.n	8009fee <USBD_GetDescriptor+0x186>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	885b      	ldrh	r3, [r3, #2]
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b05      	cmp	r3, #5
 8009f08:	d85c      	bhi.n	8009fc4 <USBD_GetDescriptor+0x15c>
 8009f0a:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <USBD_GetDescriptor+0xa8>)
 8009f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f10:	08009f29 	.word	0x08009f29
 8009f14:	08009f43 	.word	0x08009f43
 8009f18:	08009f5d 	.word	0x08009f5d
 8009f1c:	08009f77 	.word	0x08009f77
 8009f20:	08009f91 	.word	0x08009f91
 8009f24:	08009fab 	.word	0x08009fab
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	7891      	ldrb	r1, [r2, #2]
 8009f34:	f107 020a 	add.w	r2, r7, #10
 8009f38:	4608      	mov	r0, r1
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	4798      	blx	r3
 8009f3e:	60f8      	str	r0, [r7, #12]
      break;
 8009f40:	e045      	b.n	8009fce <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	7891      	ldrb	r1, [r2, #2]
 8009f4e:	f107 020a 	add.w	r2, r7, #10
 8009f52:	4608      	mov	r0, r1
 8009f54:	4611      	mov	r1, r2
 8009f56:	4798      	blx	r3
 8009f58:	60f8      	str	r0, [r7, #12]
      break;
 8009f5a:	e038      	b.n	8009fce <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	7891      	ldrb	r1, [r2, #2]
 8009f68:	f107 020a 	add.w	r2, r7, #10
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	4611      	mov	r1, r2
 8009f70:	4798      	blx	r3
 8009f72:	60f8      	str	r0, [r7, #12]
      break;
 8009f74:	e02b      	b.n	8009fce <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	7891      	ldrb	r1, [r2, #2]
 8009f82:	f107 020a 	add.w	r2, r7, #10
 8009f86:	4608      	mov	r0, r1
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	60f8      	str	r0, [r7, #12]
      break;
 8009f8e:	e01e      	b.n	8009fce <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8009f96:	695b      	ldr	r3, [r3, #20]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	7891      	ldrb	r1, [r2, #2]
 8009f9c:	f107 020a 	add.w	r2, r7, #10
 8009fa0:	4608      	mov	r0, r1
 8009fa2:	4611      	mov	r1, r2
 8009fa4:	4798      	blx	r3
 8009fa6:	60f8      	str	r0, [r7, #12]
      break;
 8009fa8:	e011      	b.n	8009fce <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	7891      	ldrb	r1, [r2, #2]
 8009fb6:	f107 020a 	add.w	r2, r7, #10
 8009fba:	4608      	mov	r0, r1
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	4798      	blx	r3
 8009fc0:	60f8      	str	r0, [r7, #12]
      break;
 8009fc2:	e004      	b.n	8009fce <USBD_GetDescriptor+0x166>
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	f000 fa0e 	bl	800a3e8 <USBD_CtlError>
      return;
 8009fcc:	e024      	b.n	800a018 <USBD_GetDescriptor+0x1b0>
#endif /* USBD_CtlError(pdev , req); */      
    }
    break;
 8009fce:	e00e      	b.n	8009fee <USBD_GetDescriptor+0x186>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	f000 fa08 	bl	800a3e8 <USBD_CtlError>
      return;
 8009fd8:	e01e      	b.n	800a018 <USBD_GetDescriptor+0x1b0>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	f000 fa03 	bl	800a3e8 <USBD_CtlError>
      return;
 8009fe2:	e019      	b.n	800a018 <USBD_GetDescriptor+0x1b0>
#endif     

    
  default: 
     USBD_CtlError(pdev , req);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	f000 f9fe 	bl	800a3e8 <USBD_CtlError>
    return;
 8009fec:	e014      	b.n	800a018 <USBD_GetDescriptor+0x1b0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8009fee:	897b      	ldrh	r3, [r7, #10]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d011      	beq.n	800a018 <USBD_GetDescriptor+0x1b0>
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	88db      	ldrh	r3, [r3, #6]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00d      	beq.n	800a018 <USBD_GetDescriptor+0x1b0>
  {
    
    len = MIN(len , req->wLength);
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	88da      	ldrh	r2, [r3, #6]
 800a000:	897b      	ldrh	r3, [r7, #10]
 800a002:	429a      	cmp	r2, r3
 800a004:	bf38      	it	cc
 800a006:	4613      	movcc	r3, r2
 800a008:	b29b      	uxth	r3, r3
 800a00a:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800a00c:	897b      	ldrh	r3, [r7, #10]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	68f9      	ldr	r1, [r7, #12]
 800a012:	461a      	mov	r2, r3
 800a014:	f000 fa62 	bl	800a4dc <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop

0800a020 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	889b      	ldrh	r3, [r3, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d12d      	bne.n	800a08e <USBD_SetAddress+0x6e>
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	88db      	ldrh	r3, [r3, #6]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d129      	bne.n	800a08e <USBD_SetAddress+0x6e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	885b      	ldrh	r3, [r3, #2]
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a044:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	d104      	bne.n	800a05a <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	6839      	ldr	r1, [r7, #0]
 800a054:	f000 f9c8 	bl	800a3e8 <USBD_CtlError>
 800a058:	e018      	b.n	800a08c <USBD_SetAddress+0x6c>
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	7bfa      	ldrb	r2, [r7, #15]
 800a05e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
      DCD_EP_SetAddress(pdev, dev_addr);               
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	4619      	mov	r1, r3
 800a068:	f7fe fbf6 	bl	8008858 <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fa9d 	bl	800a5ac <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800a072:	7bfb      	ldrb	r3, [r7, #15]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d004      	beq.n	800a082 <USBD_SetAddress+0x62>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2202      	movs	r2, #2
 800a07c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 800a080:	e004      	b.n	800a08c <USBD_SetAddress+0x6c>
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 800a08a:	e004      	b.n	800a096 <USBD_SetAddress+0x76>
 800a08c:	e003      	b.n	800a096 <USBD_SetAddress+0x76>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	6839      	ldr	r1, [r7, #0]
 800a092:	f000 f9a9 	bl	800a3e8 <USBD_CtlError>
  } 
}
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	885b      	ldrh	r3, [r3, #2]
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	4b37      	ldr	r3, [pc, #220]	; (800a18c <USBD_SetConfig+0xf0>)
 800a0ae:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 800a0b0:	4b36      	ldr	r3, [pc, #216]	; (800a18c <USBD_SetConfig+0xf0>)
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d904      	bls.n	800a0c2 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	f000 f994 	bl	800a3e8 <USBD_CtlError>
 800a0c0:	e060      	b.n	800a184 <USBD_SetConfig+0xe8>
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d002      	beq.n	800a0d2 <USBD_SetConfig+0x36>
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d01b      	beq.n	800a108 <USBD_SetConfig+0x6c>
 800a0d0:	e053      	b.n	800a17a <USBD_SetConfig+0xde>
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
 800a0d2:	4b2e      	ldr	r3, [pc, #184]	; (800a18c <USBD_SetConfig+0xf0>)
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d012      	beq.n	800a100 <USBD_SetConfig+0x64>
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 800a0da:	4b2c      	ldr	r3, [pc, #176]	; (800a18c <USBD_SetConfig+0xf0>)
 800a0dc:	781a      	ldrb	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2203      	movs	r2, #3
 800a0e8:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        USBD_SetCfg(pdev , cfgidx);
 800a0ec:	4b27      	ldr	r3, [pc, #156]	; (800a18c <USBD_SetConfig+0xf0>)
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	f000 fc3c 	bl	800a970 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fa57 	bl	800a5ac <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800a0fe:	e041      	b.n	800a184 <USBD_SetConfig+0xe8>
        USBD_SetCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fa53 	bl	800a5ac <USBD_CtlSendStatus>
      }
      break;
 800a106:	e03d      	b.n	800a184 <USBD_SetConfig+0xe8>
      
    case USB_OTG_CONFIGURED:
      if (cfgidx == 0) 
 800a108:	4b20      	ldr	r3, [pc, #128]	; (800a18c <USBD_SetConfig+0xf0>)
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d112      	bne.n	800a136 <USBD_SetConfig+0x9a>
      {                           
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2202      	movs	r2, #2
 800a114:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
 800a118:	4b1c      	ldr	r3, [pc, #112]	; (800a18c <USBD_SetConfig+0xf0>)
 800a11a:	781a      	ldrb	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_ClrCfg(pdev , cfgidx);
 800a122:	4b1a      	ldr	r3, [pc, #104]	; (800a18c <USBD_SetConfig+0xf0>)
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	4619      	mov	r1, r3
 800a12a:	f000 fc39 	bl	800a9a0 <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa3c 	bl	800a5ac <USBD_CtlSendStatus>
 800a134:	e020      	b.n	800a178 <USBD_SetConfig+0xdc>
        
      } 
      else  if (cfgidx != pdev->dev.device_config) 
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 800a13c:	4b13      	ldr	r3, [pc, #76]	; (800a18c <USBD_SetConfig+0xf0>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	d015      	beq.n	800a170 <USBD_SetConfig+0xd4>
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	4619      	mov	r1, r3
 800a14e:	f000 fc27 	bl	800a9a0 <USBD_ClrCfg>
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 800a152:	4b0e      	ldr	r3, [pc, #56]	; (800a18c <USBD_SetConfig+0xf0>)
 800a154:	781a      	ldrb	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 800a15c:	4b0b      	ldr	r3, [pc, #44]	; (800a18c <USBD_SetConfig+0xf0>)
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	4619      	mov	r1, r3
 800a164:	f000 fc04 	bl	800a970 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fa1f 	bl	800a5ac <USBD_CtlSendStatus>
 800a16e:	e003      	b.n	800a178 <USBD_SetConfig+0xdc>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fa1b 	bl	800a5ac <USBD_CtlSendStatus>
      }
      break;
 800a176:	e005      	b.n	800a184 <USBD_SetConfig+0xe8>
 800a178:	e004      	b.n	800a184 <USBD_SetConfig+0xe8>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	f000 f933 	bl	800a3e8 <USBD_CtlError>
      break;
 800a182:	bf00      	nop
    }
  }
}
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	20000c5c 	.word	0x20000c5c

0800a190 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
 
  if (req->wLength != 1) 
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	88db      	ldrh	r3, [r3, #6]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d004      	beq.n	800a1ac <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	f000 f91f 	bl	800a3e8 <USBD_CtlError>
 800a1aa:	e01b      	b.n	800a1e4 <USBD_GetConfig+0x54>
  }
  else 
  {
    switch (pdev->dev.device_status )  
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d002      	beq.n	800a1bc <USBD_GetConfig+0x2c>
 800a1b6:	2b03      	cmp	r3, #3
 800a1b8:	d006      	beq.n	800a1c8 <USBD_GetConfig+0x38>
 800a1ba:	e00e      	b.n	800a1da <USBD_GetConfig+0x4a>
    {
    case USB_OTG_ADDRESSED:                     
      
      USBD_CtlSendData (pdev, 
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	490b      	ldr	r1, [pc, #44]	; (800a1ec <USBD_GetConfig+0x5c>)
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f000 f98b 	bl	800a4dc <USBD_CtlSendData>
                        (uint8_t *)&USBD_default_cfg,
                        1);
      break;
 800a1c6:	e00d      	b.n	800a1e4 <USBD_GetConfig+0x54>
      
    case USB_OTG_CONFIGURED:                   
      
      USBD_CtlSendData (pdev, 
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f000 f982 	bl	800a4dc <USBD_CtlSendData>
                        &pdev->dev.device_config,
                        1);
      break;
 800a1d8:	e004      	b.n	800a1e4 <USBD_GetConfig+0x54>
      
    default:
       USBD_CtlError(pdev , req);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	f000 f903 	bl	800a3e8 <USBD_CtlError>
      break;
 800a1e2:	bf00      	nop
    }
  }
}
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	20000c54 	.word	0x20000c54

0800a1f0 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  
  switch (pdev->dev.device_status) 
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800a200:	3b02      	subs	r3, #2
 800a202:	2b01      	cmp	r3, #1
 800a204:	d811      	bhi.n	800a22a <USBD_GetStatus+0x3a>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    
    if (pdev->dev.DevRemoteWakeup) 
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d003      	beq.n	800a218 <USBD_GetStatus+0x28>
    {
      USBD_cfg_status = USB_CONFIG_SELF_POWERED | USB_CONFIG_REMOTE_WAKEUP;                                
 800a210:	4b0a      	ldr	r3, [pc, #40]	; (800a23c <USBD_GetStatus+0x4c>)
 800a212:	2203      	movs	r2, #3
 800a214:	601a      	str	r2, [r3, #0]
 800a216:	e002      	b.n	800a21e <USBD_GetStatus+0x2e>
    }
    else
    {
      USBD_cfg_status = USB_CONFIG_SELF_POWERED;   
 800a218:	4b08      	ldr	r3, [pc, #32]	; (800a23c <USBD_GetStatus+0x4c>)
 800a21a:	2201      	movs	r2, #1
 800a21c:	601a      	str	r2, [r3, #0]
    }
    
    USBD_CtlSendData (pdev, 
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	4906      	ldr	r1, [pc, #24]	; (800a23c <USBD_GetStatus+0x4c>)
 800a222:	2201      	movs	r2, #1
 800a224:	f000 f95a 	bl	800a4dc <USBD_CtlSendData>
                      (uint8_t *)&USBD_cfg_status,
                      1);
    break;
 800a228:	e004      	b.n	800a234 <USBD_GetStatus+0x44>
    
  default :
    USBD_CtlError(pdev , req);                        
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	f000 f8db 	bl	800a3e8 <USBD_CtlError>
    break;
 800a232:	bf00      	nop
  }
}
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20000c58 	.word	0x20000c58

0800a240 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73fb      	strb	r3, [r7, #15]
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	885b      	ldrh	r3, [r3, #2]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d10e      	bne.n	800a274 <USBD_SetFeature+0x34>
  {
    pdev->dev.DevRemoteWakeup = 1;  
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    pdev->dev.class_cb->Setup (pdev, req);   
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f99d 	bl	800a5ac <USBD_CtlSendStatus>
 800a272:	e048      	b.n	800a306 <USBD_SetFeature+0xc6>
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	885b      	ldrh	r3, [r3, #2]
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d144      	bne.n	800a306 <USBD_SetFeature+0xc6>
           ((req->wIndex & 0xFF) == 0))
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	889b      	ldrh	r3, [r3, #4]
 800a280:	b2db      	uxtb	r3, r3
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 800a282:	2b00      	cmp	r3, #0
 800a284:	d13f      	bne.n	800a306 <USBD_SetFeature+0xc6>
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	60bb      	str	r3, [r7, #8]
    
    test_mode = req->wIndex >> 8;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	889b      	ldrh	r3, [r3, #4]
 800a292:	0a1b      	lsrs	r3, r3, #8
 800a294:	b29b      	uxth	r3, r3
 800a296:	73fb      	strb	r3, [r7, #15]
    switch (test_mode) 
 800a298:	7bfb      	ldrb	r3, [r7, #15]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	2b04      	cmp	r3, #4
 800a29e:	d82b      	bhi.n	800a2f8 <USBD_SetFeature+0xb8>
 800a2a0:	a201      	add	r2, pc, #4	; (adr r2, 800a2a8 <USBD_SetFeature+0x68>)
 800a2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a6:	bf00      	nop
 800a2a8:	0800a2bd 	.word	0x0800a2bd
 800a2ac:	0800a2c9 	.word	0x0800a2c9
 800a2b0:	0800a2d5 	.word	0x0800a2d5
 800a2b4:	0800a2e1 	.word	0x0800a2e1
 800a2b8:	0800a2ed 	.word	0x0800a2ed
    {
    case 1: // TEST_J
      dctl.b.tstctl = 1;
 800a2bc:	7a3b      	ldrb	r3, [r7, #8]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f362 1306 	bfi	r3, r2, #4, #3
 800a2c4:	723b      	strb	r3, [r7, #8]
      break;
 800a2c6:	e017      	b.n	800a2f8 <USBD_SetFeature+0xb8>
      
    case 2: // TEST_K	
      dctl.b.tstctl = 2;
 800a2c8:	7a3b      	ldrb	r3, [r7, #8]
 800a2ca:	2202      	movs	r2, #2
 800a2cc:	f362 1306 	bfi	r3, r2, #4, #3
 800a2d0:	723b      	strb	r3, [r7, #8]
      break;
 800a2d2:	e011      	b.n	800a2f8 <USBD_SetFeature+0xb8>
      
    case 3: // TEST_SE0_NAK
      dctl.b.tstctl = 3;
 800a2d4:	7a3b      	ldrb	r3, [r7, #8]
 800a2d6:	2203      	movs	r2, #3
 800a2d8:	f362 1306 	bfi	r3, r2, #4, #3
 800a2dc:	723b      	strb	r3, [r7, #8]
      break;
 800a2de:	e00b      	b.n	800a2f8 <USBD_SetFeature+0xb8>
      
    case 4: // TEST_PACKET
      dctl.b.tstctl = 4;
 800a2e0:	7a3b      	ldrb	r3, [r7, #8]
 800a2e2:	2204      	movs	r2, #4
 800a2e4:	f362 1306 	bfi	r3, r2, #4, #3
 800a2e8:	723b      	strb	r3, [r7, #8]
      break;
 800a2ea:	e005      	b.n	800a2f8 <USBD_SetFeature+0xb8>
      
    case 5: // TEST_FORCE_ENABLE
      dctl.b.tstctl = 5;
 800a2ec:	7a3b      	ldrb	r3, [r7, #8]
 800a2ee:	2205      	movs	r2, #5
 800a2f0:	f362 1306 	bfi	r3, r2, #4, #3
 800a2f4:	723b      	strb	r3, [r7, #8]
      break;
 800a2f6:	bf00      	nop
    }
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	605a      	str	r2, [r3, #4]
    USBD_CtlSendStatus(pdev);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f953 	bl	800a5ac <USBD_CtlSendStatus>
  }

}
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  switch (pdev->dev.device_status)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800a31c:	3b02      	subs	r3, #2
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d813      	bhi.n	800a34a <USBD_ClrFeature+0x3e>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	885b      	ldrh	r3, [r3, #2]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d10e      	bne.n	800a348 <USBD_ClrFeature+0x3c>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
      pdev->dev.class_cb->Setup (pdev, req);   
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	6839      	ldr	r1, [r7, #0]
 800a33e:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f933 	bl	800a5ac <USBD_CtlSendStatus>
    }
    break;
 800a346:	e005      	b.n	800a354 <USBD_ClrFeature+0x48>
 800a348:	e004      	b.n	800a354 <USBD_ClrFeature+0x48>
    
  default :
     USBD_CtlError(pdev , req);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	f000 f84b 	bl	800a3e8 <USBD_CtlError>
    break;
 800a352:	bf00      	nop
  }
}
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop

0800a35c <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 25c8 	ldrb.w	r2, [r3, #1480]	; 0x5c8
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 25c9 	ldrb.w	r2, [r3, #1481]	; 0x5c9
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 35ca 	ldrb.w	r3, [r3, #1482]	; 0x5ca
 800a380:	461a      	mov	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 35cb 	ldrb.w	r3, [r3, #1483]	; 0x5cb
 800a388:	021b      	lsls	r3, r3, #8
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	4413      	add	r3, r2
 800a38e:	b29a      	uxth	r2, r3
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800a39a:	461a      	mov	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 35cd 	ldrb.w	r3, [r3, #1485]	; 0x5cd
 800a3a2:	021b      	lsls	r3, r3, #8
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	4413      	add	r3, r2
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 35ce 	ldrb.w	r3, [r3, #1486]	; 0x5ce
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 35cf 	ldrb.w	r3, [r3, #1487]	; 0x5cf
 800a3bc:	021b      	lsls	r3, r3, #8
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	4413      	add	r3, r2
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	80da      	strh	r2, [r3, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	88db      	ldrh	r3, [r3, #6]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
}
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop

0800a3e8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  if((req->bmRequest & 0x80) == 0x80)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	b25b      	sxtb	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	da04      	bge.n	800a408 <USBD_CtlError+0x20>
  {
    DCD_EP_Stall(pdev , 0x80);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	2180      	movs	r1, #128	; 0x80
 800a402:	f7fe f9b5 	bl	8008770 <DCD_EP_Stall>
 800a406:	e00c      	b.n	800a422 <USBD_CtlError+0x3a>
  }
  else 
  {
    if(req->wLength == 0)
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	88db      	ldrh	r3, [r3, #6]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d104      	bne.n	800a41a <USBD_CtlError+0x32>
    {
       DCD_EP_Stall(pdev , 0x80);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	2180      	movs	r1, #128	; 0x80
 800a414:	f7fe f9ac 	bl	8008770 <DCD_EP_Stall>
 800a418:	e003      	b.n	800a422 <USBD_CtlError+0x3a>
    }
    else
    {
      DCD_EP_Stall(pdev , 0);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	2100      	movs	r1, #0
 800a41e:	f7fe f9a7 	bl	8008770 <DCD_EP_Stall>
    }
  }
  USB_OTG_EP0_OutStart(pdev);  
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff fb62 	bl	8009aec <USB_OTG_EP0_OutStart>
}
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop

0800a430 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800a43c:	2300      	movs	r3, #0
 800a43e:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d02f      	beq.n	800a4a6 <USBD_GetString+0x76>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f000 f830 	bl	800a4ac <USBD_GetLen>
 800a44c:	4603      	mov	r3, r0
 800a44e:	3301      	adds	r3, #1
 800a450:	b29b      	uxth	r3, r3
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	b29a      	uxth	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	1c5a      	adds	r2, r3, #1
 800a45e:	75fa      	strb	r2, [r7, #23]
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	4413      	add	r3, r2
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	8812      	ldrh	r2, [r2, #0]
 800a468:	b2d2      	uxtb	r2, r2
 800a46a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800a46c:	7dfb      	ldrb	r3, [r7, #23]
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	75fa      	strb	r2, [r7, #23]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	4413      	add	r3, r2
 800a476:	2203      	movs	r2, #3
 800a478:	701a      	strb	r2, [r3, #0]
    
    while (*desc != NULL) 
 800a47a:	e010      	b.n	800a49e <USBD_GetString+0x6e>
    {
      unicode[idx++] = *desc++;
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	75fa      	strb	r2, [r7, #23]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	441a      	add	r2, r3
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	1c59      	adds	r1, r3, #1
 800a48a:	60f9      	str	r1, [r7, #12]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800a490:	7dfb      	ldrb	r3, [r7, #23]
 800a492:	1c5a      	adds	r2, r3, #1
 800a494:	75fa      	strb	r2, [r7, #23]
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	4413      	add	r3, r2
 800a49a:	2200      	movs	r2, #0
 800a49c:	701a      	strb	r2, [r3, #0]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != NULL) 
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1ea      	bne.n	800a47c <USBD_GetString+0x4c>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 800a4a6:	3718      	adds	r7, #24
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	73fb      	strb	r3, [r7, #15]

    while (*buf != NULL) 
 800a4b8:	e005      	b.n	800a4c6 <USBD_GetLen+0x1a>
    {
        len++;
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	73fb      	strb	r3, [r7, #15]
        buf++;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	607b      	str	r3, [r7, #4]
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1f5      	bne.n	800a4ba <USBD_GetLen+0xe>
    {
        len++;
        buf++;
    }

    return len;
 800a4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.in_ep[0].total_data_len = len;
 800a4ee:	88fa      	ldrh	r2, [r7, #6]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  pdev->dev.in_ep[0].rem_data_len   = len;
 800a4f6:	88fa      	ldrh	r2, [r7, #6]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2202      	movs	r2, #2
 800a502:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 800a506:	88fb      	ldrh	r3, [r7, #6]
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	2100      	movs	r1, #0
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	f7fe f8f3 	bl	80086f8 <DCD_EP_Tx>
 
  return ret;
 800a512:	7dfb      	ldrb	r3, [r7, #23]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3718      	adds	r7, #24
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	4613      	mov	r3, r2
 800a528:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 800a52a:	2300      	movs	r3, #0
 800a52c:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 800a52e:	88fb      	ldrh	r3, [r7, #6]
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	2100      	movs	r1, #0
 800a534:	68ba      	ldr	r2, [r7, #8]
 800a536:	f7fe f8df 	bl	80086f8 <DCD_EP_Tx>
  
  
  return ret;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_Status  USBD_CtlPrepareRx (USB_OTG_CORE_HANDLE  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	4613      	mov	r3, r2
 800a550:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.out_ep[0].total_data_len = len;
 800a556:	88fa      	ldrh	r2, [r7, #6]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
  pdev->dev.out_ep[0].rem_data_len   = len;
 800a55e:	88fa      	ldrh	r2, [r7, #6]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
  pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2203      	movs	r2, #3
 800a56a:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  
  DCD_EP_PrepareRx (pdev,
 800a56e:	88fb      	ldrh	r3, [r7, #6]
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	2100      	movs	r1, #0
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	f7fe f87f 	bl	8008678 <DCD_EP_PrepareRx>
                    0,
                    pbuf,
                    len);
  

  return ret;
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3718      	adds	r7, #24
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	4613      	mov	r3, r2
 800a590:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_PrepareRx (pdev,
 800a596:	88fb      	ldrh	r3, [r7, #6]
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	2100      	movs	r1, #0
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	f7fe f86b 	bl	8008678 <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2204      	movs	r2, #4
 800a5bc:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_Tx (pdev,
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f7fe f896 	bl	80086f8 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7ff fa8d 	bl	8009aec <USB_OTG_EP0_OutStart>
  
  return ret;
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2205      	movs	r2, #5
 800a5ec:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f7fe f83e 	bl	8008678 <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7ff fa75 	bl	8009aec <USB_OTG_EP0_OutStart>
  
  return ret;
 800a602:	7bfb      	ldrb	r3, [r7, #15]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_Init>:
void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	607a      	str	r2, [r7, #4]
 800a616:	603b      	str	r3, [r7, #0]
 800a618:	460b      	mov	r3, r1
 800a61a:	72fb      	strb	r3, [r7, #11]
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f000 fe5f 	bl	800b2e0 <USB_OTG_BSP_Init>
  
  USBD_DeInit(pdev);
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 f81c 	bl	800a660 <USBD_DeInit>
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
  pdev->dev.usr_cb = usr_cb;  
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	69ba      	ldr	r2, [r7, #24]
 800a634:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
  pdev->dev.usr_device = pDevice;    
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 800a640:	7afb      	ldrb	r3, [r7, #11]
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	4619      	mov	r1, r3
 800a646:	f7fd ff11 	bl	800846c <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4798      	blx	r3
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f000 fe9b 	bl	800b390 <USB_OTG_BSP_EnableInterrupt>
}
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBD_DeInit>:
*         Re-Initialize th deviuce library
* @param  pdev: device instance
* @retval status: status
*/
USBD_Status USBD_DeInit(USB_OTG_CORE_HANDLE *pdev)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  /* Software Init */
  
  return USBD_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop

0800a678 <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 800a680:	f107 0308 	add.w	r3, r7, #8
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	4619      	mov	r1, r3
 800a688:	f7ff fe68 	bl	800a35c <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 800a68c:	7a3b      	ldrb	r3, [r7, #8]
 800a68e:	f003 031f 	and.w	r3, r3, #31
 800a692:	2b01      	cmp	r3, #1
 800a694:	d00a      	beq.n	800a6ac <USBD_SetupStage+0x34>
 800a696:	2b02      	cmp	r3, #2
 800a698:	d00f      	beq.n	800a6ba <USBD_SetupStage+0x42>
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d114      	bne.n	800a6c8 <USBD_SetupStage+0x50>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 800a69e:	f107 0308 	add.w	r3, r7, #8
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	f7ff fa83 	bl	8009bb0 <USBD_StdDevReq>
    break;
 800a6aa:	e016      	b.n	800a6da <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 800a6ac:	f107 0308 	add.w	r3, r7, #8
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	f7ff facc 	bl	8009c50 <USBD_StdItfReq>
    break;
 800a6b8:	e00f      	b.n	800a6da <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 800a6ba:	f107 0308 	add.w	r3, r7, #8
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	f7ff faf9 	bl	8009cb8 <USBD_StdEPReq>
    break;
 800a6c6:	e008      	b.n	800a6da <USBD_SetupStage+0x62>
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 800a6c8:	7a3b      	ldrb	r3, [r7, #8]
 800a6ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	f7fe f84c 	bl	8008770 <DCD_EP_Stall>
    break;
 800a6d8:	bf00      	nop
  }  
  return USBD_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 800a6f0:	78fb      	ldrb	r3, [r7, #3]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d145      	bne.n	800a782 <USBD_DataOutStage+0x9e>
  {
    ep = &pdev->dev.out_ep[0];
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800a6fc:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800a704:	2b03      	cmp	r3, #3
 800a706:	d14f      	bne.n	800a7a8 <USBD_DataOutStage+0xc4>
    {
      if(ep->rem_data_len > ep->maxpacket)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	69da      	ldr	r2, [r3, #28]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	429a      	cmp	r2, r3
 800a712:	d921      	bls.n	800a758 <USBD_DataOutStage+0x74>
      {
        ep->rem_data_len -=  ep->maxpacket;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	69da      	ldr	r2, [r3, #28]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	1ad2      	subs	r2, r2, r3
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	61da      	str	r2, [r3, #28]
        
        if(pdev->cfg.dma_enable == 1)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	78db      	ldrb	r3, [r3, #3]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d106      	bne.n	800a738 <USBD_DataOutStage+0x54>
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	68da      	ldr	r2, [r3, #12]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	441a      	add	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	60da      	str	r2, [r3, #12]
        }        
        USBD_CtlContinueRx (pdev, 
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	68da      	ldr	r2, [r3, #12]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6899      	ldr	r1, [r3, #8]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	69db      	ldr	r3, [r3, #28]
 800a744:	4299      	cmp	r1, r3
 800a746:	bf38      	it	cc
 800a748:	460b      	movcc	r3, r1
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
        }        
        USBD_CtlContinueRx (pdev, 
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	4611      	mov	r1, r2
 800a750:	461a      	mov	r2, r3
 800a752:	f7ff ff17 	bl	800a584 <USBD_CtlContinueRx>
 800a756:	e027      	b.n	800a7a8 <USBD_DataOutStage+0xc4>
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00a      	beq.n	800a77a <USBD_DataOutStage+0x96>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 800a76a:	2b03      	cmp	r3, #3
 800a76c:	d105      	bne.n	800a77a <USBD_DataOutStage+0x96>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7ff ff16 	bl	800a5ac <USBD_CtlSendStatus>
 800a780:	e012      	b.n	800a7a8 <USBD_DataOutStage+0xc4>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00c      	beq.n	800a7a8 <USBD_DataOutStage+0xc4>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 800a794:	2b03      	cmp	r3, #3
 800a796:	d107      	bne.n	800a7a8 <USBD_DataOutStage+0xc4>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	78fa      	ldrb	r2, [r7, #3]
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	4798      	blx	r3
  }  
  return USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop

0800a7b4 <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 800a7c0:	78fb      	ldrb	r3, [r7, #3]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d160      	bne.n	800a888 <USBD_DataInStage+0xd4>
  {
    ep = &pdev->dev.in_ep[0];
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800a7cc:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d16a      	bne.n	800a8ae <USBD_DataInStage+0xfa>
    {
      if(ep->rem_data_len > ep->maxpacket)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	69da      	ldr	r2, [r3, #28]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d91c      	bls.n	800a81e <USBD_DataInStage+0x6a>
      {
        ep->rem_data_len -=  ep->maxpacket;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	69da      	ldr	r2, [r3, #28]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	1ad2      	subs	r2, r2, r3
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	61da      	str	r2, [r3, #28]
        if(pdev->cfg.dma_enable == 1)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	78db      	ldrb	r3, [r3, #3]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d106      	bne.n	800a808 <USBD_DataInStage+0x54>
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	68da      	ldr	r2, [r3, #12]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	441a      	add	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	60da      	str	r2, [r3, #12]
        }
        USBD_CtlContinueSendData (pdev, 
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	68da      	ldr	r2, [r3, #12]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	69db      	ldr	r3, [r3, #28]
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
        }
        USBD_CtlContinueSendData (pdev, 
 800a810:	b29b      	uxth	r3, r3
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	4611      	mov	r1, r2
 800a816:	461a      	mov	r2, r3
 800a818:	f7ff fe80 	bl	800a51c <USBD_CtlContinueSendData>
 800a81c:	e047      	b.n	800a8ae <USBD_DataInStage+0xfa>
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	6892      	ldr	r2, [r2, #8]
 800a826:	fbb3 f1f2 	udiv	r1, r3, r2
 800a82a:	fb02 f201 	mul.w	r2, r2, r1
 800a82e:	1a9b      	subs	r3, r3, r2
 800a830:	2b00      	cmp	r3, #0
 800a832:	d114      	bne.n	800a85e <USBD_DataInStage+0xaa>
           (ep->total_data_len >= ep->maxpacket) &&
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6a1a      	ldr	r2, [r3, #32]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	689b      	ldr	r3, [r3, #8]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d30e      	bcc.n	800a85e <USBD_DataInStage+0xaa>
           (ep->total_data_len >= ep->maxpacket) &&
             (ep->total_data_len < ep->ctl_data_len ))
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6a1a      	ldr	r2, [r3, #32]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
           (ep->total_data_len >= ep->maxpacket) &&
 800a848:	429a      	cmp	r2, r3
 800a84a:	d208      	bcs.n	800a85e <USBD_DataInStage+0xaa>
             (ep->total_data_len < ep->ctl_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	2100      	movs	r1, #0
 800a850:	2200      	movs	r2, #0
 800a852:	f7ff fe63 	bl	800a51c <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	625a      	str	r2, [r3, #36]	; 0x24
 800a85c:	e027      	b.n	800a8ae <USBD_DataInStage+0xfa>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00a      	beq.n	800a880 <USBD_DataInStage+0xcc>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
          USBD_CtlContinueSendData(pdev , NULL, 0);
          ep->ctl_data_len = 0;
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 800a870:	2b03      	cmp	r3, #3
 800a872:	d105      	bne.n	800a880 <USBD_DataInStage+0xcc>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7ff feab 	bl	800a5dc <USBD_CtlReceiveStatus>
 800a886:	e012      	b.n	800a8ae <USBD_DataInStage+0xfa>
        }
      }
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a88e:	695b      	ldr	r3, [r3, #20]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00c      	beq.n	800a8ae <USBD_DataInStage+0xfa>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	d107      	bne.n	800a8ae <USBD_DataInStage+0xfa>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a8a4:	695b      	ldr	r3, [r3, #20]
 800a8a6:	78fa      	ldrb	r2, [r7, #3]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	4611      	mov	r1, r2
 800a8ac:	4798      	blx	r3
  }  
  return USBD_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_Reset>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	2240      	movs	r2, #64	; 0x40
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f7fd fe50 	bl	800856c <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	2180      	movs	r1, #128	; 0x80
 800a8d0:	2240      	movs	r2, #64	; 0x40
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f7fd fe4a 	bl	800856c <DCD_EP_Open>
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	7892      	ldrb	r2, [r2, #2]
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	4798      	blx	r3
  
  return USBD_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop

0800a8fc <USBD_Resume>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	4798      	blx	r3
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2203      	movs	r2, #3
 800a912:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  return USBD_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2204      	movs	r2, #4
 800a92c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	4798      	blx	r3
  return USBD_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  if(pdev->dev.class_cb->SOF)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a952:	69db      	ldr	r3, [r3, #28]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d005      	beq.n	800a964 <USBD_SOF+0x20>
  {
    pdev->dev.class_cb->SOF(pdev); 
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a95e:	69db      	ldr	r3, [r3, #28]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	4798      	blx	r3
  }
  return USBD_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop

0800a970 <USBD_SetCfg>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	460b      	mov	r3, r1
 800a97a:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	78fa      	ldrb	r2, [r7, #3]
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	4611      	mov	r1, r2
 800a98a:	4798      	blx	r3
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	4798      	blx	r3
  return USBD_OK; 
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	78fa      	ldrb	r2, [r7, #3]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	4611      	mov	r1, r2
 800a9ba:	4798      	blx	r3
  return USBD_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop

0800a9c8 <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a9d6:	6a1b      	ldr	r3, [r3, #32]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	4798      	blx	r3
  return USBD_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop

0800a9e8 <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	4798      	blx	r3
  return USBD_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop

0800aa08 <VCP_Init>:
 * @brief  VCP_Init
 *         Initializes the Media on the STM32
 * @param  None
 * @retval Result of the opeartion (USBD_OK in all cases)
 */
static uint16_t VCP_Init(void) {
 800aa08:	b480      	push	{r7}
 800aa0a:	af00      	add	r7, sp, #0
	return USBD_OK;
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <VCP_DeInit>:
 * @brief  VCP_DeInit
 *         DeInitializes the Media on the STM32
 * @param  None
 * @retval Result of the opeartion (USBD_OK in all cases)
 */
static uint16_t VCP_DeInit(void) {
 800aa18:	b480      	push	{r7}
 800aa1a:	af00      	add	r7, sp, #0
	return USBD_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <VCP_Ctrl>:
 * @param  Cmd: Command code
 * @param  Buf: Buffer containing command data (request parameters)
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the operation (USBD_OK in all cases)
 */
static uint16_t VCP_Ctrl(uint32_t Cmd, uint8_t* Buf, uint32_t Len) {
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
	switch (Cmd) {
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2b23      	cmp	r3, #35	; 0x23
 800aa38:	d874      	bhi.n	800ab24 <VCP_Ctrl+0xfc>
 800aa3a:	a201      	add	r2, pc, #4	; (adr r2, 800aa40 <VCP_Ctrl+0x18>)
 800aa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa40:	0800ab25 	.word	0x0800ab25
 800aa44:	0800ab25 	.word	0x0800ab25
 800aa48:	0800ab25 	.word	0x0800ab25
 800aa4c:	0800ab25 	.word	0x0800ab25
 800aa50:	0800ab25 	.word	0x0800ab25
 800aa54:	0800ab25 	.word	0x0800ab25
 800aa58:	0800ab25 	.word	0x0800ab25
 800aa5c:	0800ab25 	.word	0x0800ab25
 800aa60:	0800ab25 	.word	0x0800ab25
 800aa64:	0800ab25 	.word	0x0800ab25
 800aa68:	0800ab25 	.word	0x0800ab25
 800aa6c:	0800ab25 	.word	0x0800ab25
 800aa70:	0800ab25 	.word	0x0800ab25
 800aa74:	0800ab25 	.word	0x0800ab25
 800aa78:	0800ab25 	.word	0x0800ab25
 800aa7c:	0800ab25 	.word	0x0800ab25
 800aa80:	0800ab25 	.word	0x0800ab25
 800aa84:	0800ab25 	.word	0x0800ab25
 800aa88:	0800ab25 	.word	0x0800ab25
 800aa8c:	0800ab25 	.word	0x0800ab25
 800aa90:	0800ab25 	.word	0x0800ab25
 800aa94:	0800ab25 	.word	0x0800ab25
 800aa98:	0800ab25 	.word	0x0800ab25
 800aa9c:	0800ab25 	.word	0x0800ab25
 800aaa0:	0800ab25 	.word	0x0800ab25
 800aaa4:	0800ab25 	.word	0x0800ab25
 800aaa8:	0800ab25 	.word	0x0800ab25
 800aaac:	0800ab25 	.word	0x0800ab25
 800aab0:	0800ab25 	.word	0x0800ab25
 800aab4:	0800ab25 	.word	0x0800ab25
 800aab8:	0800ab25 	.word	0x0800ab25
 800aabc:	0800ab25 	.word	0x0800ab25
 800aac0:	0800ab25 	.word	0x0800ab25
 800aac4:	0800aad1 	.word	0x0800aad1
 800aac8:	0800ab25 	.word	0x0800ab25
 800aacc:	0800ab25 	.word	0x0800ab25
	case SET_LINE_CODING:
		/* Not  needed for this driver */
		break;

	case GET_LINE_CODING:
		Buf[0] = (uint8_t) (linecoding.bitrate);
 800aad0:	4b18      	ldr	r3, [pc, #96]	; (800ab34 <VCP_Ctrl+0x10c>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	701a      	strb	r2, [r3, #0]
		Buf[1] = (uint8_t) (linecoding.bitrate >> 8);
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	3301      	adds	r3, #1
 800aade:	4a15      	ldr	r2, [pc, #84]	; (800ab34 <VCP_Ctrl+0x10c>)
 800aae0:	6812      	ldr	r2, [r2, #0]
 800aae2:	0a12      	lsrs	r2, r2, #8
 800aae4:	b2d2      	uxtb	r2, r2
 800aae6:	701a      	strb	r2, [r3, #0]
		Buf[2] = (uint8_t) (linecoding.bitrate >> 16);
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	3302      	adds	r3, #2
 800aaec:	4a11      	ldr	r2, [pc, #68]	; (800ab34 <VCP_Ctrl+0x10c>)
 800aaee:	6812      	ldr	r2, [r2, #0]
 800aaf0:	0c12      	lsrs	r2, r2, #16
 800aaf2:	b2d2      	uxtb	r2, r2
 800aaf4:	701a      	strb	r2, [r3, #0]
		Buf[3] = (uint8_t) (linecoding.bitrate >> 24);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	3303      	adds	r3, #3
 800aafa:	4a0e      	ldr	r2, [pc, #56]	; (800ab34 <VCP_Ctrl+0x10c>)
 800aafc:	6812      	ldr	r2, [r2, #0]
 800aafe:	0e12      	lsrs	r2, r2, #24
 800ab00:	b2d2      	uxtb	r2, r2
 800ab02:	701a      	strb	r2, [r3, #0]
		Buf[4] = linecoding.format;
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	3304      	adds	r3, #4
 800ab08:	4a0a      	ldr	r2, [pc, #40]	; (800ab34 <VCP_Ctrl+0x10c>)
 800ab0a:	7912      	ldrb	r2, [r2, #4]
 800ab0c:	701a      	strb	r2, [r3, #0]
		Buf[5] = linecoding.paritytype;
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	3305      	adds	r3, #5
 800ab12:	4a08      	ldr	r2, [pc, #32]	; (800ab34 <VCP_Ctrl+0x10c>)
 800ab14:	7952      	ldrb	r2, [r2, #5]
 800ab16:	701a      	strb	r2, [r3, #0]
		Buf[6] = linecoding.datatype;
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	3306      	adds	r3, #6
 800ab1c:	4a05      	ldr	r2, [pc, #20]	; (800ab34 <VCP_Ctrl+0x10c>)
 800ab1e:	7992      	ldrb	r2, [r2, #6]
 800ab20:	701a      	strb	r2, [r3, #0]
		break;
 800ab22:	e000      	b.n	800ab26 <VCP_Ctrl+0xfe>
	case SEND_BREAK:
		/* Not  needed for this driver */
		break;

	default:
		break;
 800ab24:	bf00      	nop
	}

	return USBD_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	20000054 	.word	0x20000054

0800ab38 <VCP_send_buffer>:
		i++;
	}
	VCP_DataTx(buf, i);
}

void VCP_send_buffer(uint8_t* buf, int len) {
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
	VCP_DataTx(buf, len);
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	4619      	mov	r1, r3
 800ab48:	f000 f804 	bl	800ab54 <VCP_DataTx>
}
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop

0800ab54 <VCP_DataTx>:
 *         this function.
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
 */
static uint16_t VCP_DataTx(uint8_t* Buf, uint32_t Len) {
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	60fb      	str	r3, [r7, #12]
	while (i < Len) {
 800ab62:	e017      	b.n	800ab94 <VCP_DataTx+0x40>
		APP_Rx_Buffer[APP_Rx_ptr_in] = *(Buf + i);
 800ab64:	4b11      	ldr	r3, [pc, #68]	; (800abac <VCP_DataTx+0x58>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6879      	ldr	r1, [r7, #4]
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	440a      	add	r2, r1
 800ab6e:	7811      	ldrb	r1, [r2, #0]
 800ab70:	4a0f      	ldr	r2, [pc, #60]	; (800abb0 <VCP_DataTx+0x5c>)
 800ab72:	54d1      	strb	r1, [r2, r3]
		APP_Rx_ptr_in++;
 800ab74:	4b0d      	ldr	r3, [pc, #52]	; (800abac <VCP_DataTx+0x58>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	1c5a      	adds	r2, r3, #1
 800ab7a:	4b0c      	ldr	r3, [pc, #48]	; (800abac <VCP_DataTx+0x58>)
 800ab7c:	601a      	str	r2, [r3, #0]
		i++;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3301      	adds	r3, #1
 800ab82:	60fb      	str	r3, [r7, #12]
		/* To avoid buffer overflow */
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800ab84:	4b09      	ldr	r3, [pc, #36]	; (800abac <VCP_DataTx+0x58>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab8c:	d102      	bne.n	800ab94 <VCP_DataTx+0x40>
			APP_Rx_ptr_in = 0;
 800ab8e:	4b07      	ldr	r3, [pc, #28]	; (800abac <VCP_DataTx+0x58>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	601a      	str	r2, [r3, #0]
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
 */
static uint16_t VCP_DataTx(uint8_t* Buf, uint32_t Len) {
	uint32_t i = 0;
	while (i < Len) {
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d3e3      	bcc.n	800ab64 <VCP_DataTx+0x10>
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
			APP_Rx_ptr_in = 0;
		}
	}

	return USBD_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3714      	adds	r7, #20
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	20000c64 	.word	0x20000c64
 800abb0:	200016a4 	.word	0x200016a4

0800abb4 <VCP_DataRx>:
#define APP_TX_BUF_SIZE 128
uint8_t APP_Tx_Buffer[APP_TX_BUF_SIZE];
uint32_t APP_tx_ptr_head;
uint32_t APP_tx_ptr_tail;

static uint16_t VCP_DataRx(uint8_t* Buf, uint32_t Len) {
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
	uint32_t i;

	for (i = 0; i < Len; i++) {
 800abbe:	2300      	movs	r3, #0
 800abc0:	60fb      	str	r3, [r7, #12]
 800abc2:	e01e      	b.n	800ac02 <VCP_DataRx+0x4e>
		APP_Tx_Buffer[APP_tx_ptr_head] = *(Buf + i);
 800abc4:	4b14      	ldr	r3, [pc, #80]	; (800ac18 <VCP_DataRx+0x64>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	6879      	ldr	r1, [r7, #4]
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	440a      	add	r2, r1
 800abce:	7811      	ldrb	r1, [r2, #0]
 800abd0:	4a12      	ldr	r2, [pc, #72]	; (800ac1c <VCP_DataRx+0x68>)
 800abd2:	54d1      	strb	r1, [r2, r3]
		APP_tx_ptr_head++;
 800abd4:	4b10      	ldr	r3, [pc, #64]	; (800ac18 <VCP_DataRx+0x64>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	1c5a      	adds	r2, r3, #1
 800abda:	4b0f      	ldr	r3, [pc, #60]	; (800ac18 <VCP_DataRx+0x64>)
 800abdc:	601a      	str	r2, [r3, #0]
		if (APP_tx_ptr_head == APP_TX_BUF_SIZE)
 800abde:	4b0e      	ldr	r3, [pc, #56]	; (800ac18 <VCP_DataRx+0x64>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b80      	cmp	r3, #128	; 0x80
 800abe4:	d102      	bne.n	800abec <VCP_DataRx+0x38>
			APP_tx_ptr_head = 0;
 800abe6:	4b0c      	ldr	r3, [pc, #48]	; (800ac18 <VCP_DataRx+0x64>)
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]

		if (APP_tx_ptr_head == APP_tx_ptr_tail)
 800abec:	4b0a      	ldr	r3, [pc, #40]	; (800ac18 <VCP_DataRx+0x64>)
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	4b0b      	ldr	r3, [pc, #44]	; (800ac20 <VCP_DataRx+0x6c>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d101      	bne.n	800abfc <VCP_DataRx+0x48>
			return USBD_FAIL;
 800abf8:	2302      	movs	r3, #2
 800abfa:	e007      	b.n	800ac0c <VCP_DataRx+0x58>
uint32_t APP_tx_ptr_tail;

static uint16_t VCP_DataRx(uint8_t* Buf, uint32_t Len) {
	uint32_t i;

	for (i = 0; i < Len; i++) {
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3301      	adds	r3, #1
 800ac00:	60fb      	str	r3, [r7, #12]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d3dc      	bcc.n	800abc4 <VCP_DataRx+0x10>

		if (APP_tx_ptr_head == APP_tx_ptr_tail)
			return USBD_FAIL;
	}

	return USBD_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3714      	adds	r7, #20
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	20001614 	.word	0x20001614
 800ac1c:	20001580 	.word	0x20001580
 800ac20:	20001600 	.word	0x20001600

0800ac24 <VCP_get_char>:

int VCP_get_char(uint8_t *buf) {
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
	if (APP_tx_ptr_head == APP_tx_ptr_tail)
 800ac2c:	4b10      	ldr	r3, [pc, #64]	; (800ac70 <VCP_get_char+0x4c>)
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	4b10      	ldr	r3, [pc, #64]	; (800ac74 <VCP_get_char+0x50>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d101      	bne.n	800ac3c <VCP_get_char+0x18>
		return 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	e012      	b.n	800ac62 <VCP_get_char+0x3e>

	*buf = APP_Tx_Buffer[APP_tx_ptr_tail];
 800ac3c:	4b0d      	ldr	r3, [pc, #52]	; (800ac74 <VCP_get_char+0x50>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a0d      	ldr	r2, [pc, #52]	; (800ac78 <VCP_get_char+0x54>)
 800ac42:	5cd2      	ldrb	r2, [r2, r3]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	701a      	strb	r2, [r3, #0]
	APP_tx_ptr_tail++;
 800ac48:	4b0a      	ldr	r3, [pc, #40]	; (800ac74 <VCP_get_char+0x50>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	1c5a      	adds	r2, r3, #1
 800ac4e:	4b09      	ldr	r3, [pc, #36]	; (800ac74 <VCP_get_char+0x50>)
 800ac50:	601a      	str	r2, [r3, #0]
	if (APP_tx_ptr_tail == APP_TX_BUF_SIZE)
 800ac52:	4b08      	ldr	r3, [pc, #32]	; (800ac74 <VCP_get_char+0x50>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b80      	cmp	r3, #128	; 0x80
 800ac58:	d102      	bne.n	800ac60 <VCP_get_char+0x3c>
		APP_tx_ptr_tail = 0;
 800ac5a:	4b06      	ldr	r3, [pc, #24]	; (800ac74 <VCP_get_char+0x50>)
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	601a      	str	r2, [r3, #0]

	return 1;
 800ac60:	2301      	movs	r3, #1
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	20001614 	.word	0x20001614
 800ac74:	20001600 	.word	0x20001600
 800ac78:	20001580 	.word	0x20001580

0800ac7c <usbd_cdc_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_Init (void  *pdev, 
                               uint8_t cfgidx)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  uint8_t *pbuf;

  /* Open EP IN */
  DCD_EP_Open(pdev,
              CDC_IN_EP,
              CDC_DATA_IN_PACKET_SIZE,
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800ac8e:	3339      	adds	r3, #57	; 0x39
                               uint8_t cfgidx)
{
  uint8_t *pbuf;

  /* Open EP IN */
  DCD_EP_Open(pdev,
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	2181      	movs	r1, #129	; 0x81
 800ac96:	461a      	mov	r2, r3
 800ac98:	2302      	movs	r3, #2
 800ac9a:	f7fd fc67 	bl	800856c <DCD_EP_Open>
              USB_OTG_EP_BULK);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
              CDC_OUT_EP,
              CDC_DATA_OUT_PACKET_SIZE,
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800aca4:	3340      	adds	r3, #64	; 0x40
              CDC_IN_EP,
              CDC_DATA_IN_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	2101      	movs	r1, #1
 800acac:	461a      	mov	r2, r3
 800acae:	2302      	movs	r3, #2
 800acb0:	f7fd fc5c 	bl	800856c <DCD_EP_Open>
              CDC_OUT_EP,
              CDC_DATA_OUT_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open Command IN EP */
  DCD_EP_Open(pdev,
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	2182      	movs	r1, #130	; 0x82
 800acb8:	2208      	movs	r2, #8
 800acba:	2303      	movs	r3, #3
 800acbc:	f7fd fc56 	bl	800856c <DCD_EP_Open>
              CDC_CMD_EP,
              CDC_CMD_PACKET_SZE,
              USB_OTG_EP_INT);
  
  pbuf = (uint8_t *)USBD_DeviceDesc;
 800acc0:	4b0d      	ldr	r3, [pc, #52]	; (800acf8 <usbd_cdc_Init+0x7c>)
 800acc2:	60fb      	str	r3, [r7, #12]
  pbuf[4] = DEVICE_CLASS_CDC;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3304      	adds	r3, #4
 800acc8:	2202      	movs	r2, #2
 800acca:	701a      	strb	r2, [r3, #0]
  pbuf[5] = DEVICE_SUBCLASS_CDC;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	3305      	adds	r3, #5
 800acd0:	2200      	movs	r2, #0
 800acd2:	701a      	strb	r2, [r3, #0]
  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();
 800acd4:	4b09      	ldr	r3, [pc, #36]	; (800acfc <usbd_cdc_Init+0x80>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4798      	blx	r3

  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800ace0:	3340      	adds	r3, #64	; 0x40
  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();

  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 800ace2:	881b      	ldrh	r3, [r3, #0]
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	2101      	movs	r1, #1
 800ace8:	4a05      	ldr	r2, [pc, #20]	; (800ad00 <usbd_cdc_Init+0x84>)
 800acea:	f7fd fcc5 	bl	8008678 <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
  
  return USBD_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	2000011c 	.word	0x2000011c
 800acfc:	2000005c 	.word	0x2000005c
 800ad00:	2000165c 	.word	0x2000165c

0800ad04 <usbd_cdc_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_DeInit (void  *pdev, 
                                 uint8_t cfgidx)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  DCD_EP_Close(pdev,
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	2181      	movs	r1, #129	; 0x81
 800ad14:	f7fd fc78 	bl	8008608 <DCD_EP_Close>
              CDC_IN_EP);
  
  /* Open EP OUT */
  DCD_EP_Close(pdev,
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	f7fd fc74 	bl	8008608 <DCD_EP_Close>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  DCD_EP_Close(pdev,
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	2182      	movs	r1, #130	; 0x82
 800ad24:	f7fd fc70 	bl	8008608 <DCD_EP_Close>
              CDC_CMD_EP);

  /* Restore default state of the Interface physical components */
  APP_FOPS.pIf_DeInit();
 800ad28:	4b03      	ldr	r3, [pc, #12]	; (800ad38 <usbd_cdc_DeInit+0x34>)
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	4798      	blx	r3
  
  return USBD_OK;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	2000005c 	.word	0x2000005c

0800ad3c <usbd_cdc_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  usbd_cdc_Setup (void  *pdev, 
                                USB_SETUP_REQ *req)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t  *pbuf;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d03f      	beq.n	800add2 <usbd_cdc_Setup+0x96>
 800ad52:	2b20      	cmp	r3, #32
 800ad54:	d137      	bne.n	800adc6 <usbd_cdc_Setup+0x8a>
  {
    /* CDC Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :
      /* Check if the request is a data setup packet */
      if (req->wLength)
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	88db      	ldrh	r3, [r3, #6]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d029      	beq.n	800adb2 <usbd_cdc_Setup+0x76>
      {
        /* Check if the request is Device-to-Host */
        if (req->bmRequest & 0x80)
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	b25b      	sxtb	r3, r3
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	da11      	bge.n	800ad8e <usbd_cdc_Setup+0x52>
        {
          /* Get the data to be sent to Host from interface layer */
          APP_FOPS.pIf_Ctrl(req->bRequest, CmdBuff, req->wLength);
 800ad6a:	4b36      	ldr	r3, [pc, #216]	; (800ae44 <usbd_cdc_Setup+0x108>)
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	7852      	ldrb	r2, [r2, #1]
 800ad72:	4611      	mov	r1, r2
 800ad74:	683a      	ldr	r2, [r7, #0]
 800ad76:	88d2      	ldrh	r2, [r2, #6]
 800ad78:	4608      	mov	r0, r1
 800ad7a:	4933      	ldr	r1, [pc, #204]	; (800ae48 <usbd_cdc_Setup+0x10c>)
 800ad7c:	4798      	blx	r3
          
          /* Send the data to the host */
          USBD_CtlSendData (pdev, 
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	88db      	ldrh	r3, [r3, #6]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	4930      	ldr	r1, [pc, #192]	; (800ae48 <usbd_cdc_Setup+0x10c>)
 800ad86:	461a      	mov	r2, r3
 800ad88:	f7ff fba8 	bl	800a4dc <USBD_CtlSendData>
 800ad8c:	e019      	b.n	800adc2 <usbd_cdc_Setup+0x86>
                            req->wLength);          
        }
        else /* Host-to-Device requeset */
        {
          /* Set the value of the current command to be processed */
          cdcCmd = req->bRequest;
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	785b      	ldrb	r3, [r3, #1]
 800ad92:	461a      	mov	r2, r3
 800ad94:	4b2d      	ldr	r3, [pc, #180]	; (800ae4c <usbd_cdc_Setup+0x110>)
 800ad96:	601a      	str	r2, [r3, #0]
          cdcLen = req->wLength;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	88db      	ldrh	r3, [r3, #6]
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	4b2c      	ldr	r3, [pc, #176]	; (800ae50 <usbd_cdc_Setup+0x114>)
 800ada0:	601a      	str	r2, [r3, #0]
          
          /* Prepare the reception of the buffer over EP0
          Next step: the received data will be managed in usbd_cdc_EP0_TxSent() 
          function. */
          USBD_CtlPrepareRx (pdev,
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	88db      	ldrh	r3, [r3, #6]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	4927      	ldr	r1, [pc, #156]	; (800ae48 <usbd_cdc_Setup+0x10c>)
 800adaa:	461a      	mov	r2, r3
 800adac:	f7ff fbca 	bl	800a544 <USBD_CtlPrepareRx>
 800adb0:	e007      	b.n	800adc2 <usbd_cdc_Setup+0x86>
        }
      }
      else /* No Data request */
      {
        /* Transfer the command to the interface layer */
        APP_FOPS.pIf_Ctrl(req->bRequest, NULL, 0);
 800adb2:	4b24      	ldr	r3, [pc, #144]	; (800ae44 <usbd_cdc_Setup+0x108>)
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	7852      	ldrb	r2, [r2, #1]
 800adba:	4610      	mov	r0, r2
 800adbc:	2100      	movs	r1, #0
 800adbe:	2200      	movs	r2, #0
 800adc0:	4798      	blx	r3
      }
      
      return USBD_OK;
 800adc2:	2300      	movs	r3, #0
 800adc4:	e03a      	b.n	800ae3c <usbd_cdc_Setup+0x100>
      
    default:
      USBD_CtlError (pdev, req);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	6839      	ldr	r1, [r7, #0]
 800adca:	f7ff fb0d 	bl	800a3e8 <USBD_CtlError>
      return USBD_FAIL;
 800adce:	2302      	movs	r3, #2
 800add0:	e034      	b.n	800ae3c <usbd_cdc_Setup+0x100>
    
      
      
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	785b      	ldrb	r3, [r3, #1]
 800add6:	2b0a      	cmp	r3, #10
 800add8:	d018      	beq.n	800ae0c <usbd_cdc_Setup+0xd0>
 800adda:	2b0b      	cmp	r3, #11
 800addc:	d01c      	beq.n	800ae18 <usbd_cdc_Setup+0xdc>
 800adde:	2b06      	cmp	r3, #6
 800ade0:	d12b      	bne.n	800ae3a <usbd_cdc_Setup+0xfe>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == CDC_DESCRIPTOR_TYPE)
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	885b      	ldrh	r3, [r3, #2]
 800ade6:	0a1b      	lsrs	r3, r3, #8
 800ade8:	b29b      	uxth	r3, r3
 800adea:	2b21      	cmp	r3, #33	; 0x21
 800adec:	d107      	bne.n	800adfe <usbd_cdc_Setup+0xc2>
      {
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
        pbuf = usbd_cdc_Desc;   
#else
        pbuf = usbd_cdc_CfgDesc + 9 + (9 * USBD_ITF_MAX_NUM);
 800adee:	4b19      	ldr	r3, [pc, #100]	; (800ae54 <usbd_cdc_Setup+0x118>)
 800adf0:	60bb      	str	r3, [r7, #8]
#endif 
        len = MIN(USB_CDC_DESC_SIZ , req->wLength);
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	88db      	ldrh	r3, [r3, #6]
 800adf6:	2b3a      	cmp	r3, #58	; 0x3a
 800adf8:	bf28      	it	cs
 800adfa:	233a      	movcs	r3, #58	; 0x3a
 800adfc:	81fb      	strh	r3, [r7, #14]
      }
      
      USBD_CtlSendData (pdev, 
 800adfe:	89fb      	ldrh	r3, [r7, #14]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	68b9      	ldr	r1, [r7, #8]
 800ae04:	461a      	mov	r2, r3
 800ae06:	f7ff fb69 	bl	800a4dc <USBD_CtlSendData>
                        pbuf,
                        len);
      break;
 800ae0a:	e016      	b.n	800ae3a <usbd_cdc_Setup+0xfe>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	4912      	ldr	r1, [pc, #72]	; (800ae58 <usbd_cdc_Setup+0x11c>)
 800ae10:	2201      	movs	r2, #1
 800ae12:	f7ff fb63 	bl	800a4dc <USBD_CtlSendData>
                        (uint8_t *)&usbd_cdc_AltSet,
                        1);
      break;
 800ae16:	e010      	b.n	800ae3a <usbd_cdc_Setup+0xfe>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_ITF_MAX_NUM)
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	885b      	ldrh	r3, [r3, #2]
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d106      	bne.n	800ae30 <usbd_cdc_Setup+0xf4>
      {
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	885b      	ldrh	r3, [r3, #2]
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	461a      	mov	r2, r3
 800ae2a:	4b0b      	ldr	r3, [pc, #44]	; (800ae58 <usbd_cdc_Setup+0x11c>)
 800ae2c:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;
 800ae2e:	e003      	b.n	800ae38 <usbd_cdc_Setup+0xfc>
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
      }
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	6839      	ldr	r1, [r7, #0]
 800ae34:	f7ff fad8 	bl	800a3e8 <USBD_CtlError>
      }
      break;
 800ae38:	bf00      	nop
    }
  }
  return USBD_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	2000005c 	.word	0x2000005c
 800ae48:	2000169c 	.word	0x2000169c
 800ae4c:	200000b4 	.word	0x200000b4
 800ae50:	20000c74 	.word	0x20000c74
 800ae54:	20000082 	.word	0x20000082
 800ae58:	20000c60 	.word	0x20000c60

0800ae5c <usbd_cdc_EP0_RxReady>:
  *         Data received on control endpoint
  * @param  pdev: device device instance
  * @retval status
  */
static uint8_t  usbd_cdc_EP0_RxReady (void  *pdev)
{ 
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  if (cdcCmd != NO_CMD)
 800ae64:	4b0a      	ldr	r3, [pc, #40]	; (800ae90 <usbd_cdc_EP0_RxReady+0x34>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2bff      	cmp	r3, #255	; 0xff
 800ae6a:	d00b      	beq.n	800ae84 <usbd_cdc_EP0_RxReady+0x28>
  {
    /* Process the data */
    APP_FOPS.pIf_Ctrl(cdcCmd, CmdBuff, cdcLen);
 800ae6c:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <usbd_cdc_EP0_RxReady+0x38>)
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	4a07      	ldr	r2, [pc, #28]	; (800ae90 <usbd_cdc_EP0_RxReady+0x34>)
 800ae72:	6811      	ldr	r1, [r2, #0]
 800ae74:	4a08      	ldr	r2, [pc, #32]	; (800ae98 <usbd_cdc_EP0_RxReady+0x3c>)
 800ae76:	6812      	ldr	r2, [r2, #0]
 800ae78:	4608      	mov	r0, r1
 800ae7a:	4908      	ldr	r1, [pc, #32]	; (800ae9c <usbd_cdc_EP0_RxReady+0x40>)
 800ae7c:	4798      	blx	r3
    
    /* Reset the command variable to default value */
    cdcCmd = NO_CMD;
 800ae7e:	4b04      	ldr	r3, [pc, #16]	; (800ae90 <usbd_cdc_EP0_RxReady+0x34>)
 800ae80:	22ff      	movs	r2, #255	; 0xff
 800ae82:	601a      	str	r2, [r3, #0]
  }
  
  return USBD_OK;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3708      	adds	r7, #8
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	200000b4 	.word	0x200000b4
 800ae94:	2000005c 	.word	0x2000005c
 800ae98:	20000c74 	.word	0x20000c74
 800ae9c:	2000169c 	.word	0x2000169c

0800aea0 <usbd_cdc_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataIn (void *pdev, uint8_t epnum)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if (USB_Tx_State == 1)
 800aeac:	4b28      	ldr	r3, [pc, #160]	; (800af50 <usbd_cdc_DataIn+0xb0>)
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d148      	bne.n	800af46 <usbd_cdc_DataIn+0xa6>
  {
    if (APP_Rx_length == 0) 
 800aeb4:	4b27      	ldr	r3, [pc, #156]	; (800af54 <usbd_cdc_DataIn+0xb4>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d103      	bne.n	800aec4 <usbd_cdc_DataIn+0x24>
    {
      USB_Tx_State = 0;
 800aebc:	4b24      	ldr	r3, [pc, #144]	; (800af50 <usbd_cdc_DataIn+0xb0>)
 800aebe:	2200      	movs	r2, #0
 800aec0:	701a      	strb	r2, [r3, #0]
 800aec2:	e040      	b.n	800af46 <usbd_cdc_DataIn+0xa6>
    }
    else 
    {
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800aeca:	3339      	adds	r3, #57	; 0x39
 800aecc:	881b      	ldrh	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	4b20      	ldr	r3, [pc, #128]	; (800af54 <usbd_cdc_DataIn+0xb4>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d21e      	bcs.n	800af16 <usbd_cdc_DataIn+0x76>
        USB_Tx_ptr = APP_Rx_ptr_out;
 800aed8:	4b1f      	ldr	r3, [pc, #124]	; (800af58 <usbd_cdc_DataIn+0xb8>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	81fb      	strh	r3, [r7, #14]
        USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800aee4:	f8b3 3039 	ldrh.w	r3, [r3, #57]	; 0x39
 800aee8:	81bb      	strh	r3, [r7, #12]
        
        APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800aef0:	3339      	adds	r3, #57	; 0x39
 800aef2:	881b      	ldrh	r3, [r3, #0]
 800aef4:	461a      	mov	r2, r3
 800aef6:	4b18      	ldr	r3, [pc, #96]	; (800af58 <usbd_cdc_DataIn+0xb8>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	441a      	add	r2, r3
 800aefc:	4b16      	ldr	r3, [pc, #88]	; (800af58 <usbd_cdc_DataIn+0xb8>)
 800aefe:	601a      	str	r2, [r3, #0]
        APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
 800af00:	4b14      	ldr	r3, [pc, #80]	; (800af54 <usbd_cdc_DataIn+0xb4>)
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800af0a:	3339      	adds	r3, #57	; 0x39
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	1ad2      	subs	r2, r2, r3
 800af10:	4b10      	ldr	r3, [pc, #64]	; (800af54 <usbd_cdc_DataIn+0xb4>)
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	e00f      	b.n	800af36 <usbd_cdc_DataIn+0x96>
      }
      else 
      {
        USB_Tx_ptr = APP_Rx_ptr_out;
 800af16:	4b10      	ldr	r3, [pc, #64]	; (800af58 <usbd_cdc_DataIn+0xb8>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	81fb      	strh	r3, [r7, #14]
        USB_Tx_length = APP_Rx_length;
 800af1c:	4b0d      	ldr	r3, [pc, #52]	; (800af54 <usbd_cdc_DataIn+0xb4>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	81bb      	strh	r3, [r7, #12]
        
        APP_Rx_ptr_out += APP_Rx_length;
 800af22:	4b0d      	ldr	r3, [pc, #52]	; (800af58 <usbd_cdc_DataIn+0xb8>)
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	4b0b      	ldr	r3, [pc, #44]	; (800af54 <usbd_cdc_DataIn+0xb4>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	441a      	add	r2, r3
 800af2c:	4b0a      	ldr	r3, [pc, #40]	; (800af58 <usbd_cdc_DataIn+0xb8>)
 800af2e:	601a      	str	r2, [r3, #0]
        APP_Rx_length = 0;
 800af30:	4b08      	ldr	r3, [pc, #32]	; (800af54 <usbd_cdc_DataIn+0xb4>)
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
                 CDC_IN_EP,
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 800af36:	89fa      	ldrh	r2, [r7, #14]
        APP_Rx_ptr_out += APP_Rx_length;
        APP_Rx_length = 0;
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
 800af38:	4b08      	ldr	r3, [pc, #32]	; (800af5c <usbd_cdc_DataIn+0xbc>)
 800af3a:	441a      	add	r2, r3
 800af3c:	89bb      	ldrh	r3, [r7, #12]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	2181      	movs	r1, #129	; 0x81
 800af42:	f7fd fbd9 	bl	80086f8 <DCD_EP_Tx>
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
                 USB_Tx_length);
    }
  }  
  
  return USBD_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	20000c70 	.word	0x20000c70
 800af54:	20000c6c 	.word	0x20000c6c
 800af58:	20000c68 	.word	0x20000c68
 800af5c:	200016a4 	.word	0x200016a4

0800af60 <usbd_cdc_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataOut (void *pdev, uint8_t epnum)
{      
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	460b      	mov	r3, r1
 800af6a:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 800af6c:	78fa      	ldrb	r2, [r7, #3]
 800af6e:	6879      	ldr	r1, [r7, #4]
 800af70:	4613      	mov	r3, r2
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	4413      	add	r3, r2
 800af76:	00db      	lsls	r3, r3, #3
 800af78:	440b      	add	r3, r1
 800af7a:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	81fb      	strh	r3, [r7, #14]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 800af82:	4b0a      	ldr	r3, [pc, #40]	; (800afac <usbd_cdc_DataOut+0x4c>)
 800af84:	691b      	ldr	r3, [r3, #16]
 800af86:	89fa      	ldrh	r2, [r7, #14]
 800af88:	4809      	ldr	r0, [pc, #36]	; (800afb0 <usbd_cdc_DataOut+0x50>)
 800af8a:	4611      	mov	r1, r2
 800af8c:	4798      	blx	r3
  
  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800af94:	3340      	adds	r3, #64	; 0x40
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
  
  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	2101      	movs	r1, #1
 800af9c:	4a04      	ldr	r2, [pc, #16]	; (800afb0 <usbd_cdc_DataOut+0x50>)
 800af9e:	f7fd fb6b 	bl	8008678 <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	2000005c 	.word	0x2000005c
 800afb0:	2000165c 	.word	0x2000165c

0800afb4 <usbd_cdc_SOF>:
  * @param  pdev: instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_SOF (void *pdev)
{      
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  static uint32_t FrameCount = 0;
  
  if (FrameCount++ == CDC_IN_FRAME_INTERVAL)
 800afbc:	4b08      	ldr	r3, [pc, #32]	; (800afe0 <usbd_cdc_SOF+0x2c>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	1c59      	adds	r1, r3, #1
 800afc2:	4a07      	ldr	r2, [pc, #28]	; (800afe0 <usbd_cdc_SOF+0x2c>)
 800afc4:	6011      	str	r1, [r2, #0]
 800afc6:	2b05      	cmp	r3, #5
 800afc8:	d105      	bne.n	800afd6 <usbd_cdc_SOF+0x22>
  {
    /* Reset the frame counter */
    FrameCount = 0;
 800afca:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <usbd_cdc_SOF+0x2c>)
 800afcc:	2200      	movs	r2, #0
 800afce:	601a      	str	r2, [r3, #0]
    
    /* Check the data to be sent through IN pipe */
    Handle_USBAsynchXfer(pdev);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f807 	bl	800afe4 <Handle_USBAsynchXfer>
  }
  
  return USBD_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	20000c78 	.word	0x20000c78

0800afe4 <Handle_USBAsynchXfer>:
  *         Send data to USB
  * @param  pdev: instance
  * @retval None
  */
static void Handle_USBAsynchXfer (void *pdev)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 800afec:	4b38      	ldr	r3, [pc, #224]	; (800b0d0 <Handle_USBAsynchXfer+0xec>)
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d069      	beq.n	800b0c8 <Handle_USBAsynchXfer+0xe4>
  {
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
 800aff4:	4b37      	ldr	r3, [pc, #220]	; (800b0d4 <Handle_USBAsynchXfer+0xf0>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800affc:	d102      	bne.n	800b004 <Handle_USBAsynchXfer+0x20>
    {
      APP_Rx_ptr_out = 0;
 800affe:	4b35      	ldr	r3, [pc, #212]	; (800b0d4 <Handle_USBAsynchXfer+0xf0>)
 800b000:	2200      	movs	r2, #0
 800b002:	601a      	str	r2, [r3, #0]
    }
    
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 800b004:	4b33      	ldr	r3, [pc, #204]	; (800b0d4 <Handle_USBAsynchXfer+0xf0>)
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	4b33      	ldr	r3, [pc, #204]	; (800b0d8 <Handle_USBAsynchXfer+0xf4>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d103      	bne.n	800b018 <Handle_USBAsynchXfer+0x34>
    {
      USB_Tx_State = 0; 
 800b010:	4b2f      	ldr	r3, [pc, #188]	; (800b0d0 <Handle_USBAsynchXfer+0xec>)
 800b012:	2200      	movs	r2, #0
 800b014:	701a      	strb	r2, [r3, #0]
      return;
 800b016:	e057      	b.n	800b0c8 <Handle_USBAsynchXfer+0xe4>
    }
    
    if(APP_Rx_ptr_out > APP_Rx_ptr_in) /* rollback */
 800b018:	4b2e      	ldr	r3, [pc, #184]	; (800b0d4 <Handle_USBAsynchXfer+0xf0>)
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	4b2e      	ldr	r3, [pc, #184]	; (800b0d8 <Handle_USBAsynchXfer+0xf4>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	429a      	cmp	r2, r3
 800b022:	d906      	bls.n	800b032 <Handle_USBAsynchXfer+0x4e>
    { 
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 800b024:	4b2b      	ldr	r3, [pc, #172]	; (800b0d4 <Handle_USBAsynchXfer+0xf0>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 800b02c:	4b2b      	ldr	r3, [pc, #172]	; (800b0dc <Handle_USBAsynchXfer+0xf8>)
 800b02e:	601a      	str	r2, [r3, #0]
 800b030:	e006      	b.n	800b040 <Handle_USBAsynchXfer+0x5c>
    
    }
    else 
    {
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 800b032:	4b29      	ldr	r3, [pc, #164]	; (800b0d8 <Handle_USBAsynchXfer+0xf4>)
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	4b27      	ldr	r3, [pc, #156]	; (800b0d4 <Handle_USBAsynchXfer+0xf0>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	1ad2      	subs	r2, r2, r3
 800b03c:	4b27      	ldr	r3, [pc, #156]	; (800b0dc <Handle_USBAsynchXfer+0xf8>)
 800b03e:	601a      	str	r2, [r3, #0]
    }
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     APP_Rx_length &= ~0x03;
#endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
    
    if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800b046:	3339      	adds	r3, #57	; 0x39
 800b048:	881b      	ldrh	r3, [r3, #0]
 800b04a:	461a      	mov	r2, r3
 800b04c:	4b23      	ldr	r3, [pc, #140]	; (800b0dc <Handle_USBAsynchXfer+0xf8>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	429a      	cmp	r2, r3
 800b052:	d21e      	bcs.n	800b092 <Handle_USBAsynchXfer+0xae>
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 800b054:	4b1f      	ldr	r3, [pc, #124]	; (800b0d4 <Handle_USBAsynchXfer+0xf0>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	81fb      	strh	r3, [r7, #14]
      USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800b060:	f8b3 3039 	ldrh.w	r3, [r3, #57]	; 0x39
 800b064:	81bb      	strh	r3, [r7, #12]
      
      APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;	
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800b06c:	3339      	adds	r3, #57	; 0x39
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	461a      	mov	r2, r3
 800b072:	4b18      	ldr	r3, [pc, #96]	; (800b0d4 <Handle_USBAsynchXfer+0xf0>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	441a      	add	r2, r3
 800b078:	4b16      	ldr	r3, [pc, #88]	; (800b0d4 <Handle_USBAsynchXfer+0xf0>)
 800b07a:	601a      	str	r2, [r3, #0]
      APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;
 800b07c:	4b17      	ldr	r3, [pc, #92]	; (800b0dc <Handle_USBAsynchXfer+0xf8>)
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800b086:	3339      	adds	r3, #57	; 0x39
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	1ad2      	subs	r2, r2, r3
 800b08c:	4b13      	ldr	r3, [pc, #76]	; (800b0dc <Handle_USBAsynchXfer+0xf8>)
 800b08e:	601a      	str	r2, [r3, #0]
 800b090:	e00f      	b.n	800b0b2 <Handle_USBAsynchXfer+0xce>
    }
    else
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 800b092:	4b10      	ldr	r3, [pc, #64]	; (800b0d4 <Handle_USBAsynchXfer+0xf0>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	81fb      	strh	r3, [r7, #14]
      USB_Tx_length = APP_Rx_length;
 800b098:	4b10      	ldr	r3, [pc, #64]	; (800b0dc <Handle_USBAsynchXfer+0xf8>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	81bb      	strh	r3, [r7, #12]
      
      APP_Rx_ptr_out += APP_Rx_length;
 800b09e:	4b0d      	ldr	r3, [pc, #52]	; (800b0d4 <Handle_USBAsynchXfer+0xf0>)
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	4b0e      	ldr	r3, [pc, #56]	; (800b0dc <Handle_USBAsynchXfer+0xf8>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	441a      	add	r2, r3
 800b0a8:	4b0a      	ldr	r3, [pc, #40]	; (800b0d4 <Handle_USBAsynchXfer+0xf0>)
 800b0aa:	601a      	str	r2, [r3, #0]
      APP_Rx_length = 0;
 800b0ac:	4b0b      	ldr	r3, [pc, #44]	; (800b0dc <Handle_USBAsynchXfer+0xf8>)
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1; 
 800b0b2:	4b07      	ldr	r3, [pc, #28]	; (800b0d0 <Handle_USBAsynchXfer+0xec>)
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	701a      	strb	r2, [r3, #0]

    DCD_EP_Tx (pdev,
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 800b0b8:	89fa      	ldrh	r2, [r7, #14]
      APP_Rx_ptr_out += APP_Rx_length;
      APP_Rx_length = 0;
    }
    USB_Tx_State = 1; 

    DCD_EP_Tx (pdev,
 800b0ba:	4b09      	ldr	r3, [pc, #36]	; (800b0e0 <Handle_USBAsynchXfer+0xfc>)
 800b0bc:	441a      	add	r2, r3
 800b0be:	89bb      	ldrh	r3, [r7, #12]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	2181      	movs	r1, #129	; 0x81
 800b0c4:	f7fd fb18 	bl	80086f8 <DCD_EP_Tx>
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
               USB_Tx_length);
  }  
  
}
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000c70 	.word	0x20000c70
 800b0d4:	20000c68 	.word	0x20000c68
 800b0d8:	20000c64 	.word	0x20000c64
 800b0dc:	20000c6c 	.word	0x20000c6c
 800b0e0:	200016a4 	.word	0x200016a4

0800b0e4 <USBD_cdc_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_cdc_GetCfgDesc (uint8_t speed, uint16_t *length)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	6039      	str	r1, [r7, #0]
 800b0ee:	71fb      	strb	r3, [r7, #7]
  *length = sizeof (usbd_cdc_CfgDesc);
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2243      	movs	r2, #67	; 0x43
 800b0f4:	801a      	strh	r2, [r3, #0]
  return usbd_cdc_CfgDesc;
 800b0f6:	4b03      	ldr	r3, [pc, #12]	; (800b104 <USBD_cdc_GetCfgDesc+0x20>)
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	370c      	adds	r7, #12
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr
 800b104:	20000070 	.word	0x20000070

0800b108 <USBD_USR_Init>:
*         Displays the message on LCD for host lib initialization
* @param  None
* @retval None
*/
void USBD_USR_Init(void)
{   
 800b108:	b480      	push	{r7}
 800b10a:	af00      	add	r7, sp, #0

}
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <USBD_USR_DeviceReset>:
*         Displays the message on LCD on device Reset Event
* @param  speed : device speed
* @retval None
*/
void USBD_USR_DeviceReset(uint8_t speed )
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	4603      	mov	r3, r0
 800b11c:	71fb      	strb	r3, [r7, #7]
 switch (speed)
 800b11e:	79fb      	ldrb	r3, [r7, #7]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <USBD_USR_DeviceReset+0x16>
 800b124:	2b01      	cmp	r3, #1
 800b126:	d002      	beq.n	800b12e <USBD_USR_DeviceReset+0x1a>
     break;

  case USB_OTG_SPEED_FULL: 
     break;
 default:
     break;
 800b128:	e002      	b.n	800b130 <USBD_USR_DeviceReset+0x1c>
void USBD_USR_DeviceReset(uint8_t speed )
{
 switch (speed)
 {
   case USB_OTG_SPEED_HIGH: 
     break;
 800b12a:	bf00      	nop
 800b12c:	e000      	b.n	800b130 <USBD_USR_DeviceReset+0x1c>

  case USB_OTG_SPEED_FULL: 
     break;
 800b12e:	bf00      	nop
 default:
     break;
     
 }
}
 800b130:	370c      	adds	r7, #12
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop

0800b13c <USBD_USR_DeviceConfigured>:
*         Displays the message on LCD on device configuration Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceConfigured (void)
{
 800b13c:	b480      	push	{r7}
 800b13e:	af00      	add	r7, sp, #0
}
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <USBD_USR_DeviceConnected>:
*         Displays the message on LCD on device connection Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceConnected (void)
{
 800b148:	b480      	push	{r7}
 800b14a:	af00      	add	r7, sp, #0
}
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <USBD_USR_DeviceDisconnected>:
*         Displays the message on LCD on device disconnection Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceDisconnected (void)
{
 800b154:	b480      	push	{r7}
 800b156:	af00      	add	r7, sp, #0
}
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <USBD_USR_DeviceSuspended>:
*         Displays the message on LCD on device suspend Event
* @param  None
* @retval None
*/
void USBD_USR_DeviceSuspended(void)
{
 800b160:	b480      	push	{r7}
 800b162:	af00      	add	r7, sp, #0
  /* Users can do their application actions here for the USB-Reset */
}
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <USBD_USR_DeviceResumed>:
*         Displays the message on LCD on device resume Event
* @param  None
* @retval None
*/
void USBD_USR_DeviceResumed(void)
{
 800b16c:	b480      	push	{r7}
 800b16e:	af00      	add	r7, sp, #0
  /* Users can do their application actions here for the USB-Reset */
}
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <USBD_USR_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	4603      	mov	r3, r0
 800b180:	6039      	str	r1, [r7, #0]
 800b182:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	2212      	movs	r2, #18
 800b188:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800b18a:	4b03      	ldr	r3, [pc, #12]	; (800b198 <USBD_USR_DeviceDescriptor+0x20>)
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr
 800b198:	2000011c 	.word	0x2000011c

0800b19c <USBD_USR_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	6039      	str	r1, [r7, #0]
 800b1a6:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	2204      	movs	r2, #4
 800b1ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b1ae:	4b03      	ldr	r3, [pc, #12]	; (800b1bc <USBD_USR_LangIDStrDescriptor+0x20>)
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	20000130 	.word	0x20000130

0800b1c0 <USBD_USR_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	6039      	str	r1, [r7, #0]
 800b1ca:	71fb      	strb	r3, [r7, #7]
 
  
  if(speed == 0)
 800b1cc:	79fb      	ldrb	r3, [r7, #7]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d105      	bne.n	800b1de <USBD_USR_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString ((uint8_t*)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800b1d2:	4808      	ldr	r0, [pc, #32]	; (800b1f4 <USBD_USR_ProductStrDescriptor+0x34>)
 800b1d4:	4908      	ldr	r1, [pc, #32]	; (800b1f8 <USBD_USR_ProductStrDescriptor+0x38>)
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	f7ff f92a 	bl	800a430 <USBD_GetString>
 800b1dc:	e004      	b.n	800b1e8 <USBD_USR_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800b1de:	4807      	ldr	r0, [pc, #28]	; (800b1fc <USBD_USR_ProductStrDescriptor+0x3c>)
 800b1e0:	4905      	ldr	r1, [pc, #20]	; (800b1f8 <USBD_USR_ProductStrDescriptor+0x38>)
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	f7ff f924 	bl	800a430 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1e8:	4b03      	ldr	r3, [pc, #12]	; (800b1f8 <USBD_USR_ProductStrDescriptor+0x38>)
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	0800e04c 	.word	0x0800e04c
 800b1f8:	2000154c 	.word	0x2000154c
 800b1fc:	0800e070 	.word	0x0800e070

0800b200 <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	4603      	mov	r3, r0
 800b208:	6039      	str	r1, [r7, #0]
 800b20a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString ((uint8_t*)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b20c:	4804      	ldr	r0, [pc, #16]	; (800b220 <USBD_USR_ManufacturerStrDescriptor+0x20>)
 800b20e:	4905      	ldr	r1, [pc, #20]	; (800b224 <USBD_USR_ManufacturerStrDescriptor+0x24>)
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	f7ff f90d 	bl	800a430 <USBD_GetString>
  return USBD_StrDesc;
 800b216:	4b03      	ldr	r3, [pc, #12]	; (800b224 <USBD_USR_ManufacturerStrDescriptor+0x24>)
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	0800e094 	.word	0x0800e094
 800b224:	2000154c 	.word	0x2000154c

0800b228 <USBD_USR_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	4603      	mov	r3, r0
 800b230:	6039      	str	r1, [r7, #0]
 800b232:	71fb      	strb	r3, [r7, #7]
  if(speed  == USB_OTG_SPEED_HIGH)
 800b234:	79fb      	ldrb	r3, [r7, #7]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d105      	bne.n	800b246 <USBD_USR_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString ((uint8_t*)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 800b23a:	4808      	ldr	r0, [pc, #32]	; (800b25c <USBD_USR_SerialStrDescriptor+0x34>)
 800b23c:	4908      	ldr	r1, [pc, #32]	; (800b260 <USBD_USR_SerialStrDescriptor+0x38>)
 800b23e:	683a      	ldr	r2, [r7, #0]
 800b240:	f7ff f8f6 	bl	800a430 <USBD_GetString>
 800b244:	e004      	b.n	800b250 <USBD_USR_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 800b246:	4807      	ldr	r0, [pc, #28]	; (800b264 <USBD_USR_SerialStrDescriptor+0x3c>)
 800b248:	4905      	ldr	r1, [pc, #20]	; (800b260 <USBD_USR_SerialStrDescriptor+0x38>)
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	f7ff f8f0 	bl	800a430 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b250:	4b03      	ldr	r3, [pc, #12]	; (800b260 <USBD_USR_SerialStrDescriptor+0x38>)
}
 800b252:	4618      	mov	r0, r3
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	0800e0a8 	.word	0x0800e0a8
 800b260:	2000154c 	.word	0x2000154c
 800b264:	0800e0b8 	.word	0x0800e0b8

0800b268 <USBD_USR_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	4603      	mov	r3, r0
 800b270:	6039      	str	r1, [r7, #0]
 800b272:	71fb      	strb	r3, [r7, #7]
  if(speed  == USB_OTG_SPEED_HIGH)
 800b274:	79fb      	ldrb	r3, [r7, #7]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d105      	bne.n	800b286 <USBD_USR_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString ((uint8_t*)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800b27a:	4808      	ldr	r0, [pc, #32]	; (800b29c <USBD_USR_ConfigStrDescriptor+0x34>)
 800b27c:	4908      	ldr	r1, [pc, #32]	; (800b2a0 <USBD_USR_ConfigStrDescriptor+0x38>)
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	f7ff f8d6 	bl	800a430 <USBD_GetString>
 800b284:	e004      	b.n	800b290 <USBD_USR_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800b286:	4805      	ldr	r0, [pc, #20]	; (800b29c <USBD_USR_ConfigStrDescriptor+0x34>)
 800b288:	4905      	ldr	r1, [pc, #20]	; (800b2a0 <USBD_USR_ConfigStrDescriptor+0x38>)
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	f7ff f8d0 	bl	800a430 <USBD_GetString>
  }
  return USBD_StrDesc;  
 800b290:	4b03      	ldr	r3, [pc, #12]	; (800b2a0 <USBD_USR_ConfigStrDescriptor+0x38>)
}
 800b292:	4618      	mov	r0, r3
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	0800e0c8 	.word	0x0800e0c8
 800b2a0:	2000154c 	.word	0x2000154c

0800b2a4 <USBD_USR_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	6039      	str	r1, [r7, #0]
 800b2ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2b0:	79fb      	ldrb	r3, [r7, #7]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d105      	bne.n	800b2c2 <USBD_USR_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString ((uint8_t*)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800b2b6:	4808      	ldr	r0, [pc, #32]	; (800b2d8 <USBD_USR_InterfaceStrDescriptor+0x34>)
 800b2b8:	4908      	ldr	r1, [pc, #32]	; (800b2dc <USBD_USR_InterfaceStrDescriptor+0x38>)
 800b2ba:	683a      	ldr	r2, [r7, #0]
 800b2bc:	f7ff f8b8 	bl	800a430 <USBD_GetString>
 800b2c0:	e004      	b.n	800b2cc <USBD_USR_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800b2c2:	4805      	ldr	r0, [pc, #20]	; (800b2d8 <USBD_USR_InterfaceStrDescriptor+0x34>)
 800b2c4:	4905      	ldr	r1, [pc, #20]	; (800b2dc <USBD_USR_InterfaceStrDescriptor+0x38>)
 800b2c6:	683a      	ldr	r2, [r7, #0]
 800b2c8:	f7ff f8b2 	bl	800a430 <USBD_GetString>
  }
  return USBD_StrDesc;  
 800b2cc:	4b03      	ldr	r3, [pc, #12]	; (800b2dc <USBD_USR_InterfaceStrDescriptor+0x38>)
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	0800e0d4 	.word	0x0800e0d4
 800b2dc:	2000154c 	.word	0x2000154c

0800b2e0 <USB_OTG_BSP_Init>:
* @param  None
* @retval None
*/

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
#endif


 #ifdef USE_USB_OTG_FS

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);
 800b2e8:	2001      	movs	r0, #1
 800b2ea:	2101      	movs	r1, #1
 800b2ec:	f000 f938 	bl	800b560 <RCC_AHB1PeriphClockCmd>

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8  |
 800b2f0:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800b2f4:	60bb      	str	r3, [r7, #8]
    GPIO_Pin_9  |
      GPIO_Pin_11 |
        GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	737b      	strb	r3, [r7, #13]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800b2fe:	2300      	movs	r3, #0
 800b300:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 800b302:	2300      	movs	r3, #0
 800b304:	73fb      	strb	r3, [r7, #15]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 800b306:	f107 0308 	add.w	r3, r7, #8
 800b30a:	4820      	ldr	r0, [pc, #128]	; (800b38c <USB_OTG_BSP_Init+0xac>)
 800b30c:	4619      	mov	r1, r3
 800b30e:	f000 f99f 	bl	800b650 <GPIO_Init>

  GPIO_PinAFConfig(GPIOA,GPIO_PinSource8,GPIO_AF_OTG1_FS) ;
 800b312:	481e      	ldr	r0, [pc, #120]	; (800b38c <USB_OTG_BSP_Init+0xac>)
 800b314:	2108      	movs	r1, #8
 800b316:	220a      	movs	r2, #10
 800b318:	f000 fa44 	bl	800b7a4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_OTG1_FS) ;
 800b31c:	481b      	ldr	r0, [pc, #108]	; (800b38c <USB_OTG_BSP_Init+0xac>)
 800b31e:	2109      	movs	r1, #9
 800b320:	220a      	movs	r2, #10
 800b322:	f000 fa3f 	bl	800b7a4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG1_FS) ;
 800b326:	4819      	ldr	r0, [pc, #100]	; (800b38c <USB_OTG_BSP_Init+0xac>)
 800b328:	210b      	movs	r1, #11
 800b32a:	220a      	movs	r2, #10
 800b32c:	f000 fa3a 	bl	800b7a4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;
 800b330:	4816      	ldr	r0, [pc, #88]	; (800b38c <USB_OTG_BSP_Init+0xac>)
 800b332:	210c      	movs	r1, #12
 800b334:	220a      	movs	r2, #10
 800b336:	f000 fa35 	bl	800b7a4 <GPIO_PinAFConfig>

  /* this for ID line debug */


  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
 800b33a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b33e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800b340:	2301      	movs	r3, #1
 800b342:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 800b344:	2301      	movs	r3, #1
 800b346:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800b348:	2303      	movs	r3, #3
 800b34a:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 800b34c:	f107 0308 	add.w	r3, r7, #8
 800b350:	480e      	ldr	r0, [pc, #56]	; (800b38c <USB_OTG_BSP_Init+0xac>)
 800b352:	4619      	mov	r1, r3
 800b354:	f000 f97c 	bl	800b650 <GPIO_Init>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_OTG1_FS) ;
 800b358:	480c      	ldr	r0, [pc, #48]	; (800b38c <USB_OTG_BSP_Init+0xac>)
 800b35a:	210a      	movs	r1, #10
 800b35c:	220a      	movs	r2, #10
 800b35e:	f000 fa21 	bl	800b7a4 <GPIO_PinAFConfig>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800b362:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b366:	2101      	movs	r1, #1
 800b368:	f000 f936 	bl	800b5d8 <RCC_APB2PeriphClockCmd>
  RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ;
 800b36c:	2080      	movs	r0, #128	; 0x80
 800b36e:	2101      	movs	r1, #1
 800b370:	f000 f914 	bl	800b59c <RCC_AHB2PeriphClockCmd>

 #endif //USB_OTG_HS


  /* enable the PWR clock */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800b374:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800b378:	2101      	movs	r1, #1
 800b37a:	f000 f94b 	bl	800b614 <RCC_APB1PeriphResetCmd>
  NVIC_Init(&NVIC_InitStructure);

  EXTI_ClearITPendingBit(EXTI_Line20);
#endif

  EXTI_ClearITPendingBit(EXTI_Line0);
 800b37e:	2001      	movs	r0, #1
 800b380:	f000 fa56 	bl	800b830 <EXTI_ClearITPendingBit>
}
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	40020000 	.word	0x40020000

0800b390 <USB_OTG_BSP_EnableInterrupt>:
*         Enabele USB Global interrupt
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  NVIC_InitTypeDef NVIC_InitStructure;

  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 800b398:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800b39c:	f000 fb64 	bl	800ba68 <NVIC_PriorityGroupConfig>
#ifdef USE_USB_OTG_HS
  NVIC_InitStructure.NVIC_IRQChannel = OTG_HS_IRQn;
#else
  NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;
 800b3a0:	2343      	movs	r3, #67	; 0x43
 800b3a2:	733b      	strb	r3, [r7, #12]
#endif
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);
 800b3b0:	f107 030c 	add.w	r3, r7, #12
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f000 fb69 	bl	800ba8c <NVIC_Init>
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
#endif
}
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <USB_OTG_BSP_uDelay>:
*         This function provides delay time in micro sec
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	60fb      	str	r3, [r7, #12]
  const uint32_t utime = (120 * usec / 7);
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	011b      	lsls	r3, r3, #4
 800b3d2:	1a9b      	subs	r3, r3, r2
 800b3d4:	00db      	lsls	r3, r3, #3
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	4b0a      	ldr	r3, [pc, #40]	; (800b404 <USB_OTG_BSP_uDelay+0x44>)
 800b3da:	fba3 1302 	umull	r1, r3, r3, r2
 800b3de:	1ad2      	subs	r2, r2, r3
 800b3e0:	0852      	lsrs	r2, r2, #1
 800b3e2:	4413      	add	r3, r2
 800b3e4:	089b      	lsrs	r3, r3, #2
 800b3e6:	60bb      	str	r3, [r7, #8]
  do
  {
    if ( ++count > utime )
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	60fb      	str	r3, [r7, #12]
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d900      	bls.n	800b3f8 <USB_OTG_BSP_uDelay+0x38>
    {
      return ;
 800b3f6:	e000      	b.n	800b3fa <USB_OTG_BSP_uDelay+0x3a>
    }
  }
  while (1);
 800b3f8:	e7f6      	b.n	800b3e8 <USB_OTG_BSP_uDelay+0x28>
}
 800b3fa:	3714      	adds	r7, #20
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr
 800b404:	24924925 	.word	0x24924925

0800b408 <USB_OTG_BSP_mDelay>:
*          This function provides delay time in milli sec
* @param  msec : Value of delay required in milli sec
* @retval None
*/
void USB_OTG_BSP_mDelay (const uint32_t msec)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  USB_OTG_BSP_uDelay(msec * 1000);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b416:	fb02 f303 	mul.w	r3, r2, r3
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7ff ffd0 	bl	800b3c0 <USB_OTG_BSP_uDelay>
}
 800b420:	3708      	adds	r7, #8
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop

0800b428 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800b432:	2300      	movs	r3, #0
 800b434:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	881b      	ldrh	r3, [r3, #0]
 800b43a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800b43c:	89fb      	ldrh	r3, [r7, #14]
 800b43e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800b442:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	881a      	ldrh	r2, [r3, #0]
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	885b      	ldrh	r3, [r3, #2]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b454:	4313      	orrs	r3, r2
 800b456:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b45c:	4313      	orrs	r3, r2
 800b45e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b464:	4313      	orrs	r3, r2
 800b466:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b46c:	4313      	orrs	r3, r2
 800b46e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b474:	4313      	orrs	r3, r2
 800b476:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800b47c:	4313      	orrs	r3, r2
 800b47e:	b29a      	uxth	r2, r3
 800b480:	89fb      	ldrh	r3, [r7, #14]
 800b482:	4313      	orrs	r3, r2
 800b484:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	89fa      	ldrh	r2, [r7, #14]
 800b48a:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	8b9b      	ldrh	r3, [r3, #28]
 800b490:	b29b      	uxth	r3, r3
 800b492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b496:	b29a      	uxth	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	8a1a      	ldrh	r2, [r3, #16]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	821a      	strh	r2, [r3, #16]
}
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop

0800b4b0 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b4bc:	78fb      	ldrb	r3, [r7, #3]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d008      	beq.n	800b4d4 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	881b      	ldrh	r3, [r3, #0]
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	801a      	strh	r2, [r3, #0]
 800b4d2:	e007      	b.n	800b4e4 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	881b      	ldrh	r3, [r3, #0]
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	801a      	strh	r2, [r3, #0]
  }
}
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop

0800b4f0 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	899b      	ldrh	r3, [r3, #12]
 800b4fc:	b29b      	uxth	r3, r3
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	370c      	adds	r7, #12
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop

0800b50c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	460b      	mov	r3, r1
 800b516:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	887a      	ldrh	r2, [r7, #2]
 800b51c:	819a      	strh	r2, [r3, #12]
}
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	460b      	mov	r3, r1
 800b532:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800b534:	2300      	movs	r3, #0
 800b536:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	891b      	ldrh	r3, [r3, #8]
 800b53c:	b29a      	uxth	r2, r3
 800b53e:	887b      	ldrh	r3, [r7, #2]
 800b540:	4013      	ands	r3, r2
 800b542:	b29b      	uxth	r3, r3
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800b548:	2301      	movs	r3, #1
 800b54a:	73fb      	strb	r3, [r7, #15]
 800b54c:	e001      	b.n	800b552 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800b54e:	2300      	movs	r3, #0
 800b550:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800b552:	7bfb      	ldrb	r3, [r7, #15]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3714      	adds	r7, #20
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	460b      	mov	r3, r1
 800b56a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b56c:	78fb      	ldrb	r3, [r7, #3]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d006      	beq.n	800b580 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800b572:	4b09      	ldr	r3, [pc, #36]	; (800b598 <RCC_AHB1PeriphClockCmd+0x38>)
 800b574:	4a08      	ldr	r2, [pc, #32]	; (800b598 <RCC_AHB1PeriphClockCmd+0x38>)
 800b576:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	430a      	orrs	r2, r1
 800b57c:	631a      	str	r2, [r3, #48]	; 0x30
 800b57e:	e006      	b.n	800b58e <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800b580:	4b05      	ldr	r3, [pc, #20]	; (800b598 <RCC_AHB1PeriphClockCmd+0x38>)
 800b582:	4a05      	ldr	r2, [pc, #20]	; (800b598 <RCC_AHB1PeriphClockCmd+0x38>)
 800b584:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	43d2      	mvns	r2, r2
 800b58a:	400a      	ands	r2, r1
 800b58c:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	40023800 	.word	0x40023800

0800b59c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800b5a8:	78fb      	ldrb	r3, [r7, #3]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d006      	beq.n	800b5bc <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800b5ae:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <RCC_AHB2PeriphClockCmd+0x38>)
 800b5b0:	4a08      	ldr	r2, [pc, #32]	; (800b5d4 <RCC_AHB2PeriphClockCmd+0x38>)
 800b5b2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	430a      	orrs	r2, r1
 800b5b8:	635a      	str	r2, [r3, #52]	; 0x34
 800b5ba:	e006      	b.n	800b5ca <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800b5bc:	4b05      	ldr	r3, [pc, #20]	; (800b5d4 <RCC_AHB2PeriphClockCmd+0x38>)
 800b5be:	4a05      	ldr	r2, [pc, #20]	; (800b5d4 <RCC_AHB2PeriphClockCmd+0x38>)
 800b5c0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	43d2      	mvns	r2, r2
 800b5c6:	400a      	ands	r2, r1
 800b5c8:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr
 800b5d4:	40023800 	.word	0x40023800

0800b5d8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800b5e4:	78fb      	ldrb	r3, [r7, #3]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d006      	beq.n	800b5f8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800b5ea:	4b09      	ldr	r3, [pc, #36]	; (800b610 <RCC_APB2PeriphClockCmd+0x38>)
 800b5ec:	4a08      	ldr	r2, [pc, #32]	; (800b610 <RCC_APB2PeriphClockCmd+0x38>)
 800b5ee:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	430a      	orrs	r2, r1
 800b5f4:	645a      	str	r2, [r3, #68]	; 0x44
 800b5f6:	e006      	b.n	800b606 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800b5f8:	4b05      	ldr	r3, [pc, #20]	; (800b610 <RCC_APB2PeriphClockCmd+0x38>)
 800b5fa:	4a05      	ldr	r2, [pc, #20]	; (800b610 <RCC_APB2PeriphClockCmd+0x38>)
 800b5fc:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	43d2      	mvns	r2, r2
 800b602:	400a      	ands	r2, r1
 800b604:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr
 800b610:	40023800 	.word	0x40023800

0800b614 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	460b      	mov	r3, r1
 800b61e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b620:	78fb      	ldrb	r3, [r7, #3]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d006      	beq.n	800b634 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800b626:	4b09      	ldr	r3, [pc, #36]	; (800b64c <RCC_APB1PeriphResetCmd+0x38>)
 800b628:	4a08      	ldr	r2, [pc, #32]	; (800b64c <RCC_APB1PeriphResetCmd+0x38>)
 800b62a:	6a11      	ldr	r1, [r2, #32]
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	430a      	orrs	r2, r1
 800b630:	621a      	str	r2, [r3, #32]
 800b632:	e006      	b.n	800b642 <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800b634:	4b05      	ldr	r3, [pc, #20]	; (800b64c <RCC_APB1PeriphResetCmd+0x38>)
 800b636:	4a05      	ldr	r2, [pc, #20]	; (800b64c <RCC_APB1PeriphResetCmd+0x38>)
 800b638:	6a11      	ldr	r1, [r2, #32]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	43d2      	mvns	r2, r2
 800b63e:	400a      	ands	r2, r1
 800b640:	621a      	str	r2, [r3, #32]
  }
}
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr
 800b64c:	40023800 	.word	0x40023800

0800b650 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800b650:	b480      	push	{r7}
 800b652:	b087      	sub	sp, #28
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800b65a:	2300      	movs	r3, #0
 800b65c:	617b      	str	r3, [r7, #20]
 800b65e:	2300      	movs	r3, #0
 800b660:	613b      	str	r3, [r7, #16]
 800b662:	2300      	movs	r3, #0
 800b664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800b666:	2300      	movs	r3, #0
 800b668:	617b      	str	r3, [r7, #20]
 800b66a:	e076      	b.n	800b75a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2201      	movs	r2, #1
 800b670:	fa02 f303 	lsl.w	r3, r2, r3
 800b674:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	4013      	ands	r3, r2
 800b67e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	429a      	cmp	r2, r3
 800b686:	d165      	bne.n	800b754 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	005b      	lsls	r3, r3, #1
 800b690:	2103      	movs	r1, #3
 800b692:	fa01 f303 	lsl.w	r3, r1, r3
 800b696:	43db      	mvns	r3, r3
 800b698:	401a      	ands	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	791b      	ldrb	r3, [r3, #4]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	005b      	lsls	r3, r3, #1
 800b6ac:	fa01 f303 	lsl.w	r3, r1, r3
 800b6b0:	431a      	orrs	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	791b      	ldrb	r3, [r3, #4]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d003      	beq.n	800b6c6 <GPIO_Init+0x76>
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	791b      	ldrb	r3, [r3, #4]
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d12e      	bne.n	800b724 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	689a      	ldr	r2, [r3, #8]
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	005b      	lsls	r3, r3, #1
 800b6ce:	2103      	movs	r1, #3
 800b6d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b6d4:	43db      	mvns	r3, r3
 800b6d6:	401a      	ands	r2, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	689a      	ldr	r2, [r3, #8]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	795b      	ldrb	r3, [r3, #5]
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	005b      	lsls	r3, r3, #1
 800b6ea:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ee:	431a      	orrs	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	2101      	movs	r1, #1
 800b6fe:	fa01 f303 	lsl.w	r3, r1, r3
 800b702:	43db      	mvns	r3, r3
 800b704:	401a      	ands	r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685a      	ldr	r2, [r3, #4]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	799b      	ldrb	r3, [r3, #6]
 800b712:	4619      	mov	r1, r3
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	b29b      	uxth	r3, r3
 800b718:	fa01 f303 	lsl.w	r3, r1, r3
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	431a      	orrs	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	68da      	ldr	r2, [r3, #12]
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	2103      	movs	r1, #3
 800b730:	fa01 f303 	lsl.w	r3, r1, r3
 800b734:	43db      	mvns	r3, r3
 800b736:	401a      	ands	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68da      	ldr	r2, [r3, #12]
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	79db      	ldrb	r3, [r3, #7]
 800b744:	4619      	mov	r1, r3
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	005b      	lsls	r3, r3, #1
 800b74a:	fa01 f303 	lsl.w	r3, r1, r3
 800b74e:	431a      	orrs	r2, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	3301      	adds	r3, #1
 800b758:	617b      	str	r3, [r7, #20]
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2b0f      	cmp	r3, #15
 800b75e:	d985      	bls.n	800b66c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800b760:	371c      	adds	r7, #28
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop

0800b76c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	460b      	mov	r3, r1
 800b776:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	887a      	ldrh	r2, [r7, #2]
 800b77c:	831a      	strh	r2, [r3, #24]
}
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	460b      	mov	r3, r1
 800b792:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	887a      	ldrh	r2, [r7, #2]
 800b798:	835a      	strh	r2, [r3, #26]
}
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	460a      	mov	r2, r1
 800b7b0:	807a      	strh	r2, [r7, #2]
 800b7b2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800b7bc:	787a      	ldrb	r2, [r7, #1]
 800b7be:	887b      	ldrh	r3, [r7, #2]
 800b7c0:	f003 0307 	and.w	r3, r3, #7
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ca:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800b7cc:	887b      	ldrh	r3, [r7, #2]
 800b7ce:	08db      	lsrs	r3, r3, #3
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	887b      	ldrh	r3, [r7, #2]
 800b7d6:	08db      	lsrs	r3, r3, #3
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	4619      	mov	r1, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	3108      	adds	r1, #8
 800b7e0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800b7e4:	887b      	ldrh	r3, [r7, #2]
 800b7e6:	f003 0307 	and.w	r3, r3, #7
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	200f      	movs	r0, #15
 800b7ee:	fa00 f303 	lsl.w	r3, r0, r3
 800b7f2:	43db      	mvns	r3, r3
 800b7f4:	4019      	ands	r1, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	3208      	adds	r2, #8
 800b7fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800b7fe:	887b      	ldrh	r3, [r7, #2]
 800b800:	08db      	lsrs	r3, r3, #3
 800b802:	b29b      	uxth	r3, r3
 800b804:	461a      	mov	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	3208      	adds	r2, #8
 800b80a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	4313      	orrs	r3, r2
 800b812:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800b814:	887b      	ldrh	r3, [r7, #2]
 800b816:	08db      	lsrs	r3, r3, #3
 800b818:	b29b      	uxth	r3, r3
 800b81a:	461a      	mov	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	3208      	adds	r2, #8
 800b820:	68b9      	ldr	r1, [r7, #8]
 800b822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800b826:	3714      	adds	r7, #20
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800b838:	4b03      	ldr	r3, [pc, #12]	; (800b848 <EXTI_ClearITPendingBit+0x18>)
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	615a      	str	r2, [r3, #20]
}
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr
 800b848:	40013c00 	.word	0x40013c00

0800b84c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	4b24      	ldr	r3, [pc, #144]	; (800b8f4 <DMA_Init+0xa8>)
 800b864:	4013      	ands	r3, r2
 800b866:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800b876:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	699b      	ldr	r3, [r3, #24]
 800b87c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800b882:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	6a1b      	ldr	r3, [r3, #32]
 800b888:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800b88e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b894:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800b89a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a0:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	68fa      	ldr	r2, [r7, #12]
 800b8ac:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f023 0307 	bic.w	r3, r3, #7
 800b8ba:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	691a      	ldr	r2, [r3, #16]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	685a      	ldr	r2, [r3, #4]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	689a      	ldr	r2, [r3, #8]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	60da      	str	r2, [r3, #12]
}
 800b8ea:	3714      	adds	r7, #20
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr
 800b8f4:	f01c803f 	.word	0xf01c803f

0800b8f8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	460b      	mov	r3, r1
 800b902:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800b904:	78fb      	ldrb	r3, [r7, #3]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d006      	beq.n	800b918 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f043 0201 	orr.w	r2, r3, #1
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	601a      	str	r2, [r3, #0]
 800b916:	e005      	b.n	800b924 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f023 0201 	bic.w	r2, r3, #1
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	601a      	str	r2, [r3, #0]
  }
}
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop

0800b930 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800b938:	2300      	movs	r3, #0
 800b93a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 0301 	and.w	r3, r3, #1
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800b948:	2301      	movs	r3, #1
 800b94a:	73fb      	strb	r3, [r7, #15]
 800b94c:	e001      	b.n	800b952 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800b94e:	2300      	movs	r3, #0
 800b950:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800b952:	7bfb      	ldrb	r3, [r7, #15]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3714      	adds	r7, #20
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800b960:	b480      	push	{r7}
 800b962:	b087      	sub	sp, #28
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800b96a:	2300      	movs	r3, #0
 800b96c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	4b15      	ldr	r3, [pc, #84]	; (800b9cc <DMA_GetFlagStatus+0x6c>)
 800b976:	429a      	cmp	r2, r3
 800b978:	d802      	bhi.n	800b980 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b97a:	4b15      	ldr	r3, [pc, #84]	; (800b9d0 <DMA_GetFlagStatus+0x70>)
 800b97c:	613b      	str	r3, [r7, #16]
 800b97e:	e001      	b.n	800b984 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b980:	4b14      	ldr	r3, [pc, #80]	; (800b9d4 <DMA_GetFlagStatus+0x74>)
 800b982:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d003      	beq.n	800b996 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	60fb      	str	r3, [r7, #12]
 800b994:	e002      	b.n	800b99c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b9a2:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b9a6:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	75fb      	strb	r3, [r7, #23]
 800b9b6:	e001      	b.n	800b9bc <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	371c      	adds	r7, #28
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	4002640f 	.word	0x4002640f
 800b9d0:	40026000 	.word	0x40026000
 800b9d4:	40026400 	.word	0x40026400

0800b9d8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	4b10      	ldr	r3, [pc, #64]	; (800ba28 <DMA_ClearFlag+0x50>)
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d802      	bhi.n	800b9f0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b9ea:	4b10      	ldr	r3, [pc, #64]	; (800ba2c <DMA_ClearFlag+0x54>)
 800b9ec:	60fb      	str	r3, [r7, #12]
 800b9ee:	e001      	b.n	800b9f4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b9f0:	4b0f      	ldr	r3, [pc, #60]	; (800ba30 <DMA_ClearFlag+0x58>)
 800b9f2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d007      	beq.n	800ba0e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800ba04:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	60d3      	str	r3, [r2, #12]
 800ba0c:	e006      	b.n	800ba1c <DMA_ClearFlag+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800ba14:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	6093      	str	r3, [r2, #8]
  }    
}
 800ba1c:	3714      	adds	r7, #20
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	4002640f 	.word	0x4002640f
 800ba2c:	40026000 	.word	0x40026000
 800ba30:	40026400 	.word	0x40026400

0800ba34 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800ba44:	4b07      	ldr	r3, [pc, #28]	; (800ba64 <DAC_SetChannel1Data+0x30>)
 800ba46:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	3308      	adds	r3, #8
 800ba50:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	887a      	ldrh	r2, [r7, #2]
 800ba56:	601a      	str	r2, [r3, #0]
}
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	40007400 	.word	0x40007400

0800ba68 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800ba70:	4a05      	ldr	r2, [pc, #20]	; (800ba88 <NVIC_PriorityGroupConfig+0x20>)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ba78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba7c:	60d3      	str	r3, [r2, #12]
}
 800ba7e:	370c      	adds	r7, #12
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr
 800ba88:	e000ed00 	.word	0xe000ed00

0800ba8c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800ba94:	2300      	movs	r3, #0
 800ba96:	73fb      	strb	r3, [r7, #15]
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73bb      	strb	r3, [r7, #14]
 800ba9c:	230f      	movs	r3, #15
 800ba9e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	78db      	ldrb	r3, [r3, #3]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d037      	beq.n	800bb18 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800baa8:	4b25      	ldr	r3, [pc, #148]	; (800bb40 <NVIC_Init+0xb4>)
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	43db      	mvns	r3, r3
 800baae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bab2:	0a1b      	lsrs	r3, r3, #8
 800bab4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
 800bab8:	f1c3 0304 	rsb	r3, r3, #4
 800babc:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800babe:	7b7a      	ldrb	r2, [r7, #13]
 800bac0:	7bfb      	ldrb	r3, [r7, #15]
 800bac2:	fa42 f303 	asr.w	r3, r2, r3
 800bac6:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	785b      	ldrb	r3, [r3, #1]
 800bacc:	461a      	mov	r2, r3
 800bace:	7bbb      	ldrb	r3, [r7, #14]
 800bad0:	fa02 f303 	lsl.w	r3, r2, r3
 800bad4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	789a      	ldrb	r2, [r3, #2]
 800bada:	7b7b      	ldrb	r3, [r7, #13]
 800badc:	4013      	ands	r3, r2
 800bade:	b2da      	uxtb	r2, r3
 800bae0:	7bfb      	ldrb	r3, [r7, #15]
 800bae2:	4313      	orrs	r3, r2
 800bae4:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800bae6:	7bfb      	ldrb	r3, [r7, #15]
 800bae8:	011b      	lsls	r3, r3, #4
 800baea:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800baec:	4a15      	ldr	r2, [pc, #84]	; (800bb44 <NVIC_Init+0xb8>)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	4413      	add	r3, r2
 800baf4:	7bfa      	ldrb	r2, [r7, #15]
 800baf6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800bafa:	4b12      	ldr	r3, [pc, #72]	; (800bb44 <NVIC_Init+0xb8>)
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	7812      	ldrb	r2, [r2, #0]
 800bb00:	0952      	lsrs	r2, r2, #5
 800bb02:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800bb04:	6879      	ldr	r1, [r7, #4]
 800bb06:	7809      	ldrb	r1, [r1, #0]
 800bb08:	f001 011f 	and.w	r1, r1, #31
 800bb0c:	2001      	movs	r0, #1
 800bb0e:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800bb12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bb16:	e00e      	b.n	800bb36 <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800bb18:	4b0a      	ldr	r3, [pc, #40]	; (800bb44 <NVIC_Init+0xb8>)
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	7812      	ldrb	r2, [r2, #0]
 800bb1e:	0952      	lsrs	r2, r2, #5
 800bb20:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800bb22:	6879      	ldr	r1, [r7, #4]
 800bb24:	7809      	ldrb	r1, [r1, #0]
 800bb26:	f001 011f 	and.w	r1, r1, #31
 800bb2a:	2001      	movs	r0, #1
 800bb2c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800bb30:	3220      	adds	r2, #32
 800bb32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	e000ed00 	.word	0xe000ed00
 800bb44:	e000e100 	.word	0xe000e100

0800bb48 <_Znwj>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	bf14      	ite	ne
 800bb4e:	4604      	movne	r4, r0
 800bb50:	2401      	moveq	r4, #1
 800bb52:	4620      	mov	r0, r4
 800bb54:	f001 f880 	bl	800cc58 <malloc>
 800bb58:	b948      	cbnz	r0, 800bb6e <_Znwj+0x26>
 800bb5a:	4d0d      	ldr	r5, [pc, #52]	; (800bb90 <_Znwj+0x48>)
 800bb5c:	682b      	ldr	r3, [r5, #0]
 800bb5e:	b13b      	cbz	r3, 800bb70 <_Znwj+0x28>
 800bb60:	4798      	blx	r3
 800bb62:	4620      	mov	r0, r4
 800bb64:	f001 f878 	bl	800cc58 <malloc>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	d0f7      	beq.n	800bb5c <_Znwj+0x14>
 800bb6c:	bd38      	pop	{r3, r4, r5, pc}
 800bb6e:	bd38      	pop	{r3, r4, r5, pc}
 800bb70:	2004      	movs	r0, #4
 800bb72:	f000 f98f 	bl	800be94 <__cxa_allocate_exception>
 800bb76:	4b07      	ldr	r3, [pc, #28]	; (800bb94 <_Znwj+0x4c>)
 800bb78:	6003      	str	r3, [r0, #0]
 800bb7a:	4907      	ldr	r1, [pc, #28]	; (800bb98 <_Znwj+0x50>)
 800bb7c:	4a07      	ldr	r2, [pc, #28]	; (800bb9c <_Znwj+0x54>)
 800bb7e:	f000 f9f1 	bl	800bf64 <__cxa_throw>
 800bb82:	3101      	adds	r1, #1
 800bb84:	d001      	beq.n	800bb8a <_Znwj+0x42>
 800bb86:	f000 f80b 	bl	800bba0 <__cxa_end_cleanup>
 800bb8a:	f000 f919 	bl	800bdc0 <__cxa_call_unexpected>
 800bb8e:	bf00      	nop
 800bb90:	20000c7c 	.word	0x20000c7c
 800bb94:	0800e840 	.word	0x0800e840
 800bb98:	0800e850 	.word	0x0800e850
 800bb9c:	0800bd35 	.word	0x0800bd35

0800bba0 <__cxa_end_cleanup>:
 800bba0:	b41e      	push	{r1, r2, r3, r4}
 800bba2:	f000 f88b 	bl	800bcbc <__gnu_end_cleanup>
 800bba6:	bc1e      	pop	{r1, r2, r3, r4}
 800bba8:	f7fa fc76 	bl	8006498 <_Unwind_Resume>

0800bbac <__cxa_type_match>:
 800bbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbae:	7802      	ldrb	r2, [r0, #0]
 800bbb0:	2a47      	cmp	r2, #71	; 0x47
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	460d      	mov	r5, r1
 800bbb6:	461e      	mov	r6, r3
 800bbb8:	d01a      	beq.n	800bbf0 <__cxa_type_match+0x44>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	4c24      	ldr	r4, [pc, #144]	; (800bc50 <__cxa_type_match+0xa4>)
 800bbbe:	9301      	str	r3, [sp, #4]
 800bbc0:	6822      	ldr	r2, [r4, #0]
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	6893      	ldr	r3, [r2, #8]
 800bbc6:	4798      	blx	r3
 800bbc8:	b180      	cbz	r0, 800bbec <__cxa_type_match+0x40>
 800bbca:	9b01      	ldr	r3, [sp, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	9301      	str	r3, [sp, #4]
 800bbd0:	2702      	movs	r7, #2
 800bbd2:	682a      	ldr	r2, [r5, #0]
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	6914      	ldr	r4, [r2, #16]
 800bbda:	2301      	movs	r3, #1
 800bbdc:	aa01      	add	r2, sp, #4
 800bbde:	47a0      	blx	r4
 800bbe0:	b110      	cbz	r0, 800bbe8 <__cxa_type_match+0x3c>
 800bbe2:	9b01      	ldr	r3, [sp, #4]
 800bbe4:	6033      	str	r3, [r6, #0]
 800bbe6:	4638      	mov	r0, r7
 800bbe8:	b003      	add	sp, #12
 800bbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbec:	2701      	movs	r7, #1
 800bbee:	e7f0      	b.n	800bbd2 <__cxa_type_match+0x26>
 800bbf0:	7843      	ldrb	r3, [r0, #1]
 800bbf2:	2b4e      	cmp	r3, #78	; 0x4e
 800bbf4:	d1e1      	bne.n	800bbba <__cxa_type_match+0xe>
 800bbf6:	7883      	ldrb	r3, [r0, #2]
 800bbf8:	2b55      	cmp	r3, #85	; 0x55
 800bbfa:	d1de      	bne.n	800bbba <__cxa_type_match+0xe>
 800bbfc:	78c3      	ldrb	r3, [r0, #3]
 800bbfe:	2b43      	cmp	r3, #67	; 0x43
 800bc00:	d1db      	bne.n	800bbba <__cxa_type_match+0xe>
 800bc02:	7903      	ldrb	r3, [r0, #4]
 800bc04:	2b46      	cmp	r3, #70	; 0x46
 800bc06:	d016      	beq.n	800bc36 <__cxa_type_match+0x8a>
 800bc08:	7903      	ldrb	r3, [r0, #4]
 800bc0a:	2b43      	cmp	r3, #67	; 0x43
 800bc0c:	d1d5      	bne.n	800bbba <__cxa_type_match+0xe>
 800bc0e:	7943      	ldrb	r3, [r0, #5]
 800bc10:	2b2b      	cmp	r3, #43	; 0x2b
 800bc12:	d1d2      	bne.n	800bbba <__cxa_type_match+0xe>
 800bc14:	7983      	ldrb	r3, [r0, #6]
 800bc16:	2b2b      	cmp	r3, #43	; 0x2b
 800bc18:	d1cf      	bne.n	800bbba <__cxa_type_match+0xe>
 800bc1a:	79c3      	ldrb	r3, [r0, #7]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d8cc      	bhi.n	800bbba <__cxa_type_match+0xe>
 800bc20:	d004      	beq.n	800bc2c <__cxa_type_match+0x80>
 800bc22:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800bc26:	3058      	adds	r0, #88	; 0x58
 800bc28:	9001      	str	r0, [sp, #4]
 800bc2a:	e7c9      	b.n	800bbc0 <__cxa_type_match+0x14>
 800bc2c:	f850 0c20 	ldr.w	r0, [r0, #-32]
 800bc30:	f850 4c78 	ldr.w	r4, [r0, #-120]
 800bc34:	e7f8      	b.n	800bc28 <__cxa_type_match+0x7c>
 800bc36:	7943      	ldrb	r3, [r0, #5]
 800bc38:	2b4f      	cmp	r3, #79	; 0x4f
 800bc3a:	d1e5      	bne.n	800bc08 <__cxa_type_match+0x5c>
 800bc3c:	7983      	ldrb	r3, [r0, #6]
 800bc3e:	2b52      	cmp	r3, #82	; 0x52
 800bc40:	d1e2      	bne.n	800bc08 <__cxa_type_match+0x5c>
 800bc42:	79c3      	ldrb	r3, [r0, #7]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d1df      	bne.n	800bc08 <__cxa_type_match+0x5c>
 800bc48:	9301      	str	r3, [sp, #4]
 800bc4a:	4c02      	ldr	r4, [pc, #8]	; (800bc54 <__cxa_type_match+0xa8>)
 800bc4c:	e7b8      	b.n	800bbc0 <__cxa_type_match+0x14>
 800bc4e:	bf00      	nop
 800bc50:	0800e904 	.word	0x0800e904
 800bc54:	0800e898 	.word	0x0800e898

0800bc58 <__cxa_begin_cleanup>:
 800bc58:	b510      	push	{r4, lr}
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	f000 fd16 	bl	800c68c <__cxa_get_globals>
 800bc60:	7823      	ldrb	r3, [r4, #0]
 800bc62:	2b47      	cmp	r3, #71	; 0x47
 800bc64:	f1a4 0220 	sub.w	r2, r4, #32
 800bc68:	d004      	beq.n	800bc74 <__cxa_begin_cleanup+0x1c>
 800bc6a:	6883      	ldr	r3, [r0, #8]
 800bc6c:	bb23      	cbnz	r3, 800bcb8 <__cxa_begin_cleanup+0x60>
 800bc6e:	6082      	str	r2, [r0, #8]
 800bc70:	2001      	movs	r0, #1
 800bc72:	bd10      	pop	{r4, pc}
 800bc74:	7863      	ldrb	r3, [r4, #1]
 800bc76:	2b4e      	cmp	r3, #78	; 0x4e
 800bc78:	d1f7      	bne.n	800bc6a <__cxa_begin_cleanup+0x12>
 800bc7a:	78a3      	ldrb	r3, [r4, #2]
 800bc7c:	2b55      	cmp	r3, #85	; 0x55
 800bc7e:	d1f4      	bne.n	800bc6a <__cxa_begin_cleanup+0x12>
 800bc80:	78e3      	ldrb	r3, [r4, #3]
 800bc82:	2b43      	cmp	r3, #67	; 0x43
 800bc84:	d1f1      	bne.n	800bc6a <__cxa_begin_cleanup+0x12>
 800bc86:	7923      	ldrb	r3, [r4, #4]
 800bc88:	2b43      	cmp	r3, #67	; 0x43
 800bc8a:	d1ee      	bne.n	800bc6a <__cxa_begin_cleanup+0x12>
 800bc8c:	7963      	ldrb	r3, [r4, #5]
 800bc8e:	2b2b      	cmp	r3, #43	; 0x2b
 800bc90:	d1eb      	bne.n	800bc6a <__cxa_begin_cleanup+0x12>
 800bc92:	79a3      	ldrb	r3, [r4, #6]
 800bc94:	2b2b      	cmp	r3, #43	; 0x2b
 800bc96:	d1e8      	bne.n	800bc6a <__cxa_begin_cleanup+0x12>
 800bc98:	79e3      	ldrb	r3, [r4, #7]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d8e5      	bhi.n	800bc6a <__cxa_begin_cleanup+0x12>
 800bc9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bca2:	3301      	adds	r3, #1
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bcaa:	d1e1      	bne.n	800bc70 <__cxa_begin_cleanup+0x18>
 800bcac:	6883      	ldr	r3, [r0, #8]
 800bcae:	f844 3c08 	str.w	r3, [r4, #-8]
 800bcb2:	6082      	str	r2, [r0, #8]
 800bcb4:	2001      	movs	r0, #1
 800bcb6:	bd10      	pop	{r4, pc}
 800bcb8:	f000 fd8c 	bl	800c7d4 <_ZSt9terminatev>

0800bcbc <__gnu_end_cleanup>:
 800bcbc:	b508      	push	{r3, lr}
 800bcbe:	f000 fce5 	bl	800c68c <__cxa_get_globals>
 800bcc2:	6883      	ldr	r3, [r0, #8]
 800bcc4:	b383      	cbz	r3, 800bd28 <__gnu_end_cleanup+0x6c>
 800bcc6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800bcca:	2a47      	cmp	r2, #71	; 0x47
 800bccc:	d004      	beq.n	800bcd8 <__gnu_end_cleanup+0x1c>
 800bcce:	2200      	movs	r2, #0
 800bcd0:	6082      	str	r2, [r0, #8]
 800bcd2:	f103 0020 	add.w	r0, r3, #32
 800bcd6:	bd08      	pop	{r3, pc}
 800bcd8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800bcdc:	2a4e      	cmp	r2, #78	; 0x4e
 800bcde:	d1f6      	bne.n	800bcce <__gnu_end_cleanup+0x12>
 800bce0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800bce4:	2a55      	cmp	r2, #85	; 0x55
 800bce6:	d1f2      	bne.n	800bcce <__gnu_end_cleanup+0x12>
 800bce8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800bcec:	2a43      	cmp	r2, #67	; 0x43
 800bcee:	d1ee      	bne.n	800bcce <__gnu_end_cleanup+0x12>
 800bcf0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800bcf4:	2a43      	cmp	r2, #67	; 0x43
 800bcf6:	d1ea      	bne.n	800bcce <__gnu_end_cleanup+0x12>
 800bcf8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800bcfc:	2a2b      	cmp	r2, #43	; 0x2b
 800bcfe:	d1e6      	bne.n	800bcce <__gnu_end_cleanup+0x12>
 800bd00:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800bd04:	2a2b      	cmp	r2, #43	; 0x2b
 800bd06:	d1e2      	bne.n	800bcce <__gnu_end_cleanup+0x12>
 800bd08:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800bd0c:	2a01      	cmp	r2, #1
 800bd0e:	d8de      	bhi.n	800bcce <__gnu_end_cleanup+0x12>
 800bd10:	69da      	ldr	r2, [r3, #28]
 800bd12:	3a01      	subs	r2, #1
 800bd14:	61da      	str	r2, [r3, #28]
 800bd16:	2a00      	cmp	r2, #0
 800bd18:	d1db      	bne.n	800bcd2 <__gnu_end_cleanup+0x16>
 800bd1a:	699a      	ldr	r2, [r3, #24]
 800bd1c:	6082      	str	r2, [r0, #8]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	619a      	str	r2, [r3, #24]
 800bd22:	f103 0020 	add.w	r0, r3, #32
 800bd26:	bd08      	pop	{r3, pc}
 800bd28:	f000 fd54 	bl	800c7d4 <_ZSt9terminatev>

0800bd2c <_ZNKSt9bad_alloc4whatEv>:
 800bd2c:	4800      	ldr	r0, [pc, #0]	; (800bd30 <_ZNKSt9bad_alloc4whatEv+0x4>)
 800bd2e:	4770      	bx	lr
 800bd30:	0800e85c 	.word	0x0800e85c

0800bd34 <_ZNSt9bad_allocD1Ev>:
 800bd34:	b510      	push	{r4, lr}
 800bd36:	4b03      	ldr	r3, [pc, #12]	; (800bd44 <_ZNSt9bad_allocD1Ev+0x10>)
 800bd38:	6003      	str	r3, [r0, #0]
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	f000 fc7a 	bl	800c634 <_ZNSt9exceptionD1Ev>
 800bd40:	4620      	mov	r0, r4
 800bd42:	bd10      	pop	{r4, pc}
 800bd44:	0800e840 	.word	0x0800e840

0800bd48 <_ZNSt9bad_allocD0Ev>:
 800bd48:	b510      	push	{r4, lr}
 800bd4a:	4b05      	ldr	r3, [pc, #20]	; (800bd60 <_ZNSt9bad_allocD0Ev+0x18>)
 800bd4c:	6003      	str	r3, [r0, #0]
 800bd4e:	4604      	mov	r4, r0
 800bd50:	f000 fc70 	bl	800c634 <_ZNSt9exceptionD1Ev>
 800bd54:	4620      	mov	r0, r4
 800bd56:	f000 fddf 	bl	800c918 <_ZdlPv>
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	bd10      	pop	{r4, pc}
 800bd5e:	bf00      	nop
 800bd60:	0800e840 	.word	0x0800e840

0800bd64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800bd64:	7803      	ldrb	r3, [r0, #0]
 800bd66:	2b47      	cmp	r3, #71	; 0x47
 800bd68:	d001      	beq.n	800bd6e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	4770      	bx	lr
 800bd6e:	7843      	ldrb	r3, [r0, #1]
 800bd70:	2b4e      	cmp	r3, #78	; 0x4e
 800bd72:	d1fa      	bne.n	800bd6a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800bd74:	7883      	ldrb	r3, [r0, #2]
 800bd76:	2b55      	cmp	r3, #85	; 0x55
 800bd78:	d1f7      	bne.n	800bd6a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800bd7a:	78c3      	ldrb	r3, [r0, #3]
 800bd7c:	2b43      	cmp	r3, #67	; 0x43
 800bd7e:	d1f4      	bne.n	800bd6a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800bd80:	7903      	ldrb	r3, [r0, #4]
 800bd82:	2b43      	cmp	r3, #67	; 0x43
 800bd84:	d1f1      	bne.n	800bd6a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800bd86:	7943      	ldrb	r3, [r0, #5]
 800bd88:	2b2b      	cmp	r3, #43	; 0x2b
 800bd8a:	d1ee      	bne.n	800bd6a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800bd8c:	7983      	ldrb	r3, [r0, #6]
 800bd8e:	2b2b      	cmp	r3, #43	; 0x2b
 800bd90:	d1eb      	bne.n	800bd6a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800bd92:	79c0      	ldrb	r0, [r0, #7]
 800bd94:	2801      	cmp	r0, #1
 800bd96:	bf8c      	ite	hi
 800bd98:	2000      	movhi	r0, #0
 800bd9a:	2001      	movls	r0, #1
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop

0800bda0 <__cxa_call_terminate>:
 800bda0:	b510      	push	{r4, lr}
 800bda2:	4604      	mov	r4, r0
 800bda4:	b128      	cbz	r0, 800bdb2 <__cxa_call_terminate+0x12>
 800bda6:	f000 fc75 	bl	800c694 <__cxa_begin_catch>
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f7ff ffda 	bl	800bd64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800bdb0:	b908      	cbnz	r0, 800bdb6 <__cxa_call_terminate+0x16>
 800bdb2:	f000 fd0f 	bl	800c7d4 <_ZSt9terminatev>
 800bdb6:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800bdba:	f000 fcf7 	bl	800c7ac <_ZN10__cxxabiv111__terminateEPFvvE>
 800bdbe:	bf00      	nop

0800bdc0 <__cxa_call_unexpected>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	b083      	sub	sp, #12
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	f7ff ffcc 	bl	800bd64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800bdcc:	b170      	cbz	r0, 800bdec <__cxa_call_unexpected+0x2c>
 800bdce:	f854 5c18 	ldr.w	r5, [r4, #-24]
 800bdd2:	f854 6c14 	ldr.w	r6, [r4, #-20]
 800bdd6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800bdd8:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800bddc:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
 800bde0:	4620      	mov	r0, r4
 800bde2:	f000 fc57 	bl	800c694 <__cxa_begin_catch>
 800bde6:	4628      	mov	r0, r5
 800bde8:	f000 fcfc 	bl	800c7e4 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800bdec:	4620      	mov	r0, r4
 800bdee:	f000 fc51 	bl	800c694 <__cxa_begin_catch>
 800bdf2:	f000 fcfb 	bl	800c7ec <_ZSt10unexpectedv>
 800bdf6:	f000 fc4d 	bl	800c694 <__cxa_begin_catch>
 800bdfa:	f000 fceb 	bl	800c7d4 <_ZSt9terminatev>
 800bdfe:	f000 fc49 	bl	800c694 <__cxa_begin_catch>
 800be02:	f000 fc3f 	bl	800c684 <__cxa_get_globals_fast>
 800be06:	6803      	ldr	r3, [r0, #0]
 800be08:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800be0c:	2a01      	cmp	r2, #1
 800be0e:	d02e      	beq.n	800be6e <__cxa_call_unexpected+0xae>
 800be10:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800be14:	2400      	movs	r4, #0
 800be16:	9201      	str	r2, [sp, #4]
 800be18:	f028 0803 	bic.w	r8, r8, #3
 800be1c:	f103 0b20 	add.w	fp, r3, #32
 800be20:	46a2      	mov	sl, r4
 800be22:	45ba      	cmp	sl, r7
 800be24:	da19      	bge.n	800be5a <__cxa_call_unexpected+0x9a>
 800be26:	f8d9 5000 	ldr.w	r5, [r9]
 800be2a:	b105      	cbz	r5, 800be2e <__cxa_call_unexpected+0x6e>
 800be2c:	444d      	add	r5, r9
 800be2e:	4658      	mov	r0, fp
 800be30:	4629      	mov	r1, r5
 800be32:	2200      	movs	r2, #0
 800be34:	ab01      	add	r3, sp, #4
 800be36:	f7ff feb9 	bl	800bbac <__cxa_type_match>
 800be3a:	4602      	mov	r2, r0
 800be3c:	b9e0      	cbnz	r0, 800be78 <__cxa_call_unexpected+0xb8>
 800be3e:	682b      	ldr	r3, [r5, #0]
 800be40:	4911      	ldr	r1, [pc, #68]	; (800be88 <__cxa_call_unexpected+0xc8>)
 800be42:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800be46:	4628      	mov	r0, r5
 800be48:	2301      	movs	r3, #1
 800be4a:	47e0      	blx	ip
 800be4c:	2800      	cmp	r0, #0
 800be4e:	bf18      	it	ne
 800be50:	2401      	movne	r4, #1
 800be52:	f10a 0a01 	add.w	sl, sl, #1
 800be56:	44c1      	add	r9, r8
 800be58:	e7e3      	b.n	800be22 <__cxa_call_unexpected+0x62>
 800be5a:	b154      	cbz	r4, 800be72 <__cxa_call_unexpected+0xb2>
 800be5c:	2004      	movs	r0, #4
 800be5e:	f000 f819 	bl	800be94 <__cxa_allocate_exception>
 800be62:	4b0a      	ldr	r3, [pc, #40]	; (800be8c <__cxa_call_unexpected+0xcc>)
 800be64:	6003      	str	r3, [r0, #0]
 800be66:	4908      	ldr	r1, [pc, #32]	; (800be88 <__cxa_call_unexpected+0xc8>)
 800be68:	4a09      	ldr	r2, [pc, #36]	; (800be90 <__cxa_call_unexpected+0xd0>)
 800be6a:	f000 f87b 	bl	800bf64 <__cxa_throw>
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	e7d0      	b.n	800be14 <__cxa_call_unexpected+0x54>
 800be72:	4630      	mov	r0, r6
 800be74:	f000 fc9a 	bl	800c7ac <_ZN10__cxxabiv111__terminateEPFvvE>
 800be78:	f000 f8bc 	bl	800bff4 <__cxa_rethrow>
 800be7c:	f000 fc50 	bl	800c720 <__cxa_end_catch>
 800be80:	f000 fc4e 	bl	800c720 <__cxa_end_catch>
 800be84:	f7ff fe8c 	bl	800bba0 <__cxa_end_cleanup>
 800be88:	0800e958 	.word	0x0800e958
 800be8c:	0800e918 	.word	0x0800e918
 800be90:	0800c641 	.word	0x0800c641

0800be94 <__cxa_allocate_exception>:
 800be94:	b538      	push	{r3, r4, r5, lr}
 800be96:	f100 0580 	add.w	r5, r0, #128	; 0x80
 800be9a:	4628      	mov	r0, r5
 800be9c:	f000 fedc 	bl	800cc58 <malloc>
 800bea0:	4604      	mov	r4, r0
 800bea2:	b138      	cbz	r0, 800beb4 <__cxa_allocate_exception+0x20>
 800bea4:	4620      	mov	r0, r4
 800bea6:	2100      	movs	r1, #0
 800bea8:	2280      	movs	r2, #128	; 0x80
 800beaa:	f001 f90f 	bl	800d0cc <memset>
 800beae:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800beb2:	bd38      	pop	{r3, r4, r5, pc}
 800beb4:	4a0b      	ldr	r2, [pc, #44]	; (800bee4 <__cxa_allocate_exception+0x50>)
 800beb6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800beba:	6811      	ldr	r1, [r2, #0]
 800bebc:	d807      	bhi.n	800bece <__cxa_allocate_exception+0x3a>
 800bebe:	460b      	mov	r3, r1
 800bec0:	07d8      	lsls	r0, r3, #31
 800bec2:	d506      	bpl.n	800bed2 <__cxa_allocate_exception+0x3e>
 800bec4:	3401      	adds	r4, #1
 800bec6:	2c04      	cmp	r4, #4
 800bec8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800becc:	d1f8      	bne.n	800bec0 <__cxa_allocate_exception+0x2c>
 800bece:	f000 fc81 	bl	800c7d4 <_ZSt9terminatev>
 800bed2:	2001      	movs	r0, #1
 800bed4:	40a0      	lsls	r0, r4
 800bed6:	4b04      	ldr	r3, [pc, #16]	; (800bee8 <__cxa_allocate_exception+0x54>)
 800bed8:	4301      	orrs	r1, r0
 800beda:	6011      	str	r1, [r2, #0]
 800bedc:	eb03 2444 	add.w	r4, r3, r4, lsl #9
 800bee0:	e7e0      	b.n	800bea4 <__cxa_allocate_exception+0x10>
 800bee2:	bf00      	nop
 800bee4:	20000c80 	.word	0x20000c80
 800bee8:	20000c88 	.word	0x20000c88

0800beec <__cxa_free_exception>:
 800beec:	4b0a      	ldr	r3, [pc, #40]	; (800bf18 <__cxa_free_exception+0x2c>)
 800beee:	4298      	cmp	r0, r3
 800bef0:	d303      	bcc.n	800befa <__cxa_free_exception+0xe>
 800bef2:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 800bef6:	4290      	cmp	r0, r2
 800bef8:	d302      	bcc.n	800bf00 <__cxa_free_exception+0x14>
 800befa:	3880      	subs	r0, #128	; 0x80
 800befc:	f000 beb4 	b.w	800cc68 <free>
 800bf00:	4a06      	ldr	r2, [pc, #24]	; (800bf1c <__cxa_free_exception+0x30>)
 800bf02:	1ac3      	subs	r3, r0, r3
 800bf04:	6811      	ldr	r1, [r2, #0]
 800bf06:	0a5b      	lsrs	r3, r3, #9
 800bf08:	2001      	movs	r0, #1
 800bf0a:	fa00 f303 	lsl.w	r3, r0, r3
 800bf0e:	ea21 0103 	bic.w	r1, r1, r3
 800bf12:	6011      	str	r1, [r2, #0]
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop
 800bf18:	20000c88 	.word	0x20000c88
 800bf1c:	20000c80 	.word	0x20000c80

0800bf20 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 800bf20:	2801      	cmp	r0, #1
 800bf22:	b510      	push	{r4, lr}
 800bf24:	d81a      	bhi.n	800bf5c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 800bf26:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 800bf2a:	f3bf 8f5f 	dmb	sy
 800bf2e:	e853 2f00 	ldrex	r2, [r3]
 800bf32:	3a01      	subs	r2, #1
 800bf34:	e843 2000 	strex	r0, r2, [r3]
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	d1f8      	bne.n	800bf2e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 800bf3c:	f3bf 8f5f 	dmb	sy
 800bf40:	b95a      	cbnz	r2, 800bf5a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 800bf42:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 800bf46:	f101 0458 	add.w	r4, r1, #88	; 0x58
 800bf4a:	b10b      	cbz	r3, 800bf50 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	4798      	blx	r3
 800bf50:	4620      	mov	r0, r4
 800bf52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf56:	f7ff bfc9 	b.w	800beec <__cxa_free_exception>
 800bf5a:	bd10      	pop	{r4, pc}
 800bf5c:	f851 0c14 	ldr.w	r0, [r1, #-20]
 800bf60:	f000 fc24 	bl	800c7ac <_ZN10__cxxabiv111__terminateEPFvvE>

0800bf64 <__cxa_throw>:
 800bf64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf68:	4604      	mov	r4, r0
 800bf6a:	460f      	mov	r7, r1
 800bf6c:	4690      	mov	r8, r2
 800bf6e:	f000 fb8d 	bl	800c68c <__cxa_get_globals>
 800bf72:	4603      	mov	r3, r0
 800bf74:	4a1c      	ldr	r2, [pc, #112]	; (800bfe8 <__cxa_throw+0x84>)
 800bf76:	6859      	ldr	r1, [r3, #4]
 800bf78:	481c      	ldr	r0, [pc, #112]	; (800bfec <__cxa_throw+0x88>)
 800bf7a:	1c4e      	adds	r6, r1, #1
 800bf7c:	605e      	str	r6, [r3, #4]
 800bf7e:	f8d0 a000 	ldr.w	sl, [r0]
 800bf82:	6810      	ldr	r0, [r2, #0]
 800bf84:	4a1a      	ldr	r2, [pc, #104]	; (800bff0 <__cxa_throw+0x8c>)
 800bf86:	f844 0c6c 	str.w	r0, [r4, #-108]
 800bf8a:	232b      	movs	r3, #43	; 0x2b
 800bf8c:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 800bf90:	f04f 0e55 	mov.w	lr, #85	; 0x55
 800bf94:	2100      	movs	r1, #0
 800bf96:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
 800bf9a:	2643      	movs	r6, #67	; 0x43
 800bf9c:	f04f 0b01 	mov.w	fp, #1
 800bfa0:	f04f 0947 	mov.w	r9, #71	; 0x47
 800bfa4:	f804 cc57 	strb.w	ip, [r4, #-87]
 800bfa8:	f804 ec56 	strb.w	lr, [r4, #-86]
 800bfac:	f804 1c51 	strb.w	r1, [r4, #-81]
 800bfb0:	f844 2c50 	str.w	r2, [r4, #-80]
 800bfb4:	f804 3c53 	strb.w	r3, [r4, #-83]
 800bfb8:	f804 3c52 	strb.w	r3, [r4, #-82]
 800bfbc:	f844 7c78 	str.w	r7, [r4, #-120]
 800bfc0:	f844 8c74 	str.w	r8, [r4, #-116]
 800bfc4:	f844 bc80 	str.w	fp, [r4, #-128]
 800bfc8:	f844 ac70 	str.w	sl, [r4, #-112]
 800bfcc:	f804 9c58 	strb.w	r9, [r4, #-88]
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	f804 6c55 	strb.w	r6, [r4, #-85]
 800bfd6:	f804 6c54 	strb.w	r6, [r4, #-84]
 800bfda:	f7fa fa4b 	bl	8006474 <_Unwind_RaiseException>
 800bfde:	4628      	mov	r0, r5
 800bfe0:	f000 fb58 	bl	800c694 <__cxa_begin_catch>
 800bfe4:	f000 fbf6 	bl	800c7d4 <_ZSt9terminatev>
 800bfe8:	20000138 	.word	0x20000138
 800bfec:	20000134 	.word	0x20000134
 800bff0:	0800bf21 	.word	0x0800bf21

0800bff4 <__cxa_rethrow>:
 800bff4:	b510      	push	{r4, lr}
 800bff6:	f000 fb49 	bl	800c68c <__cxa_get_globals>
 800bffa:	6842      	ldr	r2, [r0, #4]
 800bffc:	6803      	ldr	r3, [r0, #0]
 800bffe:	3201      	adds	r2, #1
 800c000:	6042      	str	r2, [r0, #4]
 800c002:	b16b      	cbz	r3, 800c020 <__cxa_rethrow+0x2c>
 800c004:	f893 2020 	ldrb.w	r2, [r3, #32]
 800c008:	2a47      	cmp	r2, #71	; 0x47
 800c00a:	d00b      	beq.n	800c024 <__cxa_rethrow+0x30>
 800c00c:	2200      	movs	r2, #0
 800c00e:	6002      	str	r2, [r0, #0]
 800c010:	f103 0420 	add.w	r4, r3, #32
 800c014:	4620      	mov	r0, r4
 800c016:	f7fa fa51 	bl	80064bc <_Unwind_Resume_or_Rethrow>
 800c01a:	4620      	mov	r0, r4
 800c01c:	f000 fb3a 	bl	800c694 <__cxa_begin_catch>
 800c020:	f000 fbd8 	bl	800c7d4 <_ZSt9terminatev>
 800c024:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c028:	2a4e      	cmp	r2, #78	; 0x4e
 800c02a:	d1ef      	bne.n	800c00c <__cxa_rethrow+0x18>
 800c02c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800c030:	2a55      	cmp	r2, #85	; 0x55
 800c032:	d1eb      	bne.n	800c00c <__cxa_rethrow+0x18>
 800c034:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800c038:	2a43      	cmp	r2, #67	; 0x43
 800c03a:	d1e7      	bne.n	800c00c <__cxa_rethrow+0x18>
 800c03c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800c040:	2a43      	cmp	r2, #67	; 0x43
 800c042:	d1e3      	bne.n	800c00c <__cxa_rethrow+0x18>
 800c044:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800c048:	2a2b      	cmp	r2, #43	; 0x2b
 800c04a:	d1df      	bne.n	800c00c <__cxa_rethrow+0x18>
 800c04c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800c050:	2a2b      	cmp	r2, #43	; 0x2b
 800c052:	d1db      	bne.n	800c00c <__cxa_rethrow+0x18>
 800c054:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800c058:	2a01      	cmp	r2, #1
 800c05a:	d8d7      	bhi.n	800c00c <__cxa_rethrow+0x18>
 800c05c:	695a      	ldr	r2, [r3, #20]
 800c05e:	4252      	negs	r2, r2
 800c060:	615a      	str	r2, [r3, #20]
 800c062:	e7d5      	b.n	800c010 <__cxa_rethrow+0x1c>

0800c064 <_ZL12read_sleb128PKhPl>:
 800c064:	b430      	push	{r4, r5}
 800c066:	2400      	movs	r4, #0
 800c068:	4623      	mov	r3, r4
 800c06a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c06e:	f002 057f 	and.w	r5, r2, #127	; 0x7f
 800c072:	409d      	lsls	r5, r3
 800c074:	432c      	orrs	r4, r5
 800c076:	0615      	lsls	r5, r2, #24
 800c078:	f103 0307 	add.w	r3, r3, #7
 800c07c:	d4f5      	bmi.n	800c06a <_ZL12read_sleb128PKhPl+0x6>
 800c07e:	2b1f      	cmp	r3, #31
 800c080:	d806      	bhi.n	800c090 <_ZL12read_sleb128PKhPl+0x2c>
 800c082:	0652      	lsls	r2, r2, #25
 800c084:	d504      	bpl.n	800c090 <_ZL12read_sleb128PKhPl+0x2c>
 800c086:	f04f 32ff 	mov.w	r2, #4294967295
 800c08a:	fa02 f303 	lsl.w	r3, r2, r3
 800c08e:	431c      	orrs	r4, r3
 800c090:	600c      	str	r4, [r1, #0]
 800c092:	bc30      	pop	{r4, r5}
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop

0800c098 <_ZL28read_encoded_value_with_basehjPKhPj>:
 800c098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c09c:	2850      	cmp	r0, #80	; 0x50
 800c09e:	b084      	sub	sp, #16
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	4688      	mov	r8, r1
 800c0a4:	d046      	beq.n	800c134 <_ZL28read_encoded_value_with_basehjPKhPj+0x9c>
 800c0a6:	f000 010f 	and.w	r1, r0, #15
 800c0aa:	290c      	cmp	r1, #12
 800c0ac:	d840      	bhi.n	800c130 <_ZL28read_encoded_value_with_basehjPKhPj+0x98>
 800c0ae:	e8df f001 	tbb	[pc, r1]
 800c0b2:	2c07      	.short	0x2c07
 800c0b4:	3f19073b 	.word	0x3f19073b
 800c0b8:	213f3f3f 	.word	0x213f3f3f
 800c0bc:	071d      	.short	0x071d
 800c0be:	19          	.byte	0x19
 800c0bf:	00          	.byte	0x00
 800c0c0:	4615      	mov	r5, r2
 800c0c2:	f855 4b04 	ldr.w	r4, [r5], #4
 800c0c6:	b144      	cbz	r4, 800c0da <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800c0c8:	f006 0170 	and.w	r1, r6, #112	; 0x70
 800c0cc:	2910      	cmp	r1, #16
 800c0ce:	bf08      	it	eq
 800c0d0:	4690      	moveq	r8, r2
 800c0d2:	4444      	add	r4, r8
 800c0d4:	0632      	lsls	r2, r6, #24
 800c0d6:	bf48      	it	mi
 800c0d8:	6824      	ldrmi	r4, [r4, #0]
 800c0da:	4628      	mov	r0, r5
 800c0dc:	601c      	str	r4, [r3, #0]
 800c0de:	b004      	add	sp, #16
 800c0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e4:	6814      	ldr	r4, [r2, #0]
 800c0e6:	f102 0508 	add.w	r5, r2, #8
 800c0ea:	e7ec      	b.n	800c0c6 <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
 800c0ec:	4615      	mov	r5, r2
 800c0ee:	f935 4b02 	ldrsh.w	r4, [r5], #2
 800c0f2:	e7e8      	b.n	800c0c6 <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	a903      	add	r1, sp, #12
 800c0f8:	9201      	str	r2, [sp, #4]
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	f7ff ffb2 	bl	800c064 <_ZL12read_sleb128PKhPl>
 800c100:	9c03      	ldr	r4, [sp, #12]
 800c102:	9a01      	ldr	r2, [sp, #4]
 800c104:	9b00      	ldr	r3, [sp, #0]
 800c106:	4605      	mov	r5, r0
 800c108:	e7dd      	b.n	800c0c6 <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
 800c10a:	2400      	movs	r4, #0
 800c10c:	4627      	mov	r7, r4
 800c10e:	4615      	mov	r5, r2
 800c110:	f815 1b01 	ldrb.w	r1, [r5], #1
 800c114:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 800c118:	40b8      	lsls	r0, r7
 800c11a:	0609      	lsls	r1, r1, #24
 800c11c:	ea44 0400 	orr.w	r4, r4, r0
 800c120:	f107 0707 	add.w	r7, r7, #7
 800c124:	d4f4      	bmi.n	800c110 <_ZL28read_encoded_value_with_basehjPKhPj+0x78>
 800c126:	e7ce      	b.n	800c0c6 <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
 800c128:	4615      	mov	r5, r2
 800c12a:	f835 4b02 	ldrh.w	r4, [r5], #2
 800c12e:	e7ca      	b.n	800c0c6 <_ZL28read_encoded_value_with_basehjPKhPj+0x2e>
 800c130:	f000 fd36 	bl	800cba0 <abort>
 800c134:	1cd5      	adds	r5, r2, #3
 800c136:	f025 0503 	bic.w	r5, r5, #3
 800c13a:	f855 4b04 	ldr.w	r4, [r5], #4
 800c13e:	601c      	str	r4, [r3, #0]
 800c140:	4628      	mov	r0, r5
 800c142:	b004      	add	sp, #16
 800c144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c148 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800c148:	28ff      	cmp	r0, #255	; 0xff
 800c14a:	b508      	push	{r3, lr}
 800c14c:	d00f      	beq.n	800c16e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 800c14e:	f000 0370 	and.w	r3, r0, #112	; 0x70
 800c152:	2b20      	cmp	r3, #32
 800c154:	d018      	beq.n	800c188 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 800c156:	d90c      	bls.n	800c172 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 800c158:	2b40      	cmp	r3, #64	; 0x40
 800c15a:	d010      	beq.n	800c17e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 800c15c:	2b50      	cmp	r3, #80	; 0x50
 800c15e:	d006      	beq.n	800c16e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 800c160:	2b30      	cmp	r3, #48	; 0x30
 800c162:	d10a      	bne.n	800c17a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 800c164:	4608      	mov	r0, r1
 800c166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c16a:	f7fa bb73 	b.w	8006854 <_Unwind_GetDataRelBase>
 800c16e:	2000      	movs	r0, #0
 800c170:	bd08      	pop	{r3, pc}
 800c172:	2b00      	cmp	r3, #0
 800c174:	d0fb      	beq.n	800c16e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 800c176:	2b10      	cmp	r3, #16
 800c178:	d0f9      	beq.n	800c16e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 800c17a:	f000 fd11 	bl	800cba0 <abort>
 800c17e:	4608      	mov	r0, r1
 800c180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c184:	f7fa bb56 	b.w	8006834 <_Unwind_GetRegionStart>
 800c188:	4608      	mov	r0, r1
 800c18a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c18e:	f7fa bb65 	b.w	800685c <_Unwind_GetTextRelBase>
 800c192:	bf00      	nop

0800c194 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800c194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c196:	460c      	mov	r4, r1
 800c198:	4616      	mov	r6, r2
 800c19a:	4607      	mov	r7, r0
 800c19c:	b108      	cbz	r0, 800c1a2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 800c19e:	f7fa fb49 	bl	8006834 <_Unwind_GetRegionStart>
 800c1a2:	6030      	str	r0, [r6, #0]
 800c1a4:	7825      	ldrb	r5, [r4, #0]
 800c1a6:	2dff      	cmp	r5, #255	; 0xff
 800c1a8:	f104 0401 	add.w	r4, r4, #1
 800c1ac:	d033      	beq.n	800c216 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
 800c1ae:	4639      	mov	r1, r7
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	f7ff ffc9 	bl	800c148 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800c1b6:	4622      	mov	r2, r4
 800c1b8:	4601      	mov	r1, r0
 800c1ba:	1d33      	adds	r3, r6, #4
 800c1bc:	4628      	mov	r0, r5
 800c1be:	f7ff ff6b 	bl	800c098 <_ZL28read_encoded_value_with_basehjPKhPj>
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	1c60      	adds	r0, r4, #1
 800c1c6:	7823      	ldrb	r3, [r4, #0]
 800c1c8:	7533      	strb	r3, [r6, #20]
 800c1ca:	2bff      	cmp	r3, #255	; 0xff
 800c1cc:	d02a      	beq.n	800c224 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
 800c1ce:	2310      	movs	r3, #16
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	7533      	strb	r3, [r6, #20]
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c1da:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 800c1de:	409c      	lsls	r4, r3
 800c1e0:	0609      	lsls	r1, r1, #24
 800c1e2:	ea42 0204 	orr.w	r2, r2, r4
 800c1e6:	f103 0307 	add.w	r3, r3, #7
 800c1ea:	d4f4      	bmi.n	800c1d6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x42>
 800c1ec:	4402      	add	r2, r0
 800c1ee:	60f2      	str	r2, [r6, #12]
 800c1f0:	7803      	ldrb	r3, [r0, #0]
 800c1f2:	7573      	strb	r3, [r6, #21]
 800c1f4:	2400      	movs	r4, #0
 800c1f6:	3001      	adds	r0, #1
 800c1f8:	4623      	mov	r3, r4
 800c1fa:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c1fe:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800c202:	409d      	lsls	r5, r3
 800c204:	060a      	lsls	r2, r1, #24
 800c206:	ea44 0405 	orr.w	r4, r4, r5
 800c20a:	f103 0307 	add.w	r3, r3, #7
 800c20e:	d4f4      	bmi.n	800c1fa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x66>
 800c210:	4404      	add	r4, r0
 800c212:	6134      	str	r4, [r6, #16]
 800c214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c216:	6070      	str	r0, [r6, #4]
 800c218:	7823      	ldrb	r3, [r4, #0]
 800c21a:	7533      	strb	r3, [r6, #20]
 800c21c:	2bff      	cmp	r3, #255	; 0xff
 800c21e:	f104 0001 	add.w	r0, r4, #1
 800c222:	d1d4      	bne.n	800c1ce <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>
 800c224:	2300      	movs	r3, #0
 800c226:	60f3      	str	r3, [r6, #12]
 800c228:	e7e2      	b.n	800c1f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
 800c22a:	bf00      	nop

0800c22c <__gxx_personality_v0>:
 800c22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	f000 0303 	and.w	r3, r0, #3
 800c234:	b093      	sub	sp, #76	; 0x4c
 800c236:	2500      	movs	r5, #0
 800c238:	2b01      	cmp	r3, #1
 800c23a:	460e      	mov	r6, r1
 800c23c:	4614      	mov	r4, r2
 800c23e:	9506      	str	r5, [sp, #24]
 800c240:	f000 80a6 	beq.w	800c390 <__gxx_personality_v0+0x164>
 800c244:	d30e      	bcc.n	800c264 <__gxx_personality_v0+0x38>
 800c246:	2b02      	cmp	r3, #2
 800c248:	d10a      	bne.n	800c260 <__gxx_personality_v0+0x34>
 800c24a:	4630      	mov	r0, r6
 800c24c:	4621      	mov	r1, r4
 800c24e:	f7fa fadb 	bl	8006808 <__gnu_unwind_frame>
 800c252:	2800      	cmp	r0, #0
 800c254:	f000 80a4 	beq.w	800c3a0 <__gxx_personality_v0+0x174>
 800c258:	2009      	movs	r0, #9
 800c25a:	b013      	add	sp, #76	; 0x4c
 800c25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c260:	f000 fc9e 	bl	800cba0 <abort>
 800c264:	f000 0008 	and.w	r0, r0, #8
 800c268:	fa5f f880 	uxtb.w	r8, r0
 800c26c:	f04f 0901 	mov.w	r9, #1
 800c270:	aa12      	add	r2, sp, #72	; 0x48
 800c272:	2100      	movs	r1, #0
 800c274:	f842 6d2c 	str.w	r6, [r2, #-44]!
 800c278:	460b      	mov	r3, r1
 800c27a:	9200      	str	r2, [sp, #0]
 800c27c:	4620      	mov	r0, r4
 800c27e:	220c      	movs	r2, #12
 800c280:	f7f9 fd78 	bl	8005d74 <_Unwind_VRS_Set>
 800c284:	4620      	mov	r0, r4
 800c286:	f7fa fadb 	bl	8006840 <_Unwind_GetLanguageSpecificData>
 800c28a:	4607      	mov	r7, r0
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d0dc      	beq.n	800c24a <__gxx_personality_v0+0x1e>
 800c290:	aa0c      	add	r2, sp, #48	; 0x30
 800c292:	4639      	mov	r1, r7
 800c294:	4620      	mov	r0, r4
 800c296:	9203      	str	r2, [sp, #12]
 800c298:	f7ff ff7c 	bl	800c194 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800c29c:	4621      	mov	r1, r4
 800c29e:	4683      	mov	fp, r0
 800c2a0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800c2a4:	f7ff ff50 	bl	800c148 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800c2a8:	ad0b      	add	r5, sp, #44	; 0x2c
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	900e      	str	r0, [sp, #56]	; 0x38
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	220f      	movs	r2, #15
 800c2b2:	9500      	str	r5, [sp, #0]
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	f7f9 fd35 	bl	8005d24 <_Unwind_VRS_Get>
 800c2ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2be:	f022 0201 	bic.w	r2, r2, #1
 800c2c2:	459b      	cmp	fp, r3
 800c2c4:	ea48 0809 	orr.w	r8, r8, r9
 800c2c8:	f102 39ff 	add.w	r9, r2, #4294967295
 800c2cc:	d239      	bcs.n	800c342 <__gxx_personality_v0+0x116>
 800c2ce:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
 800c2d2:	2100      	movs	r1, #0
 800c2d4:	4650      	mov	r0, sl
 800c2d6:	f7ff ff37 	bl	800c148 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800c2da:	465a      	mov	r2, fp
 800c2dc:	4601      	mov	r1, r0
 800c2de:	ab09      	add	r3, sp, #36	; 0x24
 800c2e0:	4650      	mov	r0, sl
 800c2e2:	f7ff fed9 	bl	800c098 <_ZL28read_encoded_value_with_basehjPKhPj>
 800c2e6:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
 800c2ea:	4683      	mov	fp, r0
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	4650      	mov	r0, sl
 800c2f0:	f7ff ff2a 	bl	800c148 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800c2f4:	465a      	mov	r2, fp
 800c2f6:	4601      	mov	r1, r0
 800c2f8:	ab0a      	add	r3, sp, #40	; 0x28
 800c2fa:	4650      	mov	r0, sl
 800c2fc:	f7ff fecc 	bl	800c098 <_ZL28read_encoded_value_with_basehjPKhPj>
 800c300:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
 800c304:	4683      	mov	fp, r0
 800c306:	2100      	movs	r1, #0
 800c308:	4650      	mov	r0, sl
 800c30a:	f7ff ff1d 	bl	800c148 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800c30e:	465a      	mov	r2, fp
 800c310:	4601      	mov	r1, r0
 800c312:	462b      	mov	r3, r5
 800c314:	4650      	mov	r0, sl
 800c316:	f7ff febf 	bl	800c098 <_ZL28read_encoded_value_with_basehjPKhPj>
 800c31a:	2100      	movs	r1, #0
 800c31c:	4683      	mov	fp, r0
 800c31e:	460b      	mov	r3, r1
 800c320:	f81b eb01 	ldrb.w	lr, [fp], #1
 800c324:	f00e 027f 	and.w	r2, lr, #127	; 0x7f
 800c328:	409a      	lsls	r2, r3
 800c32a:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800c32e:	ea41 0102 	orr.w	r1, r1, r2
 800c332:	f103 0307 	add.w	r3, r3, #7
 800c336:	d1f3      	bne.n	800c320 <__gxx_personality_v0+0xf4>
 800c338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c33c:	4413      	add	r3, r2
 800c33e:	4599      	cmp	r9, r3
 800c340:	d21d      	bcs.n	800c37e <__gxx_personality_v0+0x152>
 800c342:	f04f 0900 	mov.w	r9, #0
 800c346:	f04f 0b01 	mov.w	fp, #1
 800c34a:	2500      	movs	r5, #0
 800c34c:	f018 0f01 	tst.w	r8, #1
 800c350:	d04c      	beq.n	800c3ec <__gxx_personality_v0+0x1c0>
 800c352:	f1bb 0f02 	cmp.w	fp, #2
 800c356:	f43f af78 	beq.w	800c24a <__gxx_personality_v0+0x1e>
 800c35a:	ab0a      	add	r3, sp, #40	; 0x28
 800c35c:	2100      	movs	r1, #0
 800c35e:	4620      	mov	r0, r4
 800c360:	9300      	str	r3, [sp, #0]
 800c362:	220d      	movs	r2, #13
 800c364:	460b      	mov	r3, r1
 800c366:	9c06      	ldr	r4, [sp, #24]
 800c368:	f7f9 fcdc 	bl	8005d24 <_Unwind_VRS_Get>
 800c36c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c36e:	6274      	str	r4, [r6, #36]	; 0x24
 800c370:	62b5      	str	r5, [r6, #40]	; 0x28
 800c372:	62f7      	str	r7, [r6, #44]	; 0x2c
 800c374:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
 800c378:	6233      	str	r3, [r6, #32]
 800c37a:	2006      	movs	r0, #6
 800c37c:	e76d      	b.n	800c25a <__gxx_personality_v0+0x2e>
 800c37e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c380:	4413      	add	r3, r2
 800c382:	4599      	cmp	r9, r3
 800c384:	f0c0 8092 	bcc.w	800c4ac <__gxx_personality_v0+0x280>
 800c388:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c38a:	459b      	cmp	fp, r3
 800c38c:	d39f      	bcc.n	800c2ce <__gxx_personality_v0+0xa2>
 800c38e:	e7d8      	b.n	800c342 <__gxx_personality_v0+0x116>
 800c390:	f000 0008 	and.w	r0, r0, #8
 800c394:	f000 08ff 	and.w	r8, r0, #255	; 0xff
 800c398:	b130      	cbz	r0, 800c3a8 <__gxx_personality_v0+0x17c>
 800c39a:	f04f 0902 	mov.w	r9, #2
 800c39e:	e767      	b.n	800c270 <__gxx_personality_v0+0x44>
 800c3a0:	2008      	movs	r0, #8
 800c3a2:	b013      	add	sp, #76	; 0x4c
 800c3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a8:	a90c      	add	r1, sp, #48	; 0x30
 800c3aa:	9100      	str	r1, [sp, #0]
 800c3ac:	9103      	str	r1, [sp, #12]
 800c3ae:	4610      	mov	r0, r2
 800c3b0:	4643      	mov	r3, r8
 800c3b2:	4641      	mov	r1, r8
 800c3b4:	220d      	movs	r2, #13
 800c3b6:	6a35      	ldr	r5, [r6, #32]
 800c3b8:	f7f9 fcb4 	bl	8005d24 <_Unwind_VRS_Get>
 800c3bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3be:	429d      	cmp	r5, r3
 800c3c0:	d1eb      	bne.n	800c39a <__gxx_personality_v0+0x16e>
 800c3c2:	aa12      	add	r2, sp, #72	; 0x48
 800c3c4:	4641      	mov	r1, r8
 800c3c6:	f842 6d2c 	str.w	r6, [r2, #-44]!
 800c3ca:	4643      	mov	r3, r8
 800c3cc:	9200      	str	r2, [sp, #0]
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	220c      	movs	r2, #12
 800c3d2:	f106 0528 	add.w	r5, r6, #40	; 0x28
 800c3d6:	f7f9 fccd 	bl	8005d74 <_Unwind_VRS_Set>
 800c3da:	e895 02a0 	ldmia.w	r5, {r5, r7, r9}
 800c3de:	f1b9 0f00 	cmp.w	r9, #0
 800c3e2:	f000 8115 	beq.w	800c610 <__gxx_personality_v0+0x3e4>
 800c3e6:	f04f 0b03 	mov.w	fp, #3
 800c3ea:	e03d      	b.n	800c468 <__gxx_personality_v0+0x23c>
 800c3ec:	f018 0f08 	tst.w	r8, #8
 800c3f0:	d036      	beq.n	800c460 <__gxx_personality_v0+0x234>
 800c3f2:	f1bb 0f01 	cmp.w	fp, #1
 800c3f6:	f000 811a 	beq.w	800c62e <__gxx_personality_v0+0x402>
 800c3fa:	2d00      	cmp	r5, #0
 800c3fc:	f2c0 8113 	blt.w	800c626 <__gxx_personality_v0+0x3fa>
 800c400:	ab12      	add	r3, sp, #72	; 0x48
 800c402:	2100      	movs	r1, #0
 800c404:	f843 6d28 	str.w	r6, [r3, #-40]!
 800c408:	460a      	mov	r2, r1
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	4620      	mov	r0, r4
 800c40e:	460b      	mov	r3, r1
 800c410:	f7f9 fcb0 	bl	8005d74 <_Unwind_VRS_Set>
 800c414:	aa12      	add	r2, sp, #72	; 0x48
 800c416:	2100      	movs	r1, #0
 800c418:	f842 5d24 	str.w	r5, [r2, #-36]!
 800c41c:	460b      	mov	r3, r1
 800c41e:	9200      	str	r2, [sp, #0]
 800c420:	4620      	mov	r0, r4
 800c422:	2201      	movs	r2, #1
 800c424:	f7f9 fca6 	bl	8005d74 <_Unwind_VRS_Set>
 800c428:	ad0a      	add	r5, sp, #40	; 0x28
 800c42a:	2100      	movs	r1, #0
 800c42c:	460b      	mov	r3, r1
 800c42e:	4620      	mov	r0, r4
 800c430:	220f      	movs	r2, #15
 800c432:	9500      	str	r5, [sp, #0]
 800c434:	f7f9 fc76 	bl	8005d24 <_Unwind_VRS_Get>
 800c438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c43a:	9500      	str	r5, [sp, #0]
 800c43c:	f003 0301 	and.w	r3, r3, #1
 800c440:	2100      	movs	r1, #0
 800c442:	4620      	mov	r0, r4
 800c444:	220f      	movs	r2, #15
 800c446:	ea49 0403 	orr.w	r4, r9, r3
 800c44a:	460b      	mov	r3, r1
 800c44c:	940a      	str	r4, [sp, #40]	; 0x28
 800c44e:	f7f9 fc91 	bl	8005d74 <_Unwind_VRS_Set>
 800c452:	f1bb 0f02 	cmp.w	fp, #2
 800c456:	d036      	beq.n	800c4c6 <__gxx_personality_v0+0x29a>
 800c458:	2007      	movs	r0, #7
 800c45a:	b013      	add	sp, #76	; 0x4c
 800c45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c460:	f1bb 0f01 	cmp.w	fp, #1
 800c464:	f000 80d4 	beq.w	800c610 <__gxx_personality_v0+0x3e4>
 800c468:	2d00      	cmp	r5, #0
 800c46a:	dac9      	bge.n	800c400 <__gxx_personality_v0+0x1d4>
 800c46c:	4639      	mov	r1, r7
 800c46e:	9a03      	ldr	r2, [sp, #12]
 800c470:	4620      	mov	r0, r4
 800c472:	f7ff fe8f 	bl	800c194 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800c476:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800c47a:	4621      	mov	r1, r4
 800c47c:	f7ff fe64 	bl	800c148 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800c480:	00aa      	lsls	r2, r5, #2
 800c482:	f082 0203 	eor.w	r2, r2, #3
 800c486:	43d2      	mvns	r2, r2
 800c488:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800c48a:	900e      	str	r0, [sp, #56]	; 0x38
 800c48c:	58bb      	ldr	r3, [r7, r2]
 800c48e:	4417      	add	r7, r2
 800c490:	b133      	cbz	r3, 800c4a0 <__gxx_personality_v0+0x274>
 800c492:	463a      	mov	r2, r7
 800c494:	2300      	movs	r3, #0
 800c496:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800c49a:	3301      	adds	r3, #1
 800c49c:	2900      	cmp	r1, #0
 800c49e:	d1fa      	bne.n	800c496 <__gxx_personality_v0+0x26a>
 800c4a0:	2204      	movs	r2, #4
 800c4a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4a4:	62f0      	str	r0, [r6, #44]	; 0x2c
 800c4a6:	6377      	str	r7, [r6, #52]	; 0x34
 800c4a8:	6332      	str	r2, [r6, #48]	; 0x30
 800c4aa:	e7a9      	b.n	800c400 <__gxx_personality_v0+0x1d4>
 800c4ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4ae:	b17b      	cbz	r3, 800c4d0 <__gxx_personality_v0+0x2a4>
 800c4b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c4b2:	eb03 0902 	add.w	r9, r3, r2
 800c4b6:	b969      	cbnz	r1, 800c4d4 <__gxx_personality_v0+0x2a8>
 800c4b8:	f1b9 0f00 	cmp.w	r9, #0
 800c4bc:	f43f aec5 	beq.w	800c24a <__gxx_personality_v0+0x1e>
 800c4c0:	f04f 0b02 	mov.w	fp, #2
 800c4c4:	e741      	b.n	800c34a <__gxx_personality_v0+0x11e>
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	f7ff fbc6 	bl	800bc58 <__cxa_begin_cleanup>
 800c4cc:	2007      	movs	r0, #7
 800c4ce:	e6c4      	b.n	800c25a <__gxx_personality_v0+0x2e>
 800c4d0:	4699      	mov	r9, r3
 800c4d2:	e7f0      	b.n	800c4b6 <__gxx_personality_v0+0x28a>
 800c4d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4d6:	3901      	subs	r1, #1
 800c4d8:	1858      	adds	r0, r3, r1
 800c4da:	f1b9 0f00 	cmp.w	r9, #0
 800c4de:	f43f aeb4 	beq.w	800c24a <__gxx_personality_v0+0x1e>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	d0ec      	beq.n	800c4c0 <__gxx_personality_v0+0x294>
 800c4e6:	f018 0308 	ands.w	r3, r8, #8
 800c4ea:	9305      	str	r3, [sp, #20]
 800c4ec:	d07c      	beq.n	800c5e8 <__gxx_personality_v0+0x3bc>
 800c4ee:	2247      	movs	r2, #71	; 0x47
 800c4f0:	234e      	movs	r3, #78	; 0x4e
 800c4f2:	2155      	movs	r1, #85	; 0x55
 800c4f4:	7032      	strb	r2, [r6, #0]
 800c4f6:	7073      	strb	r3, [r6, #1]
 800c4f8:	2243      	movs	r2, #67	; 0x43
 800c4fa:	2346      	movs	r3, #70	; 0x46
 800c4fc:	70b1      	strb	r1, [r6, #2]
 800c4fe:	70f2      	strb	r2, [r6, #3]
 800c500:	214f      	movs	r1, #79	; 0x4f
 800c502:	2252      	movs	r2, #82	; 0x52
 800c504:	7133      	strb	r3, [r6, #4]
 800c506:	2300      	movs	r3, #0
 800c508:	7171      	strb	r1, [r6, #5]
 800c50a:	71b2      	strb	r2, [r6, #6]
 800c50c:	71f3      	strb	r3, [r6, #7]
 800c50e:	f04f 0b00 	mov.w	fp, #0
 800c512:	9404      	str	r4, [sp, #16]
 800c514:	a908      	add	r1, sp, #32
 800c516:	f7ff fda5 	bl	800c064 <_ZL12read_sleb128PKhPl>
 800c51a:	a909      	add	r1, sp, #36	; 0x24
 800c51c:	4682      	mov	sl, r0
 800c51e:	f7ff fda1 	bl	800c064 <_ZL12read_sleb128PKhPl>
 800c522:	9b08      	ldr	r3, [sp, #32]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d02f      	beq.n	800c588 <__gxx_personality_v0+0x35c>
 800c528:	dd31      	ble.n	800c58e <__gxx_personality_v0+0x362>
 800c52a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800c52e:	28ff      	cmp	r0, #255	; 0xff
 800c530:	d058      	beq.n	800c5e4 <__gxx_personality_v0+0x3b8>
 800c532:	f000 0207 	and.w	r2, r0, #7
 800c536:	2a04      	cmp	r2, #4
 800c538:	f63f ae92 	bhi.w	800c260 <__gxx_personality_v0+0x34>
 800c53c:	a101      	add	r1, pc, #4	; (adr r1, 800c544 <__gxx_personality_v0+0x318>)
 800c53e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c542:	bf00      	nop
 800c544:	0800c583 	.word	0x0800c583
 800c548:	0800c261 	.word	0x0800c261
 800c54c:	0800c57d 	.word	0x0800c57d
 800c550:	0800c583 	.word	0x0800c583
 800c554:	0800c559 	.word	0x0800c559
 800c558:	00db      	lsls	r3, r3, #3
 800c55a:	425a      	negs	r2, r3
 800c55c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c55e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c560:	441a      	add	r2, r3
 800c562:	ab0a      	add	r3, sp, #40	; 0x28
 800c564:	f7ff fd98 	bl	800c098 <_ZL28read_encoded_value_with_basehjPKhPj>
 800c568:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c56a:	b1f9      	cbz	r1, 800c5ac <__gxx_personality_v0+0x380>
 800c56c:	2e00      	cmp	r6, #0
 800c56e:	d152      	bne.n	800c616 <__gxx_personality_v0+0x3ea>
 800c570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c572:	2b00      	cmp	r3, #0
 800c574:	d043      	beq.n	800c5fe <__gxx_personality_v0+0x3d2>
 800c576:	eb0a 0003 	add.w	r0, sl, r3
 800c57a:	e7cb      	b.n	800c514 <__gxx_personality_v0+0x2e8>
 800c57c:	005b      	lsls	r3, r3, #1
 800c57e:	425a      	negs	r2, r3
 800c580:	e7ec      	b.n	800c55c <__gxx_personality_v0+0x330>
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	425a      	negs	r2, r3
 800c586:	e7e9      	b.n	800c55c <__gxx_personality_v0+0x330>
 800c588:	f04f 0b01 	mov.w	fp, #1
 800c58c:	e7f0      	b.n	800c570 <__gxx_personality_v0+0x344>
 800c58e:	3301      	adds	r3, #1
 800c590:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 800c594:	b10e      	cbz	r6, 800c59a <__gxx_personality_v0+0x36e>
 800c596:	9a05      	ldr	r2, [sp, #20]
 800c598:	b16a      	cbz	r2, 800c5b6 <__gxx_personality_v0+0x38a>
 800c59a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5a0:	f1d3 0301 	rsbs	r3, r3, #1
 800c5a4:	bf38      	it	cc
 800c5a6:	2300      	movcc	r3, #0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d0e1      	beq.n	800c570 <__gxx_personality_v0+0x344>
 800c5ac:	9c04      	ldr	r4, [sp, #16]
 800c5ae:	9d08      	ldr	r5, [sp, #32]
 800c5b0:	f04f 0b03 	mov.w	fp, #3
 800c5b4:	e6ca      	b.n	800c34c <__gxx_personality_v0+0x120>
 800c5b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c5b8:	9806      	ldr	r0, [sp, #24]
 800c5ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c5be:	900b      	str	r0, [sp, #44]	; 0x2c
 800c5c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c5c4:	461c      	mov	r4, r3
 800c5c6:	b919      	cbnz	r1, 800c5d0 <__gxx_personality_v0+0x3a4>
 800c5c8:	e017      	b.n	800c5fa <__gxx_personality_v0+0x3ce>
 800c5ca:	f854 1f04 	ldr.w	r1, [r4, #4]!
 800c5ce:	b1a1      	cbz	r1, 800c5fa <__gxx_personality_v0+0x3ce>
 800c5d0:	4421      	add	r1, r4
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	462b      	mov	r3, r5
 800c5d8:	f7ff fae8 	bl	800bbac <__cxa_type_match>
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	d0f4      	beq.n	800c5ca <__gxx_personality_v0+0x39e>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	e7e1      	b.n	800c5a8 <__gxx_personality_v0+0x37c>
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	e7b9      	b.n	800c55c <__gxx_personality_v0+0x330>
 800c5e8:	79f3      	ldrb	r3, [r6, #7]
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	bf0c      	ite	eq
 800c5ee:	f856 3c20 	ldreq.w	r3, [r6, #-32]
 800c5f2:	f106 0358 	addne.w	r3, r6, #88	; 0x58
 800c5f6:	9306      	str	r3, [sp, #24]
 800c5f8:	e789      	b.n	800c50e <__gxx_personality_v0+0x2e2>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e7d4      	b.n	800c5a8 <__gxx_personality_v0+0x37c>
 800c5fe:	9c04      	ldr	r4, [sp, #16]
 800c600:	f1bb 0f00 	cmp.w	fp, #0
 800c604:	f43f ae21 	beq.w	800c24a <__gxx_personality_v0+0x1e>
 800c608:	461d      	mov	r5, r3
 800c60a:	f04f 0b02 	mov.w	fp, #2
 800c60e:	e69d      	b.n	800c34c <__gxx_personality_v0+0x120>
 800c610:	4630      	mov	r0, r6
 800c612:	f7ff fbc5 	bl	800bda0 <__cxa_call_terminate>
 800c616:	4630      	mov	r0, r6
 800c618:	2200      	movs	r2, #0
 800c61a:	ab06      	add	r3, sp, #24
 800c61c:	f7ff fac6 	bl	800bbac <__cxa_type_match>
 800c620:	2800      	cmp	r0, #0
 800c622:	d1c3      	bne.n	800c5ac <__gxx_personality_v0+0x380>
 800c624:	e7a4      	b.n	800c570 <__gxx_personality_v0+0x344>
 800c626:	f000 f8e1 	bl	800c7ec <_ZSt10unexpectedv>
 800c62a:	f000 f833 	bl	800c694 <__cxa_begin_catch>
 800c62e:	f000 f8d1 	bl	800c7d4 <_ZSt9terminatev>
 800c632:	bf00      	nop

0800c634 <_ZNSt9exceptionD1Ev>:
 800c634:	4b01      	ldr	r3, [pc, #4]	; (800c63c <_ZNSt9exceptionD1Ev+0x8>)
 800c636:	6003      	str	r3, [r0, #0]
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	0800e888 	.word	0x0800e888

0800c640 <_ZNSt13bad_exceptionD1Ev>:
 800c640:	4b01      	ldr	r3, [pc, #4]	; (800c648 <_ZNSt13bad_exceptionD1Ev+0x8>)
 800c642:	6003      	str	r3, [r0, #0]
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	0800e888 	.word	0x0800e888

0800c64c <_ZNKSt9exception4whatEv>:
 800c64c:	4800      	ldr	r0, [pc, #0]	; (800c650 <_ZNKSt9exception4whatEv+0x4>)
 800c64e:	4770      	bx	lr
 800c650:	0800e8bc 	.word	0x0800e8bc

0800c654 <_ZNKSt13bad_exception4whatEv>:
 800c654:	4800      	ldr	r0, [pc, #0]	; (800c658 <_ZNKSt13bad_exception4whatEv+0x4>)
 800c656:	4770      	bx	lr
 800c658:	0800e8cc 	.word	0x0800e8cc

0800c65c <_ZNSt9exceptionD0Ev>:
 800c65c:	b510      	push	{r4, lr}
 800c65e:	4b03      	ldr	r3, [pc, #12]	; (800c66c <_ZNSt9exceptionD0Ev+0x10>)
 800c660:	6003      	str	r3, [r0, #0]
 800c662:	4604      	mov	r4, r0
 800c664:	f000 f958 	bl	800c918 <_ZdlPv>
 800c668:	4620      	mov	r0, r4
 800c66a:	bd10      	pop	{r4, pc}
 800c66c:	0800e888 	.word	0x0800e888

0800c670 <_ZNSt13bad_exceptionD0Ev>:
 800c670:	b510      	push	{r4, lr}
 800c672:	4b03      	ldr	r3, [pc, #12]	; (800c680 <_ZNSt13bad_exceptionD0Ev+0x10>)
 800c674:	6003      	str	r3, [r0, #0]
 800c676:	4604      	mov	r4, r0
 800c678:	f000 f94e 	bl	800c918 <_ZdlPv>
 800c67c:	4620      	mov	r0, r4
 800c67e:	bd10      	pop	{r4, pc}
 800c680:	0800e888 	.word	0x0800e888

0800c684 <__cxa_get_globals_fast>:
 800c684:	4800      	ldr	r0, [pc, #0]	; (800c688 <__cxa_get_globals_fast+0x4>)
 800c686:	4770      	bx	lr
 800c688:	20001488 	.word	0x20001488

0800c68c <__cxa_get_globals>:
 800c68c:	4800      	ldr	r0, [pc, #0]	; (800c690 <__cxa_get_globals+0x4>)
 800c68e:	4770      	bx	lr
 800c690:	20001488 	.word	0x20001488

0800c694 <__cxa_begin_catch>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	4604      	mov	r4, r0
 800c698:	f7ff fff8 	bl	800c68c <__cxa_get_globals>
 800c69c:	7821      	ldrb	r1, [r4, #0]
 800c69e:	6803      	ldr	r3, [r0, #0]
 800c6a0:	2947      	cmp	r1, #71	; 0x47
 800c6a2:	f1a4 0220 	sub.w	r2, r4, #32
 800c6a6:	d005      	beq.n	800c6b4 <__cxa_begin_catch+0x20>
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d131      	bne.n	800c710 <__cxa_begin_catch+0x7c>
 800c6ac:	461c      	mov	r4, r3
 800c6ae:	6002      	str	r2, [r0, #0]
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	bd38      	pop	{r3, r4, r5, pc}
 800c6b4:	7861      	ldrb	r1, [r4, #1]
 800c6b6:	294e      	cmp	r1, #78	; 0x4e
 800c6b8:	d1f6      	bne.n	800c6a8 <__cxa_begin_catch+0x14>
 800c6ba:	78a1      	ldrb	r1, [r4, #2]
 800c6bc:	2955      	cmp	r1, #85	; 0x55
 800c6be:	d1f3      	bne.n	800c6a8 <__cxa_begin_catch+0x14>
 800c6c0:	78e1      	ldrb	r1, [r4, #3]
 800c6c2:	2943      	cmp	r1, #67	; 0x43
 800c6c4:	d1f0      	bne.n	800c6a8 <__cxa_begin_catch+0x14>
 800c6c6:	7921      	ldrb	r1, [r4, #4]
 800c6c8:	2943      	cmp	r1, #67	; 0x43
 800c6ca:	d1ed      	bne.n	800c6a8 <__cxa_begin_catch+0x14>
 800c6cc:	7961      	ldrb	r1, [r4, #5]
 800c6ce:	292b      	cmp	r1, #43	; 0x2b
 800c6d0:	d1ea      	bne.n	800c6a8 <__cxa_begin_catch+0x14>
 800c6d2:	79a1      	ldrb	r1, [r4, #6]
 800c6d4:	292b      	cmp	r1, #43	; 0x2b
 800c6d6:	d1e7      	bne.n	800c6a8 <__cxa_begin_catch+0x14>
 800c6d8:	79e1      	ldrb	r1, [r4, #7]
 800c6da:	2901      	cmp	r1, #1
 800c6dc:	d8e4      	bhi.n	800c6a8 <__cxa_begin_catch+0x14>
 800c6de:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 800c6e2:	2d00      	cmp	r5, #0
 800c6e4:	db11      	blt.n	800c70a <__cxa_begin_catch+0x76>
 800c6e6:	3501      	adds	r5, #1
 800c6e8:	6841      	ldr	r1, [r0, #4]
 800c6ea:	f844 5c0c 	str.w	r5, [r4, #-12]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	f101 31ff 	add.w	r1, r1, #4294967295
 800c6f4:	6041      	str	r1, [r0, #4]
 800c6f6:	bf1c      	itt	ne
 800c6f8:	f844 3c10 	strne.w	r3, [r4, #-16]
 800c6fc:	6002      	strne	r2, [r0, #0]
 800c6fe:	4620      	mov	r0, r4
 800c700:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800c702:	f7f9 fb05 	bl	8005d10 <_Unwind_Complete>
 800c706:	4620      	mov	r0, r4
 800c708:	bd38      	pop	{r3, r4, r5, pc}
 800c70a:	f1c5 0501 	rsb	r5, r5, #1
 800c70e:	e7eb      	b.n	800c6e8 <__cxa_begin_catch+0x54>
 800c710:	f000 f860 	bl	800c7d4 <_ZSt9terminatev>
 800c714:	3101      	adds	r1, #1
 800c716:	d001      	beq.n	800c71c <__cxa_begin_catch+0x88>
 800c718:	f7ff fa42 	bl	800bba0 <__cxa_end_cleanup>
 800c71c:	f7ff fb50 	bl	800bdc0 <__cxa_call_unexpected>

0800c720 <__cxa_end_catch>:
 800c720:	b508      	push	{r3, lr}
 800c722:	f7ff ffaf 	bl	800c684 <__cxa_get_globals_fast>
 800c726:	4602      	mov	r2, r0
 800c728:	6800      	ldr	r0, [r0, #0]
 800c72a:	2800      	cmp	r0, #0
 800c72c:	d03d      	beq.n	800c7aa <__cxa_end_catch+0x8a>
 800c72e:	f890 1020 	ldrb.w	r1, [r0, #32]
 800c732:	2947      	cmp	r1, #71	; 0x47
 800c734:	d006      	beq.n	800c744 <__cxa_end_catch+0x24>
 800c736:	2100      	movs	r1, #0
 800c738:	3020      	adds	r0, #32
 800c73a:	6011      	str	r1, [r2, #0]
 800c73c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c740:	f7f9 bae8 	b.w	8005d14 <_Unwind_DeleteException>
 800c744:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
 800c748:	294e      	cmp	r1, #78	; 0x4e
 800c74a:	d1f4      	bne.n	800c736 <__cxa_end_catch+0x16>
 800c74c:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
 800c750:	2955      	cmp	r1, #85	; 0x55
 800c752:	d1f0      	bne.n	800c736 <__cxa_end_catch+0x16>
 800c754:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
 800c758:	2943      	cmp	r1, #67	; 0x43
 800c75a:	d1ec      	bne.n	800c736 <__cxa_end_catch+0x16>
 800c75c:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 800c760:	2943      	cmp	r1, #67	; 0x43
 800c762:	d1e8      	bne.n	800c736 <__cxa_end_catch+0x16>
 800c764:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
 800c768:	292b      	cmp	r1, #43	; 0x2b
 800c76a:	d1e4      	bne.n	800c736 <__cxa_end_catch+0x16>
 800c76c:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
 800c770:	292b      	cmp	r1, #43	; 0x2b
 800c772:	d1e0      	bne.n	800c736 <__cxa_end_catch+0x16>
 800c774:	f890 1027 	ldrb.w	r1, [r0, #39]	; 0x27
 800c778:	2901      	cmp	r1, #1
 800c77a:	d8dc      	bhi.n	800c736 <__cxa_end_catch+0x16>
 800c77c:	6941      	ldr	r1, [r0, #20]
 800c77e:	2900      	cmp	r1, #0
 800c780:	db05      	blt.n	800c78e <__cxa_end_catch+0x6e>
 800c782:	3901      	subs	r1, #1
 800c784:	d008      	beq.n	800c798 <__cxa_end_catch+0x78>
 800c786:	1c4b      	adds	r3, r1, #1
 800c788:	d00d      	beq.n	800c7a6 <__cxa_end_catch+0x86>
 800c78a:	6141      	str	r1, [r0, #20]
 800c78c:	bd08      	pop	{r3, pc}
 800c78e:	3101      	adds	r1, #1
 800c790:	d1fb      	bne.n	800c78a <__cxa_end_catch+0x6a>
 800c792:	6903      	ldr	r3, [r0, #16]
 800c794:	6013      	str	r3, [r2, #0]
 800c796:	e7f8      	b.n	800c78a <__cxa_end_catch+0x6a>
 800c798:	6901      	ldr	r1, [r0, #16]
 800c79a:	6011      	str	r1, [r2, #0]
 800c79c:	3020      	adds	r0, #32
 800c79e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c7a2:	f7f9 bab7 	b.w	8005d14 <_Unwind_DeleteException>
 800c7a6:	f000 f815 	bl	800c7d4 <_ZSt9terminatev>
 800c7aa:	bd08      	pop	{r3, pc}

0800c7ac <_ZN10__cxxabiv111__terminateEPFvvE>:
 800c7ac:	b508      	push	{r3, lr}
 800c7ae:	4780      	blx	r0
 800c7b0:	f000 f9f6 	bl	800cba0 <abort>
 800c7b4:	f7ff ff6e 	bl	800c694 <__cxa_begin_catch>
 800c7b8:	f000 f9f2 	bl	800cba0 <abort>
 800c7bc:	460c      	mov	r4, r1
 800c7be:	4605      	mov	r5, r0
 800c7c0:	f7ff ffae 	bl	800c720 <__cxa_end_catch>
 800c7c4:	3401      	adds	r4, #1
 800c7c6:	d001      	beq.n	800c7cc <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 800c7c8:	f7ff f9ea 	bl	800bba0 <__cxa_end_cleanup>
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	f7ff faf7 	bl	800bdc0 <__cxa_call_unexpected>
 800c7d2:	bf00      	nop

0800c7d4 <_ZSt9terminatev>:
 800c7d4:	b508      	push	{r3, lr}
 800c7d6:	4b02      	ldr	r3, [pc, #8]	; (800c7e0 <_ZSt9terminatev+0xc>)
 800c7d8:	6818      	ldr	r0, [r3, #0]
 800c7da:	f7ff ffe7 	bl	800c7ac <_ZN10__cxxabiv111__terminateEPFvvE>
 800c7de:	bf00      	nop
 800c7e0:	20000138 	.word	0x20000138

0800c7e4 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800c7e4:	b508      	push	{r3, lr}
 800c7e6:	4780      	blx	r0
 800c7e8:	f7ff fff4 	bl	800c7d4 <_ZSt9terminatev>

0800c7ec <_ZSt10unexpectedv>:
 800c7ec:	b508      	push	{r3, lr}
 800c7ee:	4b02      	ldr	r3, [pc, #8]	; (800c7f8 <_ZSt10unexpectedv+0xc>)
 800c7f0:	6818      	ldr	r0, [r3, #0]
 800c7f2:	f7ff fff7 	bl	800c7e4 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800c7f6:	bf00      	nop
 800c7f8:	20000134 	.word	0x20000134

0800c7fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800c7fc:	b510      	push	{r4, lr}
 800c7fe:	4b03      	ldr	r3, [pc, #12]	; (800c80c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800c800:	6003      	str	r3, [r0, #0]
 800c802:	4604      	mov	r4, r0
 800c804:	f000 f938 	bl	800ca78 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800c808:	4620      	mov	r0, r4
 800c80a:	bd10      	pop	{r4, pc}
 800c80c:	0800e970 	.word	0x0800e970

0800c810 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800c810:	b510      	push	{r4, lr}
 800c812:	4b05      	ldr	r3, [pc, #20]	; (800c828 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 800c814:	6003      	str	r3, [r0, #0]
 800c816:	4604      	mov	r4, r0
 800c818:	f000 f92e 	bl	800ca78 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800c81c:	4620      	mov	r0, r4
 800c81e:	f000 f87b 	bl	800c918 <_ZdlPv>
 800c822:	4620      	mov	r0, r4
 800c824:	bd10      	pop	{r4, pc}
 800c826:	bf00      	nop
 800c828:	0800e970 	.word	0x0800e970

0800c82c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	460d      	mov	r5, r1
 800c832:	9c08      	ldr	r4, [sp, #32]
 800c834:	4294      	cmp	r4, r2
 800c836:	4606      	mov	r6, r0
 800c838:	d007      	beq.n	800c84a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1e>
 800c83a:	68b0      	ldr	r0, [r6, #8]
 800c83c:	6806      	ldr	r6, [r0, #0]
 800c83e:	9400      	str	r4, [sp, #0]
 800c840:	4629      	mov	r1, r5
 800c842:	6a34      	ldr	r4, [r6, #32]
 800c844:	47a0      	blx	r4
 800c846:	b004      	add	sp, #16
 800c848:	bd70      	pop	{r4, r5, r6, pc}
 800c84a:	4619      	mov	r1, r3
 800c84c:	9203      	str	r2, [sp, #12]
 800c84e:	9302      	str	r3, [sp, #8]
 800c850:	f000 f97e 	bl	800cb50 <_ZNKSt9type_infoeqERKS_>
 800c854:	9a03      	ldr	r2, [sp, #12]
 800c856:	9b02      	ldr	r3, [sp, #8]
 800c858:	2800      	cmp	r0, #0
 800c85a:	d0ee      	beq.n	800c83a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800c85c:	2006      	movs	r0, #6
 800c85e:	e7f2      	b.n	800c846 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>

0800c860 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800c860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c864:	b085      	sub	sp, #20
 800c866:	4688      	mov	r8, r1
 800c868:	4619      	mov	r1, r3
 800c86a:	461f      	mov	r7, r3
 800c86c:	4692      	mov	sl, r2
 800c86e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c870:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800c874:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c876:	4683      	mov	fp, r0
 800c878:	f000 f96a 	bl	800cb50 <_ZNKSt9type_infoeqERKS_>
 800c87c:	4604      	mov	r4, r0
 800c87e:	b198      	cbz	r0, 800c8a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
 800c880:	f1b8 0f00 	cmp.w	r8, #0
 800c884:	602e      	str	r6, [r5, #0]
 800c886:	f885 a004 	strb.w	sl, [r5, #4]
 800c88a:	db22      	blt.n	800c8d2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x72>
 800c88c:	4446      	add	r6, r8
 800c88e:	2400      	movs	r4, #0
 800c890:	45b1      	cmp	r9, r6
 800c892:	bf14      	ite	ne
 800c894:	f04f 0901 	movne.w	r9, #1
 800c898:	f04f 0906 	moveq.w	r9, #6
 800c89c:	4620      	mov	r0, r4
 800c89e:	f885 9006 	strb.w	r9, [r5, #6]
 800c8a2:	b005      	add	sp, #20
 800c8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a8:	454e      	cmp	r6, r9
 800c8aa:	d017      	beq.n	800c8dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 800c8ac:	f8db 0008 	ldr.w	r0, [fp, #8]
 800c8b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8b2:	6804      	ldr	r4, [r0, #0]
 800c8b4:	9301      	str	r3, [sp, #4]
 800c8b6:	9600      	str	r6, [sp, #0]
 800c8b8:	f8cd 9008 	str.w	r9, [sp, #8]
 800c8bc:	9503      	str	r5, [sp, #12]
 800c8be:	69e4      	ldr	r4, [r4, #28]
 800c8c0:	4641      	mov	r1, r8
 800c8c2:	4652      	mov	r2, sl
 800c8c4:	463b      	mov	r3, r7
 800c8c6:	47a0      	blx	r4
 800c8c8:	4604      	mov	r4, r0
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	b005      	add	sp, #20
 800c8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d2:	f118 0f02 	cmn.w	r8, #2
 800c8d6:	d00a      	beq.n	800c8ee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8e>
 800c8d8:	2400      	movs	r4, #0
 800c8da:	e7f6      	b.n	800c8ca <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6a>
 800c8dc:	4658      	mov	r0, fp
 800c8de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c8e0:	f000 f936 	bl	800cb50 <_ZNKSt9type_infoeqERKS_>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	d0e1      	beq.n	800c8ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c>
 800c8e8:	f885 a005 	strb.w	sl, [r5, #5]
 800c8ec:	e7ed      	b.n	800c8ca <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6a>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	71ab      	strb	r3, [r5, #6]
 800c8f2:	2400      	movs	r4, #0
 800c8f4:	e7e9      	b.n	800c8ca <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6a>
 800c8f6:	bf00      	nop

0800c8f8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800c8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fa:	4607      	mov	r7, r0
 800c8fc:	460e      	mov	r6, r1
 800c8fe:	4615      	mov	r5, r2
 800c900:	461c      	mov	r4, r3
 800c902:	f000 f8d1 	bl	800caa8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800c906:	b930      	cbnz	r0, 800c916 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1e>
 800c908:	68b8      	ldr	r0, [r7, #8]
 800c90a:	6807      	ldr	r7, [r0, #0]
 800c90c:	4623      	mov	r3, r4
 800c90e:	4631      	mov	r1, r6
 800c910:	462a      	mov	r2, r5
 800c912:	69bc      	ldr	r4, [r7, #24]
 800c914:	47a0      	blx	r4
 800c916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c918 <_ZdlPv>:
 800c918:	b108      	cbz	r0, 800c91e <_ZdlPv+0x6>
 800c91a:	f000 b9a5 	b.w	800cc68 <free>
 800c91e:	4770      	bx	lr

0800c920 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 800c920:	b570      	push	{r4, r5, r6, lr}
 800c922:	4b3d      	ldr	r3, [pc, #244]	; (800ca18 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 800c924:	781a      	ldrb	r2, [r3, #0]
 800c926:	b082      	sub	sp, #8
 800c928:	2a00      	cmp	r2, #0
 800c92a:	d136      	bne.n	800c99a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7a>
 800c92c:	2401      	movs	r4, #1
 800c92e:	701c      	strb	r4, [r3, #0]
 800c930:	f000 f928 	bl	800cb84 <__cxa_current_exception_type>
 800c934:	2800      	cmp	r0, #0
 800c936:	d05c      	beq.n	800c9f2 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd2>
 800c938:	6840      	ldr	r0, [r0, #4]
 800c93a:	7803      	ldrb	r3, [r0, #0]
 800c93c:	2b2a      	cmp	r3, #42	; 0x2a
 800c93e:	ab02      	add	r3, sp, #8
 800c940:	bf0c      	ite	eq
 800c942:	1905      	addeq	r5, r0, r4
 800c944:	4605      	movne	r5, r0
 800c946:	2100      	movs	r1, #0
 800c948:	f04f 32ff 	mov.w	r2, #4294967295
 800c94c:	f843 2d04 	str.w	r2, [r3, #-4]!
 800c950:	4c32      	ldr	r4, [pc, #200]	; (800ca1c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 800c952:	460a      	mov	r2, r1
 800c954:	4628      	mov	r0, r5
 800c956:	f7f8 ff89 	bl	800586c <__cxa_demangle>
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	4606      	mov	r6, r0
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	482f      	ldr	r0, [pc, #188]	; (800ca20 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 800c962:	2101      	movs	r1, #1
 800c964:	2230      	movs	r2, #48	; 0x30
 800c966:	f7fa f8a9 	bl	8006abc <fwrite>
 800c96a:	9b01      	ldr	r3, [sp, #4]
 800c96c:	b17b      	cbz	r3, 800c98e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6e>
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	4628      	mov	r0, r5
 800c972:	68d9      	ldr	r1, [r3, #12]
 800c974:	f7fa f86e 	bl	8006a54 <fputs>
 800c978:	6823      	ldr	r3, [r4, #0]
 800c97a:	482a      	ldr	r0, [pc, #168]	; (800ca24 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	2101      	movs	r1, #1
 800c980:	2202      	movs	r2, #2
 800c982:	f7fa f89b 	bl	8006abc <fwrite>
 800c986:	9b01      	ldr	r3, [sp, #4]
 800c988:	b18b      	cbz	r3, 800c9ae <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8e>
 800c98a:	f7ff fb33 	bl	800bff4 <__cxa_rethrow>
 800c98e:	6823      	ldr	r3, [r4, #0]
 800c990:	4630      	mov	r0, r6
 800c992:	68d9      	ldr	r1, [r3, #12]
 800c994:	f7fa f85e 	bl	8006a54 <fputs>
 800c998:	e7ee      	b.n	800c978 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x58>
 800c99a:	4b20      	ldr	r3, [pc, #128]	; (800ca1c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 800c99c:	4822      	ldr	r0, [pc, #136]	; (800ca28 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2101      	movs	r1, #1
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	221d      	movs	r2, #29
 800c9a6:	f7fa f889 	bl	8006abc <fwrite>
 800c9aa:	f000 f8f9 	bl	800cba0 <abort>
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	f000 f95a 	bl	800cc68 <free>
 800c9b4:	e7e9      	b.n	800c98a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6a>
 800c9b6:	2901      	cmp	r1, #1
 800c9b8:	460d      	mov	r5, r1
 800c9ba:	d127      	bne.n	800ca0c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xec>
 800c9bc:	f7ff fe6a 	bl	800c694 <__cxa_begin_catch>
 800c9c0:	6803      	ldr	r3, [r0, #0]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	4798      	blx	r3
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	4606      	mov	r6, r0
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	4817      	ldr	r0, [pc, #92]	; (800ca2c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 800c9ce:	4629      	mov	r1, r5
 800c9d0:	220b      	movs	r2, #11
 800c9d2:	f7fa f873 	bl	8006abc <fwrite>
 800c9d6:	6823      	ldr	r3, [r4, #0]
 800c9d8:	4630      	mov	r0, r6
 800c9da:	68d9      	ldr	r1, [r3, #12]
 800c9dc:	f7fa f83a 	bl	8006a54 <fputs>
 800c9e0:	6823      	ldr	r3, [r4, #0]
 800c9e2:	200a      	movs	r0, #10
 800c9e4:	68d9      	ldr	r1, [r3, #12]
 800c9e6:	f000 f907 	bl	800cbf8 <fputc>
 800c9ea:	f7ff fe99 	bl	800c720 <__cxa_end_catch>
 800c9ee:	f000 f8d7 	bl	800cba0 <abort>
 800c9f2:	4b0a      	ldr	r3, [pc, #40]	; (800ca1c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 800c9f4:	480e      	ldr	r0, [pc, #56]	; (800ca30 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4621      	mov	r1, r4
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	222d      	movs	r2, #45	; 0x2d
 800c9fe:	f7fa f85d 	bl	8006abc <fwrite>
 800ca02:	e7f4      	b.n	800c9ee <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xce>
 800ca04:	f7ff fe8c 	bl	800c720 <__cxa_end_catch>
 800ca08:	f7ff f8ca 	bl	800bba0 <__cxa_end_cleanup>
 800ca0c:	f7ff fe42 	bl	800c694 <__cxa_begin_catch>
 800ca10:	f7ff fe86 	bl	800c720 <__cxa_end_catch>
 800ca14:	e7eb      	b.n	800c9ee <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xce>
 800ca16:	bf00      	nop
 800ca18:	20001494 	.word	0x20001494
 800ca1c:	2000022c 	.word	0x2000022c
 800ca20:	0800e9ec 	.word	0x0800e9ec
 800ca24:	0800ea20 	.word	0x0800ea20
 800ca28:	0800e9cc 	.word	0x0800e9cc
 800ca2c:	0800ea54 	.word	0x0800ea54
 800ca30:	0800ea24 	.word	0x0800ea24

0800ca34 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800ca34:	b570      	push	{r4, r5, r6, lr}
 800ca36:	6803      	ldr	r3, [r0, #0]
 800ca38:	b084      	sub	sp, #16
 800ca3a:	2400      	movs	r4, #0
 800ca3c:	699e      	ldr	r6, [r3, #24]
 800ca3e:	9400      	str	r4, [sp, #0]
 800ca40:	2310      	movs	r3, #16
 800ca42:	4615      	mov	r5, r2
 800ca44:	9302      	str	r3, [sp, #8]
 800ca46:	6812      	ldr	r2, [r2, #0]
 800ca48:	f88d 4004 	strb.w	r4, [sp, #4]
 800ca4c:	466b      	mov	r3, sp
 800ca4e:	9403      	str	r4, [sp, #12]
 800ca50:	47b0      	blx	r6
 800ca52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ca56:	f003 0306 	and.w	r3, r3, #6
 800ca5a:	2b06      	cmp	r3, #6
 800ca5c:	bf03      	ittte	eq
 800ca5e:	9b00      	ldreq	r3, [sp, #0]
 800ca60:	602b      	streq	r3, [r5, #0]
 800ca62:	2001      	moveq	r0, #1
 800ca64:	4620      	movne	r0, r4
 800ca66:	b004      	add	sp, #16
 800ca68:	bd70      	pop	{r4, r5, r6, pc}
 800ca6a:	bf00      	nop

0800ca6c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800ca6c:	9800      	ldr	r0, [sp, #0]
 800ca6e:	4290      	cmp	r0, r2
 800ca70:	bf14      	ite	ne
 800ca72:	2001      	movne	r0, #1
 800ca74:	2006      	moveq	r0, #6
 800ca76:	4770      	bx	lr

0800ca78 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800ca78:	b510      	push	{r4, lr}
 800ca7a:	4b03      	ldr	r3, [pc, #12]	; (800ca88 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800ca7c:	6003      	str	r3, [r0, #0]
 800ca7e:	4604      	mov	r4, r0
 800ca80:	f000 f850 	bl	800cb24 <_ZNSt9type_infoD1Ev>
 800ca84:	4620      	mov	r0, r4
 800ca86:	bd10      	pop	{r4, pc}
 800ca88:	0800ea68 	.word	0x0800ea68

0800ca8c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800ca8c:	b510      	push	{r4, lr}
 800ca8e:	4b05      	ldr	r3, [pc, #20]	; (800caa4 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 800ca90:	6003      	str	r3, [r0, #0]
 800ca92:	4604      	mov	r4, r0
 800ca94:	f000 f846 	bl	800cb24 <_ZNSt9type_infoD1Ev>
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f7ff ff3d 	bl	800c918 <_ZdlPv>
 800ca9e:	4620      	mov	r0, r4
 800caa0:	bd10      	pop	{r4, pc}
 800caa2:	bf00      	nop
 800caa4:	0800ea68 	.word	0x0800ea68

0800caa8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800caa8:	b538      	push	{r3, r4, r5, lr}
 800caaa:	4615      	mov	r5, r2
 800caac:	461c      	mov	r4, r3
 800caae:	f000 f84f 	bl	800cb50 <_ZNKSt9type_infoeqERKS_>
 800cab2:	b120      	cbz	r0, 800cabe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800cab4:	2208      	movs	r2, #8
 800cab6:	2306      	movs	r3, #6
 800cab8:	6025      	str	r5, [r4, #0]
 800caba:	60e2      	str	r2, [r4, #12]
 800cabc:	7123      	strb	r3, [r4, #4]
 800cabe:	bd38      	pop	{r3, r4, r5, pc}

0800cac0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800cac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac2:	4616      	mov	r6, r2
 800cac4:	461c      	mov	r4, r3
 800cac6:	4607      	mov	r7, r0
 800cac8:	460d      	mov	r5, r1
 800caca:	f000 f841 	bl	800cb50 <_ZNKSt9type_infoeqERKS_>
 800cace:	b908      	cbnz	r0, 800cad4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
 800cad0:	2c03      	cmp	r4, #3
 800cad2:	d900      	bls.n	800cad6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 800cad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cad6:	682b      	ldr	r3, [r5, #0]
 800cad8:	4639      	mov	r1, r7
 800cada:	4632      	mov	r2, r6
 800cadc:	695b      	ldr	r3, [r3, #20]
 800cade:	4628      	mov	r0, r5
 800cae0:	4798      	blx	r3
 800cae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cae4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800cae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cae6:	b083      	sub	sp, #12
 800cae8:	4617      	mov	r7, r2
 800caea:	9c08      	ldr	r4, [sp, #32]
 800caec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800caee:	42ac      	cmp	r4, r5
 800caf0:	4606      	mov	r6, r0
 800caf2:	d00c      	beq.n	800cb0e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 800caf4:	4630      	mov	r0, r6
 800caf6:	4619      	mov	r1, r3
 800caf8:	f000 f82a 	bl	800cb50 <_ZNKSt9type_infoeqERKS_>
 800cafc:	b120      	cbz	r0, 800cb08 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 800cafe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb00:	2301      	movs	r3, #1
 800cb02:	600c      	str	r4, [r1, #0]
 800cb04:	710f      	strb	r7, [r1, #4]
 800cb06:	718b      	strb	r3, [r1, #6]
 800cb08:	2000      	movs	r0, #0
 800cb0a:	b003      	add	sp, #12
 800cb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb10:	9301      	str	r3, [sp, #4]
 800cb12:	f000 f81d 	bl	800cb50 <_ZNKSt9type_infoeqERKS_>
 800cb16:	9b01      	ldr	r3, [sp, #4]
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	d0eb      	beq.n	800caf4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x10>
 800cb1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb1e:	7157      	strb	r7, [r2, #5]
 800cb20:	e7f2      	b.n	800cb08 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 800cb22:	bf00      	nop

0800cb24 <_ZNSt9type_infoD1Ev>:
 800cb24:	4b01      	ldr	r3, [pc, #4]	; (800cb2c <_ZNSt9type_infoD1Ev+0x8>)
 800cb26:	6003      	str	r3, [r0, #0]
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	0800eae0 	.word	0x0800eae0

0800cb30 <_ZNKSt9type_info14__is_pointer_pEv>:
 800cb30:	2000      	movs	r0, #0
 800cb32:	4770      	bx	lr

0800cb34 <_ZNKSt9type_info15__is_function_pEv>:
 800cb34:	2000      	movs	r0, #0
 800cb36:	4770      	bx	lr

0800cb38 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 800cb38:	2000      	movs	r0, #0
 800cb3a:	4770      	bx	lr

0800cb3c <_ZNSt9type_infoD0Ev>:
 800cb3c:	b510      	push	{r4, lr}
 800cb3e:	4b03      	ldr	r3, [pc, #12]	; (800cb4c <_ZNSt9type_infoD0Ev+0x10>)
 800cb40:	6003      	str	r3, [r0, #0]
 800cb42:	4604      	mov	r4, r0
 800cb44:	f7ff fee8 	bl	800c918 <_ZdlPv>
 800cb48:	4620      	mov	r0, r4
 800cb4a:	bd10      	pop	{r4, pc}
 800cb4c:	0800eae0 	.word	0x0800eae0

0800cb50 <_ZNKSt9type_infoeqERKS_>:
 800cb50:	4281      	cmp	r1, r0
 800cb52:	b508      	push	{r3, lr}
 800cb54:	d011      	beq.n	800cb7a <_ZNKSt9type_infoeqERKS_+0x2a>
 800cb56:	6840      	ldr	r0, [r0, #4]
 800cb58:	7803      	ldrb	r3, [r0, #0]
 800cb5a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb5c:	d00b      	beq.n	800cb76 <_ZNKSt9type_infoeqERKS_+0x26>
 800cb5e:	6849      	ldr	r1, [r1, #4]
 800cb60:	780b      	ldrb	r3, [r1, #0]
 800cb62:	2b2a      	cmp	r3, #42	; 0x2a
 800cb64:	bf08      	it	eq
 800cb66:	3101      	addeq	r1, #1
 800cb68:	f7f8 fef0 	bl	800594c <strcmp>
 800cb6c:	f1d0 0001 	rsbs	r0, r0, #1
 800cb70:	bf38      	it	cc
 800cb72:	2000      	movcc	r0, #0
 800cb74:	bd08      	pop	{r3, pc}
 800cb76:	2000      	movs	r0, #0
 800cb78:	bd08      	pop	{r3, pc}
 800cb7a:	2001      	movs	r0, #1
 800cb7c:	bd08      	pop	{r3, pc}
 800cb7e:	bf00      	nop

0800cb80 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 800cb80:	f7ff bfe6 	b.w	800cb50 <_ZNKSt9type_infoeqERKS_>

0800cb84 <__cxa_current_exception_type>:
 800cb84:	b508      	push	{r3, lr}
 800cb86:	f7ff fd81 	bl	800c68c <__cxa_get_globals>
 800cb8a:	6800      	ldr	r0, [r0, #0]
 800cb8c:	b130      	cbz	r0, 800cb9c <__cxa_current_exception_type+0x18>
 800cb8e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	bf04      	itt	eq
 800cb96:	6800      	ldreq	r0, [r0, #0]
 800cb98:	3878      	subeq	r0, #120	; 0x78
 800cb9a:	6800      	ldr	r0, [r0, #0]
 800cb9c:	bd08      	pop	{r3, pc}
 800cb9e:	bf00      	nop

0800cba0 <abort>:
 800cba0:	b508      	push	{r3, lr}
 800cba2:	2006      	movs	r0, #6
 800cba4:	f000 fcc2 	bl	800d52c <raise>
 800cba8:	2001      	movs	r0, #1
 800cbaa:	f000 fd05 	bl	800d5b8 <_exit>
	...

0800cbb0 <_fputc_r>:
 800cbb0:	b570      	push	{r4, r5, r6, lr}
 800cbb2:	460e      	mov	r6, r1
 800cbb4:	4614      	mov	r4, r2
 800cbb6:	4605      	mov	r5, r0
 800cbb8:	b118      	cbz	r0, 800cbc2 <_fputc_r+0x12>
 800cbba:	6983      	ldr	r3, [r0, #24]
 800cbbc:	b90b      	cbnz	r3, 800cbc2 <_fputc_r+0x12>
 800cbbe:	f000 fedb 	bl	800d978 <__sinit>
 800cbc2:	4b0a      	ldr	r3, [pc, #40]	; (800cbec <_fputc_r+0x3c>)
 800cbc4:	429c      	cmp	r4, r3
 800cbc6:	bf08      	it	eq
 800cbc8:	686c      	ldreq	r4, [r5, #4]
 800cbca:	d008      	beq.n	800cbde <_fputc_r+0x2e>
 800cbcc:	4b08      	ldr	r3, [pc, #32]	; (800cbf0 <_fputc_r+0x40>)
 800cbce:	429c      	cmp	r4, r3
 800cbd0:	bf08      	it	eq
 800cbd2:	68ac      	ldreq	r4, [r5, #8]
 800cbd4:	d003      	beq.n	800cbde <_fputc_r+0x2e>
 800cbd6:	4b07      	ldr	r3, [pc, #28]	; (800cbf4 <_fputc_r+0x44>)
 800cbd8:	429c      	cmp	r4, r3
 800cbda:	bf08      	it	eq
 800cbdc:	68ec      	ldreq	r4, [r5, #12]
 800cbde:	4628      	mov	r0, r5
 800cbe0:	4631      	mov	r1, r6
 800cbe2:	4622      	mov	r2, r4
 800cbe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cbe8:	f000 ba7a 	b.w	800d0e0 <_putc_r>
 800cbec:	0800f2f4 	.word	0x0800f2f4
 800cbf0:	0800f314 	.word	0x0800f314
 800cbf4:	0800f334 	.word	0x0800f334

0800cbf8 <fputc>:
 800cbf8:	460a      	mov	r2, r1
 800cbfa:	4903      	ldr	r1, [pc, #12]	; (800cc08 <fputc+0x10>)
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	6808      	ldr	r0, [r1, #0]
 800cc00:	4619      	mov	r1, r3
 800cc02:	f7ff bfd5 	b.w	800cbb0 <_fputc_r>
 800cc06:	bf00      	nop
 800cc08:	2000022c 	.word	0x2000022c

0800cc0c <__libc_init_array>:
 800cc0c:	b570      	push	{r4, r5, r6, lr}
 800cc0e:	4b0e      	ldr	r3, [pc, #56]	; (800cc48 <__libc_init_array+0x3c>)
 800cc10:	4d0e      	ldr	r5, [pc, #56]	; (800cc4c <__libc_init_array+0x40>)
 800cc12:	1aed      	subs	r5, r5, r3
 800cc14:	10ad      	asrs	r5, r5, #2
 800cc16:	2400      	movs	r4, #0
 800cc18:	461e      	mov	r6, r3
 800cc1a:	42ac      	cmp	r4, r5
 800cc1c:	d004      	beq.n	800cc28 <__libc_init_array+0x1c>
 800cc1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cc22:	4790      	blx	r2
 800cc24:	3401      	adds	r4, #1
 800cc26:	e7f8      	b.n	800cc1a <__libc_init_array+0xe>
 800cc28:	f001 fa02 	bl	800e030 <_init>
 800cc2c:	4d08      	ldr	r5, [pc, #32]	; (800cc50 <__libc_init_array+0x44>)
 800cc2e:	4b09      	ldr	r3, [pc, #36]	; (800cc54 <__libc_init_array+0x48>)
 800cc30:	1aed      	subs	r5, r5, r3
 800cc32:	10ad      	asrs	r5, r5, #2
 800cc34:	2400      	movs	r4, #0
 800cc36:	461e      	mov	r6, r3
 800cc38:	42ac      	cmp	r4, r5
 800cc3a:	d004      	beq.n	800cc46 <__libc_init_array+0x3a>
 800cc3c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cc40:	4790      	blx	r2
 800cc42:	3401      	adds	r4, #1
 800cc44:	e7f8      	b.n	800cc38 <__libc_init_array+0x2c>
 800cc46:	bd70      	pop	{r4, r5, r6, pc}
 800cc48:	0800f65c 	.word	0x0800f65c
 800cc4c:	0800f65c 	.word	0x0800f65c
 800cc50:	0800f660 	.word	0x0800f660
 800cc54:	0800f65c 	.word	0x0800f65c

0800cc58 <malloc>:
 800cc58:	4b02      	ldr	r3, [pc, #8]	; (800cc64 <malloc+0xc>)
 800cc5a:	4601      	mov	r1, r0
 800cc5c:	6818      	ldr	r0, [r3, #0]
 800cc5e:	f000 b80b 	b.w	800cc78 <_malloc_r>
 800cc62:	bf00      	nop
 800cc64:	2000022c 	.word	0x2000022c

0800cc68 <free>:
 800cc68:	4b02      	ldr	r3, [pc, #8]	; (800cc74 <free+0xc>)
 800cc6a:	4601      	mov	r1, r0
 800cc6c:	6818      	ldr	r0, [r3, #0]
 800cc6e:	f000 bf99 	b.w	800dba4 <_free_r>
 800cc72:	bf00      	nop
 800cc74:	2000022c 	.word	0x2000022c

0800cc78 <_malloc_r>:
 800cc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7c:	f101 040b 	add.w	r4, r1, #11
 800cc80:	2c16      	cmp	r4, #22
 800cc82:	b085      	sub	sp, #20
 800cc84:	4607      	mov	r7, r0
 800cc86:	d903      	bls.n	800cc90 <_malloc_r+0x18>
 800cc88:	f034 0407 	bics.w	r4, r4, #7
 800cc8c:	d501      	bpl.n	800cc92 <_malloc_r+0x1a>
 800cc8e:	e002      	b.n	800cc96 <_malloc_r+0x1e>
 800cc90:	2410      	movs	r4, #16
 800cc92:	428c      	cmp	r4, r1
 800cc94:	d202      	bcs.n	800cc9c <_malloc_r+0x24>
 800cc96:	230c      	movs	r3, #12
 800cc98:	603b      	str	r3, [r7, #0]
 800cc9a:	e1dd      	b.n	800d058 <_malloc_r+0x3e0>
 800cc9c:	4638      	mov	r0, r7
 800cc9e:	f000 fa1d 	bl	800d0dc <__malloc_lock>
 800cca2:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800cca6:	4d97      	ldr	r5, [pc, #604]	; (800cf04 <_malloc_r+0x28c>)
 800cca8:	d214      	bcs.n	800ccd4 <_malloc_r+0x5c>
 800ccaa:	08e2      	lsrs	r2, r4, #3
 800ccac:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 800ccb0:	68de      	ldr	r6, [r3, #12]
 800ccb2:	429e      	cmp	r6, r3
 800ccb4:	d106      	bne.n	800ccc4 <_malloc_r+0x4c>
 800ccb6:	f106 0308 	add.w	r3, r6, #8
 800ccba:	6976      	ldr	r6, [r6, #20]
 800ccbc:	429e      	cmp	r6, r3
 800ccbe:	bf08      	it	eq
 800ccc0:	3202      	addeq	r2, #2
 800ccc2:	d043      	beq.n	800cd4c <_malloc_r+0xd4>
 800ccc4:	6873      	ldr	r3, [r6, #4]
 800ccc6:	68f2      	ldr	r2, [r6, #12]
 800ccc8:	68b1      	ldr	r1, [r6, #8]
 800ccca:	f023 0303 	bic.w	r3, r3, #3
 800ccce:	60ca      	str	r2, [r1, #12]
 800ccd0:	6091      	str	r1, [r2, #8]
 800ccd2:	e05d      	b.n	800cd90 <_malloc_r+0x118>
 800ccd4:	0a62      	lsrs	r2, r4, #9
 800ccd6:	d01a      	beq.n	800cd0e <_malloc_r+0x96>
 800ccd8:	2a04      	cmp	r2, #4
 800ccda:	d802      	bhi.n	800cce2 <_malloc_r+0x6a>
 800ccdc:	09a2      	lsrs	r2, r4, #6
 800ccde:	3238      	adds	r2, #56	; 0x38
 800cce0:	e018      	b.n	800cd14 <_malloc_r+0x9c>
 800cce2:	2a14      	cmp	r2, #20
 800cce4:	d801      	bhi.n	800ccea <_malloc_r+0x72>
 800cce6:	325b      	adds	r2, #91	; 0x5b
 800cce8:	e014      	b.n	800cd14 <_malloc_r+0x9c>
 800ccea:	2a54      	cmp	r2, #84	; 0x54
 800ccec:	d802      	bhi.n	800ccf4 <_malloc_r+0x7c>
 800ccee:	0b22      	lsrs	r2, r4, #12
 800ccf0:	326e      	adds	r2, #110	; 0x6e
 800ccf2:	e00f      	b.n	800cd14 <_malloc_r+0x9c>
 800ccf4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800ccf8:	d802      	bhi.n	800cd00 <_malloc_r+0x88>
 800ccfa:	0be2      	lsrs	r2, r4, #15
 800ccfc:	3277      	adds	r2, #119	; 0x77
 800ccfe:	e009      	b.n	800cd14 <_malloc_r+0x9c>
 800cd00:	f240 5354 	movw	r3, #1364	; 0x554
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d804      	bhi.n	800cd12 <_malloc_r+0x9a>
 800cd08:	0ca2      	lsrs	r2, r4, #18
 800cd0a:	327c      	adds	r2, #124	; 0x7c
 800cd0c:	e002      	b.n	800cd14 <_malloc_r+0x9c>
 800cd0e:	223f      	movs	r2, #63	; 0x3f
 800cd10:	e000      	b.n	800cd14 <_malloc_r+0x9c>
 800cd12:	227e      	movs	r2, #126	; 0x7e
 800cd14:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 800cd18:	68de      	ldr	r6, [r3, #12]
 800cd1a:	429e      	cmp	r6, r3
 800cd1c:	d015      	beq.n	800cd4a <_malloc_r+0xd2>
 800cd1e:	6871      	ldr	r1, [r6, #4]
 800cd20:	f021 0103 	bic.w	r1, r1, #3
 800cd24:	1b08      	subs	r0, r1, r4
 800cd26:	280f      	cmp	r0, #15
 800cd28:	dd01      	ble.n	800cd2e <_malloc_r+0xb6>
 800cd2a:	3a01      	subs	r2, #1
 800cd2c:	e00d      	b.n	800cd4a <_malloc_r+0xd2>
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	db09      	blt.n	800cd46 <_malloc_r+0xce>
 800cd32:	68f3      	ldr	r3, [r6, #12]
 800cd34:	68b2      	ldr	r2, [r6, #8]
 800cd36:	60d3      	str	r3, [r2, #12]
 800cd38:	609a      	str	r2, [r3, #8]
 800cd3a:	1873      	adds	r3, r6, r1
 800cd3c:	685a      	ldr	r2, [r3, #4]
 800cd3e:	f042 0201 	orr.w	r2, r2, #1
 800cd42:	605a      	str	r2, [r3, #4]
 800cd44:	e193      	b.n	800d06e <_malloc_r+0x3f6>
 800cd46:	68f6      	ldr	r6, [r6, #12]
 800cd48:	e7e7      	b.n	800cd1a <_malloc_r+0xa2>
 800cd4a:	3201      	adds	r2, #1
 800cd4c:	496d      	ldr	r1, [pc, #436]	; (800cf04 <_malloc_r+0x28c>)
 800cd4e:	692e      	ldr	r6, [r5, #16]
 800cd50:	f101 0008 	add.w	r0, r1, #8
 800cd54:	4286      	cmp	r6, r0
 800cd56:	4686      	mov	lr, r0
 800cd58:	d06d      	beq.n	800ce36 <_malloc_r+0x1be>
 800cd5a:	6873      	ldr	r3, [r6, #4]
 800cd5c:	f023 0303 	bic.w	r3, r3, #3
 800cd60:	ebc4 0c03 	rsb	ip, r4, r3
 800cd64:	f1bc 0f0f 	cmp.w	ip, #15
 800cd68:	dd0d      	ble.n	800cd86 <_malloc_r+0x10e>
 800cd6a:	1933      	adds	r3, r6, r4
 800cd6c:	f04c 0201 	orr.w	r2, ip, #1
 800cd70:	f044 0401 	orr.w	r4, r4, #1
 800cd74:	6074      	str	r4, [r6, #4]
 800cd76:	614b      	str	r3, [r1, #20]
 800cd78:	610b      	str	r3, [r1, #16]
 800cd7a:	60d8      	str	r0, [r3, #12]
 800cd7c:	6098      	str	r0, [r3, #8]
 800cd7e:	605a      	str	r2, [r3, #4]
 800cd80:	f843 c00c 	str.w	ip, [r3, ip]
 800cd84:	e173      	b.n	800d06e <_malloc_r+0x3f6>
 800cd86:	f1bc 0f00 	cmp.w	ip, #0
 800cd8a:	6148      	str	r0, [r1, #20]
 800cd8c:	6108      	str	r0, [r1, #16]
 800cd8e:	db01      	blt.n	800cd94 <_malloc_r+0x11c>
 800cd90:	4433      	add	r3, r6
 800cd92:	e7d3      	b.n	800cd3c <_malloc_r+0xc4>
 800cd94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd98:	d211      	bcs.n	800cdbe <_malloc_r+0x146>
 800cd9a:	08db      	lsrs	r3, r3, #3
 800cd9c:	1098      	asrs	r0, r3, #2
 800cd9e:	f04f 0c01 	mov.w	ip, #1
 800cda2:	fa0c fc00 	lsl.w	ip, ip, r0
 800cda6:	6848      	ldr	r0, [r1, #4]
 800cda8:	ea4c 0000 	orr.w	r0, ip, r0
 800cdac:	6048      	str	r0, [r1, #4]
 800cdae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cdb2:	688b      	ldr	r3, [r1, #8]
 800cdb4:	60b3      	str	r3, [r6, #8]
 800cdb6:	60f1      	str	r1, [r6, #12]
 800cdb8:	608e      	str	r6, [r1, #8]
 800cdba:	60de      	str	r6, [r3, #12]
 800cdbc:	e03b      	b.n	800ce36 <_malloc_r+0x1be>
 800cdbe:	0a58      	lsrs	r0, r3, #9
 800cdc0:	2804      	cmp	r0, #4
 800cdc2:	d802      	bhi.n	800cdca <_malloc_r+0x152>
 800cdc4:	0998      	lsrs	r0, r3, #6
 800cdc6:	3038      	adds	r0, #56	; 0x38
 800cdc8:	e015      	b.n	800cdf6 <_malloc_r+0x17e>
 800cdca:	2814      	cmp	r0, #20
 800cdcc:	d801      	bhi.n	800cdd2 <_malloc_r+0x15a>
 800cdce:	305b      	adds	r0, #91	; 0x5b
 800cdd0:	e011      	b.n	800cdf6 <_malloc_r+0x17e>
 800cdd2:	2854      	cmp	r0, #84	; 0x54
 800cdd4:	d802      	bhi.n	800cddc <_malloc_r+0x164>
 800cdd6:	0b18      	lsrs	r0, r3, #12
 800cdd8:	306e      	adds	r0, #110	; 0x6e
 800cdda:	e00c      	b.n	800cdf6 <_malloc_r+0x17e>
 800cddc:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 800cde0:	d802      	bhi.n	800cde8 <_malloc_r+0x170>
 800cde2:	0bd8      	lsrs	r0, r3, #15
 800cde4:	3077      	adds	r0, #119	; 0x77
 800cde6:	e006      	b.n	800cdf6 <_malloc_r+0x17e>
 800cde8:	f240 5154 	movw	r1, #1364	; 0x554
 800cdec:	4288      	cmp	r0, r1
 800cdee:	bf9a      	itte	ls
 800cdf0:	0c98      	lsrls	r0, r3, #18
 800cdf2:	307c      	addls	r0, #124	; 0x7c
 800cdf4:	207e      	movhi	r0, #126	; 0x7e
 800cdf6:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
 800cdfa:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800cf04 <_malloc_r+0x28c>
 800cdfe:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800ce02:	4561      	cmp	r1, ip
 800ce04:	d10d      	bne.n	800ce22 <_malloc_r+0x1aa>
 800ce06:	2301      	movs	r3, #1
 800ce08:	1080      	asrs	r0, r0, #2
 800ce0a:	fa03 f000 	lsl.w	r0, r3, r0
 800ce0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce12:	4303      	orrs	r3, r0
 800ce14:	f8c8 3004 	str.w	r3, [r8, #4]
 800ce18:	460b      	mov	r3, r1
 800ce1a:	e008      	b.n	800ce2e <_malloc_r+0x1b6>
 800ce1c:	6889      	ldr	r1, [r1, #8]
 800ce1e:	4561      	cmp	r1, ip
 800ce20:	d004      	beq.n	800ce2c <_malloc_r+0x1b4>
 800ce22:	6848      	ldr	r0, [r1, #4]
 800ce24:	f020 0003 	bic.w	r0, r0, #3
 800ce28:	4283      	cmp	r3, r0
 800ce2a:	d3f7      	bcc.n	800ce1c <_malloc_r+0x1a4>
 800ce2c:	68cb      	ldr	r3, [r1, #12]
 800ce2e:	60f3      	str	r3, [r6, #12]
 800ce30:	60b1      	str	r1, [r6, #8]
 800ce32:	609e      	str	r6, [r3, #8]
 800ce34:	60ce      	str	r6, [r1, #12]
 800ce36:	2101      	movs	r1, #1
 800ce38:	1093      	asrs	r3, r2, #2
 800ce3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce3e:	6869      	ldr	r1, [r5, #4]
 800ce40:	428b      	cmp	r3, r1
 800ce42:	d861      	bhi.n	800cf08 <_malloc_r+0x290>
 800ce44:	420b      	tst	r3, r1
 800ce46:	d106      	bne.n	800ce56 <_malloc_r+0x1de>
 800ce48:	f022 0203 	bic.w	r2, r2, #3
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	420b      	tst	r3, r1
 800ce50:	f102 0204 	add.w	r2, r2, #4
 800ce54:	d0fa      	beq.n	800ce4c <_malloc_r+0x1d4>
 800ce56:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 800ce5a:	4680      	mov	r8, r0
 800ce5c:	4694      	mov	ip, r2
 800ce5e:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ce62:	4546      	cmp	r6, r8
 800ce64:	d02d      	beq.n	800cec2 <_malloc_r+0x24a>
 800ce66:	6871      	ldr	r1, [r6, #4]
 800ce68:	f021 0903 	bic.w	r9, r1, #3
 800ce6c:	ebc4 0109 	rsb	r1, r4, r9
 800ce70:	290f      	cmp	r1, #15
 800ce72:	dd13      	ble.n	800ce9c <_malloc_r+0x224>
 800ce74:	1933      	adds	r3, r6, r4
 800ce76:	f044 0401 	orr.w	r4, r4, #1
 800ce7a:	68f2      	ldr	r2, [r6, #12]
 800ce7c:	6074      	str	r4, [r6, #4]
 800ce7e:	f856 0f08 	ldr.w	r0, [r6, #8]!
 800ce82:	60c2      	str	r2, [r0, #12]
 800ce84:	6090      	str	r0, [r2, #8]
 800ce86:	f041 0201 	orr.w	r2, r1, #1
 800ce8a:	616b      	str	r3, [r5, #20]
 800ce8c:	612b      	str	r3, [r5, #16]
 800ce8e:	f8c3 e00c 	str.w	lr, [r3, #12]
 800ce92:	f8c3 e008 	str.w	lr, [r3, #8]
 800ce96:	605a      	str	r2, [r3, #4]
 800ce98:	5059      	str	r1, [r3, r1]
 800ce9a:	e00c      	b.n	800ceb6 <_malloc_r+0x23e>
 800ce9c:	2900      	cmp	r1, #0
 800ce9e:	db0e      	blt.n	800cebe <_malloc_r+0x246>
 800cea0:	eb06 0109 	add.w	r1, r6, r9
 800cea4:	684b      	ldr	r3, [r1, #4]
 800cea6:	f043 0301 	orr.w	r3, r3, #1
 800ceaa:	604b      	str	r3, [r1, #4]
 800ceac:	68f3      	ldr	r3, [r6, #12]
 800ceae:	f856 2f08 	ldr.w	r2, [r6, #8]!
 800ceb2:	60d3      	str	r3, [r2, #12]
 800ceb4:	609a      	str	r2, [r3, #8]
 800ceb6:	4638      	mov	r0, r7
 800ceb8:	f000 f911 	bl	800d0de <__malloc_unlock>
 800cebc:	e0db      	b.n	800d076 <_malloc_r+0x3fe>
 800cebe:	68f6      	ldr	r6, [r6, #12]
 800cec0:	e7cf      	b.n	800ce62 <_malloc_r+0x1ea>
 800cec2:	f10c 0c01 	add.w	ip, ip, #1
 800cec6:	f01c 0f03 	tst.w	ip, #3
 800ceca:	f108 0808 	add.w	r8, r8, #8
 800cece:	d1c6      	bne.n	800ce5e <_malloc_r+0x1e6>
 800ced0:	0791      	lsls	r1, r2, #30
 800ced2:	d104      	bne.n	800cede <_malloc_r+0x266>
 800ced4:	686a      	ldr	r2, [r5, #4]
 800ced6:	ea22 0203 	bic.w	r2, r2, r3
 800ceda:	606a      	str	r2, [r5, #4]
 800cedc:	e006      	b.n	800ceec <_malloc_r+0x274>
 800cede:	f1a0 0108 	sub.w	r1, r0, #8
 800cee2:	6800      	ldr	r0, [r0, #0]
 800cee4:	4288      	cmp	r0, r1
 800cee6:	f102 32ff 	add.w	r2, r2, #4294967295
 800ceea:	d0f1      	beq.n	800ced0 <_malloc_r+0x258>
 800ceec:	6869      	ldr	r1, [r5, #4]
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	428b      	cmp	r3, r1
 800cef2:	d809      	bhi.n	800cf08 <_malloc_r+0x290>
 800cef4:	b143      	cbz	r3, 800cf08 <_malloc_r+0x290>
 800cef6:	4662      	mov	r2, ip
 800cef8:	420b      	tst	r3, r1
 800cefa:	d1ac      	bne.n	800ce56 <_malloc_r+0x1de>
 800cefc:	3204      	adds	r2, #4
 800cefe:	005b      	lsls	r3, r3, #1
 800cf00:	e7fa      	b.n	800cef8 <_malloc_r+0x280>
 800cf02:	bf00      	nop
 800cf04:	20000230 	.word	0x20000230
 800cf08:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800cf0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cf10:	f023 0903 	bic.w	r9, r3, #3
 800cf14:	45a1      	cmp	r9, r4
 800cf16:	d304      	bcc.n	800cf22 <_malloc_r+0x2aa>
 800cf18:	ebc4 0309 	rsb	r3, r4, r9
 800cf1c:	2b0f      	cmp	r3, #15
 800cf1e:	f300 809d 	bgt.w	800d05c <_malloc_r+0x3e4>
 800cf22:	4b57      	ldr	r3, [pc, #348]	; (800d080 <_malloc_r+0x408>)
 800cf24:	4a57      	ldr	r2, [pc, #348]	; (800d084 <_malloc_r+0x40c>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	6811      	ldr	r1, [r2, #0]
 800cf2a:	f103 0a10 	add.w	sl, r3, #16
 800cf2e:	3101      	adds	r1, #1
 800cf30:	eb08 0c09 	add.w	ip, r8, r9
 800cf34:	44a2      	add	sl, r4
 800cf36:	4b54      	ldr	r3, [pc, #336]	; (800d088 <_malloc_r+0x410>)
 800cf38:	d004      	beq.n	800cf44 <_malloc_r+0x2cc>
 800cf3a:	1e59      	subs	r1, r3, #1
 800cf3c:	448a      	add	sl, r1
 800cf3e:	4259      	negs	r1, r3
 800cf40:	ea0a 0a01 	and.w	sl, sl, r1
 800cf44:	4638      	mov	r0, r7
 800cf46:	4651      	mov	r1, sl
 800cf48:	9201      	str	r2, [sp, #4]
 800cf4a:	9302      	str	r3, [sp, #8]
 800cf4c:	f8cd c00c 	str.w	ip, [sp, #12]
 800cf50:	f000 fab4 	bl	800d4bc <_sbrk_r>
 800cf54:	1c42      	adds	r2, r0, #1
 800cf56:	aa01      	add	r2, sp, #4
 800cf58:	4606      	mov	r6, r0
 800cf5a:	e892 100c 	ldmia.w	r2, {r2, r3, ip}
 800cf5e:	d06e      	beq.n	800d03e <_malloc_r+0x3c6>
 800cf60:	4560      	cmp	r0, ip
 800cf62:	d201      	bcs.n	800cf68 <_malloc_r+0x2f0>
 800cf64:	45a8      	cmp	r8, r5
 800cf66:	d16a      	bne.n	800d03e <_malloc_r+0x3c6>
 800cf68:	4948      	ldr	r1, [pc, #288]	; (800d08c <_malloc_r+0x414>)
 800cf6a:	6808      	ldr	r0, [r1, #0]
 800cf6c:	4566      	cmp	r6, ip
 800cf6e:	eb0a 0e00 	add.w	lr, sl, r0
 800cf72:	f8c1 e000 	str.w	lr, [r1]
 800cf76:	4846      	ldr	r0, [pc, #280]	; (800d090 <_malloc_r+0x418>)
 800cf78:	468b      	mov	fp, r1
 800cf7a:	d107      	bne.n	800cf8c <_malloc_r+0x314>
 800cf7c:	4206      	tst	r6, r0
 800cf7e:	d105      	bne.n	800cf8c <_malloc_r+0x314>
 800cf80:	68ab      	ldr	r3, [r5, #8]
 800cf82:	44d1      	add	r9, sl
 800cf84:	f049 0201 	orr.w	r2, r9, #1
 800cf88:	605a      	str	r2, [r3, #4]
 800cf8a:	e04c      	b.n	800d026 <_malloc_r+0x3ae>
 800cf8c:	6812      	ldr	r2, [r2, #0]
 800cf8e:	3201      	adds	r2, #1
 800cf90:	d102      	bne.n	800cf98 <_malloc_r+0x320>
 800cf92:	4a3c      	ldr	r2, [pc, #240]	; (800d084 <_malloc_r+0x40c>)
 800cf94:	6016      	str	r6, [r2, #0]
 800cf96:	e005      	b.n	800cfa4 <_malloc_r+0x32c>
 800cf98:	ebcc 0c06 	rsb	ip, ip, r6
 800cf9c:	eb0e 020c 	add.w	r2, lr, ip
 800cfa0:	f8cb 2000 	str.w	r2, [fp]
 800cfa4:	f016 0207 	ands.w	r2, r6, #7
 800cfa8:	bf1c      	itt	ne
 800cfaa:	f1c2 0208 	rsbne	r2, r2, #8
 800cfae:	18b6      	addne	r6, r6, r2
 800cfb0:	44b2      	add	sl, r6
 800cfb2:	4413      	add	r3, r2
 800cfb4:	ea0a 0000 	and.w	r0, sl, r0
 800cfb8:	ebc0 0a03 	rsb	sl, r0, r3
 800cfbc:	4651      	mov	r1, sl
 800cfbe:	4638      	mov	r0, r7
 800cfc0:	f000 fa7c 	bl	800d4bc <_sbrk_r>
 800cfc4:	1c43      	adds	r3, r0, #1
 800cfc6:	bf04      	itt	eq
 800cfc8:	4630      	moveq	r0, r6
 800cfca:	f04f 0a00 	moveq.w	sl, #0
 800cfce:	f8db 3000 	ldr.w	r3, [fp]
 800cfd2:	60ae      	str	r6, [r5, #8]
 800cfd4:	1b80      	subs	r0, r0, r6
 800cfd6:	4450      	add	r0, sl
 800cfd8:	4453      	add	r3, sl
 800cfda:	f040 0001 	orr.w	r0, r0, #1
 800cfde:	45a8      	cmp	r8, r5
 800cfe0:	f8cb 3000 	str.w	r3, [fp]
 800cfe4:	6070      	str	r0, [r6, #4]
 800cfe6:	d01e      	beq.n	800d026 <_malloc_r+0x3ae>
 800cfe8:	f1b9 0f0f 	cmp.w	r9, #15
 800cfec:	d802      	bhi.n	800cff4 <_malloc_r+0x37c>
 800cfee:	2301      	movs	r3, #1
 800cff0:	6073      	str	r3, [r6, #4]
 800cff2:	e024      	b.n	800d03e <_malloc_r+0x3c6>
 800cff4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cff8:	f1a9 090c 	sub.w	r9, r9, #12
 800cffc:	f029 0907 	bic.w	r9, r9, #7
 800d000:	f003 0301 	and.w	r3, r3, #1
 800d004:	ea49 0303 	orr.w	r3, r9, r3
 800d008:	f8c8 3004 	str.w	r3, [r8, #4]
 800d00c:	eb08 0309 	add.w	r3, r8, r9
 800d010:	2205      	movs	r2, #5
 800d012:	f1b9 0f0f 	cmp.w	r9, #15
 800d016:	605a      	str	r2, [r3, #4]
 800d018:	609a      	str	r2, [r3, #8]
 800d01a:	d904      	bls.n	800d026 <_malloc_r+0x3ae>
 800d01c:	4638      	mov	r0, r7
 800d01e:	f108 0108 	add.w	r1, r8, #8
 800d022:	f000 fdbf 	bl	800dba4 <_free_r>
 800d026:	4a1b      	ldr	r2, [pc, #108]	; (800d094 <_malloc_r+0x41c>)
 800d028:	f8db 3000 	ldr.w	r3, [fp]
 800d02c:	6811      	ldr	r1, [r2, #0]
 800d02e:	428b      	cmp	r3, r1
 800d030:	bf88      	it	hi
 800d032:	6013      	strhi	r3, [r2, #0]
 800d034:	4a18      	ldr	r2, [pc, #96]	; (800d098 <_malloc_r+0x420>)
 800d036:	6811      	ldr	r1, [r2, #0]
 800d038:	428b      	cmp	r3, r1
 800d03a:	bf88      	it	hi
 800d03c:	6013      	strhi	r3, [r2, #0]
 800d03e:	68ab      	ldr	r3, [r5, #8]
 800d040:	685a      	ldr	r2, [r3, #4]
 800d042:	f022 0203 	bic.w	r2, r2, #3
 800d046:	42a2      	cmp	r2, r4
 800d048:	ebc4 0302 	rsb	r3, r4, r2
 800d04c:	d301      	bcc.n	800d052 <_malloc_r+0x3da>
 800d04e:	2b0f      	cmp	r3, #15
 800d050:	dc04      	bgt.n	800d05c <_malloc_r+0x3e4>
 800d052:	4638      	mov	r0, r7
 800d054:	f000 f843 	bl	800d0de <__malloc_unlock>
 800d058:	2600      	movs	r6, #0
 800d05a:	e00c      	b.n	800d076 <_malloc_r+0x3fe>
 800d05c:	68ae      	ldr	r6, [r5, #8]
 800d05e:	f044 0201 	orr.w	r2, r4, #1
 800d062:	4434      	add	r4, r6
 800d064:	f043 0301 	orr.w	r3, r3, #1
 800d068:	6072      	str	r2, [r6, #4]
 800d06a:	60ac      	str	r4, [r5, #8]
 800d06c:	6063      	str	r3, [r4, #4]
 800d06e:	4638      	mov	r0, r7
 800d070:	f000 f835 	bl	800d0de <__malloc_unlock>
 800d074:	3608      	adds	r6, #8
 800d076:	4630      	mov	r0, r6
 800d078:	b005      	add	sp, #20
 800d07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d07e:	bf00      	nop
 800d080:	200014a0 	.word	0x200014a0
 800d084:	2000063c 	.word	0x2000063c
 800d088:	00001000 	.word	0x00001000
 800d08c:	200014a4 	.word	0x200014a4
 800d090:	00000fff 	.word	0x00000fff
 800d094:	2000149c 	.word	0x2000149c
 800d098:	20001498 	.word	0x20001498

0800d09c <memcmp>:
 800d09c:	b530      	push	{r4, r5, lr}
 800d09e:	2300      	movs	r3, #0
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d008      	beq.n	800d0b6 <memcmp+0x1a>
 800d0a4:	5cc5      	ldrb	r5, [r0, r3]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	18cc      	adds	r4, r1, r3
 800d0aa:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 800d0ae:	42a5      	cmp	r5, r4
 800d0b0:	d0f6      	beq.n	800d0a0 <memcmp+0x4>
 800d0b2:	1b28      	subs	r0, r5, r4
 800d0b4:	bd30      	pop	{r4, r5, pc}
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	bd30      	pop	{r4, r5, pc}

0800d0ba <memcpy>:
 800d0ba:	b510      	push	{r4, lr}
 800d0bc:	2300      	movs	r3, #0
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d003      	beq.n	800d0ca <memcpy+0x10>
 800d0c2:	5ccc      	ldrb	r4, [r1, r3]
 800d0c4:	54c4      	strb	r4, [r0, r3]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	e7f9      	b.n	800d0be <memcpy+0x4>
 800d0ca:	bd10      	pop	{r4, pc}

0800d0cc <memset>:
 800d0cc:	4402      	add	r2, r0
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d002      	beq.n	800d0da <memset+0xe>
 800d0d4:	f803 1b01 	strb.w	r1, [r3], #1
 800d0d8:	e7fa      	b.n	800d0d0 <memset+0x4>
 800d0da:	4770      	bx	lr

0800d0dc <__malloc_lock>:
 800d0dc:	4770      	bx	lr

0800d0de <__malloc_unlock>:
 800d0de:	4770      	bx	lr

0800d0e0 <_putc_r>:
 800d0e0:	b570      	push	{r4, r5, r6, lr}
 800d0e2:	460e      	mov	r6, r1
 800d0e4:	4614      	mov	r4, r2
 800d0e6:	4605      	mov	r5, r0
 800d0e8:	b118      	cbz	r0, 800d0f2 <_putc_r+0x12>
 800d0ea:	6983      	ldr	r3, [r0, #24]
 800d0ec:	b90b      	cbnz	r3, 800d0f2 <_putc_r+0x12>
 800d0ee:	f000 fc43 	bl	800d978 <__sinit>
 800d0f2:	4b16      	ldr	r3, [pc, #88]	; (800d14c <_putc_r+0x6c>)
 800d0f4:	429c      	cmp	r4, r3
 800d0f6:	d101      	bne.n	800d0fc <_putc_r+0x1c>
 800d0f8:	686c      	ldr	r4, [r5, #4]
 800d0fa:	e008      	b.n	800d10e <_putc_r+0x2e>
 800d0fc:	4b14      	ldr	r3, [pc, #80]	; (800d150 <_putc_r+0x70>)
 800d0fe:	429c      	cmp	r4, r3
 800d100:	d101      	bne.n	800d106 <_putc_r+0x26>
 800d102:	68ac      	ldr	r4, [r5, #8]
 800d104:	e003      	b.n	800d10e <_putc_r+0x2e>
 800d106:	4b13      	ldr	r3, [pc, #76]	; (800d154 <_putc_r+0x74>)
 800d108:	429c      	cmp	r4, r3
 800d10a:	bf08      	it	eq
 800d10c:	68ec      	ldreq	r4, [r5, #12]
 800d10e:	68a3      	ldr	r3, [r4, #8]
 800d110:	3b01      	subs	r3, #1
 800d112:	2b00      	cmp	r3, #0
 800d114:	60a3      	str	r3, [r4, #8]
 800d116:	da11      	bge.n	800d13c <_putc_r+0x5c>
 800d118:	69a2      	ldr	r2, [r4, #24]
 800d11a:	4293      	cmp	r3, r2
 800d11c:	db07      	blt.n	800d12e <_putc_r+0x4e>
 800d11e:	6823      	ldr	r3, [r4, #0]
 800d120:	701e      	strb	r6, [r3, #0]
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	7819      	ldrb	r1, [r3, #0]
 800d126:	290a      	cmp	r1, #10
 800d128:	d10b      	bne.n	800d142 <_putc_r+0x62>
 800d12a:	4628      	mov	r0, r5
 800d12c:	e001      	b.n	800d132 <_putc_r+0x52>
 800d12e:	4628      	mov	r0, r5
 800d130:	4631      	mov	r1, r6
 800d132:	4622      	mov	r2, r4
 800d134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d138:	f000 ba6e 	b.w	800d618 <__swbuf_r>
 800d13c:	6823      	ldr	r3, [r4, #0]
 800d13e:	701e      	strb	r6, [r3, #0]
 800d140:	6823      	ldr	r3, [r4, #0]
 800d142:	1c5a      	adds	r2, r3, #1
 800d144:	6022      	str	r2, [r4, #0]
 800d146:	7818      	ldrb	r0, [r3, #0]
 800d148:	bd70      	pop	{r4, r5, r6, pc}
 800d14a:	bf00      	nop
 800d14c:	0800f2f4 	.word	0x0800f2f4
 800d150:	0800f314 	.word	0x0800f314
 800d154:	0800f334 	.word	0x0800f334

0800d158 <realloc>:
 800d158:	460a      	mov	r2, r1
 800d15a:	4903      	ldr	r1, [pc, #12]	; (800d168 <realloc+0x10>)
 800d15c:	4603      	mov	r3, r0
 800d15e:	6808      	ldr	r0, [r1, #0]
 800d160:	4619      	mov	r1, r3
 800d162:	f000 b803 	b.w	800d16c <_realloc_r>
 800d166:	bf00      	nop
 800d168:	2000022c 	.word	0x2000022c

0800d16c <_realloc_r>:
 800d16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d170:	4681      	mov	r9, r0
 800d172:	460c      	mov	r4, r1
 800d174:	b929      	cbnz	r1, 800d182 <_realloc_r+0x16>
 800d176:	4611      	mov	r1, r2
 800d178:	b003      	add	sp, #12
 800d17a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17e:	f7ff bd7b 	b.w	800cc78 <_malloc_r>
 800d182:	9201      	str	r2, [sp, #4]
 800d184:	f7ff ffaa 	bl	800d0dc <__malloc_lock>
 800d188:	9a01      	ldr	r2, [sp, #4]
 800d18a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800d18e:	f102 070b 	add.w	r7, r2, #11
 800d192:	2f16      	cmp	r7, #22
 800d194:	f1a4 0808 	sub.w	r8, r4, #8
 800d198:	f025 0603 	bic.w	r6, r5, #3
 800d19c:	d903      	bls.n	800d1a6 <_realloc_r+0x3a>
 800d19e:	f037 0707 	bics.w	r7, r7, #7
 800d1a2:	d501      	bpl.n	800d1a8 <_realloc_r+0x3c>
 800d1a4:	e002      	b.n	800d1ac <_realloc_r+0x40>
 800d1a6:	2710      	movs	r7, #16
 800d1a8:	4297      	cmp	r7, r2
 800d1aa:	d204      	bcs.n	800d1b6 <_realloc_r+0x4a>
 800d1ac:	230c      	movs	r3, #12
 800d1ae:	f8c9 3000 	str.w	r3, [r9]
 800d1b2:	2000      	movs	r0, #0
 800d1b4:	e17e      	b.n	800d4b4 <_realloc_r+0x348>
 800d1b6:	42be      	cmp	r6, r7
 800d1b8:	f280 8154 	bge.w	800d464 <_realloc_r+0x2f8>
 800d1bc:	49a2      	ldr	r1, [pc, #648]	; (800d448 <_realloc_r+0x2dc>)
 800d1be:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800d1c2:	eb08 0306 	add.w	r3, r8, r6
 800d1c6:	4573      	cmp	r3, lr
 800d1c8:	468b      	mov	fp, r1
 800d1ca:	6858      	ldr	r0, [r3, #4]
 800d1cc:	d005      	beq.n	800d1da <_realloc_r+0x6e>
 800d1ce:	f020 0101 	bic.w	r1, r0, #1
 800d1d2:	4419      	add	r1, r3
 800d1d4:	6849      	ldr	r1, [r1, #4]
 800d1d6:	07c9      	lsls	r1, r1, #31
 800d1d8:	d425      	bmi.n	800d226 <_realloc_r+0xba>
 800d1da:	f020 0003 	bic.w	r0, r0, #3
 800d1de:	4573      	cmp	r3, lr
 800d1e0:	eb00 0106 	add.w	r1, r0, r6
 800d1e4:	d117      	bne.n	800d216 <_realloc_r+0xaa>
 800d1e6:	f107 0c10 	add.w	ip, r7, #16
 800d1ea:	4561      	cmp	r1, ip
 800d1ec:	db1d      	blt.n	800d22a <_realloc_r+0xbe>
 800d1ee:	eb08 0507 	add.w	r5, r8, r7
 800d1f2:	1bc9      	subs	r1, r1, r7
 800d1f4:	f041 0101 	orr.w	r1, r1, #1
 800d1f8:	f8cb 5008 	str.w	r5, [fp, #8]
 800d1fc:	6069      	str	r1, [r5, #4]
 800d1fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d202:	f003 0301 	and.w	r3, r3, #1
 800d206:	431f      	orrs	r7, r3
 800d208:	4648      	mov	r0, r9
 800d20a:	f844 7c04 	str.w	r7, [r4, #-4]
 800d20e:	f7ff ff66 	bl	800d0de <__malloc_unlock>
 800d212:	4620      	mov	r0, r4
 800d214:	e14e      	b.n	800d4b4 <_realloc_r+0x348>
 800d216:	42b9      	cmp	r1, r7
 800d218:	db07      	blt.n	800d22a <_realloc_r+0xbe>
 800d21a:	68da      	ldr	r2, [r3, #12]
 800d21c:	689b      	ldr	r3, [r3, #8]
 800d21e:	460e      	mov	r6, r1
 800d220:	60da      	str	r2, [r3, #12]
 800d222:	6093      	str	r3, [r2, #8]
 800d224:	e11e      	b.n	800d464 <_realloc_r+0x2f8>
 800d226:	2000      	movs	r0, #0
 800d228:	4603      	mov	r3, r0
 800d22a:	07e9      	lsls	r1, r5, #31
 800d22c:	f100 80c9 	bmi.w	800d3c2 <_realloc_r+0x256>
 800d230:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800d234:	ebc5 0508 	rsb	r5, r5, r8
 800d238:	6869      	ldr	r1, [r5, #4]
 800d23a:	f021 0103 	bic.w	r1, r1, #3
 800d23e:	eb01 0a06 	add.w	sl, r1, r6
 800d242:	2b00      	cmp	r3, #0
 800d244:	f000 8088 	beq.w	800d358 <_realloc_r+0x1ec>
 800d248:	4573      	cmp	r3, lr
 800d24a:	d14b      	bne.n	800d2e4 <_realloc_r+0x178>
 800d24c:	eb0a 0300 	add.w	r3, sl, r0
 800d250:	f107 0110 	add.w	r1, r7, #16
 800d254:	428b      	cmp	r3, r1
 800d256:	db7f      	blt.n	800d358 <_realloc_r+0x1ec>
 800d258:	46a8      	mov	r8, r5
 800d25a:	68ea      	ldr	r2, [r5, #12]
 800d25c:	f858 1f08 	ldr.w	r1, [r8, #8]!
 800d260:	60ca      	str	r2, [r1, #12]
 800d262:	6091      	str	r1, [r2, #8]
 800d264:	1f32      	subs	r2, r6, #4
 800d266:	2a24      	cmp	r2, #36	; 0x24
 800d268:	d825      	bhi.n	800d2b6 <_realloc_r+0x14a>
 800d26a:	2a13      	cmp	r2, #19
 800d26c:	d91b      	bls.n	800d2a6 <_realloc_r+0x13a>
 800d26e:	6821      	ldr	r1, [r4, #0]
 800d270:	60a9      	str	r1, [r5, #8]
 800d272:	6861      	ldr	r1, [r4, #4]
 800d274:	60e9      	str	r1, [r5, #12]
 800d276:	2a1b      	cmp	r2, #27
 800d278:	d803      	bhi.n	800d282 <_realloc_r+0x116>
 800d27a:	f105 0210 	add.w	r2, r5, #16
 800d27e:	3408      	adds	r4, #8
 800d280:	e012      	b.n	800d2a8 <_realloc_r+0x13c>
 800d282:	68a1      	ldr	r1, [r4, #8]
 800d284:	6129      	str	r1, [r5, #16]
 800d286:	68e1      	ldr	r1, [r4, #12]
 800d288:	6169      	str	r1, [r5, #20]
 800d28a:	2a24      	cmp	r2, #36	; 0x24
 800d28c:	d003      	beq.n	800d296 <_realloc_r+0x12a>
 800d28e:	f105 0218 	add.w	r2, r5, #24
 800d292:	3410      	adds	r4, #16
 800d294:	e008      	b.n	800d2a8 <_realloc_r+0x13c>
 800d296:	6922      	ldr	r2, [r4, #16]
 800d298:	61aa      	str	r2, [r5, #24]
 800d29a:	6961      	ldr	r1, [r4, #20]
 800d29c:	61e9      	str	r1, [r5, #28]
 800d29e:	f105 0220 	add.w	r2, r5, #32
 800d2a2:	3418      	adds	r4, #24
 800d2a4:	e000      	b.n	800d2a8 <_realloc_r+0x13c>
 800d2a6:	4642      	mov	r2, r8
 800d2a8:	6821      	ldr	r1, [r4, #0]
 800d2aa:	6011      	str	r1, [r2, #0]
 800d2ac:	6861      	ldr	r1, [r4, #4]
 800d2ae:	6051      	str	r1, [r2, #4]
 800d2b0:	68a1      	ldr	r1, [r4, #8]
 800d2b2:	6091      	str	r1, [r2, #8]
 800d2b4:	e005      	b.n	800d2c2 <_realloc_r+0x156>
 800d2b6:	4640      	mov	r0, r8
 800d2b8:	4621      	mov	r1, r4
 800d2ba:	9301      	str	r3, [sp, #4]
 800d2bc:	f000 fdaa 	bl	800de14 <memmove>
 800d2c0:	9b01      	ldr	r3, [sp, #4]
 800d2c2:	19ea      	adds	r2, r5, r7
 800d2c4:	1bdb      	subs	r3, r3, r7
 800d2c6:	f043 0301 	orr.w	r3, r3, #1
 800d2ca:	f8cb 2008 	str.w	r2, [fp, #8]
 800d2ce:	6053      	str	r3, [r2, #4]
 800d2d0:	686b      	ldr	r3, [r5, #4]
 800d2d2:	f003 0301 	and.w	r3, r3, #1
 800d2d6:	431f      	orrs	r7, r3
 800d2d8:	4648      	mov	r0, r9
 800d2da:	606f      	str	r7, [r5, #4]
 800d2dc:	f7ff feff 	bl	800d0de <__malloc_unlock>
 800d2e0:	4640      	mov	r0, r8
 800d2e2:	e0e7      	b.n	800d4b4 <_realloc_r+0x348>
 800d2e4:	eb0a 0b00 	add.w	fp, sl, r0
 800d2e8:	45bb      	cmp	fp, r7
 800d2ea:	db35      	blt.n	800d358 <_realloc_r+0x1ec>
 800d2ec:	68da      	ldr	r2, [r3, #12]
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	60da      	str	r2, [r3, #12]
 800d2f4:	6093      	str	r3, [r2, #8]
 800d2f6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800d2fa:	68eb      	ldr	r3, [r5, #12]
 800d2fc:	60d3      	str	r3, [r2, #12]
 800d2fe:	609a      	str	r2, [r3, #8]
 800d300:	1f32      	subs	r2, r6, #4
 800d302:	2a24      	cmp	r2, #36	; 0x24
 800d304:	d823      	bhi.n	800d34e <_realloc_r+0x1e2>
 800d306:	2a13      	cmp	r2, #19
 800d308:	d91a      	bls.n	800d340 <_realloc_r+0x1d4>
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	60ab      	str	r3, [r5, #8]
 800d30e:	6863      	ldr	r3, [r4, #4]
 800d310:	60eb      	str	r3, [r5, #12]
 800d312:	2a1b      	cmp	r2, #27
 800d314:	d803      	bhi.n	800d31e <_realloc_r+0x1b2>
 800d316:	f105 0010 	add.w	r0, r5, #16
 800d31a:	3408      	adds	r4, #8
 800d31c:	e010      	b.n	800d340 <_realloc_r+0x1d4>
 800d31e:	68a3      	ldr	r3, [r4, #8]
 800d320:	612b      	str	r3, [r5, #16]
 800d322:	68e3      	ldr	r3, [r4, #12]
 800d324:	616b      	str	r3, [r5, #20]
 800d326:	2a24      	cmp	r2, #36	; 0x24
 800d328:	d003      	beq.n	800d332 <_realloc_r+0x1c6>
 800d32a:	f105 0018 	add.w	r0, r5, #24
 800d32e:	3410      	adds	r4, #16
 800d330:	e006      	b.n	800d340 <_realloc_r+0x1d4>
 800d332:	6923      	ldr	r3, [r4, #16]
 800d334:	61ab      	str	r3, [r5, #24]
 800d336:	6963      	ldr	r3, [r4, #20]
 800d338:	61eb      	str	r3, [r5, #28]
 800d33a:	f105 0020 	add.w	r0, r5, #32
 800d33e:	3418      	adds	r4, #24
 800d340:	6823      	ldr	r3, [r4, #0]
 800d342:	6003      	str	r3, [r0, #0]
 800d344:	6863      	ldr	r3, [r4, #4]
 800d346:	6043      	str	r3, [r0, #4]
 800d348:	68a3      	ldr	r3, [r4, #8]
 800d34a:	6083      	str	r3, [r0, #8]
 800d34c:	e002      	b.n	800d354 <_realloc_r+0x1e8>
 800d34e:	4621      	mov	r1, r4
 800d350:	f000 fd60 	bl	800de14 <memmove>
 800d354:	465e      	mov	r6, fp
 800d356:	e02e      	b.n	800d3b6 <_realloc_r+0x24a>
 800d358:	45ba      	cmp	sl, r7
 800d35a:	db32      	blt.n	800d3c2 <_realloc_r+0x256>
 800d35c:	4628      	mov	r0, r5
 800d35e:	68eb      	ldr	r3, [r5, #12]
 800d360:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800d364:	60d3      	str	r3, [r2, #12]
 800d366:	609a      	str	r2, [r3, #8]
 800d368:	1f32      	subs	r2, r6, #4
 800d36a:	2a24      	cmp	r2, #36	; 0x24
 800d36c:	d825      	bhi.n	800d3ba <_realloc_r+0x24e>
 800d36e:	2a13      	cmp	r2, #19
 800d370:	d91a      	bls.n	800d3a8 <_realloc_r+0x23c>
 800d372:	6823      	ldr	r3, [r4, #0]
 800d374:	60ab      	str	r3, [r5, #8]
 800d376:	6863      	ldr	r3, [r4, #4]
 800d378:	60eb      	str	r3, [r5, #12]
 800d37a:	2a1b      	cmp	r2, #27
 800d37c:	d803      	bhi.n	800d386 <_realloc_r+0x21a>
 800d37e:	f105 0010 	add.w	r0, r5, #16
 800d382:	3408      	adds	r4, #8
 800d384:	e010      	b.n	800d3a8 <_realloc_r+0x23c>
 800d386:	68a3      	ldr	r3, [r4, #8]
 800d388:	612b      	str	r3, [r5, #16]
 800d38a:	68e3      	ldr	r3, [r4, #12]
 800d38c:	616b      	str	r3, [r5, #20]
 800d38e:	2a24      	cmp	r2, #36	; 0x24
 800d390:	d003      	beq.n	800d39a <_realloc_r+0x22e>
 800d392:	f105 0018 	add.w	r0, r5, #24
 800d396:	3410      	adds	r4, #16
 800d398:	e006      	b.n	800d3a8 <_realloc_r+0x23c>
 800d39a:	6923      	ldr	r3, [r4, #16]
 800d39c:	61ab      	str	r3, [r5, #24]
 800d39e:	6963      	ldr	r3, [r4, #20]
 800d3a0:	61eb      	str	r3, [r5, #28]
 800d3a2:	f105 0020 	add.w	r0, r5, #32
 800d3a6:	3418      	adds	r4, #24
 800d3a8:	6823      	ldr	r3, [r4, #0]
 800d3aa:	6003      	str	r3, [r0, #0]
 800d3ac:	6863      	ldr	r3, [r4, #4]
 800d3ae:	6043      	str	r3, [r0, #4]
 800d3b0:	68a3      	ldr	r3, [r4, #8]
 800d3b2:	6083      	str	r3, [r0, #8]
 800d3b4:	4656      	mov	r6, sl
 800d3b6:	46a8      	mov	r8, r5
 800d3b8:	e054      	b.n	800d464 <_realloc_r+0x2f8>
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	f000 fd2a 	bl	800de14 <memmove>
 800d3c0:	e7f8      	b.n	800d3b4 <_realloc_r+0x248>
 800d3c2:	4648      	mov	r0, r9
 800d3c4:	4611      	mov	r1, r2
 800d3c6:	f7ff fc57 	bl	800cc78 <_malloc_r>
 800d3ca:	4605      	mov	r5, r0
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d044      	beq.n	800d45a <_realloc_r+0x2ee>
 800d3d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d3d4:	f023 0301 	bic.w	r3, r3, #1
 800d3d8:	f1a0 0208 	sub.w	r2, r0, #8
 800d3dc:	4443      	add	r3, r8
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d105      	bne.n	800d3ee <_realloc_r+0x282>
 800d3e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d3e6:	f023 0303 	bic.w	r3, r3, #3
 800d3ea:	441e      	add	r6, r3
 800d3ec:	e03a      	b.n	800d464 <_realloc_r+0x2f8>
 800d3ee:	1f32      	subs	r2, r6, #4
 800d3f0:	2a24      	cmp	r2, #36	; 0x24
 800d3f2:	d82b      	bhi.n	800d44c <_realloc_r+0x2e0>
 800d3f4:	2a13      	cmp	r2, #19
 800d3f6:	d91e      	bls.n	800d436 <_realloc_r+0x2ca>
 800d3f8:	6823      	ldr	r3, [r4, #0]
 800d3fa:	6003      	str	r3, [r0, #0]
 800d3fc:	6863      	ldr	r3, [r4, #4]
 800d3fe:	6043      	str	r3, [r0, #4]
 800d400:	2a1b      	cmp	r2, #27
 800d402:	d804      	bhi.n	800d40e <_realloc_r+0x2a2>
 800d404:	f100 0308 	add.w	r3, r0, #8
 800d408:	f104 0208 	add.w	r2, r4, #8
 800d40c:	e015      	b.n	800d43a <_realloc_r+0x2ce>
 800d40e:	68a3      	ldr	r3, [r4, #8]
 800d410:	6083      	str	r3, [r0, #8]
 800d412:	68e3      	ldr	r3, [r4, #12]
 800d414:	60c3      	str	r3, [r0, #12]
 800d416:	2a24      	cmp	r2, #36	; 0x24
 800d418:	d004      	beq.n	800d424 <_realloc_r+0x2b8>
 800d41a:	f100 0310 	add.w	r3, r0, #16
 800d41e:	f104 0210 	add.w	r2, r4, #16
 800d422:	e00a      	b.n	800d43a <_realloc_r+0x2ce>
 800d424:	6923      	ldr	r3, [r4, #16]
 800d426:	6103      	str	r3, [r0, #16]
 800d428:	6961      	ldr	r1, [r4, #20]
 800d42a:	6141      	str	r1, [r0, #20]
 800d42c:	f100 0318 	add.w	r3, r0, #24
 800d430:	f104 0218 	add.w	r2, r4, #24
 800d434:	e001      	b.n	800d43a <_realloc_r+0x2ce>
 800d436:	4603      	mov	r3, r0
 800d438:	4622      	mov	r2, r4
 800d43a:	6811      	ldr	r1, [r2, #0]
 800d43c:	6019      	str	r1, [r3, #0]
 800d43e:	6851      	ldr	r1, [r2, #4]
 800d440:	6059      	str	r1, [r3, #4]
 800d442:	6892      	ldr	r2, [r2, #8]
 800d444:	609a      	str	r2, [r3, #8]
 800d446:	e004      	b.n	800d452 <_realloc_r+0x2e6>
 800d448:	20000230 	.word	0x20000230
 800d44c:	4621      	mov	r1, r4
 800d44e:	f000 fce1 	bl	800de14 <memmove>
 800d452:	4648      	mov	r0, r9
 800d454:	4621      	mov	r1, r4
 800d456:	f000 fba5 	bl	800dba4 <_free_r>
 800d45a:	4648      	mov	r0, r9
 800d45c:	f7ff fe3f 	bl	800d0de <__malloc_unlock>
 800d460:	4628      	mov	r0, r5
 800d462:	e027      	b.n	800d4b4 <_realloc_r+0x348>
 800d464:	1bf3      	subs	r3, r6, r7
 800d466:	2b0f      	cmp	r3, #15
 800d468:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d46c:	d913      	bls.n	800d496 <_realloc_r+0x32a>
 800d46e:	eb08 0107 	add.w	r1, r8, r7
 800d472:	f002 0201 	and.w	r2, r2, #1
 800d476:	4317      	orrs	r7, r2
 800d478:	f043 0201 	orr.w	r2, r3, #1
 800d47c:	440b      	add	r3, r1
 800d47e:	f8c8 7004 	str.w	r7, [r8, #4]
 800d482:	604a      	str	r2, [r1, #4]
 800d484:	685a      	ldr	r2, [r3, #4]
 800d486:	f042 0201 	orr.w	r2, r2, #1
 800d48a:	605a      	str	r2, [r3, #4]
 800d48c:	4648      	mov	r0, r9
 800d48e:	3108      	adds	r1, #8
 800d490:	f000 fb88 	bl	800dba4 <_free_r>
 800d494:	e009      	b.n	800d4aa <_realloc_r+0x33e>
 800d496:	f002 0201 	and.w	r2, r2, #1
 800d49a:	4332      	orrs	r2, r6
 800d49c:	4446      	add	r6, r8
 800d49e:	f8c8 2004 	str.w	r2, [r8, #4]
 800d4a2:	6873      	ldr	r3, [r6, #4]
 800d4a4:	f043 0301 	orr.w	r3, r3, #1
 800d4a8:	6073      	str	r3, [r6, #4]
 800d4aa:	4648      	mov	r0, r9
 800d4ac:	f7ff fe17 	bl	800d0de <__malloc_unlock>
 800d4b0:	f108 0008 	add.w	r0, r8, #8
 800d4b4:	b003      	add	sp, #12
 800d4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ba:	bf00      	nop

0800d4bc <_sbrk_r>:
 800d4bc:	b538      	push	{r3, r4, r5, lr}
 800d4be:	4c06      	ldr	r4, [pc, #24]	; (800d4d8 <_sbrk_r+0x1c>)
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	4605      	mov	r5, r0
 800d4c4:	4608      	mov	r0, r1
 800d4c6:	6023      	str	r3, [r4, #0]
 800d4c8:	f000 f87e 	bl	800d5c8 <_sbrk>
 800d4cc:	1c43      	adds	r3, r0, #1
 800d4ce:	d102      	bne.n	800d4d6 <_sbrk_r+0x1a>
 800d4d0:	6823      	ldr	r3, [r4, #0]
 800d4d2:	b103      	cbz	r3, 800d4d6 <_sbrk_r+0x1a>
 800d4d4:	602b      	str	r3, [r5, #0]
 800d4d6:	bd38      	pop	{r3, r4, r5, pc}
 800d4d8:	20001ea4 	.word	0x20001ea4

0800d4dc <_raise_r>:
 800d4dc:	291f      	cmp	r1, #31
 800d4de:	b538      	push	{r3, r4, r5, lr}
 800d4e0:	4605      	mov	r5, r0
 800d4e2:	460c      	mov	r4, r1
 800d4e4:	d904      	bls.n	800d4f0 <_raise_r+0x14>
 800d4e6:	2316      	movs	r3, #22
 800d4e8:	6003      	str	r3, [r0, #0]
 800d4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ee:	bd38      	pop	{r3, r4, r5, pc}
 800d4f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d4f2:	b112      	cbz	r2, 800d4fa <_raise_r+0x1e>
 800d4f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4f8:	b94b      	cbnz	r3, 800d50e <_raise_r+0x32>
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	f000 f830 	bl	800d560 <_getpid_r>
 800d500:	4622      	mov	r2, r4
 800d502:	4601      	mov	r1, r0
 800d504:	4628      	mov	r0, r5
 800d506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d50a:	f000 b817 	b.w	800d53c <_kill_r>
 800d50e:	2b01      	cmp	r3, #1
 800d510:	d00a      	beq.n	800d528 <_raise_r+0x4c>
 800d512:	1c59      	adds	r1, r3, #1
 800d514:	d103      	bne.n	800d51e <_raise_r+0x42>
 800d516:	2316      	movs	r3, #22
 800d518:	6003      	str	r3, [r0, #0]
 800d51a:	2001      	movs	r0, #1
 800d51c:	bd38      	pop	{r3, r4, r5, pc}
 800d51e:	2500      	movs	r5, #0
 800d520:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 800d524:	4620      	mov	r0, r4
 800d526:	4798      	blx	r3
 800d528:	2000      	movs	r0, #0
 800d52a:	bd38      	pop	{r3, r4, r5, pc}

0800d52c <raise>:
 800d52c:	4b02      	ldr	r3, [pc, #8]	; (800d538 <raise+0xc>)
 800d52e:	4601      	mov	r1, r0
 800d530:	6818      	ldr	r0, [r3, #0]
 800d532:	f7ff bfd3 	b.w	800d4dc <_raise_r>
 800d536:	bf00      	nop
 800d538:	2000022c 	.word	0x2000022c

0800d53c <_kill_r>:
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	4c07      	ldr	r4, [pc, #28]	; (800d55c <_kill_r+0x20>)
 800d540:	2300      	movs	r3, #0
 800d542:	4605      	mov	r5, r0
 800d544:	4608      	mov	r0, r1
 800d546:	4611      	mov	r1, r2
 800d548:	6023      	str	r3, [r4, #0]
 800d54a:	f000 f82d 	bl	800d5a8 <_kill>
 800d54e:	1c43      	adds	r3, r0, #1
 800d550:	d102      	bne.n	800d558 <_kill_r+0x1c>
 800d552:	6823      	ldr	r3, [r4, #0]
 800d554:	b103      	cbz	r3, 800d558 <_kill_r+0x1c>
 800d556:	602b      	str	r3, [r5, #0]
 800d558:	bd38      	pop	{r3, r4, r5, pc}
 800d55a:	bf00      	nop
 800d55c:	20001ea4 	.word	0x20001ea4

0800d560 <_getpid_r>:
 800d560:	f000 b81f 	b.w	800d5a2 <_getpid>

0800d564 <strlen>:
 800d564:	4603      	mov	r3, r0
 800d566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d56a:	2a00      	cmp	r2, #0
 800d56c:	d1fb      	bne.n	800d566 <strlen+0x2>
 800d56e:	1a18      	subs	r0, r3, r0
 800d570:	3801      	subs	r0, #1
 800d572:	4770      	bx	lr

0800d574 <strncmp>:
 800d574:	b570      	push	{r4, r5, r6, lr}
 800d576:	b192      	cbz	r2, 800d59e <strncmp+0x2a>
 800d578:	460b      	mov	r3, r1
 800d57a:	4605      	mov	r5, r0
 800d57c:	781c      	ldrb	r4, [r3, #0]
 800d57e:	f810 6b01 	ldrb.w	r6, [r0], #1
 800d582:	42b4      	cmp	r4, r6
 800d584:	f101 0101 	add.w	r1, r1, #1
 800d588:	d101      	bne.n	800d58e <strncmp+0x1a>
 800d58a:	2a01      	cmp	r2, #1
 800d58c:	d103      	bne.n	800d596 <strncmp+0x22>
 800d58e:	7828      	ldrb	r0, [r5, #0]
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	1ac0      	subs	r0, r0, r3
 800d594:	bd70      	pop	{r4, r5, r6, pc}
 800d596:	3a01      	subs	r2, #1
 800d598:	2c00      	cmp	r4, #0
 800d59a:	d1ed      	bne.n	800d578 <strncmp+0x4>
 800d59c:	e7f7      	b.n	800d58e <strncmp+0x1a>
 800d59e:	4610      	mov	r0, r2
 800d5a0:	bd70      	pop	{r4, r5, r6, pc}

0800d5a2 <_getpid>:
 800d5a2:	2001      	movs	r0, #1
 800d5a4:	4770      	bx	lr
	...

0800d5a8 <_kill>:
 800d5a8:	4b02      	ldr	r3, [pc, #8]	; (800d5b4 <_kill+0xc>)
 800d5aa:	2216      	movs	r2, #22
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b2:	4770      	bx	lr
 800d5b4:	20001ea4 	.word	0x20001ea4

0800d5b8 <_exit>:
 800d5b8:	4b01      	ldr	r3, [pc, #4]	; (800d5c0 <_exit+0x8>)
 800d5ba:	2216      	movs	r2, #22
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	e7fe      	b.n	800d5be <_exit+0x6>
 800d5c0:	20001ea4 	.word	0x20001ea4

0800d5c4 <_write>:
 800d5c4:	4610      	mov	r0, r2
 800d5c6:	4770      	bx	lr

0800d5c8 <_sbrk>:
 800d5c8:	4b09      	ldr	r3, [pc, #36]	; (800d5f0 <_sbrk+0x28>)
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	b90a      	cbnz	r2, 800d5d2 <_sbrk+0xa>
 800d5ce:	4a09      	ldr	r2, [pc, #36]	; (800d5f4 <_sbrk+0x2c>)
 800d5d0:	601a      	str	r2, [r3, #0]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	466a      	mov	r2, sp
 800d5d6:	4418      	add	r0, r3
 800d5d8:	4290      	cmp	r0, r2
 800d5da:	d905      	bls.n	800d5e8 <_sbrk+0x20>
 800d5dc:	4b06      	ldr	r3, [pc, #24]	; (800d5f8 <_sbrk+0x30>)
 800d5de:	220c      	movs	r2, #12
 800d5e0:	601a      	str	r2, [r3, #0]
 800d5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e6:	4770      	bx	lr
 800d5e8:	4a01      	ldr	r2, [pc, #4]	; (800d5f0 <_sbrk+0x28>)
 800d5ea:	6010      	str	r0, [r2, #0]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	4770      	bx	lr
 800d5f0:	200014cc 	.word	0x200014cc
 800d5f4:	20001ea8 	.word	0x20001ea8
 800d5f8:	20001ea4 	.word	0x20001ea4

0800d5fc <_close>:
 800d5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d600:	4770      	bx	lr

0800d602 <_fstat>:
 800d602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d606:	604b      	str	r3, [r1, #4]
 800d608:	2000      	movs	r0, #0
 800d60a:	4770      	bx	lr

0800d60c <_isatty>:
 800d60c:	2001      	movs	r0, #1
 800d60e:	4770      	bx	lr

0800d610 <_lseek>:
 800d610:	2000      	movs	r0, #0
 800d612:	4770      	bx	lr

0800d614 <_read>:
 800d614:	2000      	movs	r0, #0
 800d616:	4770      	bx	lr

0800d618 <__swbuf_r>:
 800d618:	b570      	push	{r4, r5, r6, lr}
 800d61a:	460e      	mov	r6, r1
 800d61c:	4614      	mov	r4, r2
 800d61e:	4605      	mov	r5, r0
 800d620:	b118      	cbz	r0, 800d62a <__swbuf_r+0x12>
 800d622:	6983      	ldr	r3, [r0, #24]
 800d624:	b90b      	cbnz	r3, 800d62a <__swbuf_r+0x12>
 800d626:	f000 f9a7 	bl	800d978 <__sinit>
 800d62a:	4b27      	ldr	r3, [pc, #156]	; (800d6c8 <__swbuf_r+0xb0>)
 800d62c:	429c      	cmp	r4, r3
 800d62e:	d101      	bne.n	800d634 <__swbuf_r+0x1c>
 800d630:	686c      	ldr	r4, [r5, #4]
 800d632:	e008      	b.n	800d646 <__swbuf_r+0x2e>
 800d634:	4b25      	ldr	r3, [pc, #148]	; (800d6cc <__swbuf_r+0xb4>)
 800d636:	429c      	cmp	r4, r3
 800d638:	d101      	bne.n	800d63e <__swbuf_r+0x26>
 800d63a:	68ac      	ldr	r4, [r5, #8]
 800d63c:	e003      	b.n	800d646 <__swbuf_r+0x2e>
 800d63e:	4b24      	ldr	r3, [pc, #144]	; (800d6d0 <__swbuf_r+0xb8>)
 800d640:	429c      	cmp	r4, r3
 800d642:	bf08      	it	eq
 800d644:	68ec      	ldreq	r4, [r5, #12]
 800d646:	69a3      	ldr	r3, [r4, #24]
 800d648:	60a3      	str	r3, [r4, #8]
 800d64a:	89a3      	ldrh	r3, [r4, #12]
 800d64c:	0719      	lsls	r1, r3, #28
 800d64e:	d50d      	bpl.n	800d66c <__swbuf_r+0x54>
 800d650:	6923      	ldr	r3, [r4, #16]
 800d652:	b15b      	cbz	r3, 800d66c <__swbuf_r+0x54>
 800d654:	89a3      	ldrh	r3, [r4, #12]
 800d656:	049a      	lsls	r2, r3, #18
 800d658:	b2f6      	uxtb	r6, r6
 800d65a:	d410      	bmi.n	800d67e <__swbuf_r+0x66>
 800d65c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d660:	81a3      	strh	r3, [r4, #12]
 800d662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d664:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d668:	6663      	str	r3, [r4, #100]	; 0x64
 800d66a:	e008      	b.n	800d67e <__swbuf_r+0x66>
 800d66c:	4628      	mov	r0, r5
 800d66e:	4621      	mov	r1, r4
 800d670:	f000 f842 	bl	800d6f8 <__swsetup_r>
 800d674:	2800      	cmp	r0, #0
 800d676:	d0ed      	beq.n	800d654 <__swbuf_r+0x3c>
 800d678:	f04f 30ff 	mov.w	r0, #4294967295
 800d67c:	bd70      	pop	{r4, r5, r6, pc}
 800d67e:	6923      	ldr	r3, [r4, #16]
 800d680:	6820      	ldr	r0, [r4, #0]
 800d682:	1ac0      	subs	r0, r0, r3
 800d684:	6963      	ldr	r3, [r4, #20]
 800d686:	4298      	cmp	r0, r3
 800d688:	db05      	blt.n	800d696 <__swbuf_r+0x7e>
 800d68a:	4628      	mov	r0, r5
 800d68c:	4621      	mov	r1, r4
 800d68e:	f000 f92d 	bl	800d8ec <_fflush_r>
 800d692:	2800      	cmp	r0, #0
 800d694:	d1f0      	bne.n	800d678 <__swbuf_r+0x60>
 800d696:	68a3      	ldr	r3, [r4, #8]
 800d698:	3b01      	subs	r3, #1
 800d69a:	60a3      	str	r3, [r4, #8]
 800d69c:	6823      	ldr	r3, [r4, #0]
 800d69e:	1c5a      	adds	r2, r3, #1
 800d6a0:	6022      	str	r2, [r4, #0]
 800d6a2:	701e      	strb	r6, [r3, #0]
 800d6a4:	6963      	ldr	r3, [r4, #20]
 800d6a6:	3001      	adds	r0, #1
 800d6a8:	4298      	cmp	r0, r3
 800d6aa:	d004      	beq.n	800d6b6 <__swbuf_r+0x9e>
 800d6ac:	89a3      	ldrh	r3, [r4, #12]
 800d6ae:	07db      	lsls	r3, r3, #31
 800d6b0:	d507      	bpl.n	800d6c2 <__swbuf_r+0xaa>
 800d6b2:	2e0a      	cmp	r6, #10
 800d6b4:	d105      	bne.n	800d6c2 <__swbuf_r+0xaa>
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	f000 f917 	bl	800d8ec <_fflush_r>
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	d1da      	bne.n	800d678 <__swbuf_r+0x60>
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	bd70      	pop	{r4, r5, r6, pc}
 800d6c6:	bf00      	nop
 800d6c8:	0800f2f4 	.word	0x0800f2f4
 800d6cc:	0800f314 	.word	0x0800f314
 800d6d0:	0800f334 	.word	0x0800f334

0800d6d4 <_write_r>:
 800d6d4:	b538      	push	{r3, r4, r5, lr}
 800d6d6:	4c07      	ldr	r4, [pc, #28]	; (800d6f4 <_write_r+0x20>)
 800d6d8:	4605      	mov	r5, r0
 800d6da:	2000      	movs	r0, #0
 800d6dc:	6020      	str	r0, [r4, #0]
 800d6de:	4608      	mov	r0, r1
 800d6e0:	4611      	mov	r1, r2
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	f7ff ff6e 	bl	800d5c4 <_write>
 800d6e8:	1c43      	adds	r3, r0, #1
 800d6ea:	d102      	bne.n	800d6f2 <_write_r+0x1e>
 800d6ec:	6823      	ldr	r3, [r4, #0]
 800d6ee:	b103      	cbz	r3, 800d6f2 <_write_r+0x1e>
 800d6f0:	602b      	str	r3, [r5, #0]
 800d6f2:	bd38      	pop	{r3, r4, r5, pc}
 800d6f4:	20001ea4 	.word	0x20001ea4

0800d6f8 <__swsetup_r>:
 800d6f8:	4b32      	ldr	r3, [pc, #200]	; (800d7c4 <__swsetup_r+0xcc>)
 800d6fa:	b570      	push	{r4, r5, r6, lr}
 800d6fc:	681d      	ldr	r5, [r3, #0]
 800d6fe:	4606      	mov	r6, r0
 800d700:	460c      	mov	r4, r1
 800d702:	b125      	cbz	r5, 800d70e <__swsetup_r+0x16>
 800d704:	69ab      	ldr	r3, [r5, #24]
 800d706:	b913      	cbnz	r3, 800d70e <__swsetup_r+0x16>
 800d708:	4628      	mov	r0, r5
 800d70a:	f000 f935 	bl	800d978 <__sinit>
 800d70e:	4b2e      	ldr	r3, [pc, #184]	; (800d7c8 <__swsetup_r+0xd0>)
 800d710:	429c      	cmp	r4, r3
 800d712:	d101      	bne.n	800d718 <__swsetup_r+0x20>
 800d714:	686c      	ldr	r4, [r5, #4]
 800d716:	e008      	b.n	800d72a <__swsetup_r+0x32>
 800d718:	4b2c      	ldr	r3, [pc, #176]	; (800d7cc <__swsetup_r+0xd4>)
 800d71a:	429c      	cmp	r4, r3
 800d71c:	d101      	bne.n	800d722 <__swsetup_r+0x2a>
 800d71e:	68ac      	ldr	r4, [r5, #8]
 800d720:	e003      	b.n	800d72a <__swsetup_r+0x32>
 800d722:	4b2b      	ldr	r3, [pc, #172]	; (800d7d0 <__swsetup_r+0xd8>)
 800d724:	429c      	cmp	r4, r3
 800d726:	bf08      	it	eq
 800d728:	68ec      	ldreq	r4, [r5, #12]
 800d72a:	89a2      	ldrh	r2, [r4, #12]
 800d72c:	b293      	uxth	r3, r2
 800d72e:	0719      	lsls	r1, r3, #28
 800d730:	d420      	bmi.n	800d774 <__swsetup_r+0x7c>
 800d732:	06dd      	lsls	r5, r3, #27
 800d734:	d405      	bmi.n	800d742 <__swsetup_r+0x4a>
 800d736:	2309      	movs	r3, #9
 800d738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d73c:	6033      	str	r3, [r6, #0]
 800d73e:	81a2      	strh	r2, [r4, #12]
 800d740:	e03b      	b.n	800d7ba <__swsetup_r+0xc2>
 800d742:	0758      	lsls	r0, r3, #29
 800d744:	d512      	bpl.n	800d76c <__swsetup_r+0x74>
 800d746:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d748:	b141      	cbz	r1, 800d75c <__swsetup_r+0x64>
 800d74a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d74e:	4299      	cmp	r1, r3
 800d750:	d002      	beq.n	800d758 <__swsetup_r+0x60>
 800d752:	4630      	mov	r0, r6
 800d754:	f000 fa26 	bl	800dba4 <_free_r>
 800d758:	2300      	movs	r3, #0
 800d75a:	6363      	str	r3, [r4, #52]	; 0x34
 800d75c:	89a3      	ldrh	r3, [r4, #12]
 800d75e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d762:	81a3      	strh	r3, [r4, #12]
 800d764:	2300      	movs	r3, #0
 800d766:	6063      	str	r3, [r4, #4]
 800d768:	6923      	ldr	r3, [r4, #16]
 800d76a:	6023      	str	r3, [r4, #0]
 800d76c:	89a3      	ldrh	r3, [r4, #12]
 800d76e:	f043 0308 	orr.w	r3, r3, #8
 800d772:	81a3      	strh	r3, [r4, #12]
 800d774:	6923      	ldr	r3, [r4, #16]
 800d776:	b94b      	cbnz	r3, 800d78c <__swsetup_r+0x94>
 800d778:	89a3      	ldrh	r3, [r4, #12]
 800d77a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d77e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d782:	d003      	beq.n	800d78c <__swsetup_r+0x94>
 800d784:	4630      	mov	r0, r6
 800d786:	4621      	mov	r1, r4
 800d788:	f000 fae0 	bl	800dd4c <__smakebuf_r>
 800d78c:	89a3      	ldrh	r3, [r4, #12]
 800d78e:	f013 0201 	ands.w	r2, r3, #1
 800d792:	d005      	beq.n	800d7a0 <__swsetup_r+0xa8>
 800d794:	2200      	movs	r2, #0
 800d796:	60a2      	str	r2, [r4, #8]
 800d798:	6962      	ldr	r2, [r4, #20]
 800d79a:	4252      	negs	r2, r2
 800d79c:	61a2      	str	r2, [r4, #24]
 800d79e:	e003      	b.n	800d7a8 <__swsetup_r+0xb0>
 800d7a0:	0799      	lsls	r1, r3, #30
 800d7a2:	bf58      	it	pl
 800d7a4:	6962      	ldrpl	r2, [r4, #20]
 800d7a6:	60a2      	str	r2, [r4, #8]
 800d7a8:	6922      	ldr	r2, [r4, #16]
 800d7aa:	b94a      	cbnz	r2, 800d7c0 <__swsetup_r+0xc8>
 800d7ac:	f003 0080 	and.w	r0, r3, #128	; 0x80
 800d7b0:	b280      	uxth	r0, r0
 800d7b2:	b130      	cbz	r0, 800d7c2 <__swsetup_r+0xca>
 800d7b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7b8:	81a3      	strh	r3, [r4, #12]
 800d7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d7be:	bd70      	pop	{r4, r5, r6, pc}
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	bd70      	pop	{r4, r5, r6, pc}
 800d7c4:	2000022c 	.word	0x2000022c
 800d7c8:	0800f2f4 	.word	0x0800f2f4
 800d7cc:	0800f314 	.word	0x0800f314
 800d7d0:	0800f334 	.word	0x0800f334

0800d7d4 <__sflush_r>:
 800d7d4:	898a      	ldrh	r2, [r1, #12]
 800d7d6:	b293      	uxth	r3, r2
 800d7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7dc:	4605      	mov	r5, r0
 800d7de:	0718      	lsls	r0, r3, #28
 800d7e0:	460c      	mov	r4, r1
 800d7e2:	d45e      	bmi.n	800d8a2 <__sflush_r+0xce>
 800d7e4:	684b      	ldr	r3, [r1, #4]
 800d7e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	818a      	strh	r2, [r1, #12]
 800d7ee:	dc02      	bgt.n	800d7f6 <__sflush_r+0x22>
 800d7f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	dd18      	ble.n	800d828 <__sflush_r+0x54>
 800d7f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7f8:	b1b6      	cbz	r6, 800d828 <__sflush_r+0x54>
 800d7fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800d7fe:	2300      	movs	r3, #0
 800d800:	b292      	uxth	r2, r2
 800d802:	682f      	ldr	r7, [r5, #0]
 800d804:	602b      	str	r3, [r5, #0]
 800d806:	b10a      	cbz	r2, 800d80c <__sflush_r+0x38>
 800d808:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d80a:	e010      	b.n	800d82e <__sflush_r+0x5a>
 800d80c:	6a21      	ldr	r1, [r4, #32]
 800d80e:	4628      	mov	r0, r5
 800d810:	2301      	movs	r3, #1
 800d812:	47b0      	blx	r6
 800d814:	1c41      	adds	r1, r0, #1
 800d816:	4602      	mov	r2, r0
 800d818:	d109      	bne.n	800d82e <__sflush_r+0x5a>
 800d81a:	682b      	ldr	r3, [r5, #0]
 800d81c:	b13b      	cbz	r3, 800d82e <__sflush_r+0x5a>
 800d81e:	2b1d      	cmp	r3, #29
 800d820:	d001      	beq.n	800d826 <__sflush_r+0x52>
 800d822:	2b16      	cmp	r3, #22
 800d824:	d14b      	bne.n	800d8be <__sflush_r+0xea>
 800d826:	602f      	str	r7, [r5, #0]
 800d828:	2000      	movs	r0, #0
 800d82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d82e:	89a3      	ldrh	r3, [r4, #12]
 800d830:	075b      	lsls	r3, r3, #29
 800d832:	d505      	bpl.n	800d840 <__sflush_r+0x6c>
 800d834:	6863      	ldr	r3, [r4, #4]
 800d836:	1ad2      	subs	r2, r2, r3
 800d838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d83a:	b10b      	cbz	r3, 800d840 <__sflush_r+0x6c>
 800d83c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d83e:	1ad2      	subs	r2, r2, r3
 800d840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d842:	6a21      	ldr	r1, [r4, #32]
 800d844:	4628      	mov	r0, r5
 800d846:	2300      	movs	r3, #0
 800d848:	47b0      	blx	r6
 800d84a:	1c46      	adds	r6, r0, #1
 800d84c:	89a2      	ldrh	r2, [r4, #12]
 800d84e:	d105      	bne.n	800d85c <__sflush_r+0x88>
 800d850:	682b      	ldr	r3, [r5, #0]
 800d852:	b11b      	cbz	r3, 800d85c <__sflush_r+0x88>
 800d854:	2b1d      	cmp	r3, #29
 800d856:	d001      	beq.n	800d85c <__sflush_r+0x88>
 800d858:	2b16      	cmp	r3, #22
 800d85a:	d11d      	bne.n	800d898 <__sflush_r+0xc4>
 800d85c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d860:	b292      	uxth	r2, r2
 800d862:	2300      	movs	r3, #0
 800d864:	6063      	str	r3, [r4, #4]
 800d866:	04d1      	lsls	r1, r2, #19
 800d868:	6923      	ldr	r3, [r4, #16]
 800d86a:	81a2      	strh	r2, [r4, #12]
 800d86c:	6023      	str	r3, [r4, #0]
 800d86e:	d504      	bpl.n	800d87a <__sflush_r+0xa6>
 800d870:	1c42      	adds	r2, r0, #1
 800d872:	d101      	bne.n	800d878 <__sflush_r+0xa4>
 800d874:	682b      	ldr	r3, [r5, #0]
 800d876:	b903      	cbnz	r3, 800d87a <__sflush_r+0xa6>
 800d878:	6560      	str	r0, [r4, #84]	; 0x54
 800d87a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d87c:	602f      	str	r7, [r5, #0]
 800d87e:	2900      	cmp	r1, #0
 800d880:	d0d2      	beq.n	800d828 <__sflush_r+0x54>
 800d882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d886:	4299      	cmp	r1, r3
 800d888:	d002      	beq.n	800d890 <__sflush_r+0xbc>
 800d88a:	4628      	mov	r0, r5
 800d88c:	f000 f98a 	bl	800dba4 <_free_r>
 800d890:	2000      	movs	r0, #0
 800d892:	6360      	str	r0, [r4, #52]	; 0x34
 800d894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d89c:	81a2      	strh	r2, [r4, #12]
 800d89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8a2:	690e      	ldr	r6, [r1, #16]
 800d8a4:	2e00      	cmp	r6, #0
 800d8a6:	d0bf      	beq.n	800d828 <__sflush_r+0x54>
 800d8a8:	079b      	lsls	r3, r3, #30
 800d8aa:	680a      	ldr	r2, [r1, #0]
 800d8ac:	bf08      	it	eq
 800d8ae:	694b      	ldreq	r3, [r1, #20]
 800d8b0:	600e      	str	r6, [r1, #0]
 800d8b2:	bf18      	it	ne
 800d8b4:	2300      	movne	r3, #0
 800d8b6:	ebc6 0802 	rsb	r8, r6, r2
 800d8ba:	608b      	str	r3, [r1, #8]
 800d8bc:	e012      	b.n	800d8e4 <__sflush_r+0x110>
 800d8be:	89a3      	ldrh	r3, [r4, #12]
 800d8c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8c4:	81a3      	strh	r3, [r4, #12]
 800d8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ce:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800d8d0:	6a21      	ldr	r1, [r4, #32]
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	4632      	mov	r2, r6
 800d8d6:	4643      	mov	r3, r8
 800d8d8:	47b8      	blx	r7
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	ddef      	ble.n	800d8be <__sflush_r+0xea>
 800d8de:	4406      	add	r6, r0
 800d8e0:	ebc0 0808 	rsb	r8, r0, r8
 800d8e4:	f1b8 0f00 	cmp.w	r8, #0
 800d8e8:	dcf1      	bgt.n	800d8ce <__sflush_r+0xfa>
 800d8ea:	e79d      	b.n	800d828 <__sflush_r+0x54>

0800d8ec <_fflush_r>:
 800d8ec:	b538      	push	{r3, r4, r5, lr}
 800d8ee:	690b      	ldr	r3, [r1, #16]
 800d8f0:	4605      	mov	r5, r0
 800d8f2:	460c      	mov	r4, r1
 800d8f4:	b1db      	cbz	r3, 800d92e <_fflush_r+0x42>
 800d8f6:	b118      	cbz	r0, 800d900 <_fflush_r+0x14>
 800d8f8:	6983      	ldr	r3, [r0, #24]
 800d8fa:	b90b      	cbnz	r3, 800d900 <_fflush_r+0x14>
 800d8fc:	f000 f83c 	bl	800d978 <__sinit>
 800d900:	4b0c      	ldr	r3, [pc, #48]	; (800d934 <_fflush_r+0x48>)
 800d902:	429c      	cmp	r4, r3
 800d904:	d101      	bne.n	800d90a <_fflush_r+0x1e>
 800d906:	686c      	ldr	r4, [r5, #4]
 800d908:	e008      	b.n	800d91c <_fflush_r+0x30>
 800d90a:	4b0b      	ldr	r3, [pc, #44]	; (800d938 <_fflush_r+0x4c>)
 800d90c:	429c      	cmp	r4, r3
 800d90e:	d101      	bne.n	800d914 <_fflush_r+0x28>
 800d910:	68ac      	ldr	r4, [r5, #8]
 800d912:	e003      	b.n	800d91c <_fflush_r+0x30>
 800d914:	4b09      	ldr	r3, [pc, #36]	; (800d93c <_fflush_r+0x50>)
 800d916:	429c      	cmp	r4, r3
 800d918:	bf08      	it	eq
 800d91a:	68ec      	ldreq	r4, [r5, #12]
 800d91c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d920:	b12b      	cbz	r3, 800d92e <_fflush_r+0x42>
 800d922:	4628      	mov	r0, r5
 800d924:	4621      	mov	r1, r4
 800d926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d92a:	f7ff bf53 	b.w	800d7d4 <__sflush_r>
 800d92e:	2000      	movs	r0, #0
 800d930:	bd38      	pop	{r3, r4, r5, pc}
 800d932:	bf00      	nop
 800d934:	0800f2f4 	.word	0x0800f2f4
 800d938:	0800f314 	.word	0x0800f314
 800d93c:	0800f334 	.word	0x0800f334

0800d940 <_cleanup_r>:
 800d940:	4901      	ldr	r1, [pc, #4]	; (800d948 <_cleanup_r+0x8>)
 800d942:	f000 b9e7 	b.w	800dd14 <_fwalk>
 800d946:	bf00      	nop
 800d948:	0800df95 	.word	0x0800df95

0800d94c <__sfmoreglue>:
 800d94c:	b570      	push	{r4, r5, r6, lr}
 800d94e:	1e4b      	subs	r3, r1, #1
 800d950:	2568      	movs	r5, #104	; 0x68
 800d952:	435d      	muls	r5, r3
 800d954:	460e      	mov	r6, r1
 800d956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d95a:	f7ff f98d 	bl	800cc78 <_malloc_r>
 800d95e:	4604      	mov	r4, r0
 800d960:	b140      	cbz	r0, 800d974 <__sfmoreglue+0x28>
 800d962:	2100      	movs	r1, #0
 800d964:	e880 0042 	stmia.w	r0, {r1, r6}
 800d968:	300c      	adds	r0, #12
 800d96a:	60a0      	str	r0, [r4, #8]
 800d96c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d970:	f7ff fbac 	bl	800d0cc <memset>
 800d974:	4620      	mov	r0, r4
 800d976:	bd70      	pop	{r4, r5, r6, pc}

0800d978 <__sinit>:
 800d978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97c:	6983      	ldr	r3, [r0, #24]
 800d97e:	4605      	mov	r5, r0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d171      	bne.n	800da68 <__sinit+0xf0>
 800d984:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 800d988:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 800d98c:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 800d990:	4b36      	ldr	r3, [pc, #216]	; (800da6c <__sinit+0xf4>)
 800d992:	4a37      	ldr	r2, [pc, #220]	; (800da70 <__sinit+0xf8>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	6282      	str	r2, [r0, #40]	; 0x28
 800d998:	4298      	cmp	r0, r3
 800d99a:	bf04      	itt	eq
 800d99c:	2301      	moveq	r3, #1
 800d99e:	6183      	streq	r3, [r0, #24]
 800d9a0:	f000 f870 	bl	800da84 <__sfp>
 800d9a4:	6068      	str	r0, [r5, #4]
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	f000 f86c 	bl	800da84 <__sfp>
 800d9ac:	60a8      	str	r0, [r5, #8]
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f000 f868 	bl	800da84 <__sfp>
 800d9b4:	686e      	ldr	r6, [r5, #4]
 800d9b6:	60e8      	str	r0, [r5, #12]
 800d9b8:	2400      	movs	r4, #0
 800d9ba:	2304      	movs	r3, #4
 800d9bc:	81b3      	strh	r3, [r6, #12]
 800d9be:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800da78 <__sinit+0x100>
 800d9c2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800da7c <__sinit+0x104>
 800d9c6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800da80 <__sinit+0x108>
 800d9ca:	4f2a      	ldr	r7, [pc, #168]	; (800da74 <__sinit+0xfc>)
 800d9cc:	6034      	str	r4, [r6, #0]
 800d9ce:	6074      	str	r4, [r6, #4]
 800d9d0:	60b4      	str	r4, [r6, #8]
 800d9d2:	6674      	str	r4, [r6, #100]	; 0x64
 800d9d4:	81f4      	strh	r4, [r6, #14]
 800d9d6:	6134      	str	r4, [r6, #16]
 800d9d8:	6174      	str	r4, [r6, #20]
 800d9da:	61b4      	str	r4, [r6, #24]
 800d9dc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800d9e0:	4621      	mov	r1, r4
 800d9e2:	2208      	movs	r2, #8
 800d9e4:	f7ff fb72 	bl	800d0cc <memset>
 800d9e8:	6236      	str	r6, [r6, #32]
 800d9ea:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800d9ee:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800d9f2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800d9f6:	6337      	str	r7, [r6, #48]	; 0x30
 800d9f8:	68ae      	ldr	r6, [r5, #8]
 800d9fa:	2309      	movs	r3, #9
 800d9fc:	f04f 0b01 	mov.w	fp, #1
 800da00:	81b3      	strh	r3, [r6, #12]
 800da02:	6034      	str	r4, [r6, #0]
 800da04:	6074      	str	r4, [r6, #4]
 800da06:	60b4      	str	r4, [r6, #8]
 800da08:	6674      	str	r4, [r6, #100]	; 0x64
 800da0a:	f8a6 b00e 	strh.w	fp, [r6, #14]
 800da0e:	6134      	str	r4, [r6, #16]
 800da10:	6174      	str	r4, [r6, #20]
 800da12:	61b4      	str	r4, [r6, #24]
 800da14:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800da18:	4621      	mov	r1, r4
 800da1a:	2208      	movs	r2, #8
 800da1c:	f7ff fb56 	bl	800d0cc <memset>
 800da20:	6236      	str	r6, [r6, #32]
 800da22:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800da26:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800da2a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800da2e:	6337      	str	r7, [r6, #48]	; 0x30
 800da30:	68ee      	ldr	r6, [r5, #12]
 800da32:	2312      	movs	r3, #18
 800da34:	81b3      	strh	r3, [r6, #12]
 800da36:	2302      	movs	r3, #2
 800da38:	6034      	str	r4, [r6, #0]
 800da3a:	6074      	str	r4, [r6, #4]
 800da3c:	60b4      	str	r4, [r6, #8]
 800da3e:	6674      	str	r4, [r6, #100]	; 0x64
 800da40:	81f3      	strh	r3, [r6, #14]
 800da42:	6134      	str	r4, [r6, #16]
 800da44:	6174      	str	r4, [r6, #20]
 800da46:	61b4      	str	r4, [r6, #24]
 800da48:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800da4c:	4621      	mov	r1, r4
 800da4e:	2208      	movs	r2, #8
 800da50:	f7ff fb3c 	bl	800d0cc <memset>
 800da54:	6236      	str	r6, [r6, #32]
 800da56:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800da5a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800da5e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800da62:	6337      	str	r7, [r6, #48]	; 0x30
 800da64:	f8c5 b018 	str.w	fp, [r5, #24]
 800da68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6c:	0800f2f0 	.word	0x0800f2f0
 800da70:	0800d941 	.word	0x0800d941
 800da74:	0800dec9 	.word	0x0800dec9
 800da78:	0800de4b 	.word	0x0800de4b
 800da7c:	0800de6d 	.word	0x0800de6d
 800da80:	0800dea5 	.word	0x0800dea5

0800da84 <__sfp>:
 800da84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da86:	4b1b      	ldr	r3, [pc, #108]	; (800daf4 <__sfp+0x70>)
 800da88:	681e      	ldr	r6, [r3, #0]
 800da8a:	69b3      	ldr	r3, [r6, #24]
 800da8c:	4607      	mov	r7, r0
 800da8e:	b913      	cbnz	r3, 800da96 <__sfp+0x12>
 800da90:	4630      	mov	r0, r6
 800da92:	f7ff ff71 	bl	800d978 <__sinit>
 800da96:	36d8      	adds	r6, #216	; 0xd8
 800da98:	68b4      	ldr	r4, [r6, #8]
 800da9a:	6873      	ldr	r3, [r6, #4]
 800da9c:	3b01      	subs	r3, #1
 800da9e:	d404      	bmi.n	800daaa <__sfp+0x26>
 800daa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800daa4:	b175      	cbz	r5, 800dac4 <__sfp+0x40>
 800daa6:	3468      	adds	r4, #104	; 0x68
 800daa8:	e7f8      	b.n	800da9c <__sfp+0x18>
 800daaa:	6833      	ldr	r3, [r6, #0]
 800daac:	b92b      	cbnz	r3, 800daba <__sfp+0x36>
 800daae:	4638      	mov	r0, r7
 800dab0:	2104      	movs	r1, #4
 800dab2:	f7ff ff4b 	bl	800d94c <__sfmoreglue>
 800dab6:	6030      	str	r0, [r6, #0]
 800dab8:	b108      	cbz	r0, 800dabe <__sfp+0x3a>
 800daba:	6836      	ldr	r6, [r6, #0]
 800dabc:	e7ec      	b.n	800da98 <__sfp+0x14>
 800dabe:	230c      	movs	r3, #12
 800dac0:	603b      	str	r3, [r7, #0]
 800dac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dac8:	81e3      	strh	r3, [r4, #14]
 800daca:	2301      	movs	r3, #1
 800dacc:	81a3      	strh	r3, [r4, #12]
 800dace:	6665      	str	r5, [r4, #100]	; 0x64
 800dad0:	6025      	str	r5, [r4, #0]
 800dad2:	60a5      	str	r5, [r4, #8]
 800dad4:	6065      	str	r5, [r4, #4]
 800dad6:	6125      	str	r5, [r4, #16]
 800dad8:	6165      	str	r5, [r4, #20]
 800dada:	61a5      	str	r5, [r4, #24]
 800dadc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dae0:	4629      	mov	r1, r5
 800dae2:	2208      	movs	r2, #8
 800dae4:	f7ff faf2 	bl	800d0cc <memset>
 800dae8:	6365      	str	r5, [r4, #52]	; 0x34
 800daea:	63a5      	str	r5, [r4, #56]	; 0x38
 800daec:	64a5      	str	r5, [r4, #72]	; 0x48
 800daee:	64e5      	str	r5, [r4, #76]	; 0x4c
 800daf0:	4620      	mov	r0, r4
 800daf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daf4:	0800f2f0 	.word	0x0800f2f0

0800daf8 <__sfp_lock_acquire>:
 800daf8:	4770      	bx	lr

0800dafa <__sfp_lock_release>:
 800dafa:	4770      	bx	lr

0800dafc <_malloc_trim_r>:
 800dafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db00:	4d24      	ldr	r5, [pc, #144]	; (800db94 <_malloc_trim_r+0x98>)
 800db02:	4f25      	ldr	r7, [pc, #148]	; (800db98 <_malloc_trim_r+0x9c>)
 800db04:	460e      	mov	r6, r1
 800db06:	4604      	mov	r4, r0
 800db08:	f7ff fae8 	bl	800d0dc <__malloc_lock>
 800db0c:	68ab      	ldr	r3, [r5, #8]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	f023 0803 	bic.w	r8, r3, #3
 800db14:	f1a7 0311 	sub.w	r3, r7, #17
 800db18:	4443      	add	r3, r8
 800db1a:	1b9e      	subs	r6, r3, r6
 800db1c:	fbb6 f6f7 	udiv	r6, r6, r7
 800db20:	3e01      	subs	r6, #1
 800db22:	437e      	muls	r6, r7
 800db24:	42be      	cmp	r6, r7
 800db26:	da05      	bge.n	800db34 <_malloc_trim_r+0x38>
 800db28:	4620      	mov	r0, r4
 800db2a:	f7ff fad8 	bl	800d0de <__malloc_unlock>
 800db2e:	2000      	movs	r0, #0
 800db30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db34:	4620      	mov	r0, r4
 800db36:	2100      	movs	r1, #0
 800db38:	f7ff fcc0 	bl	800d4bc <_sbrk_r>
 800db3c:	68ab      	ldr	r3, [r5, #8]
 800db3e:	4443      	add	r3, r8
 800db40:	4298      	cmp	r0, r3
 800db42:	d1f1      	bne.n	800db28 <_malloc_trim_r+0x2c>
 800db44:	4620      	mov	r0, r4
 800db46:	4271      	negs	r1, r6
 800db48:	f7ff fcb8 	bl	800d4bc <_sbrk_r>
 800db4c:	3001      	adds	r0, #1
 800db4e:	d110      	bne.n	800db72 <_malloc_trim_r+0x76>
 800db50:	4620      	mov	r0, r4
 800db52:	2100      	movs	r1, #0
 800db54:	f7ff fcb2 	bl	800d4bc <_sbrk_r>
 800db58:	68ab      	ldr	r3, [r5, #8]
 800db5a:	1ac2      	subs	r2, r0, r3
 800db5c:	2a0f      	cmp	r2, #15
 800db5e:	dde3      	ble.n	800db28 <_malloc_trim_r+0x2c>
 800db60:	490e      	ldr	r1, [pc, #56]	; (800db9c <_malloc_trim_r+0xa0>)
 800db62:	6809      	ldr	r1, [r1, #0]
 800db64:	1a40      	subs	r0, r0, r1
 800db66:	490e      	ldr	r1, [pc, #56]	; (800dba0 <_malloc_trim_r+0xa4>)
 800db68:	f042 0201 	orr.w	r2, r2, #1
 800db6c:	6008      	str	r0, [r1, #0]
 800db6e:	605a      	str	r2, [r3, #4]
 800db70:	e7da      	b.n	800db28 <_malloc_trim_r+0x2c>
 800db72:	68ab      	ldr	r3, [r5, #8]
 800db74:	ebc6 0808 	rsb	r8, r6, r8
 800db78:	f048 0201 	orr.w	r2, r8, #1
 800db7c:	605a      	str	r2, [r3, #4]
 800db7e:	4b08      	ldr	r3, [pc, #32]	; (800dba0 <_malloc_trim_r+0xa4>)
 800db80:	681a      	ldr	r2, [r3, #0]
 800db82:	4620      	mov	r0, r4
 800db84:	1b96      	subs	r6, r2, r6
 800db86:	601e      	str	r6, [r3, #0]
 800db88:	f7ff faa9 	bl	800d0de <__malloc_unlock>
 800db8c:	2001      	movs	r0, #1
 800db8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db92:	bf00      	nop
 800db94:	20000230 	.word	0x20000230
 800db98:	00001000 	.word	0x00001000
 800db9c:	2000063c 	.word	0x2000063c
 800dba0:	200014a4 	.word	0x200014a4

0800dba4 <_free_r>:
 800dba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dba6:	4606      	mov	r6, r0
 800dba8:	460d      	mov	r5, r1
 800dbaa:	2900      	cmp	r1, #0
 800dbac:	f000 80a9 	beq.w	800dd02 <_free_r+0x15e>
 800dbb0:	f7ff fa94 	bl	800d0dc <__malloc_lock>
 800dbb4:	f855 cc04 	ldr.w	ip, [r5, #-4]
 800dbb8:	4c52      	ldr	r4, [pc, #328]	; (800dd04 <_free_r+0x160>)
 800dbba:	f1a5 0308 	sub.w	r3, r5, #8
 800dbbe:	f02c 0201 	bic.w	r2, ip, #1
 800dbc2:	1898      	adds	r0, r3, r2
 800dbc4:	68a1      	ldr	r1, [r4, #8]
 800dbc6:	6847      	ldr	r7, [r0, #4]
 800dbc8:	4288      	cmp	r0, r1
 800dbca:	f027 0703 	bic.w	r7, r7, #3
 800dbce:	f00c 0101 	and.w	r1, ip, #1
 800dbd2:	d11b      	bne.n	800dc0c <_free_r+0x68>
 800dbd4:	443a      	add	r2, r7
 800dbd6:	b939      	cbnz	r1, 800dbe8 <_free_r+0x44>
 800dbd8:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800dbdc:	1a5b      	subs	r3, r3, r1
 800dbde:	440a      	add	r2, r1
 800dbe0:	6898      	ldr	r0, [r3, #8]
 800dbe2:	68d9      	ldr	r1, [r3, #12]
 800dbe4:	60c1      	str	r1, [r0, #12]
 800dbe6:	6088      	str	r0, [r1, #8]
 800dbe8:	f042 0101 	orr.w	r1, r2, #1
 800dbec:	6059      	str	r1, [r3, #4]
 800dbee:	60a3      	str	r3, [r4, #8]
 800dbf0:	4b45      	ldr	r3, [pc, #276]	; (800dd08 <_free_r+0x164>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d304      	bcc.n	800dc02 <_free_r+0x5e>
 800dbf8:	4b44      	ldr	r3, [pc, #272]	; (800dd0c <_free_r+0x168>)
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	6819      	ldr	r1, [r3, #0]
 800dbfe:	f7ff ff7d 	bl	800dafc <_malloc_trim_r>
 800dc02:	4630      	mov	r0, r6
 800dc04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dc08:	f7ff ba69 	b.w	800d0de <__malloc_unlock>
 800dc0c:	6047      	str	r7, [r0, #4]
 800dc0e:	b979      	cbnz	r1, 800dc30 <_free_r+0x8c>
 800dc10:	f855 5c08 	ldr.w	r5, [r5, #-8]
 800dc14:	1b5b      	subs	r3, r3, r5
 800dc16:	442a      	add	r2, r5
 800dc18:	689d      	ldr	r5, [r3, #8]
 800dc1a:	f104 0c08 	add.w	ip, r4, #8
 800dc1e:	4565      	cmp	r5, ip
 800dc20:	d008      	beq.n	800dc34 <_free_r+0x90>
 800dc22:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800dc26:	f8c5 c00c 	str.w	ip, [r5, #12]
 800dc2a:	f8cc 5008 	str.w	r5, [ip, #8]
 800dc2e:	e002      	b.n	800dc36 <_free_r+0x92>
 800dc30:	2100      	movs	r1, #0
 800dc32:	e000      	b.n	800dc36 <_free_r+0x92>
 800dc34:	2101      	movs	r1, #1
 800dc36:	19c5      	adds	r5, r0, r7
 800dc38:	686d      	ldr	r5, [r5, #4]
 800dc3a:	07ed      	lsls	r5, r5, #31
 800dc3c:	d40e      	bmi.n	800dc5c <_free_r+0xb8>
 800dc3e:	443a      	add	r2, r7
 800dc40:	6885      	ldr	r5, [r0, #8]
 800dc42:	b941      	cbnz	r1, 800dc56 <_free_r+0xb2>
 800dc44:	4f32      	ldr	r7, [pc, #200]	; (800dd10 <_free_r+0x16c>)
 800dc46:	42bd      	cmp	r5, r7
 800dc48:	d105      	bne.n	800dc56 <_free_r+0xb2>
 800dc4a:	6163      	str	r3, [r4, #20]
 800dc4c:	6123      	str	r3, [r4, #16]
 800dc4e:	2101      	movs	r1, #1
 800dc50:	60dd      	str	r5, [r3, #12]
 800dc52:	609d      	str	r5, [r3, #8]
 800dc54:	e002      	b.n	800dc5c <_free_r+0xb8>
 800dc56:	68c0      	ldr	r0, [r0, #12]
 800dc58:	60e8      	str	r0, [r5, #12]
 800dc5a:	6085      	str	r5, [r0, #8]
 800dc5c:	f042 0001 	orr.w	r0, r2, #1
 800dc60:	6058      	str	r0, [r3, #4]
 800dc62:	509a      	str	r2, [r3, r2]
 800dc64:	2900      	cmp	r1, #0
 800dc66:	d1cc      	bne.n	800dc02 <_free_r+0x5e>
 800dc68:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800dc6c:	d20e      	bcs.n	800dc8c <_free_r+0xe8>
 800dc6e:	08d2      	lsrs	r2, r2, #3
 800dc70:	1091      	asrs	r1, r2, #2
 800dc72:	2001      	movs	r0, #1
 800dc74:	4088      	lsls	r0, r1
 800dc76:	6861      	ldr	r1, [r4, #4]
 800dc78:	4301      	orrs	r1, r0
 800dc7a:	6061      	str	r1, [r4, #4]
 800dc7c:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 800dc80:	68a2      	ldr	r2, [r4, #8]
 800dc82:	609a      	str	r2, [r3, #8]
 800dc84:	60dc      	str	r4, [r3, #12]
 800dc86:	60a3      	str	r3, [r4, #8]
 800dc88:	60d3      	str	r3, [r2, #12]
 800dc8a:	e7ba      	b.n	800dc02 <_free_r+0x5e>
 800dc8c:	0a51      	lsrs	r1, r2, #9
 800dc8e:	2904      	cmp	r1, #4
 800dc90:	d802      	bhi.n	800dc98 <_free_r+0xf4>
 800dc92:	0991      	lsrs	r1, r2, #6
 800dc94:	3138      	adds	r1, #56	; 0x38
 800dc96:	e015      	b.n	800dcc4 <_free_r+0x120>
 800dc98:	2914      	cmp	r1, #20
 800dc9a:	d801      	bhi.n	800dca0 <_free_r+0xfc>
 800dc9c:	315b      	adds	r1, #91	; 0x5b
 800dc9e:	e011      	b.n	800dcc4 <_free_r+0x120>
 800dca0:	2954      	cmp	r1, #84	; 0x54
 800dca2:	d802      	bhi.n	800dcaa <_free_r+0x106>
 800dca4:	0b11      	lsrs	r1, r2, #12
 800dca6:	316e      	adds	r1, #110	; 0x6e
 800dca8:	e00c      	b.n	800dcc4 <_free_r+0x120>
 800dcaa:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 800dcae:	d802      	bhi.n	800dcb6 <_free_r+0x112>
 800dcb0:	0bd1      	lsrs	r1, r2, #15
 800dcb2:	3177      	adds	r1, #119	; 0x77
 800dcb4:	e006      	b.n	800dcc4 <_free_r+0x120>
 800dcb6:	f240 5054 	movw	r0, #1364	; 0x554
 800dcba:	4281      	cmp	r1, r0
 800dcbc:	bf9a      	itte	ls
 800dcbe:	0c91      	lsrls	r1, r2, #18
 800dcc0:	317c      	addls	r1, #124	; 0x7c
 800dcc2:	217e      	movhi	r1, #126	; 0x7e
 800dcc4:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
 800dcc8:	480e      	ldr	r0, [pc, #56]	; (800dd04 <_free_r+0x160>)
 800dcca:	68a5      	ldr	r5, [r4, #8]
 800dccc:	42a5      	cmp	r5, r4
 800dcce:	d001      	beq.n	800dcd4 <_free_r+0x130>
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	e00b      	b.n	800dcec <_free_r+0x148>
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	1089      	asrs	r1, r1, #2
 800dcd8:	fa02 f101 	lsl.w	r1, r2, r1
 800dcdc:	6842      	ldr	r2, [r0, #4]
 800dcde:	430a      	orrs	r2, r1
 800dce0:	6042      	str	r2, [r0, #4]
 800dce2:	4629      	mov	r1, r5
 800dce4:	e008      	b.n	800dcf8 <_free_r+0x154>
 800dce6:	6889      	ldr	r1, [r1, #8]
 800dce8:	42a1      	cmp	r1, r4
 800dcea:	d004      	beq.n	800dcf6 <_free_r+0x152>
 800dcec:	6848      	ldr	r0, [r1, #4]
 800dcee:	f020 0003 	bic.w	r0, r0, #3
 800dcf2:	4282      	cmp	r2, r0
 800dcf4:	d3f7      	bcc.n	800dce6 <_free_r+0x142>
 800dcf6:	68cd      	ldr	r5, [r1, #12]
 800dcf8:	60dd      	str	r5, [r3, #12]
 800dcfa:	6099      	str	r1, [r3, #8]
 800dcfc:	60ab      	str	r3, [r5, #8]
 800dcfe:	60cb      	str	r3, [r1, #12]
 800dd00:	e77f      	b.n	800dc02 <_free_r+0x5e>
 800dd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd04:	20000230 	.word	0x20000230
 800dd08:	20000638 	.word	0x20000638
 800dd0c:	200014a0 	.word	0x200014a0
 800dd10:	20000238 	.word	0x20000238

0800dd14 <_fwalk>:
 800dd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd18:	4688      	mov	r8, r1
 800dd1a:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 800dd1e:	2600      	movs	r6, #0
 800dd20:	b18c      	cbz	r4, 800dd46 <_fwalk+0x32>
 800dd22:	68a5      	ldr	r5, [r4, #8]
 800dd24:	6867      	ldr	r7, [r4, #4]
 800dd26:	3f01      	subs	r7, #1
 800dd28:	d40b      	bmi.n	800dd42 <_fwalk+0x2e>
 800dd2a:	89ab      	ldrh	r3, [r5, #12]
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d906      	bls.n	800dd3e <_fwalk+0x2a>
 800dd30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd34:	3301      	adds	r3, #1
 800dd36:	d002      	beq.n	800dd3e <_fwalk+0x2a>
 800dd38:	4628      	mov	r0, r5
 800dd3a:	47c0      	blx	r8
 800dd3c:	4306      	orrs	r6, r0
 800dd3e:	3568      	adds	r5, #104	; 0x68
 800dd40:	e7f1      	b.n	800dd26 <_fwalk+0x12>
 800dd42:	6824      	ldr	r4, [r4, #0]
 800dd44:	e7ec      	b.n	800dd20 <_fwalk+0xc>
 800dd46:	4630      	mov	r0, r6
 800dd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dd4c <__smakebuf_r>:
 800dd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd4e:	898b      	ldrh	r3, [r1, #12]
 800dd50:	079d      	lsls	r5, r3, #30
 800dd52:	b091      	sub	sp, #68	; 0x44
 800dd54:	4606      	mov	r6, r0
 800dd56:	460c      	mov	r4, r1
 800dd58:	d43a      	bmi.n	800ddd0 <__smakebuf_r+0x84>
 800dd5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd5e:	2900      	cmp	r1, #0
 800dd60:	da0b      	bge.n	800dd7a <__smakebuf_r+0x2e>
 800dd62:	89a3      	ldrh	r3, [r4, #12]
 800dd64:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dd68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dd6c:	bf0c      	ite	eq
 800dd6e:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 800dd72:	2540      	movne	r5, #64	; 0x40
 800dd74:	81a3      	strh	r3, [r4, #12]
 800dd76:	2700      	movs	r7, #0
 800dd78:	e01f      	b.n	800ddba <__smakebuf_r+0x6e>
 800dd7a:	aa01      	add	r2, sp, #4
 800dd7c:	f000 f912 	bl	800dfa4 <_fstat_r>
 800dd80:	2800      	cmp	r0, #0
 800dd82:	dbee      	blt.n	800dd62 <__smakebuf_r+0x16>
 800dd84:	9b02      	ldr	r3, [sp, #8]
 800dd86:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800dd8a:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
 800dd8e:	424f      	negs	r7, r1
 800dd90:	414f      	adcs	r7, r1
 800dd92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd96:	89a3      	ldrh	r3, [r4, #12]
 800dd98:	d10a      	bne.n	800ddb0 <__smakebuf_r+0x64>
 800dd9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dd9c:	491b      	ldr	r1, [pc, #108]	; (800de0c <__smakebuf_r+0xc0>)
 800dd9e:	428a      	cmp	r2, r1
 800dda0:	d106      	bne.n	800ddb0 <__smakebuf_r+0x64>
 800dda2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dda6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800ddaa:	81a3      	strh	r3, [r4, #12]
 800ddac:	6525      	str	r5, [r4, #80]	; 0x50
 800ddae:	e004      	b.n	800ddba <__smakebuf_r+0x6e>
 800ddb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ddb4:	81a3      	strh	r3, [r4, #12]
 800ddb6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800ddba:	4630      	mov	r0, r6
 800ddbc:	4629      	mov	r1, r5
 800ddbe:	f7fe ff5b 	bl	800cc78 <_malloc_r>
 800ddc2:	b960      	cbnz	r0, 800ddde <__smakebuf_r+0x92>
 800ddc4:	89a3      	ldrh	r3, [r4, #12]
 800ddc6:	059a      	lsls	r2, r3, #22
 800ddc8:	d41d      	bmi.n	800de06 <__smakebuf_r+0xba>
 800ddca:	f043 0302 	orr.w	r3, r3, #2
 800ddce:	81a3      	strh	r3, [r4, #12]
 800ddd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ddd4:	6023      	str	r3, [r4, #0]
 800ddd6:	6123      	str	r3, [r4, #16]
 800ddd8:	2301      	movs	r3, #1
 800ddda:	6163      	str	r3, [r4, #20]
 800dddc:	e013      	b.n	800de06 <__smakebuf_r+0xba>
 800ddde:	4b0c      	ldr	r3, [pc, #48]	; (800de10 <__smakebuf_r+0xc4>)
 800dde0:	62b3      	str	r3, [r6, #40]	; 0x28
 800dde2:	89a3      	ldrh	r3, [r4, #12]
 800dde4:	6020      	str	r0, [r4, #0]
 800dde6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddea:	81a3      	strh	r3, [r4, #12]
 800ddec:	6120      	str	r0, [r4, #16]
 800ddee:	6165      	str	r5, [r4, #20]
 800ddf0:	b14f      	cbz	r7, 800de06 <__smakebuf_r+0xba>
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddf8:	f000 f8e6 	bl	800dfc8 <_isatty_r>
 800ddfc:	b118      	cbz	r0, 800de06 <__smakebuf_r+0xba>
 800ddfe:	89a3      	ldrh	r3, [r4, #12]
 800de00:	f043 0301 	orr.w	r3, r3, #1
 800de04:	81a3      	strh	r3, [r4, #12]
 800de06:	b011      	add	sp, #68	; 0x44
 800de08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de0a:	bf00      	nop
 800de0c:	0800dea5 	.word	0x0800dea5
 800de10:	0800d941 	.word	0x0800d941

0800de14 <memmove>:
 800de14:	4281      	cmp	r1, r0
 800de16:	b570      	push	{r4, r5, r6, lr}
 800de18:	d301      	bcc.n	800de1e <memmove+0xa>
 800de1a:	2300      	movs	r3, #0
 800de1c:	e00e      	b.n	800de3c <memmove+0x28>
 800de1e:	188c      	adds	r4, r1, r2
 800de20:	42a0      	cmp	r0, r4
 800de22:	d2fa      	bcs.n	800de1a <memmove+0x6>
 800de24:	1885      	adds	r5, r0, r2
 800de26:	4613      	mov	r3, r2
 800de28:	f113 33ff 	adds.w	r3, r3, #4294967295
 800de2c:	d305      	bcc.n	800de3a <memmove+0x26>
 800de2e:	4251      	negs	r1, r2
 800de30:	1866      	adds	r6, r4, r1
 800de32:	4429      	add	r1, r5
 800de34:	5cf6      	ldrb	r6, [r6, r3]
 800de36:	54ce      	strb	r6, [r1, r3]
 800de38:	e7f6      	b.n	800de28 <memmove+0x14>
 800de3a:	bd70      	pop	{r4, r5, r6, pc}
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d003      	beq.n	800de48 <memmove+0x34>
 800de40:	5ccc      	ldrb	r4, [r1, r3]
 800de42:	54c4      	strb	r4, [r0, r3]
 800de44:	3301      	adds	r3, #1
 800de46:	e7f9      	b.n	800de3c <memmove+0x28>
 800de48:	bd70      	pop	{r4, r5, r6, pc}

0800de4a <__sread>:
 800de4a:	b510      	push	{r4, lr}
 800de4c:	460c      	mov	r4, r1
 800de4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de52:	f000 f8db 	bl	800e00c <_read_r>
 800de56:	2800      	cmp	r0, #0
 800de58:	db03      	blt.n	800de62 <__sread+0x18>
 800de5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800de5c:	4403      	add	r3, r0
 800de5e:	6563      	str	r3, [r4, #84]	; 0x54
 800de60:	bd10      	pop	{r4, pc}
 800de62:	89a3      	ldrh	r3, [r4, #12]
 800de64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de68:	81a3      	strh	r3, [r4, #12]
 800de6a:	bd10      	pop	{r4, pc}

0800de6c <__swrite>:
 800de6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de70:	461d      	mov	r5, r3
 800de72:	898b      	ldrh	r3, [r1, #12]
 800de74:	05db      	lsls	r3, r3, #23
 800de76:	4607      	mov	r7, r0
 800de78:	460c      	mov	r4, r1
 800de7a:	4616      	mov	r6, r2
 800de7c:	d505      	bpl.n	800de8a <__swrite+0x1e>
 800de7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de82:	2200      	movs	r2, #0
 800de84:	2302      	movs	r3, #2
 800de86:	f000 f8af 	bl	800dfe8 <_lseek_r>
 800de8a:	89a3      	ldrh	r3, [r4, #12]
 800de8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de94:	81a3      	strh	r3, [r4, #12]
 800de96:	4638      	mov	r0, r7
 800de98:	4632      	mov	r2, r6
 800de9a:	462b      	mov	r3, r5
 800de9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dea0:	f7ff bc18 	b.w	800d6d4 <_write_r>

0800dea4 <__sseek>:
 800dea4:	b510      	push	{r4, lr}
 800dea6:	460c      	mov	r4, r1
 800dea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deac:	f000 f89c 	bl	800dfe8 <_lseek_r>
 800deb0:	1c43      	adds	r3, r0, #1
 800deb2:	89a3      	ldrh	r3, [r4, #12]
 800deb4:	d103      	bne.n	800debe <__sseek+0x1a>
 800deb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800deba:	81a3      	strh	r3, [r4, #12]
 800debc:	bd10      	pop	{r4, pc}
 800debe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dec2:	81a3      	strh	r3, [r4, #12]
 800dec4:	6560      	str	r0, [r4, #84]	; 0x54
 800dec6:	bd10      	pop	{r4, pc}

0800dec8 <__sclose>:
 800dec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800decc:	f000 b800 	b.w	800ded0 <_close_r>

0800ded0 <_close_r>:
 800ded0:	b538      	push	{r3, r4, r5, lr}
 800ded2:	4c06      	ldr	r4, [pc, #24]	; (800deec <_close_r+0x1c>)
 800ded4:	2300      	movs	r3, #0
 800ded6:	4605      	mov	r5, r0
 800ded8:	4608      	mov	r0, r1
 800deda:	6023      	str	r3, [r4, #0]
 800dedc:	f7ff fb8e 	bl	800d5fc <_close>
 800dee0:	1c43      	adds	r3, r0, #1
 800dee2:	d102      	bne.n	800deea <_close_r+0x1a>
 800dee4:	6823      	ldr	r3, [r4, #0]
 800dee6:	b103      	cbz	r3, 800deea <_close_r+0x1a>
 800dee8:	602b      	str	r3, [r5, #0]
 800deea:	bd38      	pop	{r3, r4, r5, pc}
 800deec:	20001ea4 	.word	0x20001ea4

0800def0 <_fclose_r>:
 800def0:	b570      	push	{r4, r5, r6, lr}
 800def2:	4605      	mov	r5, r0
 800def4:	460c      	mov	r4, r1
 800def6:	b909      	cbnz	r1, 800defc <_fclose_r+0xc>
 800def8:	2000      	movs	r0, #0
 800defa:	bd70      	pop	{r4, r5, r6, pc}
 800defc:	b118      	cbz	r0, 800df06 <_fclose_r+0x16>
 800defe:	6983      	ldr	r3, [r0, #24]
 800df00:	b90b      	cbnz	r3, 800df06 <_fclose_r+0x16>
 800df02:	f7ff fd39 	bl	800d978 <__sinit>
 800df06:	4b20      	ldr	r3, [pc, #128]	; (800df88 <_fclose_r+0x98>)
 800df08:	429c      	cmp	r4, r3
 800df0a:	d101      	bne.n	800df10 <_fclose_r+0x20>
 800df0c:	686c      	ldr	r4, [r5, #4]
 800df0e:	e008      	b.n	800df22 <_fclose_r+0x32>
 800df10:	4b1e      	ldr	r3, [pc, #120]	; (800df8c <_fclose_r+0x9c>)
 800df12:	429c      	cmp	r4, r3
 800df14:	d101      	bne.n	800df1a <_fclose_r+0x2a>
 800df16:	68ac      	ldr	r4, [r5, #8]
 800df18:	e003      	b.n	800df22 <_fclose_r+0x32>
 800df1a:	4b1d      	ldr	r3, [pc, #116]	; (800df90 <_fclose_r+0xa0>)
 800df1c:	429c      	cmp	r4, r3
 800df1e:	bf08      	it	eq
 800df20:	68ec      	ldreq	r4, [r5, #12]
 800df22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d0e6      	beq.n	800def8 <_fclose_r+0x8>
 800df2a:	4628      	mov	r0, r5
 800df2c:	4621      	mov	r1, r4
 800df2e:	f7ff fcdd 	bl	800d8ec <_fflush_r>
 800df32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800df34:	4606      	mov	r6, r0
 800df36:	b133      	cbz	r3, 800df46 <_fclose_r+0x56>
 800df38:	4628      	mov	r0, r5
 800df3a:	6a21      	ldr	r1, [r4, #32]
 800df3c:	4798      	blx	r3
 800df3e:	2800      	cmp	r0, #0
 800df40:	bfb8      	it	lt
 800df42:	f04f 36ff 	movlt.w	r6, #4294967295
 800df46:	89a3      	ldrh	r3, [r4, #12]
 800df48:	061b      	lsls	r3, r3, #24
 800df4a:	d503      	bpl.n	800df54 <_fclose_r+0x64>
 800df4c:	4628      	mov	r0, r5
 800df4e:	6921      	ldr	r1, [r4, #16]
 800df50:	f7ff fe28 	bl	800dba4 <_free_r>
 800df54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df56:	b141      	cbz	r1, 800df6a <_fclose_r+0x7a>
 800df58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df5c:	4299      	cmp	r1, r3
 800df5e:	d002      	beq.n	800df66 <_fclose_r+0x76>
 800df60:	4628      	mov	r0, r5
 800df62:	f7ff fe1f 	bl	800dba4 <_free_r>
 800df66:	2300      	movs	r3, #0
 800df68:	6363      	str	r3, [r4, #52]	; 0x34
 800df6a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800df6c:	b121      	cbz	r1, 800df78 <_fclose_r+0x88>
 800df6e:	4628      	mov	r0, r5
 800df70:	f7ff fe18 	bl	800dba4 <_free_r>
 800df74:	2300      	movs	r3, #0
 800df76:	64a3      	str	r3, [r4, #72]	; 0x48
 800df78:	f7ff fdbe 	bl	800daf8 <__sfp_lock_acquire>
 800df7c:	2300      	movs	r3, #0
 800df7e:	81a3      	strh	r3, [r4, #12]
 800df80:	f7ff fdbb 	bl	800dafa <__sfp_lock_release>
 800df84:	4630      	mov	r0, r6
 800df86:	bd70      	pop	{r4, r5, r6, pc}
 800df88:	0800f2f4 	.word	0x0800f2f4
 800df8c:	0800f314 	.word	0x0800f314
 800df90:	0800f334 	.word	0x0800f334

0800df94 <fclose>:
 800df94:	4b02      	ldr	r3, [pc, #8]	; (800dfa0 <fclose+0xc>)
 800df96:	4601      	mov	r1, r0
 800df98:	6818      	ldr	r0, [r3, #0]
 800df9a:	f7ff bfa9 	b.w	800def0 <_fclose_r>
 800df9e:	bf00      	nop
 800dfa0:	2000022c 	.word	0x2000022c

0800dfa4 <_fstat_r>:
 800dfa4:	b538      	push	{r3, r4, r5, lr}
 800dfa6:	4c07      	ldr	r4, [pc, #28]	; (800dfc4 <_fstat_r+0x20>)
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	4605      	mov	r5, r0
 800dfac:	4608      	mov	r0, r1
 800dfae:	4611      	mov	r1, r2
 800dfb0:	6023      	str	r3, [r4, #0]
 800dfb2:	f7ff fb26 	bl	800d602 <_fstat>
 800dfb6:	1c43      	adds	r3, r0, #1
 800dfb8:	d102      	bne.n	800dfc0 <_fstat_r+0x1c>
 800dfba:	6823      	ldr	r3, [r4, #0]
 800dfbc:	b103      	cbz	r3, 800dfc0 <_fstat_r+0x1c>
 800dfbe:	602b      	str	r3, [r5, #0]
 800dfc0:	bd38      	pop	{r3, r4, r5, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20001ea4 	.word	0x20001ea4

0800dfc8 <_isatty_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4c06      	ldr	r4, [pc, #24]	; (800dfe4 <_isatty_r+0x1c>)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	4605      	mov	r5, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	6023      	str	r3, [r4, #0]
 800dfd4:	f7ff fb1a 	bl	800d60c <_isatty>
 800dfd8:	1c43      	adds	r3, r0, #1
 800dfda:	d102      	bne.n	800dfe2 <_isatty_r+0x1a>
 800dfdc:	6823      	ldr	r3, [r4, #0]
 800dfde:	b103      	cbz	r3, 800dfe2 <_isatty_r+0x1a>
 800dfe0:	602b      	str	r3, [r5, #0]
 800dfe2:	bd38      	pop	{r3, r4, r5, pc}
 800dfe4:	20001ea4 	.word	0x20001ea4

0800dfe8 <_lseek_r>:
 800dfe8:	b538      	push	{r3, r4, r5, lr}
 800dfea:	4c07      	ldr	r4, [pc, #28]	; (800e008 <_lseek_r+0x20>)
 800dfec:	4605      	mov	r5, r0
 800dfee:	2000      	movs	r0, #0
 800dff0:	6020      	str	r0, [r4, #0]
 800dff2:	4608      	mov	r0, r1
 800dff4:	4611      	mov	r1, r2
 800dff6:	461a      	mov	r2, r3
 800dff8:	f7ff fb0a 	bl	800d610 <_lseek>
 800dffc:	1c43      	adds	r3, r0, #1
 800dffe:	d102      	bne.n	800e006 <_lseek_r+0x1e>
 800e000:	6823      	ldr	r3, [r4, #0]
 800e002:	b103      	cbz	r3, 800e006 <_lseek_r+0x1e>
 800e004:	602b      	str	r3, [r5, #0]
 800e006:	bd38      	pop	{r3, r4, r5, pc}
 800e008:	20001ea4 	.word	0x20001ea4

0800e00c <_read_r>:
 800e00c:	b538      	push	{r3, r4, r5, lr}
 800e00e:	4c07      	ldr	r4, [pc, #28]	; (800e02c <_read_r+0x20>)
 800e010:	4605      	mov	r5, r0
 800e012:	2000      	movs	r0, #0
 800e014:	6020      	str	r0, [r4, #0]
 800e016:	4608      	mov	r0, r1
 800e018:	4611      	mov	r1, r2
 800e01a:	461a      	mov	r2, r3
 800e01c:	f7ff fafa 	bl	800d614 <_read>
 800e020:	1c43      	adds	r3, r0, #1
 800e022:	d102      	bne.n	800e02a <_read_r+0x1e>
 800e024:	6823      	ldr	r3, [r4, #0]
 800e026:	b103      	cbz	r3, 800e02a <_read_r+0x1e>
 800e028:	602b      	str	r3, [r5, #0]
 800e02a:	bd38      	pop	{r3, r4, r5, pc}
 800e02c:	20001ea4 	.word	0x20001ea4

0800e030 <_init>:
 800e030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e032:	bf00      	nop
 800e034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e036:	bc08      	pop	{r3}
 800e038:	469e      	mov	lr, r3
 800e03a:	4770      	bx	lr

0800e03c <_fini>:
 800e03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e03e:	bf00      	nop
 800e040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e042:	bc08      	pop	{r3}
 800e044:	469e      	mov	lr, r3
 800e046:	4770      	bx	lr
