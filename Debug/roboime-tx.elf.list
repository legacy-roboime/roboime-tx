
roboime-tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004500  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004688  08004688  0000c688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004720  08004720  0000c720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004724  08004724  0000c724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000124  20000000  08004728  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000100c  20000124  20000124  00010124  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20001130  20001130  00010124  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010124  2**0
                  CONTENTS, READONLY
  9 .debug_info   000103b2  00000000  00000000  00010154  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002703  00000000  00000000  00020506  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c48  00000000  00000000  00022c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ae0  00000000  00000000  00023858  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004c8d  00000000  00000000  00024338  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000455a  00000000  00000000  00028fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000082  00000000  00000000  0002d51f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000262c  00000000  00000000  0002d5a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000124 	.word	0x20000124
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004670 	.word	0x08004670

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004670 	.word	0x08004670
 80001c4:	20000128 	.word	0x20000128

080001c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001cc:	4b15      	ldr	r3, [pc, #84]	; (8000224 <SystemInit+0x5c>)
 80001ce:	4a15      	ldr	r2, [pc, #84]	; (8000224 <SystemInit+0x5c>)
 80001d0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80001d4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80001d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <SystemInit+0x60>)
 80001de:	4a12      	ldr	r2, [pc, #72]	; (8000228 <SystemInit+0x60>)
 80001e0:	6812      	ldr	r2, [r2, #0]
 80001e2:	f042 0201 	orr.w	r2, r2, #1
 80001e6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <SystemInit+0x60>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4a0e      	ldr	r2, [pc, #56]	; (8000228 <SystemInit+0x60>)
 80001f0:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <SystemInit+0x60>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <SystemInit+0x60>)
 8000200:	4a0a      	ldr	r2, [pc, #40]	; (800022c <SystemInit+0x64>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <SystemInit+0x60>)
 8000206:	4a08      	ldr	r2, [pc, #32]	; (8000228 <SystemInit+0x60>)
 8000208:	6812      	ldr	r2, [r2, #0]
 800020a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800020e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <SystemInit+0x60>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000216:	f000 f80b 	bl	8000230 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800021a:	4b02      	ldr	r3, [pc, #8]	; (8000224 <SystemInit+0x5c>)
 800021c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000220:	609a      	str	r2, [r3, #8]
#endif
}
 8000222:	bd80      	pop	{r7, pc}
 8000224:	e000ed00 	.word	0xe000ed00
 8000228:	40023800 	.word	0x40023800
 800022c:	24003010 	.word	0x24003010

08000230 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	2300      	movs	r3, #0
 800023c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800023e:	4b35      	ldr	r3, [pc, #212]	; (8000314 <SetSysClock+0xe4>)
 8000240:	4a34      	ldr	r2, [pc, #208]	; (8000314 <SetSysClock+0xe4>)
 8000242:	6812      	ldr	r2, [r2, #0]
 8000244:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000248:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800024a:	4b32      	ldr	r3, [pc, #200]	; (8000314 <SetSysClock+0xe4>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000252:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3301      	adds	r3, #1
 8000258:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d103      	bne.n	8000268 <SetSysClock+0x38>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000266:	d1f0      	bne.n	800024a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000268:	4b2a      	ldr	r3, [pc, #168]	; (8000314 <SetSysClock+0xe4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000270:	2b00      	cmp	r3, #0
 8000272:	d002      	beq.n	800027a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000274:	2301      	movs	r3, #1
 8000276:	603b      	str	r3, [r7, #0]
 8000278:	e001      	b.n	800027e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800027a:	2300      	movs	r3, #0
 800027c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d142      	bne.n	800030a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000284:	4b23      	ldr	r3, [pc, #140]	; (8000314 <SetSysClock+0xe4>)
 8000286:	4a23      	ldr	r2, [pc, #140]	; (8000314 <SetSysClock+0xe4>)
 8000288:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800028a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800028e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000290:	4b21      	ldr	r3, [pc, #132]	; (8000318 <SetSysClock+0xe8>)
 8000292:	4a21      	ldr	r2, [pc, #132]	; (8000318 <SetSysClock+0xe8>)
 8000294:	6812      	ldr	r2, [r2, #0]
 8000296:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800029a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800029c:	4b1d      	ldr	r3, [pc, #116]	; (8000314 <SetSysClock+0xe4>)
 800029e:	4a1d      	ldr	r2, [pc, #116]	; (8000314 <SetSysClock+0xe4>)
 80002a0:	6892      	ldr	r2, [r2, #8]
 80002a2:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <SetSysClock+0xe4>)
 80002a6:	4a1b      	ldr	r2, [pc, #108]	; (8000314 <SetSysClock+0xe4>)
 80002a8:	6892      	ldr	r2, [r2, #8]
 80002aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80002ae:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002b0:	4b18      	ldr	r3, [pc, #96]	; (8000314 <SetSysClock+0xe4>)
 80002b2:	4a18      	ldr	r2, [pc, #96]	; (8000314 <SetSysClock+0xe4>)
 80002b4:	6892      	ldr	r2, [r2, #8]
 80002b6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80002ba:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <SetSysClock+0xe4>)
 80002be:	4a17      	ldr	r2, [pc, #92]	; (800031c <SetSysClock+0xec>)
 80002c0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <SetSysClock+0xe4>)
 80002c4:	4a13      	ldr	r2, [pc, #76]	; (8000314 <SetSysClock+0xe4>)
 80002c6:	6812      	ldr	r2, [r2, #0]
 80002c8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002cc:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002ce:	bf00      	nop
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <SetSysClock+0xe4>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f9      	beq.n	80002d0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80002dc:	4b10      	ldr	r3, [pc, #64]	; (8000320 <SetSysClock+0xf0>)
 80002de:	f240 6205 	movw	r2, #1541	; 0x605
 80002e2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <SetSysClock+0xe4>)
 80002e6:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <SetSysClock+0xe4>)
 80002e8:	6892      	ldr	r2, [r2, #8]
 80002ea:	f022 0203 	bic.w	r2, r2, #3
 80002ee:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <SetSysClock+0xe4>)
 80002f2:	4a08      	ldr	r2, [pc, #32]	; (8000314 <SetSysClock+0xe4>)
 80002f4:	6892      	ldr	r2, [r2, #8]
 80002f6:	f042 0202 	orr.w	r2, r2, #2
 80002fa:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80002fc:	bf00      	nop
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <SetSysClock+0xe4>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	f003 030c 	and.w	r3, r3, #12
 8000306:	2b08      	cmp	r3, #8
 8000308:	d1f9      	bne.n	80002fe <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40023800 	.word	0x40023800
 8000318:	40007000 	.word	0x40007000
 800031c:	07405408 	.word	0x07405408
 8000320:	40023c00 	.word	0x40023c00

08000324 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
}
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000334:	e7fe      	b.n	8000334 <HardFault_Handler+0x4>
 8000336:	bf00      	nop

08000338 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800033c:	e7fe      	b.n	800033c <MemManage_Handler+0x4>
 800033e:	bf00      	nop

08000340 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000344:	e7fe      	b.n	8000344 <BusFault_Handler+0x4>
 8000346:	bf00      	nop

08000348 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800034c:	e7fe      	b.n	800034c <UsageFault_Handler+0x4>
 800034e:	bf00      	nop

08000350 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
}
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
}
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
}
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000374:	f8df d03c 	ldr.w	sp, [pc, #60]	; 80003b4 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000378:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800037a:	f000 b804 	b.w	8000386 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8000380:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000382:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000384:	3104      	adds	r1, #4

08000386 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000386:	480d      	ldr	r0, [pc, #52]	; (80003bc <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8000388:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 800038a:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800038c:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800038e:	f4ff aff6 	bcc.w	800037e <CopyDataInit>
  ldr  r2, =_sbss
 8000392:	4a0c      	ldr	r2, [pc, #48]	; (80003c4 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8000394:	f000 b803 	b.w	800039e <LoopFillZerobss>

08000398 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000398:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800039a:	f842 3b04 	str.w	r3, [r2], #4

0800039e <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800039e:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 80003a0:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003a2:	f4ff aff9 	bcc.w	8000398 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003a6:	f7ff ff0f 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003aa:	f004 f93b 	bl	8004624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ae:	f000 f85b 	bl	8000468 <main>
  bx  lr    
 80003b2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003b4:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80003b8:	08004728 	.word	0x08004728
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003c0:	20000124 	.word	0x20000124
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80003c4:	20000124 	.word	0x20000124
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003c8:	20001130 	.word	0x20001130

080003cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003cc:	f7ff bffe 	b.w	80003cc <ADC_IRQHandler>

080003d0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	6039      	str	r1, [r7, #0]
 80003da:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80003dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	da0b      	bge.n	80003fc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80003e4:	490d      	ldr	r1, [pc, #52]	; (800041c <NVIC_SetPriority+0x4c>)
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	f003 030f 	and.w	r3, r3, #15
 80003ec:	3b04      	subs	r3, #4
 80003ee:	683a      	ldr	r2, [r7, #0]
 80003f0:	b2d2      	uxtb	r2, r2
 80003f2:	0112      	lsls	r2, r2, #4
 80003f4:	b2d2      	uxtb	r2, r2
 80003f6:	440b      	add	r3, r1
 80003f8:	761a      	strb	r2, [r3, #24]
 80003fa:	e009      	b.n	8000410 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80003fc:	4908      	ldr	r1, [pc, #32]	; (8000420 <NVIC_SetPriority+0x50>)
 80003fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000402:	683a      	ldr	r2, [r7, #0]
 8000404:	b2d2      	uxtb	r2, r2
 8000406:	0112      	lsls	r2, r2, #4
 8000408:	b2d2      	uxtb	r2, r2
 800040a:	440b      	add	r3, r1
 800040c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	e000ed00 	.word	0xe000ed00
 8000420:	e000e100 	.word	0xe000e100

08000424 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000432:	d301      	bcc.n	8000438 <SysTick_Config+0x14>
 8000434:	2301      	movs	r3, #1
 8000436:	e011      	b.n	800045c <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000438:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <SysTick_Config+0x40>)
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000440:	3a01      	subs	r2, #1
 8000442:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000444:	f04f 30ff 	mov.w	r0, #4294967295
 8000448:	210f      	movs	r1, #15
 800044a:	f7ff ffc1 	bl	80003d0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800044e:	4b05      	ldr	r3, [pc, #20]	; (8000464 <SysTick_Config+0x40>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <SysTick_Config+0x40>)
 8000456:	2207      	movs	r2, #7
 8000458:	601a      	str	r2, [r3, #0]
  return (0);                                                  /* Function successful */
 800045a:	2300      	movs	r3, #0
}
 800045c:	4618      	mov	r0, r3
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	e000e010 	.word	0xe000e010

08000468 <main>:

__ALIGN_BEGIN USB_OTG_CORE_HANDLE  USB_OTG_dev __ALIGN_END;


int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af02      	add	r7, sp, #8
	SysTick_Config(SystemCoreClock/1000);
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <main+0x2c>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <main+0x30>)
 8000474:	fba3 1302 	umull	r1, r3, r3, r2
 8000478:	099b      	lsrs	r3, r3, #6
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff ffd2 	bl	8000424 <SysTick_Config>
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */


  USBD_Init(&USB_OTG_dev, USB_OTG_FS_CORE_ID, &USR_desc, &USBD_CDC_cb, &USR_cb);
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <main+0x34>)
 8000482:	9300      	str	r3, [sp, #0]
 8000484:	4806      	ldr	r0, [pc, #24]	; (80004a0 <main+0x38>)
 8000486:	2101      	movs	r1, #1
 8000488:	4a06      	ldr	r2, [pc, #24]	; (80004a4 <main+0x3c>)
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <main+0x40>)
 800048c:	f002 fef4 	bl	8003278 <USBD_Init>


__ALIGN_BEGIN USB_OTG_CORE_HANDLE  USB_OTG_dev __ALIGN_END;


int main(void)
 8000490:	e7fe      	b.n	8000490 <main+0x28>
 8000492:	bf00      	nop
 8000494:	20000000 	.word	0x20000000
 8000498:	10624dd3 	.word	0x10624dd3
 800049c:	200000d4 	.word	0x200000d4
 80004a0:	20000140 	.word	0x20000140
 80004a4:	200000f0 	.word	0x200000f0
 80004a8:	200000a8 	.word	0x200000a8

080004ac <OTG_FS_IRQHandler>:
  }
}


void OTG_FS_IRQHandler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  USBD_OTG_ISR_Handler (&USB_OTG_dev);
 80004b0:	4801      	ldr	r0, [pc, #4]	; (80004b8 <OTG_FS_IRQHandler+0xc>)
 80004b2:	f000 f8db 	bl	800066c <USBD_OTG_ISR_Handler>
}
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000140 	.word	0x20000140

080004bc <OTG_FS_WKUP_IRQHandler>:

void OTG_FS_WKUP_IRQHandler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  if(USB_OTG_dev.cfg.low_power)
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <OTG_FS_WKUP_IRQHandler+0x2c>)
 80004c2:	7a9b      	ldrb	r3, [r3, #10]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d00a      	beq.n	80004de <OTG_FS_WKUP_IRQHandler+0x22>
  {
    *(uint32_t *)(0xE000ED10) &= 0xFFFFFFF9 ;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <OTG_FS_WKUP_IRQHandler+0x30>)
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <OTG_FS_WKUP_IRQHandler+0x30>)
 80004cc:	6812      	ldr	r2, [r2, #0]
 80004ce:	f022 0206 	bic.w	r2, r2, #6
 80004d2:	601a      	str	r2, [r3, #0]
    SystemInit();
 80004d4:	f7ff fe78 	bl	80001c8 <SystemInit>
    USB_OTG_UngateClock(&USB_OTG_dev);
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <OTG_FS_WKUP_IRQHandler+0x2c>)
 80004da:	f002 f975 	bl	80027c8 <USB_OTG_UngateClock>
  }
  EXTI_ClearITPendingBit(EXTI_Line18);
 80004de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80004e2:	f003 ff13 	bl	800430c <EXTI_ClearITPendingBit>
}
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000140 	.word	0x20000140
 80004ec:	e000ed10 	.word	0xe000ed10

080004f0 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
extern "C" void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 80004fa:	bf00      	nop
}
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
extern "C" uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 800050c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000510:	4618      	mov	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000520:	4b37      	ldr	r3, [pc, #220]	; (8000600 <Audio_MAL_IRQHandler+0xe4>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b37      	ldr	r3, [pc, #220]	; (8000604 <Audio_MAL_IRQHandler+0xe8>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4610      	mov	r0, r2
 800052a:	4619      	mov	r1, r3
 800052c:	f003 ff86 	bl	800443c <DMA_GetFlagStatus>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d062      	beq.n	80005fc <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000536:	4b34      	ldr	r3, [pc, #208]	; (8000608 <Audio_MAL_IRQHandler+0xec>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d04a      	beq.n	80005d4 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800053e:	bf00      	nop
 8000540:	4b2f      	ldr	r3, [pc, #188]	; (8000600 <Audio_MAL_IRQHandler+0xe4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4618      	mov	r0, r3
 8000546:	f003 ff61 	bl	800440c <DMA_GetCmdStatus>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d1f7      	bne.n	8000540 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000550:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <Audio_MAL_IRQHandler+0xe4>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <Audio_MAL_IRQHandler+0xe8>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4610      	mov	r0, r2
 800055a:	4619      	mov	r1, r3
 800055c:	f003 ffaa 	bl	80044b4 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <Audio_MAL_IRQHandler+0xf0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4b2a      	ldr	r3, [pc, #168]	; (8000610 <Audio_MAL_IRQHandler+0xf4>)
 8000568:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800056a:	4b27      	ldr	r3, [pc, #156]	; (8000608 <Audio_MAL_IRQHandler+0xec>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000572:	429a      	cmp	r2, r3
 8000574:	bf28      	it	cs
 8000576:	461a      	movcs	r2, r3
 8000578:	4b25      	ldr	r3, [pc, #148]	; (8000610 <Audio_MAL_IRQHandler+0xf4>)
 800057a:	611a      	str	r2, [r3, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <Audio_MAL_IRQHandler+0xe4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	4923      	ldr	r1, [pc, #140]	; (8000610 <Audio_MAL_IRQHandler+0xf4>)
 8000584:	f003 fed0 	bl	8004328 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <Audio_MAL_IRQHandler+0xe4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	2101      	movs	r1, #1
 8000590:	f003 ff20 	bl	80043d4 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000594:	4b1d      	ldr	r3, [pc, #116]	; (800060c <Audio_MAL_IRQHandler+0xf0>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <Audio_MAL_IRQHandler+0xec>)
 800059a:	6819      	ldr	r1, [r3, #0]
 800059c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a0:	4299      	cmp	r1, r3
 80005a2:	bf38      	it	cc
 80005a4:	460b      	movcc	r3, r1
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	441a      	add	r2, r3
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <Audio_MAL_IRQHandler+0xf0>)
 80005ac:	601a      	str	r2, [r3, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <Audio_MAL_IRQHandler+0xec>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <Audio_MAL_IRQHandler+0xec>)
 80005b4:	6819      	ldr	r1, [r3, #0]
 80005b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ba:	4299      	cmp	r1, r3
 80005bc:	bf38      	it	cc
 80005be:	460b      	movcc	r3, r1
 80005c0:	1ad2      	subs	r2, r2, r3
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <Audio_MAL_IRQHandler+0xec>)
 80005c4:	601a      	str	r2, [r3, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <Audio_MAL_IRQHandler+0xe4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	2101      	movs	r1, #1
 80005ce:	f003 ff01 	bl	80043d4 <DMA_Cmd>
 80005d2:	e013      	b.n	80005fc <Audio_MAL_IRQHandler+0xe0>
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <Audio_MAL_IRQHandler+0xe4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	f003 fefa 	bl	80043d4 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <Audio_MAL_IRQHandler+0xe4>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <Audio_MAL_IRQHandler+0xe8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4610      	mov	r0, r2
 80005ea:	4619      	mov	r1, r3
 80005ec:	f003 ff62 	bl	80044b4 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <Audio_MAL_IRQHandler+0xf0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	2100      	movs	r1, #0
 80005f8:	f7ff ff7a 	bl	80004f0 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000000c 	.word	0x2000000c
 8000604:	20000010 	.word	0x20000010
 8000608:	20000004 	.word	0x20000004
 800060c:	2000075c 	.word	0x2000075c
 8000610:	2000079c 	.word	0x2000079c

08000614 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000618:	f7ff ff80 	bl	800051c <Audio_MAL_IRQHandler>
}
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop

08000620 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000624:	f7ff ff7a 	bl	800051c <Audio_MAL_IRQHandler>
}
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop

0800062c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <SPI3_IRQHandler+0x38>)
 8000632:	2102      	movs	r1, #2
 8000634:	f003 fd02 	bl	800403c <SPI_I2S_GetFlagStatus>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d011      	beq.n	8000662 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <SPI3_IRQHandler+0x3c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d106      	bne.n	8000654 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000646:	f7ff ff5f 	bl	8000508 <EVAL_AUDIO_GetSampleCallBack>
 800064a:	4603      	mov	r3, r0
 800064c:	2004      	movs	r0, #4
 800064e:	4619      	mov	r1, r3
 8000650:	f003 ff5e 	bl	8004510 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000654:	f7ff ff58 	bl	8000508 <EVAL_AUDIO_GetSampleCallBack>
 8000658:	4603      	mov	r3, r0
 800065a:	4802      	ldr	r0, [pc, #8]	; (8000664 <SPI3_IRQHandler+0x38>)
 800065c:	4619      	mov	r1, r3
 800065e:	f003 fcdf 	bl	8004020 <SPI_I2S_SendData>
  }
}
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40003c00 	.word	0x40003c00
 8000668:	20000008 	.word	0x20000008

0800066c <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f001 fa97 	bl	8001bac <USB_OTG_IsDeviceMode>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	f000 809c 	beq.w	80007be <USBD_OTG_ISR_Handler+0x152>
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f001 faa2 	bl	8001bd0 <USB_OTG_ReadCoreItr>
 800068c:	4603      	mov	r3, r0
 800068e:	613b      	str	r3, [r7, #16]
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d101      	bne.n	800069a <USBD_OTG_ISR_Handler+0x2e>
    {
      return 0;
 8000696:	2300      	movs	r3, #0
 8000698:	e092      	b.n	80007c0 <USBD_OTG_ISR_Handler+0x154>
    }
    
    if (gintr_status.b.outepintr)
 800069a:	7cbb      	ldrb	r3, [r7, #18]
 800069c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d006      	beq.n	80006b4 <USBD_OTG_ISR_Handler+0x48>
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 fa12 	bl	8000ad0 <DCD_HandleOutEP_ISR>
 80006ac:	4603      	mov	r3, r0
 80006ae:	697a      	ldr	r2, [r7, #20]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	617b      	str	r3, [r7, #20]
    }    
    
    if (gintr_status.b.inepint)
 80006b4:	7cbb      	ldrb	r3, [r7, #18]
 80006b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d006      	beq.n	80006ce <USBD_OTG_ISR_Handler+0x62>
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f90f 	bl	80008e4 <DCD_HandleInEP_ISR>
 80006c6:	4603      	mov	r3, r0
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.modemismatch)
 80006ce:	7c3b      	ldrb	r3, [r7, #16]
 80006d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d009      	beq.n	80006ee <USBD_OTG_ISR_Handler+0x82>
    {
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
      gintsts.b.modemismatch = 1;
 80006de:	7b3b      	ldrb	r3, [r7, #12]
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	733b      	strb	r3, [r7, #12]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	615a      	str	r2, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 80006ee:	7cfb      	ldrb	r3, [r7, #19]
 80006f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d006      	beq.n	8000708 <USBD_OTG_ISR_Handler+0x9c>
    {
      retval |= DCD_HandleResume_ISR(pdev);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 f864 	bl	80007c8 <DCD_HandleResume_ISR>
 8000700:	4603      	mov	r3, r0
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	4313      	orrs	r3, r2
 8000706:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.usbsuspend)
 8000708:	7c7b      	ldrb	r3, [r7, #17]
 800070a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d006      	beq.n	8000722 <USBD_OTG_ISR_Handler+0xb6>
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 f897 	bl	8000848 <DCD_HandleUSBSuspend_ISR>
 800071a:	4603      	mov	r3, r0
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	4313      	orrs	r3, r2
 8000720:	617b      	str	r3, [r7, #20]
    }
    if (gintr_status.b.sofintr)
 8000722:	7c3b      	ldrb	r3, [r7, #16]
 8000724:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d006      	beq.n	800073c <USBD_OTG_ISR_Handler+0xd0>
    {
      retval |= DCD_HandleSof_ISR(pdev);
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 fa8a 	bl	8000c48 <DCD_HandleSof_ISR>
 8000734:	4603      	mov	r3, r0
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	4313      	orrs	r3, r2
 800073a:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 800073c:	7c3b      	ldrb	r3, [r7, #16]
 800073e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2b00      	cmp	r3, #0
 8000746:	d006      	beq.n	8000756 <USBD_OTG_ISR_Handler+0xea>
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 fa97 	bl	8000c7c <DCD_HandleRxStatusQueueLevel_ISR>
 800074e:	4603      	mov	r3, r0
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	4313      	orrs	r3, r2
 8000754:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.usbreset)
 8000756:	7c7b      	ldrb	r3, [r7, #17]
 8000758:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	d006      	beq.n	8000770 <USBD_OTG_ISR_Handler+0x104>
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f000 fb7e 	bl	8000e64 <DCD_HandleUsbReset_ISR>
 8000768:	4603      	mov	r3, r0
 800076a:	697a      	ldr	r2, [r7, #20]
 800076c:	4313      	orrs	r3, r2
 800076e:	617b      	str	r3, [r7, #20]
      
    }
    if (gintr_status.b.enumdone)
 8000770:	7c7b      	ldrb	r3, [r7, #17]
 8000772:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d006      	beq.n	800078a <USBD_OTG_ISR_Handler+0x11e>
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f000 fc13 	bl	8000fa8 <DCD_HandleEnumDone_ISR>
 8000782:	4603      	mov	r3, r0
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	4313      	orrs	r3, r2
 8000788:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.incomplisoin)
 800078a:	7cbb      	ldrb	r3, [r7, #18]
 800078c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d006      	beq.n	80007a4 <USBD_OTG_ISR_Handler+0x138>
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f000 fc42 	bl	8001020 <DCD_IsoINIncomplete_ISR>
 800079c:	4603      	mov	r3, r0
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	617b      	str	r3, [r7, #20]
    }

    if (gintr_status.b.incomplisoout)
 80007a4:	7cbb      	ldrb	r3, [r7, #18]
 80007a6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d006      	beq.n	80007be <USBD_OTG_ISR_Handler+0x152>
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 fc4f 	bl	8001054 <DCD_IsoOUTIncomplete_ISR>
 80007b6:	4603      	mov	r3, r0
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	617b      	str	r3, [r7, #20]
    {
      retval |= DCD_OTG_ISR(pdev);
    }   
#endif    
  }
  return retval;
 80007be:	697b      	ldr	r3, [r7, #20]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <DCD_HandleResume_ISR>:
*                 remote Wake-up sequence
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleResume_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	7a9b      	ldrb	r3, [r3, #10]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d011      	beq.n	80007fc <DCD_HandleResume_ISR+0x34>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	60fb      	str	r3, [r7, #12]
    power.b.gatehclk = 0;
 80007e2:	7b3b      	ldrb	r3, [r7, #12]
 80007e4:	f36f 0341 	bfc	r3, #1, #1
 80007e8:	733b      	strb	r3, [r7, #12]
    power.b.stoppclk = 0;
 80007ea:	7b3b      	ldrb	r3, [r7, #12]
 80007ec:	f36f 0300 	bfc	r3, #0, #1
 80007f0:	733b      	strb	r3, [r7, #12]
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	601a      	str	r2, [r3, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
  devctl.b.rmtwkupsig = 1;
 8000800:	7c3b      	ldrb	r3, [r7, #16]
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	691b      	ldr	r3, [r3, #16]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	6912      	ldr	r2, [r2, #16]
 8000810:	6851      	ldr	r1, [r2, #4]
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	43d2      	mvns	r2, r2
 8000816:	400a      	ands	r2, r1
 8000818:	605a      	str	r2, [r3, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <DCD_HandleResume_ISR+0x7c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  gintsts.b.wkupintr = 1;
 8000828:	7dfb      	ldrb	r3, [r7, #23]
 800082a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082e:	75fb      	strb	r3, [r7, #23]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	615a      	str	r2, [r3, #20]
  return 1;
 8000838:	2301      	movs	r3, #1
}
 800083a:	4618      	mov	r0, r3
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000040 	.word	0x20000040

08000848 <DCD_HandleUSBSuspend_ISR>:
*         Indicates that SUSPEND state has been detected on the USB
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  
  USBD_DCD_INT_fops->Suspend (pdev);      
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <DCD_HandleUSBSuspend_ISR+0x94>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	4798      	blx	r3
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	691b      	ldr	r3, [r3, #16]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	60fb      	str	r3, [r7, #12]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  gintsts.b.usbsuspend = 1;
 8000866:	7d7b      	ldrb	r3, [r7, #21]
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	757b      	strb	r3, [r7, #21]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	697a      	ldr	r2, [r7, #20]
 8000874:	615a      	str	r2, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1))
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7a9b      	ldrb	r3, [r3, #10]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d029      	beq.n	80008d2 <DCD_HandleUSBSuspend_ISR+0x8a>
 800087e:	7b3b      	ldrb	r3, [r7, #12]
 8000880:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b01      	cmp	r3, #1
 8000888:	d123      	bne.n	80008d2 <DCD_HandleUSBSuspend_ISR+0x8a>
  {
	/*  switch-off the clocks */
    power.d32 = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
    power.b.stoppclk = 1;
 800088e:	7c3b      	ldrb	r3, [r7, #16]
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	743b      	strb	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80008a2:	6811      	ldr	r1, [r2, #0]
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	430a      	orrs	r2, r1
 80008a8:	601a      	str	r2, [r3, #0]
    
    power.b.gatehclk = 1;
 80008aa:	7c3b      	ldrb	r3, [r7, #16]
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	743b      	strb	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80008be:	6811      	ldr	r1, [r2, #0]
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	601a      	str	r2, [r3, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <DCD_HandleUSBSuspend_ISR+0x98>)
 80008c8:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <DCD_HandleUSBSuspend_ISR+0x98>)
 80008ca:	6912      	ldr	r2, [r2, #16]
 80008cc:	f042 0206 	orr.w	r2, r2, #6
 80008d0:	611a      	str	r2, [r3, #16]
  }
  return 1;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000040 	.word	0x20000040
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <DCD_HandleInEP_ISR>:
*         Indicates that an IN EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f001 ff19 	bl	800272c <USB_OTG_ReadDevAllInEPItr>
 80008fa:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 80008fc:	e0dc      	b.n	8000ab8 <DCD_HandleInEP_ISR+0x1d4>
  {
    if (ep_intr&0x1) /* In ITR */
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	2b00      	cmp	r3, #0
 8000906:	f000 80d1 	beq.w	8000aac <DCD_HandleInEP_ISR+0x1c8>
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	4619      	mov	r1, r3
 8000912:	f000 fbb9 	bl	8001088 <DCD_ReadDevInEP>
 8000916:	4603      	mov	r3, r0
 8000918:	60bb      	str	r3, [r7, #8]
      if ( diepint.b.xfercompl )
 800091a:	7a3b      	ldrb	r3, [r7, #8]
 800091c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d032      	beq.n	800098c <DCD_HandleInEP_ISR+0xa8>
      {
        fifoemptymsk = 0x1 << epnum;
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	2201      	movs	r2, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	60fb      	str	r3, [r7, #12]
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	691b      	ldr	r3, [r3, #16]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	6912      	ldr	r2, [r2, #16]
 8000938:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	43d2      	mvns	r2, r2
 800093e:	400a      	ands	r2, r1
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	7a3b      	ldrb	r3, [r7, #8]
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	723b      	strb	r3, [r7, #8]
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	3304      	adds	r3, #4
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4413      	add	r3, r2
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	609a      	str	r2, [r3, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 800095e:	4b5b      	ldr	r3, [pc, #364]	; (8000acc <DCD_HandleInEP_ISR+0x1e8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	4611      	mov	r1, r2
 800096c:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	78db      	ldrb	r3, [r3, #3]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d10a      	bne.n	800098c <DCD_HandleInEP_ISR+0xa8>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d107      	bne.n	800098c <DCD_HandleInEP_ISR+0xa8>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8000982:	2b04      	cmp	r3, #4
 8000984:	d102      	bne.n	800098c <DCD_HandleInEP_ISR+0xa8>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f001 fee6 	bl	8002758 <USB_OTG_EP0_OutStart>
          }
        }           
      }
      if ( diepint.b.ahberr )
 800098c:	7a3b      	ldrb	r3, [r7, #8]
 800098e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d00d      	beq.n	80009b4 <DCD_HandleInEP_ISR+0xd0>
      {
        CLEAR_IN_EP_INTR(epnum, ahberr);
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	7a3b      	ldrb	r3, [r7, #8]
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	723b      	strb	r3, [r7, #8]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	3304      	adds	r3, #4
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	68ba      	ldr	r2, [r7, #8]
 80009b2:	609a      	str	r2, [r3, #8]
      }
      if ( diepint.b.timeout )
 80009b4:	7a3b      	ldrb	r3, [r7, #8]
 80009b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00d      	beq.n	80009dc <DCD_HandleInEP_ISR+0xf8>
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	7a3b      	ldrb	r3, [r7, #8]
 80009c6:	f043 0308 	orr.w	r3, r3, #8
 80009ca:	723b      	strb	r3, [r7, #8]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	3304      	adds	r3, #4
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	68ba      	ldr	r2, [r7, #8]
 80009da:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.intktxfemp)
 80009dc:	7a3b      	ldrb	r3, [r7, #8]
 80009de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d00d      	beq.n	8000a04 <DCD_HandleInEP_ISR+0x120>
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	7a3b      	ldrb	r3, [r7, #8]
 80009ee:	f043 0310 	orr.w	r3, r3, #16
 80009f2:	723b      	strb	r3, [r7, #8]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	3304      	adds	r3, #4
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.intknepmis)
 8000a04:	7a3b      	ldrb	r3, [r7, #8]
 8000a06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00d      	beq.n	8000a2c <DCD_HandleInEP_ISR+0x148>
      {
        CLEAR_IN_EP_INTR(epnum, intknepmis);
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	7a3b      	ldrb	r3, [r7, #8]
 8000a16:	f043 0320 	orr.w	r3, r3, #32
 8000a1a:	723b      	strb	r3, [r7, #8]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	3304      	adds	r3, #4
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4413      	add	r3, r2
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	68ba      	ldr	r2, [r7, #8]
 8000a2a:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 8000a2c:	7a3b      	ldrb	r3, [r7, #8]
 8000a2e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d00d      	beq.n	8000a54 <DCD_HandleInEP_ISR+0x170>
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	7a3b      	ldrb	r3, [r7, #8]
 8000a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a42:	723b      	strb	r3, [r7, #8]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	609a      	str	r2, [r3, #8]
      }
      if ( diepint.b.epdisabled )
 8000a54:	7a3b      	ldrb	r3, [r7, #8]
 8000a56:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d00d      	beq.n	8000a7c <DCD_HandleInEP_ISR+0x198>
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	7a3b      	ldrb	r3, [r7, #8]
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	723b      	strb	r3, [r7, #8]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	3304      	adds	r3, #4
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	4413      	add	r3, r2
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	68ba      	ldr	r2, [r7, #8]
 8000a7a:	609a      	str	r2, [r3, #8]
      }       
      if (diepint.b.emptyintr)
 8000a7c:	7a3b      	ldrb	r3, [r7, #8]
 8000a7e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d011      	beq.n	8000aac <DCD_HandleInEP_ISR+0x1c8>
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	6939      	ldr	r1, [r7, #16]
 8000a8c:	f000 f978 	bl	8000d80 <DCD_WriteEmptyTxFifo>
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	7a3b      	ldrb	r3, [r7, #8]
 8000a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9a:	723b      	strb	r3, [r7, #8]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	085b      	lsrs	r3, r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
  uint32_t epnum = 0;
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
  
  while ( ep_intr )
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f47f af1f 	bne.w	80008fe <DCD_HandleInEP_ISR+0x1a>
    }
    epnum++;
    ep_intr >>= 1;
  }
  
  return 1;
 8000ac0:	2301      	movs	r3, #1
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000040 	.word	0x20000040

08000ad0 <DCD_HandleOutEP_ISR>:
*         Indicates that an OUT EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
  
  doepint.d32 = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f001 fdf1 	bl	80026c8 <USB_OTG_ReadDevAllOutEp_itr>
 8000ae6:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 8000ae8:	e0a3      	b.n	8000c32 <DCD_HandleOutEP_ISR+0x162>
  {
    if (ep_intr&0x1)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	f000 8098 	beq.w	8000c26 <DCD_HandleOutEP_ISR+0x156>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f001 fdf9 	bl	80026f4 <USB_OTG_ReadDevOutEP_itr>
 8000b02:	4603      	mov	r3, r0
 8000b04:	60fb      	str	r3, [r7, #12]
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 8000b06:	7b3b      	ldrb	r3, [r7, #12]
 8000b08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d048      	beq.n	8000ba4 <DCD_HandleOutEP_ISR+0xd4>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	7b3b      	ldrb	r3, [r7, #12]
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	733b      	strb	r3, [r7, #12]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	3314      	adds	r3, #20
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	609a      	str	r2, [r3, #8]
        if (pdev->cfg.dma_enable == 1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	78db      	ldrb	r3, [r3, #3]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d11f      	bne.n	8000b76 <DCD_HandleOutEP_ISR+0xa6>
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	3314      	adds	r3, #20
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	60bb      	str	r3, [r7, #8]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	440b      	add	r3, r1
 8000b54:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8000b58:	681a      	ldr	r2, [r3, #0]
            deptsiz.b.xfersize;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
        if (pdev->cfg.dma_enable == 1)
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8000b60:	1ad1      	subs	r1, r2, r3
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	4403      	add	r3, r0
 8000b70:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8000b74:	6019      	str	r1, [r3, #0]
            deptsiz.b.xfersize;
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 8000b76:	4b33      	ldr	r3, [pc, #204]	; (8000c44 <DCD_HandleOutEP_ISR+0x174>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	78db      	ldrb	r3, [r3, #3]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d10a      	bne.n	8000ba4 <DCD_HandleOutEP_ISR+0xd4>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d107      	bne.n	8000ba4 <DCD_HandleOutEP_ISR+0xd4>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8000b9a:	2b05      	cmp	r3, #5
 8000b9c:	d102      	bne.n	8000ba4 <DCD_HandleOutEP_ISR+0xd4>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f001 fdda 	bl	8002758 <USB_OTG_EP0_OutStart>
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 8000ba4:	7b3b      	ldrb	r3, [r7, #12]
 8000ba6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00d      	beq.n	8000bcc <DCD_HandleOutEP_ISR+0xfc>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	7b3b      	ldrb	r3, [r7, #12]
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	733b      	strb	r3, [r7, #12]
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	3314      	adds	r3, #20
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	609a      	str	r2, [r3, #8]
      }
      /* AHB Error */
      if ( doepint.b.ahberr )
 8000bcc:	7b3b      	ldrb	r3, [r7, #12]
 8000bce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d00d      	beq.n	8000bf4 <DCD_HandleOutEP_ISR+0x124>
      {
        CLEAR_OUT_EP_INTR(epnum, ahberr);
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	7b3b      	ldrb	r3, [r7, #12]
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	733b      	strb	r3, [r7, #12]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	3314      	adds	r3, #20
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	609a      	str	r2, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 8000bf4:	7b3b      	ldrb	r3, [r7, #12]
 8000bf6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d012      	beq.n	8000c26 <DCD_HandleOutEP_ISR+0x156>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <DCD_HandleOutEP_ISR+0x174>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	7b3b      	ldrb	r3, [r7, #12]
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	733b      	strb	r3, [r7, #12]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	3314      	adds	r3, #20
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	085b      	lsrs	r3, r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
  
  while ( ep_intr )
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f47f af58 	bne.w	8000aea <DCD_HandleOutEP_ISR+0x1a>
      }
    }
    epnum++;
    ep_intr >>= 1;
  }
  return 1;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000040 	.word	0x20000040

08000c48 <DCD_HandleSof_ISR>:
*         Handles the SOF Interrupts
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <DCD_HandleSof_ISR+0x30>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	4798      	blx	r3
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  GINTSTS.b.sofintr = 1;
 8000c5e:	7b3b      	ldrb	r3, [r7, #12]
 8000c60:	f043 0308 	orr.w	r3, r3, #8
 8000c64:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	615a      	str	r2, [r3, #20]
  
  return 1;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000040 	.word	0x20000040

08000c7c <DCD_HandleRxStatusQueueLevel_ISR>:
*         Handles the Rx Status Queue Level Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleRxStatusQueueLevel_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  USB_OTG_DRXSTS_TypeDef   status;
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
  int_mask.b.rxstsqlvl = 1;
 8000c88:	7c3b      	ldrb	r3, [r7, #16]
 8000c8a:	f043 0310 	orr.w	r3, r3, #16
 8000c8e:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	68d2      	ldr	r2, [r2, #12]
 8000c98:	6991      	ldr	r1, [r2, #24]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	43d2      	mvns	r2, r2
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	619a      	str	r2, [r3, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	6a1b      	ldr	r3, [r3, #32]
 8000ca8:	60fb      	str	r3, [r7, #12]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 8000caa:	7b3b      	ldrb	r3, [r7, #12]
 8000cac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	617b      	str	r3, [r7, #20]
  
  switch (status.b.pktsts)
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	2b05      	cmp	r3, #5
 8000cd2:	d846      	bhi.n	8000d62 <DCD_HandleRxStatusQueueLevel_ISR+0xe6>
 8000cd4:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <DCD_HandleRxStatusQueueLevel_ISR+0x60>)
 8000cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cda:	bf00      	nop
 8000cdc:	08000d63 	.word	0x08000d63
 8000ce0:	08000cf5 	.word	0x08000cf5
 8000ce4:	08000d63 	.word	0x08000d63
 8000ce8:	08000d63 	.word	0x08000d63
 8000cec:	08000d63 	.word	0x08000d63
 8000cf0:	08000d3f 	.word	0x08000d3f
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 8000cf4:	89bb      	ldrh	r3, [r7, #12]
 8000cf6:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d01d      	beq.n	8000d3c <DCD_HandleRxStatusQueueLevel_ISR+0xc0>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	89bb      	ldrh	r3, [r7, #12]
 8000d06:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	461a      	mov	r2, r3
 8000d12:	f000 fc95 	bl	8001640 <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	89bb      	ldrh	r3, [r7, #12]
 8000d1c:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	441a      	add	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	60da      	str	r2, [r3, #12]
      ep->xfer_count += status.b.bcnt;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	699a      	ldr	r2, [r3, #24]
 8000d2c:	89bb      	ldrh	r3, [r7, #12]
 8000d2e:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	441a      	add	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	619a      	str	r2, [r3, #24]
    }
    break;
 8000d3a:	e013      	b.n	8000d64 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
 8000d3c:	e012      	b.n	8000d64 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	4619      	mov	r1, r3
 8000d48:	2208      	movs	r2, #8
 8000d4a:	f000 fc79 	bl	8001640 <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	699a      	ldr	r2, [r3, #24]
 8000d52:	89bb      	ldrh	r3, [r7, #12]
 8000d54:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	441a      	add	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	619a      	str	r2, [r3, #24]
    break;
 8000d60:	e000      	b.n	8000d64 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
  default:
    break;
 8000d62:	bf00      	nop
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	68d2      	ldr	r2, [r2, #12]
 8000d6c:	6991      	ldr	r1, [r2, #24]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	430a      	orrs	r2, r1
 8000d72:	619a      	str	r2, [r3, #24]
  
  return 1;
 8000d74:	2301      	movs	r3, #1
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop

08000d80 <DCD_WriteEmptyTxFifo>:
*         check FIFO for the next packet to be loaded
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_WriteEmptyTxFifo(USB_OTG_CORE_HANDLE *pdev, uint32_t epnum)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  USB_OTG_DTXFSTSn_TypeDef  txstatus;
  USB_OTG_EP *ep;
  uint32_t len = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  uint32_t len32b;
  txstatus.d32 = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  
  ep = &pdev->dev.in_ep[epnum];    
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
  
  len = ep->xfer_len - ep->xfer_count;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	617b      	str	r3, [r7, #20]
  
  if (len > ep->maxpacket)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d202      	bcs.n	8000dc2 <DCD_WriteEmptyTxFifo+0x42>
  {
    len = ep->maxpacket;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	617b      	str	r3, [r7, #20]
  }
  
  len32b = (len + 3) / 4;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3303      	adds	r3, #3
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	613b      	str	r3, [r7, #16]
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	3304      	adds	r3, #4
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	60bb      	str	r3, [r7, #8]
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 8000dda:	e02e      	b.n	8000e3a <DCD_WriteEmptyTxFifo+0xba>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	695a      	ldr	r2, [r3, #20]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
    
    if (len > ep->maxpacket)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d202      	bcs.n	8000df8 <DCD_WriteEmptyTxFifo+0x78>
    {
      len = ep->maxpacket;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	617b      	str	r3, [r7, #20]
    }
    len32b = (len + 3) / 4;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	3303      	adds	r3, #3
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	613b      	str	r3, [r7, #16]
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	68d9      	ldr	r1, [r3, #12]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 fbdf 	bl	80015d0 <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	441a      	add	r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	699a      	ldr	r2, [r3, #24]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	441a      	add	r2, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	619a      	str	r2, [r3, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	3304      	adds	r3, #4
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	60bb      	str	r3, [r7, #8]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 8000e3a:	893b      	ldrh	r3, [r7, #8]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d909      	bls.n	8000e58 <DCD_WriteEmptyTxFifo+0xd8>
          ep->xfer_count < ep->xfer_len &&
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	699a      	ldr	r2, [r3, #24]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	695b      	ldr	r3, [r3, #20]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d203      	bcs.n	8000e58 <DCD_WriteEmptyTxFifo+0xd8>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	695b      	ldr	r3, [r3, #20]
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
          ep->xfer_count < ep->xfer_len &&
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1c1      	bne.n	8000ddc <DCD_WriteEmptyTxFifo+0x5c>
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  }
  
  return 1;
 8000e58:	2301      	movs	r3, #1
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop

08000e64 <DCD_HandleUsbReset_ISR>:
*         This interrupt occurs when a USB Reset is detected
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUsbReset_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
  doepmsk.d32 = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  diepmsk.d32 = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
  dcfg.d32 = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  gintsts.d32 = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
 8000e84:	7c3b      	ldrb	r3, [r7, #16]
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6912      	ldr	r2, [r2, #16]
 8000e94:	6851      	ldr	r1, [r2, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	43d2      	mvns	r2, r2
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	605a      	str	r2, [r3, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	f000 fdd9 	bl	8001a58 <USB_OTG_FlushTxFifo>
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eaa:	e012      	b.n	8000ed2 <DCD_HandleUsbReset_ISR+0x6e>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	22ff      	movs	r2, #255	; 0xff
 8000eba:	609a      	str	r2, [r3, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	3314      	adds	r3, #20
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	22ff      	movs	r2, #255	; 0xff
 8000eca:	609a      	str	r2, [r3, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	3301      	adds	r3, #1
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	785b      	ldrb	r3, [r3, #1]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d8e6      	bhi.n	8000eac <DCD_HandleUsbReset_ISR+0x48>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee6:	619a      	str	r2, [r3, #24]
  
  daintmsk.ep.in = 1;
 8000ee8:	8c3b      	ldrh	r3, [r7, #32]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f362 030f 	bfi	r3, r2, #0, #16
 8000ef0:	843b      	strh	r3, [r7, #32]
  daintmsk.ep.out = 1;
 8000ef2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f362 030f 	bfi	r3, r2, #0, #16
 8000efa:	847b      	strh	r3, [r7, #34]	; 0x22
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	6a3a      	ldr	r2, [r7, #32]
 8000f02:	61da      	str	r2, [r3, #28]
  
  doepmsk.b.setup = 1;
 8000f04:	7f3b      	ldrb	r3, [r7, #28]
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	773b      	strb	r3, [r7, #28]
  doepmsk.b.xfercompl = 1;
 8000f0c:	7f3b      	ldrb	r3, [r7, #28]
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	773b      	strb	r3, [r7, #28]
  doepmsk.b.ahberr = 1;
 8000f14:	7f3b      	ldrb	r3, [r7, #28]
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	773b      	strb	r3, [r7, #28]
  doepmsk.b.epdisabled = 1;
 8000f1c:	7f3b      	ldrb	r3, [r7, #28]
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	773b      	strb	r3, [r7, #28]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	69fa      	ldr	r2, [r7, #28]
 8000f2a:	615a      	str	r2, [r3, #20]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED   
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOUTEP1MSK, doepmsk.d32 );
#endif
  diepmsk.b.xfercompl = 1;
 8000f2c:	7e3b      	ldrb	r3, [r7, #24]
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	763b      	strb	r3, [r7, #24]
  diepmsk.b.timeout = 1;
 8000f34:	7e3b      	ldrb	r3, [r7, #24]
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	763b      	strb	r3, [r7, #24]
  diepmsk.b.epdisabled = 1;
 8000f3c:	7e3b      	ldrb	r3, [r7, #24]
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	763b      	strb	r3, [r7, #24]
  diepmsk.b.ahberr = 1;
 8000f44:	7e3b      	ldrb	r3, [r7, #24]
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	763b      	strb	r3, [r7, #24]
  diepmsk.b.intknepmis = 1;
 8000f4c:	7e3b      	ldrb	r3, [r7, #24]
 8000f4e:	f043 0320 	orr.w	r3, r3, #32
 8000f52:	763b      	strb	r3, [r7, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	611a      	str	r2, [r3, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	617b      	str	r3, [r7, #20]
  dcfg.b.devaddr = 0;
 8000f64:	8abb      	ldrh	r3, [r7, #20]
 8000f66:	f36f 130a 	bfc	r3, #4, #7
 8000f6a:	82bb      	strh	r3, [r7, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	601a      	str	r2, [r3, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f001 fbef 	bl	8002758 <USB_OTG_EP0_OutStart>
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  gintsts.b.usbreset = 1;
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	f043 0310 	orr.w	r3, r3, #16
 8000f84:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	615a      	str	r2, [r3, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <DCD_HandleUsbReset_ISR+0x140>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	4798      	blx	r3
  return 1;
 8000f98:	2301      	movs	r3, #1
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000040 	.word	0x20000040

08000fa8 <DCD_HandleEnumDone_ISR>:
*         Read the device status register and set the device speed
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 ffef 	bl	8001f94 <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 ffc4 	bl	8001f4c <USB_OTG_GetDeviceSpeed>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d10c      	bne.n	8000fe4 <DCD_HandleEnumDone_ISR+0x3c>
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd6:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 9;
 8000fd8:	7a7b      	ldrb	r3, [r7, #9]
 8000fda:	2209      	movs	r2, #9
 8000fdc:	f362 0385 	bfi	r3, r2, #2, #4
 8000fe0:	727b      	strb	r3, [r7, #9]
 8000fe2:	e00a      	b.n	8000ffa <DCD_HandleEnumDone_ISR+0x52>
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2240      	movs	r2, #64	; 0x40
 8000fee:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 5;
 8000ff0:	7a7b      	ldrb	r3, [r7, #9]
 8000ff2:	2205      	movs	r2, #5
 8000ff4:	f362 0385 	bfi	r3, r2, #2, #4
 8000ff8:	727b      	strb	r3, [r7, #9]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	60da      	str	r2, [r3, #12]
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
  gintsts.b.enumdone = 1;
 8001006:	7b7b      	ldrb	r3, [r7, #13]
 8001008:	f043 0320 	orr.w	r3, r3, #32
 800100c:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	615a      	str	r2, [r3, #20]
  return 1;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <DCD_IsoINIncomplete_ISR>:
*         handle the ISO IN incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoINIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <DCD_IsoINIncomplete_ISR+0x30>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	f043 0310 	orr.w	r3, r3, #16
 800103c:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	615a      	str	r2, [r3, #20]
  
  return 1;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000040 	.word	0x20000040

08001054 <DCD_IsoOUTIncomplete_ISR>:
*         handle the ISO OUT incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoOUTIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <DCD_IsoOUTIncomplete_ISR+0x30>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	f043 0320 	orr.w	r3, r3, #32
 8001070:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	615a      	str	r2, [r3, #20]
  return 1;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000040 	.word	0x20000040

08001088 <DCD_ReadDevInEP>:
*         Reads ep flags
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	617b      	str	r3, [r7, #20]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a2:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	01db      	lsls	r3, r3, #7
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	3304      	adds	r3, #4
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	4013      	ands	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  return v;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	371c      	adds	r7, #28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f000 fad5 	bl	8001698 <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.device_address = 0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e023      	b.n	800114c <DCD_Init+0x74>
  {
    ep = &pdev->dev.in_ep[i];
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 1;
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2201      	movs	r2, #1
 800111c:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	b29a      	uxth	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	80da      	strh	r2, [r3, #6]
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2200      	movs	r2, #0
 8001132:	70da      	strb	r2, [r3, #3]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2240      	movs	r2, #64	; 0x40
 8001138:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.device_address = 0;
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3301      	adds	r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	785b      	ldrb	r3, [r3, #1]
 8001150:	461a      	mov	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8d5      	bhi.n	8001104 <DCD_Init+0x2c>
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	e023      	b.n	80011a6 <DCD_Init+0xce>
  {
    ep = &pdev->dev.out_ep[i];
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 0;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	2200      	movs	r2, #0
 8001176:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	b29a      	uxth	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	80da      	strh	r2, [r3, #6]
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2200      	movs	r2, #0
 800118c:	70da      	strb	r2, [r3, #3]
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2240      	movs	r2, #64	; 0x40
 8001192:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3301      	adds	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	785b      	ldrb	r3, [r3, #1]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d8d5      	bhi.n	800115e <DCD_Init+0x86>
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 fc34 	bl	8001a20 <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fb27 	bl	800180c <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	2100      	movs	r1, #0
 80011c2:	f000 fcb3 	bl	8001b2c <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fd36 	bl	8001c38 <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 fc0b 	bl	80019e8 <USB_OTG_EnableGlobalInt>
}
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	70f9      	strb	r1, [r7, #3]
 80011e2:	803a      	strh	r2, [r7, #0]
 80011e4:	70bb      	strb	r3, [r7, #2]
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	da0c      	bge.n	8001208 <DCD_EP_Open+0x30>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	e00b      	b.n	8001220 <DCD_EP_Open+0x48>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001226:	b2da      	uxtb	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	09db      	lsrs	r3, r3, #7
 8001230:	b2db      	uxtb	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8001238:	883a      	ldrh	r2, [r7, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	78ba      	ldrb	r2, [r7, #2]
 8001242:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	785b      	ldrb	r3, [r3, #1]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d004      	beq.n	8001256 <DCD_EP_Open+0x7e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 8001256:	78bb      	ldrb	r3, [r7, #2]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d102      	bne.n	8001262 <DCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	711a      	strb	r2, [r3, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	68f9      	ldr	r1, [r7, #12]
 8001266:	f000 fed1 	bl	800200c <USB_OTG_EPActivate>
  return 0;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <DCD_EP_Close>:
* @param pdev: device instance
* @param ep_addr: endpoint address
* @retval : status
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	b25b      	sxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	da0c      	bge.n	80012a2 <DCD_EP_Close+0x2e>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e00b      	b.n	80012ba <DCD_EP_Close+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 80012ba:	78fb      	ldrb	r3, [r7, #3]
 80012bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	701a      	strb	r2, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	09db      	lsrs	r3, r3, #7
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	68f9      	ldr	r1, [r7, #12]
 80012d6:	f000 ff07 	bl	80020e8 <USB_OTG_EPDeactivate>
  return 0;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	460a      	mov	r2, r1
 80012f0:	72fa      	strb	r2, [r7, #11]
 80012f2:	813b      	strh	r3, [r7, #8]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80012f4:	7afb      	ldrb	r3, [r7, #11]
 80012f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	60da      	str	r2, [r3, #12]
  ep->xfer_len = buf_len;
 8001312:	893a      	ldrh	r2, [r7, #8]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2200      	movs	r2, #0
 8001322:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001324:	7afb      	ldrb	r3, [r7, #11]
 8001326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800132a:	b2da      	uxtb	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	701a      	strb	r2, [r3, #0]
  
  if (pdev->cfg.dma_enable == 1)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	78db      	ldrb	r3, [r3, #3]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d102      	bne.n	800133e <DCD_EP_PrepareRx+0x5a>
  {
    ep->dma_addr = (uint32_t)pbuf;  
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	611a      	str	r2, [r3, #16]
  }
  
  if ( ep->num == 0 )
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d104      	bne.n	8001350 <DCD_EP_PrepareRx+0x6c>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	6979      	ldr	r1, [r7, #20]
 800134a:	f001 f853 	bl	80023f4 <USB_OTG_EP0StartXfer>
 800134e:	e003      	b.n	8001358 <DCD_EP_PrepareRx+0x74>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	6979      	ldr	r1, [r7, #20]
 8001354:	f000 ff0e 	bl	8002174 <USB_OTG_EPStartXfer>
  }
  return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop

08001364 <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	460b      	mov	r3, r1
 8001372:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8001374:	7afb      	ldrb	r3, [r7, #11]
 8001376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	4413      	add	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2201      	movs	r2, #1
 8001390:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;  
 8001392:	7afb      	ldrb	r3, [r7, #11]
 8001394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001398:	b2da      	uxtb	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	701a      	strb	r2, [r3, #0]
  ep->xfer_buff = pbuf;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	60da      	str	r2, [r3, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  ep->xfer_len  = buf_len;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	615a      	str	r2, [r3, #20]
  
  if ( ep->num == 0 )
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d104      	bne.n	80013c8 <DCD_EP_Tx+0x64>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	6979      	ldr	r1, [r7, #20]
 80013c2:	f001 f817 	bl	80023f4 <USB_OTG_EP0StartXfer>
 80013c6:	e003      	b.n	80013d0 <DCD_EP_Tx+0x6c>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	6979      	ldr	r1, [r7, #20]
 80013cc:	f000 fed2 	bl	8002174 <USB_OTG_EPStartXfer>
  }
  return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop

080013dc <DCD_EP_Stall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da0c      	bge.n	800140a <DCD_EP_Stall+0x2e>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	e009      	b.n	800141e <DCD_EP_Stall+0x42>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800140a:	78fa      	ldrb	r2, [r7, #3]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2201      	movs	r2, #1
 8001422:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800142a:	b2da      	uxtb	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	09db      	lsrs	r3, r3, #7
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	68f9      	ldr	r1, [r7, #12]
 8001440:	f001 f8c2 	bl	80025c8 <USB_OTG_EPSetStall>
  return (0);
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop

08001450 <DCD_EP_ClrStall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	b25b      	sxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	da0c      	bge.n	800147e <DCD_EP_ClrStall+0x2e>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e009      	b.n	8001492 <DCD_EP_ClrStall+0x42>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800147e:	78fa      	ldrb	r2, [r7, #3]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;  
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	09db      	lsrs	r3, r3, #7
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	68f9      	ldr	r1, [r7, #12]
 80014b4:	f001 f8cc 	bl	8002650 <USB_OTG_EPClearStall>
  return (0);
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop

080014c4 <DCD_EP_SetAddress>:
* @param pdev: device instance
* @param address: new device address
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  dcfg.b.devaddr = address;
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	89bb      	ldrh	r3, [r7, #12]
 80014de:	f362 130a 	bfi	r3, r2, #4, #7
 80014e2:	81bb      	strh	r3, [r7, #12]
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6912      	ldr	r2, [r2, #16]
 80014ec:	6811      	ldr	r1, [r2, #0]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
}
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <USB_OTG_EnableCommonInt>:
*         Initializes the commmon interrupts, used in both device and modes
* @param  pdev : Selected device
* @retval None
*/
static void USB_OTG_EnableCommonInt(USB_OTG_CORE_HANDLE *pdev)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  
  int_mask.d32 = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	605a      	str	r2, [r3, #4]
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f04f 32ff 	mov.w	r2, #4294967295
 800151e:	615a      	str	r2, [r3, #20]
  /* Enable the interrupts in the INTMSK */
  int_mask.b.wkupintr = 1;
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001526:	73fb      	strb	r3, [r7, #15]
  int_mask.b.usbsuspend = 1; 
 8001528:	7b7b      	ldrb	r3, [r7, #13]
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	737b      	strb	r3, [r7, #13]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	619a      	str	r2, [r3, #24]
}
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop

08001544 <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 8001558:	2003      	movs	r0, #3
 800155a:	f002 fd2d 	bl	8003fb8 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <USB_OTG_CoreReset+0x88>)
 8001570:	429a      	cmp	r2, r3
 8001572:	d901      	bls.n	8001578 <USB_OTG_CoreReset+0x34>
    {
      return USB_OTG_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	e024      	b.n	80015c2 <USB_OTG_CoreReset+0x7e>
    }
  }
  while (greset.b.ahbidle == 0);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	0fdb      	lsrs	r3, r3, #31
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0ea      	beq.n	8001558 <USB_OTG_CoreReset+0x14>
  /* Core Soft Reset */
  count = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  greset.b.csftrst = 1;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <USB_OTG_CoreReset+0x88>)
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d900      	bls.n	80015ae <USB_OTG_CoreReset+0x6a>
    {
      break;
 80015ac:	e005      	b.n	80015ba <USB_OTG_CoreReset+0x76>
    }
  }
  while (greset.b.csftrst == 1);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d0ed      	beq.n	8001596 <USB_OTG_CoreReset+0x52>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80015ba:	2003      	movs	r0, #3
 80015bc:	f002 fcfc 	bl	8003fb8 <USB_OTG_BSP_uDelay>
  return status;
 80015c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	00030d40 	.word	0x00030d40

080015d0 <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	71fa      	strb	r2, [r7, #7]
 80015dc:	80bb      	strh	r3, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	76fb      	strb	r3, [r7, #27]
  if (pdev->cfg.dma_enable == 0)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	78db      	ldrb	r3, [r3, #3]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d122      	bne.n	8001630 <USB_OTG_WritePacket+0x60>
  {
    uint32_t count32b= 0 , i= 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 80015f2:	88bb      	ldrh	r3, [r7, #4]
 80015f4:	3303      	adds	r3, #3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	da00      	bge.n	80015fc <USB_OTG_WritePacket+0x2c>
 80015fa:	3303      	adds	r3, #3
 80015fc:	109b      	asrs	r3, r3, #2
 80015fe:	617b      	str	r3, [r7, #20]
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	3332      	adds	r3, #50	; 0x32
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src+=4)
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	e009      	b.n	8001628 <USB_OTG_WritePacket+0x58>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	601a      	str	r2, [r3, #0]
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	3301      	adds	r3, #1
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3304      	adds	r3, #4
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3f1      	bcc.n	8001614 <USB_OTG_WritePacket+0x44>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
    }
  }
  return status;
 8001630:	7efb      	ldrb	r3, [r7, #27]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop

08001640 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	4613      	mov	r3, r2
 800164c:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  uint32_t count32b = (len + 3) / 4;
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	3303      	adds	r3, #3
 8001656:	2b00      	cmp	r3, #0
 8001658:	da00      	bge.n	800165c <USB_OTG_ReadPacket+0x1c>
 800165a:	3303      	adds	r3, #3
 800165c:	109b      	asrs	r3, r3, #2
 800165e:	61bb      	str	r3, [r7, #24]
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001666:	617b      	str	r3, [r7, #20]
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	e009      	b.n	8001682 <USB_OTG_ReadPacket+0x42>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	601a      	str	r2, [r3, #0]
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3301      	adds	r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	3304      	adds	r3, #4
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	429a      	cmp	r2, r3
 8001688:	d3f1      	bcc.n	800166e <USB_OTG_ReadPacket+0x2e>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
    
  }
  return ((void *)dest);
 800168a:	68bb      	ldr	r3, [r7, #8]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3724      	adds	r7, #36	; 0x24
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
  uint32_t i , baseAddress = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
  USB_OTG_STS status = USB_OTG_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
  
  pdev->cfg.dma_enable       = 0;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	70da      	strb	r2, [r3, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	709a      	strb	r2, [r3, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2240      	movs	r2, #64	; 0x40
 80016bc:	809a      	strh	r2, [r3, #4]
    
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d113      	bne.n	80016ec <USB_OTG_SelectCore+0x54>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 80016c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016c8:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 8 ;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2208      	movs	r2, #8
 80016d4:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2204      	movs	r2, #4
 80016da:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80016e2:	80da      	strh	r2, [r3, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2202      	movs	r2, #2
 80016e8:	721a      	strb	r2, [r3, #8]
 80016ea:	e011      	b.n	8001710 <USB_OTG_SelectCore+0x78>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10e      	bne.n	8001710 <USB_OTG_SelectCore+0x78>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 80016f2:	4b45      	ldr	r3, [pc, #276]	; (8001808 <USB_OTG_SelectCore+0x170>)
 80016f4:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 12 ;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	220c      	movs	r2, #12
 8001700:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2206      	movs	r2, #6
 8001706:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800170e:	80da      	strh	r2, [r3, #6]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60da      	str	r2, [r3, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800171c:	461a      	mov	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	611a      	str	r2, [r3, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e01c      	b.n	8001762 <USB_OTG_SelectCore+0xca>
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	015a      	lsls	r2, r3, #5
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4413      	add	r3, r2
 8001730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8001734:	461a      	mov	r2, r3
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3304      	adds	r3, #4
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	609a      	str	r2, [r3, #8]
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	015a      	lsls	r2, r3, #5
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4413      	add	r3, r2
 800174a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 800174e:	461a      	mov	r2, r3
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3314      	adds	r3, #20
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	605a      	str	r2, [r3, #4]
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	785b      	ldrb	r3, [r3, #1]
 8001766:	461a      	mov	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	429a      	cmp	r2, r3
 800176c:	d8dc      	bhi.n	8001728 <USB_OTG_SelectCore+0x90>
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001774:	461a      	mov	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	615a      	str	r2, [r3, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001780:	461a      	mov	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e00f      	b.n	80017ae <USB_OTG_SelectCore+0x116>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	015a      	lsls	r2, r3, #5
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4413      	add	r3, r2
 8001796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 800179a:	461a      	mov	r2, r3
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3322      	adds	r3, #34	; 0x22
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	609a      	str	r2, [r3, #8]
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d8e9      	bhi.n	800178e <USB_OTG_SelectCore+0xf6>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	e00f      	b.n	80017e0 <USB_OTG_SelectCore+0x148>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	031a      	lsls	r2, r3, #12
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017cc:	461a      	mov	r2, r3
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3332      	adds	r3, #50	; 0x32
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	609a      	str	r2, [r3, #8]
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8e9      	bhi.n	80017c0 <USB_OTG_SelectCore+0x128>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80017f2:	461a      	mov	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  return status;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40040000 	.word	0x40040000

0800180c <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	77fb      	strb	r3, [r7, #31]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GI2CCTL_TypeDef  i2cctl;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
  gccfg.d32 = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  ahbcfg.d32 = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  

  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7a1b      	ldrb	r3, [r3, #8]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d14f      	bne.n	80018cc <USB_OTG_CoreInit+0xc0>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001832:	617b      	str	r3, [r7, #20]
    gccfg.b.pwdn = 0;
 8001834:	7dbb      	ldrb	r3, [r7, #22]
 8001836:	f36f 0300 	bfc	r3, #0, #1
 800183a:	75bb      	strb	r3, [r7, #22]
    
    if (pdev->cfg.Sof_output)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7a5b      	ldrb	r3, [r3, #9]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <USB_OTG_CoreInit+0x40>
    {
      gccfg.b.sofouten = 1;   
 8001844:	7dbb      	ldrb	r3, [r7, #22]
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	75bb      	strb	r3, [r7, #22]
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	61bb      	str	r3, [r7, #24]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 8001860:	7e3b      	ldrb	r3, [r7, #24]
 8001862:	f36f 1386 	bfc	r3, #6, #1
 8001866:	763b      	strb	r3, [r7, #24]
#else
 #ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
 #endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 8001868:	7ebb      	ldrb	r3, [r7, #26]
 800186a:	f36f 1386 	bfc	r3, #6, #1
 800186e:	76bb      	strb	r3, [r7, #26]
    usbcfg.b.ulpi_utmi_sel     = 1; /* ULPI seleInterfacect */
 8001870:	7e3b      	ldrb	r3, [r7, #24]
 8001872:	f043 0310 	orr.w	r3, r3, #16
 8001876:	763b      	strb	r3, [r7, #24]
    
    usbcfg.b.phyif             = 0; /* 8 bits */
 8001878:	7e3b      	ldrb	r3, [r7, #24]
 800187a:	f36f 03c3 	bfc	r3, #3, #1
 800187e:	763b      	strb	r3, [r7, #24]
    usbcfg.b.ddrsel            = 0; /* single data rate */
 8001880:	7e3b      	ldrb	r3, [r7, #24]
 8001882:	f36f 13c7 	bfc	r3, #7, #1
 8001886:	763b      	strb	r3, [r7, #24]
    
    usbcfg.b.ulpi_fsls = 0;
 8001888:	7ebb      	ldrb	r3, [r7, #26]
 800188a:	f36f 0341 	bfc	r3, #1, #1
 800188e:	76bb      	strb	r3, [r7, #26]
    usbcfg.b.ulpi_clk_sus_m = 0;
 8001890:	7ebb      	ldrb	r3, [r7, #26]
 8001892:	f36f 03c3 	bfc	r3, #3, #1
 8001896:	76bb      	strb	r3, [r7, #26]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff fe4f 	bl	8001544 <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	78db      	ldrb	r3, [r3, #3]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	f040 8082 	bne.w	80019b4 <USB_OTG_CoreInit+0x1a8>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 80018b0:	7b3b      	ldrb	r3, [r7, #12]
 80018b2:	2205      	movs	r2, #5
 80018b4:	f362 0344 	bfi	r3, r2, #1, #4
 80018b8:	733b      	strb	r3, [r7, #12]
      ahbcfg.b.dmaenable = 1;
 80018ba:	7b3b      	ldrb	r3, [r7, #12]
 80018bc:	f043 0320 	orr.w	r3, r3, #32
 80018c0:	733b      	strb	r3, [r7, #12]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	e073      	b.n	80019b4 <USB_OTG_CoreInit+0x1a8>
    }    
  }
  else /* FS interface (embedded Phy or I2C Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	61bb      	str	r3, [r7, #24]
    usbcfg.b.physel  = 1; /* FS Interface */
 80018d4:	7e3b      	ldrb	r3, [r7, #24]
 80018d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018da:	763b      	strb	r3, [r7, #24]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	60da      	str	r2, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff fe2d 	bl	8001544 <USB_OTG_CoreReset>
    /* Enable the I2C interface and deactivate the power down*/
    gccfg.d32 = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
    gccfg.b.pwdn = 1;
 80018ee:	7dbb      	ldrb	r3, [r7, #22]
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	75bb      	strb	r3, [r7, #22]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7a1b      	ldrb	r3, [r3, #8]
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d103      	bne.n	8001906 <USB_OTG_CoreInit+0xfa>
    {
      gccfg.b.i2cifen = 1;
 80018fe:	7dbb      	ldrb	r3, [r7, #22]
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	75bb      	strb	r3, [r7, #22]
    }   
    gccfg.b.vbussensingA = 1 ;
 8001906:	7dbb      	ldrb	r3, [r7, #22]
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	75bb      	strb	r3, [r7, #22]
    gccfg.b.vbussensingB = 1 ;     
 800190e:	7dbb      	ldrb	r3, [r7, #22]
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	75bb      	strb	r3, [r7, #22]
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
 8001916:	7dbb      	ldrb	r3, [r7, #22]
 8001918:	f043 0320 	orr.w	r3, r3, #32
 800191c:	75bb      	strb	r3, [r7, #22]
#endif    
    
    if(pdev->cfg.Sof_output)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7a5b      	ldrb	r3, [r3, #9]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <USB_OTG_CoreInit+0x122>
    {
      gccfg.b.sofouten = 1;  
 8001926:	7dbb      	ldrb	r3, [r7, #22]
 8001928:	f043 0310 	orr.w	r3, r3, #16
 800192c:	75bb      	strb	r3, [r7, #22]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 8001936:	2014      	movs	r0, #20
 8001938:	f002 fb62 	bl	8004000 <USB_OTG_BSP_mDelay>
    /* Program GUSBCFG.OtgUtmifsSel to I2C*/
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	61bb      	str	r3, [r7, #24]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7a1b      	ldrb	r3, [r3, #8]
 8001948:	2b03      	cmp	r3, #3
 800194a:	d103      	bne.n	8001954 <USB_OTG_CoreInit+0x148>
    {
      usbcfg.b.otgutmifssel = 1;
 800194c:	7ebb      	ldrb	r3, [r7, #26]
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	76bb      	strb	r3, [r7, #26]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	60da      	str	r2, [r3, #12]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7a1b      	ldrb	r3, [r3, #8]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d127      	bne.n	80019b4 <USB_OTG_CoreInit+0x1a8>
    {
      /*Program GI2CCTL.I2CEn*/
      i2cctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GI2CCTL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	613b      	str	r3, [r7, #16]
      i2cctl.b.i2cdevaddr = 1;
 800196c:	7cfb      	ldrb	r3, [r7, #19]
 800196e:	2201      	movs	r2, #1
 8001970:	f362 0383 	bfi	r3, r2, #2, #2
 8001974:	74fb      	strb	r3, [r7, #19]
      i2cctl.b.i2cen = 0;
 8001976:	7cbb      	ldrb	r3, [r7, #18]
 8001978:	f36f 13c7 	bfc	r3, #7, #1
 800197c:	74bb      	strb	r3, [r7, #18]
      i2cctl.b.dat_se0 = 1;
 800197e:	7cfb      	ldrb	r3, [r7, #19]
 8001980:	f043 0310 	orr.w	r3, r3, #16
 8001984:	74fb      	strb	r3, [r7, #19]
      i2cctl.b.addr = 0x2D;
 8001986:	7cbb      	ldrb	r3, [r7, #18]
 8001988:	222d      	movs	r2, #45	; 0x2d
 800198a:	f362 0306 	bfi	r3, r2, #0, #7
 800198e:	74bb      	strb	r3, [r7, #18]
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
      
      USB_OTG_BSP_mDelay(200);
 8001998:	20c8      	movs	r0, #200	; 0xc8
 800199a:	f002 fb31 	bl	8004000 <USB_OTG_BSP_mDelay>
      
      i2cctl.b.i2cen = 1;
 800199e:	7cbb      	ldrb	r3, [r7, #18]
 80019a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a4:	74bb      	strb	r3, [r7, #18]
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	631a      	str	r2, [r3, #48]	; 0x30
      USB_OTG_BSP_mDelay(200);
 80019ae:	20c8      	movs	r0, #200	; 0xc8
 80019b0:	f002 fb26 	bl	8004000 <USB_OTG_BSP_mDelay>
    }
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	78db      	ldrb	r3, [r3, #3]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d110      	bne.n	80019de <USB_OTG_CoreInit+0x1d2>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	60fb      	str	r3, [r7, #12]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	2205      	movs	r2, #5
 80019c8:	f362 0344 	bfi	r3, r2, #1, #4
 80019cc:	733b      	strb	r3, [r7, #12]
    ahbcfg.b.dmaenable = 1;
 80019ce:	7b3b      	ldrb	r3, [r7, #12]
 80019d0:	f043 0320 	orr.w	r3, r3, #32
 80019d4:	733b      	strb	r3, [r7, #12]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	609a      	str	r2, [r3, #8]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_EnableCommonInt(pdev);
#endif
  return status;
 80019de:	7ffb      	ldrb	r3, [r7, #31]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <USB_OTG_EnableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 80019f8:	7a3b      	ldrb	r3, [r7, #8]
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	68d2      	ldr	r2, [r2, #12]
 8001a08:	6891      	ldr	r1, [r2, #8]
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
  return status;
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop

08001a20 <USB_OTG_DisableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_DisableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8001a30:	7a3b      	ldrb	r3, [r7, #8]
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	68d2      	ldr	r2, [r2, #12]
 8001a40:	6891      	ldr	r1, [r2, #8]
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	43d2      	mvns	r2, r2
 8001a46:	400a      	ands	r2, r1
 8001a48:	609a      	str	r2, [r3, #8]
  return status;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  greset.d32 = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
  greset.b.txfflsh = 1;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f043 0320 	orr.w	r3, r3, #32
 8001a74:	60fb      	str	r3, [r7, #12]
  greset.b.txfnum  = num;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f362 138a 	bfi	r3, r2, #6, #5
 8001a86:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <USB_OTG_FlushTxFifo+0x70>)
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d900      	bls.n	8001aa8 <USB_OTG_FlushTxFifo+0x50>
    {
      break;
 8001aa6:	e006      	b.n	8001ab6 <USB_OTG_FlushTxFifo+0x5e>
    }
  }
  while (greset.b.txfflsh == 1);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d0ec      	beq.n	8001a90 <USB_OTG_FlushTxFifo+0x38>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8001ab6:	2003      	movs	r0, #3
 8001ab8:	f002 fa7e 	bl	8003fb8 <USB_OTG_BSP_uDelay>
  return status;
 8001abc:	7cfb      	ldrb	r3, [r7, #19]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	00030d40 	.word	0x00030d40

08001acc <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  greset.b.rxfflsh = 1;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f043 0310 	orr.w	r3, r3, #16
 8001ae6:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3301      	adds	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <USB_OTG_FlushRxFifo+0x5c>)
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d900      	bls.n	8001b08 <USB_OTG_FlushRxFifo+0x3c>
    {
      break;
 8001b06:	e006      	b.n	8001b16 <USB_OTG_FlushRxFifo+0x4a>
    }
  }
  while (greset.b.rxfflsh == 1);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d0ec      	beq.n	8001af0 <USB_OTG_FlushRxFifo+0x24>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8001b16:	2003      	movs	r0, #3
 8001b18:	f002 fa4e 	bl	8003fb8 <USB_OTG_BSP_uDelay>
  return status;
 8001b1c:	7cfb      	ldrb	r3, [r7, #19]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	00030d40 	.word	0x00030d40

08001b2c <USB_OTG_SetCurrentMode>:
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	60bb      	str	r3, [r7, #8]
  
  usbcfg.b.force_host = 0;
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	f36f 1345 	bfc	r3, #5, #1
 8001b4a:	72fb      	strb	r3, [r7, #11]
  usbcfg.b.force_dev = 0;
 8001b4c:	7afb      	ldrb	r3, [r7, #11]
 8001b4e:	f36f 1386 	bfc	r3, #6, #1
 8001b52:	72fb      	strb	r3, [r7, #11]
  
  if ( mode == HOST_MODE)
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d104      	bne.n	8001b64 <USB_OTG_SetCurrentMode+0x38>
  {
    usbcfg.b.force_host = 1;
 8001b5a:	7afb      	ldrb	r3, [r7, #11]
 8001b5c:	f043 0320 	orr.w	r3, r3, #32
 8001b60:	72fb      	strb	r3, [r7, #11]
 8001b62:	e006      	b.n	8001b72 <USB_OTG_SetCurrentMode+0x46>
  }
  else if ( mode == DEVICE_MODE)
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d103      	bne.n	8001b72 <USB_OTG_SetCurrentMode+0x46>
  {
    usbcfg.b.force_dev = 1;
 8001b6a:	7afb      	ldrb	r3, [r7, #11]
 8001b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b70:	72fb      	strb	r3, [r7, #11]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	60da      	str	r2, [r3, #12]
  USB_OTG_BSP_mDelay(50);
 8001b7a:	2032      	movs	r0, #50	; 0x32
 8001b7c:	f002 fa40 	bl	8004000 <USB_OTG_BSP_mDelay>
  return status;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop

08001b8c <USB_OTG_GetMode>:
* @brief  USB_OTG_GetMode : Get current mode
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop

08001bac <USB_OTG_IsDeviceMode>:
* @brief  USB_OTG_IsDeviceMode : Check if it is device mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ffe9 	bl	8001b8c <USB_OTG_GetMode>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2300      	moveq	r3, #0
 8001bc2:	2301      	movne	r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop

08001bd0 <USB_OTG_ReadCoreItr>:
* @brief  USB_OTG_ReadCoreItr : returns the Core Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  return v;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop

08001c00 <USB_OTG_InitDevSpeed>:
*         depending the PHY type and the enumeration speed of the device.
* @param  pdev : Selected device
* @retval : None
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	60fb      	str	r3, [r7, #12]
  dcfg.b.devspd = speed;
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	7b3b      	ldrb	r3, [r7, #12]
 8001c1e:	f362 0301 	bfi	r3, r2, #0, #2
 8001c22:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	601a      	str	r2, [r3, #0]
}
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop

08001c38 <USB_OTG_CoreInitDev>:
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08c      	sub	sp, #48	; 0x30
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status       = USB_OTG_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  USB_OTG_FSIZ_TypeDef    nptxfifosize;
  USB_OTG_FSIZ_TypeDef    txfifosize;
  USB_OTG_DIEPMSK_TypeDef msk;
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  dcfg.d32 = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  nptxfifosize.d32 = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
  txfifosize.d32 = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  msk.d32 = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	623b      	str	r3, [r7, #32]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 8001c6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001c70:	f36f 03c4 	bfc	r3, #3, #2
 8001c74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	6a3a      	ldr	r2, [r7, #32]
 8001c7e:	601a      	str	r2, [r3, #0]
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7adb      	ldrb	r3, [r3, #11]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d140      	bne.n	8001d0a <USB_OTG_CoreInitDev+0xd2>
  {  
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	2103      	movs	r1, #3
 8001c8c:	f7ff ffb8 	bl	8001c00 <USB_OTG_InitDevSpeed>
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2280      	movs	r2, #128	; 0x80
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 8001c98:	8bfb      	ldrh	r3, [r7, #30]
 8001c9a:	2240      	movs	r2, #64	; 0x40
 8001c9c:	f362 030f 	bfi	r3, r2, #0, #16
 8001ca0:	83fb      	strh	r3, [r7, #30]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
 8001ca2:	8bbb      	ldrh	r3, [r7, #28]
 8001ca4:	2280      	movs	r2, #128	; 0x80
 8001ca6:	f362 030f 	bfi	r3, r2, #0, #16
 8001caa:	83bb      	strh	r3, [r7, #28]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8001cb4:	8bba      	ldrh	r2, [r7, #28]
 8001cb6:	8bfb      	ldrh	r3, [r7, #30]
 8001cb8:	4413      	add	r3, r2
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
 8001cbe:	8b7b      	ldrh	r3, [r7, #26]
 8001cc0:	2280      	movs	r2, #128	; 0x80
 8001cc2:	f362 030f 	bfi	r3, r2, #0, #16
 8001cc6:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8001cd2:	8b3a      	ldrh	r2, [r7, #24]
 8001cd4:	8b7b      	ldrh	r3, [r7, #26]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX2_FIFO_FS_SIZE;
 8001cdc:	8b7b      	ldrh	r3, [r7, #26]
 8001cde:	f36f 030f 	bfc	r3, #0, #16
 8001ce2:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
 8001cee:	8b3a      	ldrh	r2, [r7, #24]
 8001cf0:	8b7b      	ldrh	r3, [r7, #26]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
 8001cf8:	8b7b      	ldrh	r3, [r7, #26]
 8001cfa:	f36f 030f 	bfc	r3, #0, #16
 8001cfe:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    txfifosize.b.depth = TX5_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
  }
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	2110      	movs	r1, #16
 8001d0e:	f7ff fea3 	bl	8001a58 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff feda 	bl	8001acc <USB_OTG_FlushRxFifo>
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2200      	movs	r2, #0
 8001d26:	615a      	str	r2, [r3, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	619a      	str	r2, [r3, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d3e:	e03a      	b.n	8001db6 <USB_OTG_CoreInitDev+0x17e>
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	3304      	adds	r3, #4
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    if (depctl.b.epena)
 8001d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d54:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00e      	beq.n	8001d7c <USB_OTG_CoreInitDev+0x144>
    {
      depctl.d32 = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
      depctl.b.epdis = 1;
 8001d62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      depctl.b.snak = 1;
 8001d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d72:	f043 0308 	orr.w	r3, r3, #8
 8001d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d7a:	e001      	b.n	8001d80 <USB_OTG_CoreInitDev+0x148>
    }
    else
    {
      depctl.d32 = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d84:	3304      	adds	r3, #4
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8e:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d94:	3304      	adds	r3, #4
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	3304      	adds	r3, #4
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	22ff      	movs	r2, #255	; 0xff
 8001dae:	609a      	str	r2, [r3, #8]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8001db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db2:	3301      	adds	r3, #1
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	785b      	ldrb	r3, [r3, #1]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d8be      	bhi.n	8001d40 <USB_OTG_CoreInitDev+0x108>
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc6:	e035      	b.n	8001e34 <USB_OTG_CoreInitDev+0x1fc>
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dcc:	3314      	adds	r3, #20
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	60fb      	str	r3, [r7, #12]
    if (depctl.b.epena)
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00a      	beq.n	8001dfa <USB_OTG_CoreInitDev+0x1c2>
    {
      depctl.d32 = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
      depctl.b.epdis = 1;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dee:	73fb      	strb	r3, [r7, #15]
      depctl.b.snak = 1;
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	f043 0308 	orr.w	r3, r3, #8
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e001      	b.n	8001dfe <USB_OTG_CoreInitDev+0x1c6>
    }
    else
    {
      depctl.d32 = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	3314      	adds	r3, #20
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e12:	3314      	adds	r3, #20
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	3314      	adds	r3, #20
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	22ff      	movs	r2, #255	; 0xff
 8001e2c:	609a      	str	r2, [r3, #8]
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	3301      	adds	r3, #1
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	785b      	ldrb	r3, [r3, #1]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d8c3      	bhi.n	8001dc8 <USB_OTG_CoreInitDev+0x190>
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  msk.d32 = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  msk.b.txfifoundrn = 1;
 8001e44:	7d7b      	ldrb	r3, [r7, #21]
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	757b      	strb	r3, [r7, #21]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6912      	ldr	r2, [r2, #16]
 8001e54:	6911      	ldr	r1, [r2, #16]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	43d2      	mvns	r2, r2
 8001e5a:	4011      	ands	r1, r2
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	78db      	ldrb	r3, [r3, #3]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d11b      	bne.n	8001ea2 <USB_OTG_CoreInitDev+0x26a>
  {
    dthrctl.d32 = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
    dthrctl.b.non_iso_thr_en = 1;
 8001e6e:	7c3b      	ldrb	r3, [r7, #16]
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	743b      	strb	r3, [r7, #16]
    dthrctl.b.iso_thr_en = 1;
 8001e76:	7c3b      	ldrb	r3, [r7, #16]
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	743b      	strb	r3, [r7, #16]
    dthrctl.b.tx_thr_len = 64;
 8001e7e:	8a3b      	ldrh	r3, [r7, #16]
 8001e80:	2240      	movs	r2, #64	; 0x40
 8001e82:	f362 038a 	bfi	r3, r2, #2, #9
 8001e86:	823b      	strh	r3, [r7, #16]
    dthrctl.b.rx_thr_en = 1;
 8001e88:	7cbb      	ldrb	r3, [r7, #18]
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	74bb      	strb	r3, [r7, #18]
    dthrctl.b.rx_thr_len = 64;
 8001e90:	8a7b      	ldrh	r3, [r7, #18]
 8001e92:	2240      	movs	r2, #64	; 0x40
 8001e94:	f362 0349 	bfi	r3, r2, #1, #9
 8001e98:	827b      	strh	r3, [r7, #18]
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  USB_OTG_EnableDevInt(pdev);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f806 	bl	8001eb4 <USB_OTG_EnableDevInt>
  return status;
 8001ea8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3730      	adds	r7, #48	; 0x30
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <USB_OTG_EnableDevInt>:
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	615a      	str	r2, [r3, #20]
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fb12 	bl	8001500 <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	78db      	ldrb	r3, [r3, #3]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <USB_OTG_EnableDevInt+0x38>
  {
    intmsk.b.rxstsqlvl = 1;
 8001ee4:	7a3b      	ldrb	r3, [r7, #8]
 8001ee6:	f043 0310 	orr.w	r3, r3, #16
 8001eea:	723b      	strb	r3, [r7, #8]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  intmsk.b.usbsuspend = 1;
 8001eec:	7a7b      	ldrb	r3, [r7, #9]
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	727b      	strb	r3, [r7, #9]
  intmsk.b.usbreset   = 1;
 8001ef4:	7a7b      	ldrb	r3, [r7, #9]
 8001ef6:	f043 0310 	orr.w	r3, r3, #16
 8001efa:	727b      	strb	r3, [r7, #9]
  intmsk.b.enumdone   = 1;
 8001efc:	7a7b      	ldrb	r3, [r7, #9]
 8001efe:	f043 0320 	orr.w	r3, r3, #32
 8001f02:	727b      	strb	r3, [r7, #9]
  intmsk.b.inepintr   = 1;
 8001f04:	7abb      	ldrb	r3, [r7, #10]
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	72bb      	strb	r3, [r7, #10]
  intmsk.b.outepintr  = 1;
 8001f0c:	7abb      	ldrb	r3, [r7, #10]
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	72bb      	strb	r3, [r7, #10]
  intmsk.b.sofintr    = 1; 
 8001f14:	7a3b      	ldrb	r3, [r7, #8]
 8001f16:	f043 0308 	orr.w	r3, r3, #8
 8001f1a:	723b      	strb	r3, [r7, #8]

  intmsk.b.incomplisoin    = 1; 
 8001f1c:	7abb      	ldrb	r3, [r7, #10]
 8001f1e:	f043 0310 	orr.w	r3, r3, #16
 8001f22:	72bb      	strb	r3, [r7, #10]
  intmsk.b.incomplisoout    = 1;   
 8001f24:	7abb      	ldrb	r3, [r7, #10]
 8001f26:	f043 0320 	orr.w	r3, r3, #32
 8001f2a:	72bb      	strb	r3, [r7, #10]
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	68d2      	ldr	r2, [r2, #12]
 8001f34:	6991      	ldr	r1, [r2, #24]
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	43d2      	mvns	r2, r2
 8001f3a:	4011      	ands	r1, r2
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	619a      	str	r2, [r3, #24]
  return status;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <USB_OTG_GetDeviceSpeed>:
*         Get the device speed from the device status register
* @param  None
* @retval status
*/
enum USB_OTG_SPEED USB_OTG_GetDeviceSpeed (USB_OTG_CORE_HANDLE *pdev)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	60bb      	str	r3, [r7, #8]
  
  switch (dsts.b.enumspd)
 8001f60:	7a3b      	ldrb	r3, [r7, #8]
 8001f62:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d009      	beq.n	8001f80 <USB_OTG_GetDeviceSpeed+0x34>
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d004      	beq.n	8001f7a <USB_OTG_GetDeviceSpeed+0x2e>
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d002      	beq.n	8001f7a <USB_OTG_GetDeviceSpeed+0x2e>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
    speed = USB_SPEED_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	73fb      	strb	r3, [r7, #15]
    break;
 8001f78:	e005      	b.n	8001f86 <USB_OTG_GetDeviceSpeed+0x3a>
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    speed = USB_SPEED_FULL;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	73fb      	strb	r3, [r7, #15]
    break;
 8001f7e:	e002      	b.n	8001f86 <USB_OTG_GetDeviceSpeed+0x3a>
    
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    speed = USB_SPEED_LOW;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
    break;
 8001f84:	bf00      	nop
  }
  
  return speed;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <USB_OTG_EP0Activate>:
*   for transmitting packets
* @param  None
* @retval USB_OTG_STS : status
*/
USB_OTG_STS  USB_OTG_EP0Activate(USB_OTG_CORE_HANDLE *pdev)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status = USB_OTG_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DSTS_TypeDef    dsts;
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	613b      	str	r3, [r7, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	60fb      	str	r3, [r7, #12]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 8001fb4:	7c3b      	ldrb	r3, [r7, #16]
 8001fb6:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d004      	beq.n	8001fca <USB_OTG_EP0Activate+0x36>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 8001fc0:	89bb      	ldrh	r3, [r7, #12]
 8001fc2:	f36f 030a 	bfc	r3, #0, #11
 8001fc6:	81bb      	strh	r3, [r7, #12]
    break;
 8001fc8:	e005      	b.n	8001fd6 <USB_OTG_EP0Activate+0x42>
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 8001fca:	89bb      	ldrh	r3, [r7, #12]
 8001fcc:	2203      	movs	r2, #3
 8001fce:	f362 030a 	bfi	r3, r2, #0, #11
 8001fd2:	81bb      	strh	r3, [r7, #12]
    break;
 8001fd4:	bf00      	nop
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	601a      	str	r2, [r3, #0]
  dctl.b.cgnpinnak = 1;
 8001fde:	7a7b      	ldrb	r3, [r7, #9]
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	727b      	strb	r3, [r7, #9]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6912      	ldr	r2, [r2, #16]
 8001fee:	6851      	ldr	r1, [r2, #4]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	43d2      	mvns	r2, r2
 8001ff4:	4011      	ands	r1, r2
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	605a      	str	r2, [r3, #4]
  return status;
 8001ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	371c      	adds	r7, #28
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d10f      	bne.n	800204a <USB_OTG_EPActivate+0x3e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	3304      	adds	r3, #4
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2201      	movs	r2, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	b29b      	uxth	r3, r3
 8002046:	813b      	strh	r3, [r7, #8]
 8002048:	e00e      	b.n	8002068 <USB_OTG_EPActivate+0x5c>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	3314      	adds	r3, #20
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2201      	movs	r2, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	b29b      	uxth	r3, r3
 8002066:	817b      	strh	r3, [r7, #10]
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
  if (!depctl.b.usbactep)
 800206e:	7b7b      	ldrb	r3, [r7, #13]
 8002070:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d127      	bne.n	80020ca <USB_OTG_EPActivate+0xbe>
  {
    depctl.b.mps    = ep->maxpacket;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	b29b      	uxth	r3, r3
 8002080:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002084:	b29a      	uxth	r2, r3
 8002086:	89bb      	ldrh	r3, [r7, #12]
 8002088:	f362 030a 	bfi	r3, r2, #0, #11
 800208c:	81bb      	strh	r3, [r7, #12]
    depctl.b.eptype = ep->type;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	78db      	ldrb	r3, [r3, #3]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	b2da      	uxtb	r2, r3
 8002098:	7bbb      	ldrb	r3, [r7, #14]
 800209a:	f362 0383 	bfi	r3, r2, #2, #2
 800209e:	73bb      	strb	r3, [r7, #14]
    depctl.b.txfnum = ep->tx_fifo_num;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	88db      	ldrh	r3, [r3, #6]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	89fb      	ldrh	r3, [r7, #14]
 80020ae:	f362 1389 	bfi	r3, r2, #6, #4
 80020b2:	81fb      	strh	r3, [r7, #14]
    depctl.b.setd0pid = 1;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	f043 0310 	orr.w	r3, r3, #16
 80020ba:	73fb      	strb	r3, [r7, #15]
    depctl.b.usbactep = 1;
 80020bc:	7b7b      	ldrb	r3, [r7, #13]
 80020be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c2:	737b      	strb	r3, [r7, #13]
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6912      	ldr	r2, [r2, #16]
 80020d2:	69d1      	ldr	r1, [r2, #28]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	61da      	str	r2, [r3, #28]
  return status;
 80020da:	7cfb      	ldrb	r3, [r7, #19]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;  
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	785b      	ldrb	r3, [r3, #1]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d10f      	bne.n	8002126 <USB_OTG_EPDeactivate+0x3e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	3304      	adds	r3, #4
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2201      	movs	r2, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	b29b      	uxth	r3, r3
 8002122:	813b      	strh	r3, [r7, #8]
 8002124:	e00e      	b.n	8002144 <USB_OTG_EPDeactivate+0x5c>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	3314      	adds	r3, #20
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2201      	movs	r2, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	b29b      	uxth	r3, r3
 8002142:	817b      	strh	r3, [r7, #10]
  }
  depctl.b.usbactep = 0;
 8002144:	7b7b      	ldrb	r3, [r7, #13]
 8002146:	f36f 13c7 	bfc	r3, #7, #1
 800214a:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6912      	ldr	r2, [r2, #16]
 800215a:	69d1      	ldr	r1, [r2, #28]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	43d2      	mvns	r2, r2
 8002160:	400a      	ands	r2, r1
 8002162:	61da      	str	r2, [r3, #28]
  return status;
 8002164:	7cfb      	ldrb	r3, [r7, #19]
}
 8002166:	4618      	mov	r0, r3
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop

08002174 <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef     depctl;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  USB_OTG_DSTS_TypeDef       dsts;    
  uint32_t fifoemptymsk = 0;  
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
  
  depctl.d32 = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
  deptsiz.d32 = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
  /* IN endpoint */
  if (ep->is_in == 1)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	785b      	ldrb	r3, [r3, #1]
 8002192:	2b01      	cmp	r3, #1
 8002194:	f040 80ab 	bne.w	80022ee <USB_OTG_EPStartXfer+0x17a>
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	3304      	adds	r3, #4
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	3304      	adds	r3, #4
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	613b      	str	r3, [r7, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d109      	bne.n	80021d8 <USB_OTG_EPStartXfer+0x64>
    {
      deptsiz.b.xfersize = 0;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	f36f 0312 	bfc	r3, #0, #19
 80021ca:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 80021cc:	8a7b      	ldrh	r3, [r7, #18]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f362 03cc 	bfi	r3, r2, #3, #10
 80021d4:	827b      	strh	r3, [r7, #18]
 80021d6:	e022      	b.n	800221e <USB_OTG_EPStartXfer+0xaa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f362 0312 	bfi	r3, r2, #0, #19
 80021e6:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4413      	add	r3, r2
 80021f2:	1e5a      	subs	r2, r3, #1
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002202:	b29a      	uxth	r2, r3
 8002204:	8a7b      	ldrh	r3, [r7, #18]
 8002206:	f362 03cc 	bfi	r3, r2, #3, #10
 800220a:	827b      	strh	r3, [r7, #18]

      if (ep->type == EP_TYPE_ISOC)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	78db      	ldrb	r3, [r3, #3]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d104      	bne.n	800221e <USB_OTG_EPStartXfer+0xaa>
      {
        deptsiz.b.mc = 1;
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	2201      	movs	r2, #1
 8002218:	f362 1346 	bfi	r3, r2, #5, #2
 800221c:	74fb      	strb	r3, [r7, #19]
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	3304      	adds	r3, #4
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	78db      	ldrb	r3, [r3, #3]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d10a      	bne.n	800224e <USB_OTG_EPStartXfer+0xda>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	3304      	adds	r3, #4
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	6912      	ldr	r2, [r2, #16]
 800224a:	615a      	str	r2, [r3, #20]
 800224c:	e015      	b.n	800227a <USB_OTG_EPStartXfer+0x106>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	78db      	ldrb	r3, [r3, #3]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d011      	beq.n	800227a <USB_OTG_EPStartXfer+0x106>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00d      	beq.n	800227a <USB_OTG_EPStartXfer+0x106>
        {
          fifoemptymsk = 1 << ep->num;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2201      	movs	r2, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6912      	ldr	r2, [r2, #16]
 8002272:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	430a      	orrs	r2, r1
 8002278:	635a      	str	r2, [r3, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	78db      	ldrb	r3, [r3, #3]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d114      	bne.n	80022ac <USB_OTG_EPStartXfer+0x138>
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	60fb      	str	r3, [r7, #12]
      
      if (((dsts.b.soffn)&0x1) == 0)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8002290:	b29b      	uxth	r3, r3
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d104      	bne.n	80022a4 <USB_OTG_EPStartXfer+0x130>
      {
        depctl.b.setd1pid = 1;
 800229a:	7dfb      	ldrb	r3, [r7, #23]
 800229c:	f043 0320 	orr.w	r3, r3, #32
 80022a0:	75fb      	strb	r3, [r7, #23]
 80022a2:	e003      	b.n	80022ac <USB_OTG_EPStartXfer+0x138>
      }
      else
      {
        depctl.b.setd0pid = 1;
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	f043 0310 	orr.w	r3, r3, #16
 80022aa:	75fb      	strb	r3, [r7, #23]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	75fb      	strb	r3, [r7, #23]
    depctl.b.epena = 1;
 80022b4:	7dfb      	ldrb	r3, [r7, #23]
 80022b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ba:	75fb      	strb	r3, [r7, #23]
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	3304      	adds	r3, #4
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	601a      	str	r2, [r3, #0]

    if (ep->type == EP_TYPE_ISOC)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	78db      	ldrb	r3, [r3, #3]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	f040 8088 	bne.w	80023e8 <USB_OTG_EPStartXfer+0x274>
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68d9      	ldr	r1, [r3, #12]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff f972 	bl	80015d0 <USB_OTG_WritePacket>
 80022ec:	e07c      	b.n	80023e8 <USB_OTG_EPStartXfer+0x274>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	3314      	adds	r3, #20
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	3314      	adds	r3, #20
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	613b      	str	r3, [r7, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10d      	bne.n	8002336 <USB_OTG_EPStartXfer+0x1c2>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	f362 0312 	bfi	r3, r2, #0, #19
 8002328:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 800232a:	8a7b      	ldrh	r3, [r7, #18]
 800232c:	2201      	movs	r2, #1
 800232e:	f362 03cc 	bfi	r3, r2, #3, #10
 8002332:	827b      	strh	r3, [r7, #18]
 8002334:	e01f      	b.n	8002376 <USB_OTG_EPStartXfer+0x202>
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	4413      	add	r3, r2
 8002340:	1e5a      	subs	r2, r3, #1
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	fbb2 f3f3 	udiv	r3, r2, r3
 800234a:	b29b      	uxth	r3, r3
 800234c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002350:	b29a      	uxth	r2, r3
 8002352:	8a7b      	ldrh	r3, [r7, #18]
 8002354:	f362 03cc 	bfi	r3, r2, #3, #10
 8002358:	827b      	strh	r3, [r7, #18]
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 800235a:	8a7b      	ldrh	r3, [r7, #18]
 800235c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8002360:	b29b      	uxth	r3, r3
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	6892      	ldr	r2, [r2, #8]
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f362 0312 	bfi	r3, r2, #0, #19
 8002374:	613b      	str	r3, [r7, #16]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	3314      	adds	r3, #20
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	78db      	ldrb	r3, [r3, #3]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d109      	bne.n	80023a4 <USB_OTG_EPStartXfer+0x230>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	3314      	adds	r3, #20
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	6912      	ldr	r2, [r2, #16]
 80023a2:	615a      	str	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	78db      	ldrb	r3, [r3, #3]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d10c      	bne.n	80023c6 <USB_OTG_EPStartXfer+0x252>
    {
      if (ep->even_odd_frame)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	795b      	ldrb	r3, [r3, #5]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d004      	beq.n	80023be <USB_OTG_EPStartXfer+0x24a>
      {
        depctl.b.setd1pid = 1;
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	f043 0320 	orr.w	r3, r3, #32
 80023ba:	75fb      	strb	r3, [r7, #23]
 80023bc:	e003      	b.n	80023c6 <USB_OTG_EPStartXfer+0x252>
      }
      else
      {
        depctl.b.setd0pid = 1;
 80023be:	7dfb      	ldrb	r3, [r7, #23]
 80023c0:	f043 0310 	orr.w	r3, r3, #16
 80023c4:	75fb      	strb	r3, [r7, #23]
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	75fb      	strb	r3, [r7, #23]
    depctl.b.epena = 1;
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
 80023d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d4:	75fb      	strb	r3, [r7, #23]
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	3314      	adds	r3, #20
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	601a      	str	r2, [r3, #0]
  }
  return status;
 80023e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop

080023f4 <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  USB_OTG_STS                 status = USB_OTG_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef      depctl;
  USB_OTG_DEP0XFRSIZ_TypeDef  deptsiz;
  USB_OTG_INEPREGS          *in_regs;
  uint32_t fifoemptymsk = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
  
  depctl.d32   = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  deptsiz.d32  = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
  /* IN endpoint */
  if (ep->is_in == 1)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	785b      	ldrb	r3, [r3, #1]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d16f      	bne.n	80024f6 <USB_OTG_EP0StartXfer+0x102>
  {
    in_regs = pdev->regs.INEP_REGS[0];
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	617b      	str	r3, [r7, #20]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	60bb      	str	r3, [r7, #8]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <USB_OTG_EP0StartXfer+0x50>
    {
      deptsiz.b.xfersize = 0;
 8002430:	7a3b      	ldrb	r3, [r7, #8]
 8002432:	f36f 0306 	bfc	r3, #0, #7
 8002436:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 8002438:	7abb      	ldrb	r3, [r7, #10]
 800243a:	2201      	movs	r2, #1
 800243c:	f362 03c4 	bfi	r3, r2, #3, #2
 8002440:	72bb      	strb	r3, [r7, #10]
 8002442:	e023      	b.n	800248c <USB_OTG_EP0StartXfer+0x98>
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	429a      	cmp	r2, r3
 800244e:	d90e      	bls.n	800246e <USB_OTG_EP0StartXfer+0x7a>
      {
        ep->xfer_len = ep->maxpacket;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	615a      	str	r2, [r3, #20]
        deptsiz.b.xfersize = ep->maxpacket;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002462:	b2da      	uxtb	r2, r3
 8002464:	7a3b      	ldrb	r3, [r7, #8]
 8002466:	f362 0306 	bfi	r3, r2, #0, #7
 800246a:	723b      	strb	r3, [r7, #8]
 800246c:	e009      	b.n	8002482 <USB_OTG_EP0StartXfer+0x8e>
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002478:	b2da      	uxtb	r2, r3
 800247a:	7a3b      	ldrb	r3, [r7, #8]
 800247c:	f362 0306 	bfi	r3, r2, #0, #7
 8002480:	723b      	strb	r3, [r7, #8]
      }
      deptsiz.b.pktcnt = 1;
 8002482:	7abb      	ldrb	r3, [r7, #10]
 8002484:	2201      	movs	r2, #1
 8002486:	f362 03c4 	bfi	r3, r2, #3, #2
 800248a:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	78db      	ldrb	r3, [r3, #3]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d109      	bne.n	80024ae <USB_OTG_EP0StartXfer+0xba>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	3304      	adds	r3, #4
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	6912      	ldr	r2, [r2, #16]
 80024ac:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	74fb      	strb	r3, [r7, #19]
    depctl.b.epena = 1;
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024bc:	74fb      	strb	r3, [r7, #19]
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	601a      	str	r2, [r3, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	78db      	ldrb	r3, [r3, #3]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d175      	bne.n	80025b8 <USB_OTG_EP0StartXfer+0x1c4>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d071      	beq.n	80025b8 <USB_OTG_EP0StartXfer+0x1c4>
      {
        {
          fifoemptymsk |= 1 << ep->num;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2201      	movs	r2, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6912      	ldr	r2, [r2, #16]
 80024ec:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	635a      	str	r2, [r3, #52]	; 0x34
 80024f4:	e060      	b.n	80025b8 <USB_OTG_EP0StartXfer+0x1c4>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	3314      	adds	r3, #20
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	3314      	adds	r3, #20
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	60bb      	str	r3, [r7, #8]
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10f      	bne.n	8002542 <USB_OTG_EP0StartXfer+0x14e>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800252c:	b2da      	uxtb	r2, r3
 800252e:	7a3b      	ldrb	r3, [r7, #8]
 8002530:	f362 0306 	bfi	r3, r2, #0, #7
 8002534:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 8002536:	7abb      	ldrb	r3, [r7, #10]
 8002538:	2201      	movs	r2, #1
 800253a:	f362 03c4 	bfi	r3, r2, #3, #2
 800253e:	72bb      	strb	r3, [r7, #10]
 8002540:	e012      	b.n	8002568 <USB_OTG_EP0StartXfer+0x174>
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	615a      	str	r2, [r3, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002554:	b2da      	uxtb	r2, r3
 8002556:	7a3b      	ldrb	r3, [r7, #8]
 8002558:	f362 0306 	bfi	r3, r2, #0, #7
 800255c:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 800255e:	7abb      	ldrb	r3, [r7, #10]
 8002560:	2201      	movs	r2, #1
 8002562:	f362 03c4 	bfi	r3, r2, #3, #2
 8002566:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	3314      	adds	r3, #20
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	611a      	str	r2, [r3, #16]
    if (pdev->cfg.dma_enable == 1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	78db      	ldrb	r3, [r3, #3]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d109      	bne.n	8002596 <USB_OTG_EP0StartXfer+0x1a2>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	3314      	adds	r3, #20
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	6912      	ldr	r2, [r2, #16]
 8002594:	615a      	str	r2, [r3, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
 8002596:	7cfb      	ldrb	r3, [r7, #19]
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	74fb      	strb	r3, [r7, #19]
    depctl.b.epena = 1;
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a4:	74fb      	strb	r3, [r7, #19]
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	3314      	adds	r3, #20
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	601a      	str	r2, [r3, #0]
    
  }
  return status;
 80025b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop

080025c8 <USB_OTG_EPSetStall>:
* @brief  USB_OTG_EPSetStall : Set the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPSetStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
  if (ep->is_in == 1)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	785b      	ldrb	r3, [r3, #1]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d11c      	bne.n	800261c <USB_OTG_EPSetStall+0x54>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	3304      	adds	r3, #4
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <USB_OTG_EPSetStall+0x44>
    {
      depctl.b.epdis = 1;
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800260a:	73fb      	strb	r3, [r7, #15]
    }
    depctl.b.stall = 1;
 800260c:	7bbb      	ldrb	r3, [r7, #14]
 800260e:	f043 0320 	orr.w	r3, r3, #32
 8002612:	73bb      	strb	r3, [r7, #14]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e011      	b.n	8002640 <USB_OTG_EPSetStall+0x78>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	3314      	adds	r3, #20
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]
    /* set the stall bit */
    depctl.b.stall = 1;
 8002632:	7bbb      	ldrb	r3, [r7, #14]
 8002634:	f043 0320 	orr.w	r3, r3, #32
 8002638:	73bb      	strb	r3, [r7, #14]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002640:	7dfb      	ldrb	r3, [r7, #23]
}
 8002642:	4618      	mov	r0, r3
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop

08002650 <USB_OTG_EPClearStall>:
* @brief  Clear the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPClearStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
  
  if (ep->is_in == 1)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d108      	bne.n	800267c <USB_OTG_EPClearStall+0x2c>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	e007      	b.n	800268c <USB_OTG_EPClearStall+0x3c>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	3314      	adds	r3, #20
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	617b      	str	r3, [r7, #20]
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]
  /* clear the stall bits */
  depctl.b.stall = 0;
 8002692:	7bbb      	ldrb	r3, [r7, #14]
 8002694:	f36f 1345 	bfc	r3, #5, #1
 8002698:	73bb      	strb	r3, [r7, #14]
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	78db      	ldrb	r3, [r3, #3]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d003      	beq.n	80026aa <USB_OTG_EPClearStall+0x5a>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	78db      	ldrb	r3, [r3, #3]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d103      	bne.n	80026b2 <USB_OTG_EPClearStall+0x62>
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	f043 0310 	orr.w	r3, r3, #16
 80026b0:	73fb      	strb	r3, [r7, #15]
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	601a      	str	r2, [r3, #0]
  return status;
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	371c      	adds	r7, #28
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop

080026c8 <USB_OTG_ReadDevAllOutEp_itr>:
* @brief  USB_OTG_ReadDevAllOutEp_itr : returns OUT endpoint interrupt bits
* @param  pdev : Selected device
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4013      	ands	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	0c1b      	lsrs	r3, r3, #16
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <USB_OTG_ReadDevOutEP_itr>:
* @param  pdev : Selected device
* @param  ep : end point number
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	3314      	adds	r3, #20
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
  return v;
 800271c:	68fb      	ldr	r3, [r7, #12]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop

0800272c <USB_OTG_ReadDevAllInEPItr>:
* @brief  USB_OTG_ReadDevAllInEPItr : Get int status register
* @param  pdev : Selected device
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4013      	ands	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
  return (v & 0xffff);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	b29b      	uxth	r3, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]
  doeptsize0.b.supcnt = 3;
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800276a:	74fb      	strb	r3, [r7, #19]
  doeptsize0.b.pktcnt = 1;
 800276c:	7cbb      	ldrb	r3, [r7, #18]
 800276e:	2201      	movs	r2, #1
 8002770:	f362 03c4 	bfi	r3, r2, #3, #2
 8002774:	74bb      	strb	r3, [r7, #18]
  doeptsize0.b.xfersize = 8 * 3;
 8002776:	7c3b      	ldrb	r3, [r7, #16]
 8002778:	2218      	movs	r2, #24
 800277a:	f362 0306 	bfi	r3, r2, #0, #7
 800277e:	743b      	strb	r3, [r7, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	78db      	ldrb	r3, [r3, #3]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d116      	bne.n	80027be <USB_OTG_EP0_OutStart+0x66>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	f502 62b9 	add.w	r2, r2, #1480	; 0x5c8
 800279e:	615a      	str	r2, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60fb      	str	r3, [r7, #12]
    doepctl.b.epena = 1;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ae:	73fb      	strb	r3, [r7, #15]
    doepctl.d32 = 0x80008000;
 80027b0:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80027b4:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	601a      	str	r2, [r3, #0]
  }
}
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <USB_OTG_UngateClock>:
* @brief  USB_OTG_UngateClock : active USB Core clock
* @param  None
* @retval : None
*/
void USB_OTG_UngateClock(USB_OTG_CORE_HANDLE *pdev)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if(pdev->cfg.low_power)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7a9b      	ldrb	r3, [r3, #10]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01b      	beq.n	8002810 <USB_OTG_UngateClock+0x48>
  {
    
    USB_OTG_DSTS_TypeDef     dsts;
    USB_OTG_PCGCCTL_TypeDef  power; 
    
    dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	60fb      	str	r3, [r7, #12]
    
    if(dsts.b.suspsts == 1)
 80027e0:	7b3b      	ldrb	r3, [r7, #12]
 80027e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d111      	bne.n	8002810 <USB_OTG_UngateClock+0x48>
    {
      /* un-gate USB Core clock */
      power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60bb      	str	r3, [r7, #8]
      power.b.gatehclk = 0;
 80027f6:	7a3b      	ldrb	r3, [r7, #8]
 80027f8:	f36f 0341 	bfc	r3, #1, #1
 80027fc:	723b      	strb	r3, [r7, #8]
      power.b.stoppclk = 0;
 80027fe:	7a3b      	ldrb	r3, [r7, #8]
 8002800:	f36f 0300 	bfc	r3, #0, #1
 8002804:	723b      	strb	r3, [r7, #8]
      USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	601a      	str	r2, [r3, #0]
      
    }
  }
}
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop

0800281c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK;  
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	785b      	ldrb	r3, [r3, #1]
 800282e:	2b09      	cmp	r3, #9
 8002830:	d839      	bhi.n	80028a6 <USBD_StdDevReq+0x8a>
 8002832:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <USBD_StdDevReq+0x1c>)
 8002834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002838:	08002889 	.word	0x08002889
 800283c:	0800289d 	.word	0x0800289d
 8002840:	080028a7 	.word	0x080028a7
 8002844:	08002893 	.word	0x08002893
 8002848:	080028a7 	.word	0x080028a7
 800284c:	0800286b 	.word	0x0800286b
 8002850:	08002861 	.word	0x08002861
 8002854:	080028a7 	.word	0x080028a7
 8002858:	0800287f 	.word	0x0800287f
 800285c:	08002875 	.word	0x08002875
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	6839      	ldr	r1, [r7, #0]
 8002864:	f000 f936 	bl	8002ad4 <USBD_GetDescriptor>
    break;
 8002868:	e022      	b.n	80028b0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	6839      	ldr	r1, [r7, #0]
 800286e:	f000 fa0d 	bl	8002c8c <USBD_SetAddress>
    break;
 8002872:	e01d      	b.n	80028b0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	6839      	ldr	r1, [r7, #0]
 8002878:	f000 fa46 	bl	8002d08 <USBD_SetConfig>
    break;
 800287c:	e018      	b.n	80028b0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	6839      	ldr	r1, [r7, #0]
 8002882:	f000 fabb 	bl	8002dfc <USBD_GetConfig>
    break;
 8002886:	e013      	b.n	80028b0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	6839      	ldr	r1, [r7, #0]
 800288c:	f000 fae6 	bl	8002e5c <USBD_GetStatus>
    break;
 8002890:	e00e      	b.n	80028b0 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	6839      	ldr	r1, [r7, #0]
 8002896:	f000 fb09 	bl	8002eac <USBD_SetFeature>
    break;
 800289a:	e009      	b.n	80028b0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	6839      	ldr	r1, [r7, #0]
 80028a0:	f000 fb6a 	bl	8002f78 <USBD_ClrFeature>
    break;
 80028a4:	e004      	b.n	80028b0 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	f000 fbd3 	bl	8003054 <USBD_CtlError>
    break;
 80028ae:	bf00      	nop
  }
  
  return ret;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop

080028bc <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK; 
 80028c6:	2300      	movs	r3, #0
 80028c8:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev.device_status) 
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d11c      	bne.n	800290e <USBD_StdItfReq+0x52>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	889b      	ldrh	r3, [r3, #4]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d811      	bhi.n	8002902 <USBD_StdItfReq+0x46>
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	6839      	ldr	r1, [r7, #0]
 80028ea:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	88db      	ldrh	r3, [r3, #6]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10b      	bne.n	800290c <USBD_StdItfReq+0x50>
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d108      	bne.n	800290c <USBD_StdItfReq+0x50>
      {
         USBD_CtlSendStatus(pdev);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fc8c 	bl	8003218 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8002900:	e00a      	b.n	8002918 <USBD_StdItfReq+0x5c>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	6839      	ldr	r1, [r7, #0]
 8002906:	f000 fba5 	bl	8003054 <USBD_CtlError>
    }
    break;
 800290a:	e005      	b.n	8002918 <USBD_StdItfReq+0x5c>
 800290c:	e004      	b.n	8002918 <USBD_StdItfReq+0x5c>
    
  default:
     USBD_CtlError(pdev , req);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	6839      	ldr	r1, [r7, #0]
 8002912:	f000 fb9f 	bl	8003054 <USBD_CtlError>
    break;
 8002916:	bf00      	nop
  }
  return ret;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop

08002924 <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
  
  ep_addr  = LOBYTE(req->wIndex);   
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	889b      	ldrh	r3, [r3, #4]
 8002936:	73bb      	strb	r3, [r7, #14]
  
  switch (req->bRequest) 
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d039      	beq.n	80029b4 <USBD_StdEPReq+0x90>
 8002940:	2b03      	cmp	r3, #3
 8002942:	d002      	beq.n	800294a <USBD_StdEPReq+0x26>
 8002944:	2b00      	cmp	r3, #0
 8002946:	d06b      	beq.n	8002a20 <USBD_StdEPReq+0xfc>
      break;
    }
    break;
    
  default:
    break;
 8002948:	e0bc      	b.n	8002ac4 <USBD_StdEPReq+0x1a0>
  switch (req->bRequest) 
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev.device_status) 
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002950:	2b02      	cmp	r3, #2
 8002952:	d002      	beq.n	800295a <USBD_StdEPReq+0x36>
 8002954:	2b03      	cmp	r3, #3
 8002956:	d00d      	beq.n	8002974 <USBD_StdEPReq+0x50>
 8002958:	e026      	b.n	80029a8 <USBD_StdEPReq+0x84>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800295a:	7bbb      	ldrb	r3, [r7, #14]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <USBD_StdEPReq+0x4e>
 8002960:	7bbb      	ldrb	r3, [r7, #14]
 8002962:	2b80      	cmp	r3, #128	; 0x80
 8002964:	d005      	beq.n	8002972 <USBD_StdEPReq+0x4e>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8002966:	7bbb      	ldrb	r3, [r7, #14]
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4619      	mov	r1, r3
 800296c:	f7fe fd36 	bl	80013dc <DCD_EP_Stall>
      }
      break;	
 8002970:	e01f      	b.n	80029b2 <USBD_StdEPReq+0x8e>
 8002972:	e01e      	b.n	80029b2 <USBD_StdEPReq+0x8e>
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	885b      	ldrh	r3, [r3, #2]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <USBD_StdEPReq+0x6e>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800297c:	7bbb      	ldrb	r3, [r7, #14]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <USBD_StdEPReq+0x6e>
 8002982:	7bbb      	ldrb	r3, [r7, #14]
 8002984:	2b80      	cmp	r3, #128	; 0x80
 8002986:	d004      	beq.n	8002992 <USBD_StdEPReq+0x6e>
        { 
          DCD_EP_Stall(pdev , ep_addr);
 8002988:	7bbb      	ldrb	r3, [r7, #14]
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4619      	mov	r1, r3
 800298e:	f7fe fd25 	bl	80013dc <DCD_EP_Stall>
          
        }
      }
      pdev->dev.class_cb->Setup (pdev, req);   
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	6839      	ldr	r1, [r7, #0]
 800299e:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fc39 	bl	8003218 <USBD_CtlSendStatus>
      
      break;
 80029a6:	e004      	b.n	80029b2 <USBD_StdEPReq+0x8e>
      
    default:                         
      USBD_CtlError(pdev , req);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	6839      	ldr	r1, [r7, #0]
 80029ac:	f000 fb52 	bl	8003054 <USBD_CtlError>
      break;    
 80029b0:	bf00      	nop
    }
    break;
 80029b2:	e087      	b.n	8002ac4 <USBD_StdEPReq+0x1a0>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev.device_status) 
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d002      	beq.n	80029c4 <USBD_StdEPReq+0xa0>
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d00d      	beq.n	80029de <USBD_StdEPReq+0xba>
 80029c2:	e027      	b.n	8002a14 <USBD_StdEPReq+0xf0>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80029c4:	7bbb      	ldrb	r3, [r7, #14]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <USBD_StdEPReq+0xb8>
 80029ca:	7bbb      	ldrb	r3, [r7, #14]
 80029cc:	2b80      	cmp	r3, #128	; 0x80
 80029ce:	d005      	beq.n	80029dc <USBD_StdEPReq+0xb8>
      {
        DCD_EP_Stall(pdev , ep_addr);
 80029d0:	7bbb      	ldrb	r3, [r7, #14]
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4619      	mov	r1, r3
 80029d6:	f7fe fd01 	bl	80013dc <DCD_EP_Stall>
      }
      break;	
 80029da:	e020      	b.n	8002a1e <USBD_StdEPReq+0xfa>
 80029dc:	e01f      	b.n	8002a1e <USBD_StdEPReq+0xfa>
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	885b      	ldrh	r3, [r3, #2]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d115      	bne.n	8002a12 <USBD_StdEPReq+0xee>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80029e6:	7bbb      	ldrb	r3, [r7, #14]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00e      	beq.n	8002a0a <USBD_StdEPReq+0xe6>
 80029ec:	7bbb      	ldrb	r3, [r7, #14]
 80029ee:	2b80      	cmp	r3, #128	; 0x80
 80029f0:	d00b      	beq.n	8002a0a <USBD_StdEPReq+0xe6>
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
 80029f2:	7bbb      	ldrb	r3, [r7, #14]
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	4619      	mov	r1, r3
 80029f8:	f7fe fd2a 	bl	8001450 <DCD_EP_ClrStall>
          pdev->dev.class_cb->Setup (pdev, req);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fc04 	bl	8003218 <USBD_CtlSendStatus>
      }
      break;
 8002a10:	e005      	b.n	8002a1e <USBD_StdEPReq+0xfa>
 8002a12:	e004      	b.n	8002a1e <USBD_StdEPReq+0xfa>
      
    default:                         
       USBD_CtlError(pdev , req);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	6839      	ldr	r1, [r7, #0]
 8002a18:	f000 fb1c 	bl	8003054 <USBD_CtlError>
      break;    
 8002a1c:	bf00      	nop
    }
    break;
 8002a1e:	e051      	b.n	8002ac4 <USBD_StdEPReq+0x1a0>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d002      	beq.n	8002a30 <USBD_StdEPReq+0x10c>
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d00d      	beq.n	8002a4a <USBD_StdEPReq+0x126>
 8002a2e:	e043      	b.n	8002ab8 <USBD_StdEPReq+0x194>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <USBD_StdEPReq+0x124>
 8002a36:	7bbb      	ldrb	r3, [r7, #14]
 8002a38:	2b80      	cmp	r3, #128	; 0x80
 8002a3a:	d005      	beq.n	8002a48 <USBD_StdEPReq+0x124>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8002a3c:	7bbb      	ldrb	r3, [r7, #14]
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	4619      	mov	r1, r3
 8002a42:	f7fe fccb 	bl	80013dc <DCD_EP_Stall>
      }
      break;	
 8002a46:	e03c      	b.n	8002ac2 <USBD_StdEPReq+0x19e>
 8002a48:	e03b      	b.n	8002ac2 <USBD_StdEPReq+0x19e>
      
    case USB_OTG_CONFIGURED:         
      
      
      if ((ep_addr & 0x80)== 0x80)
 8002a4a:	7bbb      	ldrb	r3, [r7, #14]
 8002a4c:	b25b      	sxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	da15      	bge.n	8002a7e <USBD_StdEPReq+0x15a>
      {
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 8002a52:	7bbb      	ldrb	r3, [r7, #14]
 8002a54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002a68:	789b      	ldrb	r3, [r3, #2]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <USBD_StdEPReq+0x152>
        {
          USBD_ep_status = 0x0001;     
 8002a6e:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <USBD_StdEPReq+0x1ac>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e01a      	b.n	8002aac <USBD_StdEPReq+0x188>
        }
        else
        {
          USBD_ep_status = 0x0000;  
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <USBD_StdEPReq+0x1ac>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e016      	b.n	8002aac <USBD_StdEPReq+0x188>
        }
      }
      else if ((ep_addr & 0x80)== 0x00)
 8002a7e:	7bbb      	ldrb	r3, [r7, #14]
 8002a80:	b25b      	sxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	db12      	blt.n	8002aac <USBD_StdEPReq+0x188>
      {
        if(pdev->dev.out_ep[ep_addr].is_stall)
 8002a86:	7bba      	ldrb	r2, [r7, #14]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	440b      	add	r3, r1
 8002a94:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8002a98:	789b      	ldrb	r3, [r3, #2]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <USBD_StdEPReq+0x182>
        {
          USBD_ep_status = 0x0001;     
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <USBD_StdEPReq+0x1ac>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e002      	b.n	8002aac <USBD_StdEPReq+0x188>
        }
        
        else 
        {
          USBD_ep_status = 0x0000;     
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <USBD_StdEPReq+0x1ac>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
        }      
      }
      USBD_CtlSendData (pdev,
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4908      	ldr	r1, [pc, #32]	; (8002ad0 <USBD_StdEPReq+0x1ac>)
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f000 fb49 	bl	8003148 <USBD_CtlSendData>
                        (uint8_t *)&USBD_ep_status,
                        2);
      break;
 8002ab6:	e004      	b.n	8002ac2 <USBD_StdEPReq+0x19e>
      
    default:                         
       USBD_CtlError(pdev , req);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	6839      	ldr	r1, [r7, #0]
 8002abc:	f000 faca 	bl	8003054 <USBD_CtlError>
      break;
 8002ac0:	bf00      	nop
    }
    break;
 8002ac2:	bf00      	nop
    
  default:
    break;
  }
  return ret;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000730 	.word	0x20000730

08002ad4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USB_OTG_CORE_HANDLE  *pdev, 
                               USB_SETUP_REQ *req)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	885b      	ldrh	r3, [r3, #2]
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	2b06      	cmp	r3, #6
 8002aea:	f200 80b1 	bhi.w	8002c50 <USBD_GetDescriptor+0x17c>
 8002aee:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <USBD_GetDescriptor+0x20>)
 8002af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af4:	08002b11 	.word	0x08002b11
 8002af8:	08002b43 	.word	0x08002b43
 8002afc:	08002b6d 	.word	0x08002b6d
 8002b00:	08002c51 	.word	0x08002c51
 8002b04:	08002c51 	.word	0x08002c51
 8002b08:	08002c3d 	.word	0x08002c3d
 8002b0c:	08002c47 	.word	0x08002c47
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	7891      	ldrb	r1, [r2, #2]
 8002b1c:	f107 020a 	add.w	r2, r7, #10
 8002b20:	4608      	mov	r0, r1
 8002b22:	4611      	mov	r1, r2
 8002b24:	4798      	blx	r3
 8002b26:	60f8      	str	r0, [r7, #12]
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	88db      	ldrh	r3, [r3, #6]
 8002b2c:	2b40      	cmp	r3, #64	; 0x40
 8002b2e:	d004      	beq.n	8002b3a <USBD_GetDescriptor+0x66>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d102      	bne.n	8002b40 <USBD_GetDescriptor+0x6c>
    {                  
      len = 8;
 8002b3a:	2308      	movs	r3, #8
 8002b3c:	817b      	strh	r3, [r7, #10]
    }
    break;
 8002b3e:	e08c      	b.n	8002c5a <USBD_GetDescriptor+0x186>
 8002b40:	e08b      	b.n	8002c5a <USBD_GetDescriptor+0x186>
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	7891      	ldrb	r1, [r2, #2]
 8002b4e:	f107 020a 	add.w	r2, r7, #10
 8002b52:	4608      	mov	r0, r1
 8002b54:	4611      	mov	r1, r2
 8002b56:	4798      	blx	r3
 8002b58:	60f8      	str	r0, [r7, #12]
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	2202      	movs	r2, #2
 8002b60:	701a      	strb	r2, [r3, #0]
    pdev->dev.pConfig_descriptor = pbuf;    
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
    break;
 8002b6a:	e076      	b.n	8002c5a <USBD_GetDescriptor+0x186>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	885b      	ldrh	r3, [r3, #2]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d85c      	bhi.n	8002c30 <USBD_GetDescriptor+0x15c>
 8002b76:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <USBD_GetDescriptor+0xa8>)
 8002b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7c:	08002b95 	.word	0x08002b95
 8002b80:	08002baf 	.word	0x08002baf
 8002b84:	08002bc9 	.word	0x08002bc9
 8002b88:	08002be3 	.word	0x08002be3
 8002b8c:	08002bfd 	.word	0x08002bfd
 8002b90:	08002c17 	.word	0x08002c17
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	7891      	ldrb	r1, [r2, #2]
 8002ba0:	f107 020a 	add.w	r2, r7, #10
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4798      	blx	r3
 8002baa:	60f8      	str	r0, [r7, #12]
      break;
 8002bac:	e045      	b.n	8002c3a <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	7891      	ldrb	r1, [r2, #2]
 8002bba:	f107 020a 	add.w	r2, r7, #10
 8002bbe:	4608      	mov	r0, r1
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4798      	blx	r3
 8002bc4:	60f8      	str	r0, [r7, #12]
      break;
 8002bc6:	e038      	b.n	8002c3a <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	7891      	ldrb	r1, [r2, #2]
 8002bd4:	f107 020a 	add.w	r2, r7, #10
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4798      	blx	r3
 8002bde:	60f8      	str	r0, [r7, #12]
      break;
 8002be0:	e02b      	b.n	8002c3a <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	7891      	ldrb	r1, [r2, #2]
 8002bee:	f107 020a 	add.w	r2, r7, #10
 8002bf2:	4608      	mov	r0, r1
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4798      	blx	r3
 8002bf8:	60f8      	str	r0, [r7, #12]
      break;
 8002bfa:	e01e      	b.n	8002c3a <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	7891      	ldrb	r1, [r2, #2]
 8002c08:	f107 020a 	add.w	r2, r7, #10
 8002c0c:	4608      	mov	r0, r1
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4798      	blx	r3
 8002c12:	60f8      	str	r0, [r7, #12]
      break;
 8002c14:	e011      	b.n	8002c3a <USBD_GetDescriptor+0x166>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	7891      	ldrb	r1, [r2, #2]
 8002c22:	f107 020a 	add.w	r2, r7, #10
 8002c26:	4608      	mov	r0, r1
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4798      	blx	r3
 8002c2c:	60f8      	str	r0, [r7, #12]
      break;
 8002c2e:	e004      	b.n	8002c3a <USBD_GetDescriptor+0x166>
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	6839      	ldr	r1, [r7, #0]
 8002c34:	f000 fa0e 	bl	8003054 <USBD_CtlError>
      return;
 8002c38:	e024      	b.n	8002c84 <USBD_GetDescriptor+0x1b0>
#endif /* USBD_CtlError(pdev , req); */      
    }
    break;
 8002c3a:	e00e      	b.n	8002c5a <USBD_GetDescriptor+0x186>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	6839      	ldr	r1, [r7, #0]
 8002c40:	f000 fa08 	bl	8003054 <USBD_CtlError>
      return;
 8002c44:	e01e      	b.n	8002c84 <USBD_GetDescriptor+0x1b0>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	6839      	ldr	r1, [r7, #0]
 8002c4a:	f000 fa03 	bl	8003054 <USBD_CtlError>
      return;
 8002c4e:	e019      	b.n	8002c84 <USBD_GetDescriptor+0x1b0>
#endif     

    
  default: 
     USBD_CtlError(pdev , req);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	6839      	ldr	r1, [r7, #0]
 8002c54:	f000 f9fe 	bl	8003054 <USBD_CtlError>
    return;
 8002c58:	e014      	b.n	8002c84 <USBD_GetDescriptor+0x1b0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8002c5a:	897b      	ldrh	r3, [r7, #10]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d011      	beq.n	8002c84 <USBD_GetDescriptor+0x1b0>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	88db      	ldrh	r3, [r3, #6]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00d      	beq.n	8002c84 <USBD_GetDescriptor+0x1b0>
  {
    
    len = MIN(len , req->wLength);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	88da      	ldrh	r2, [r3, #6]
 8002c6c:	897b      	ldrh	r3, [r7, #10]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	bf38      	it	cc
 8002c72:	4613      	movcc	r3, r2
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8002c78:	897b      	ldrh	r3, [r7, #10]
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	68f9      	ldr	r1, [r7, #12]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f000 fa62 	bl	8003148 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop

08002c8c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	889b      	ldrh	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d12d      	bne.n	8002cfa <USBD_SetAddress+0x6e>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	88db      	ldrh	r3, [r3, #6]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d129      	bne.n	8002cfa <USBD_SetAddress+0x6e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	885b      	ldrh	r3, [r3, #2]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cb0:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d104      	bne.n	8002cc6 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	6839      	ldr	r1, [r7, #0]
 8002cc0:	f000 f9c8 	bl	8003054 <USBD_CtlError>
 8002cc4:	e018      	b.n	8002cf8 <USBD_SetAddress+0x6c>
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
      DCD_EP_SetAddress(pdev, dev_addr);               
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f7fe fbf6 	bl	80014c4 <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fa9d 	bl	8003218 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <USBD_SetAddress+0x62>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 8002cec:	e004      	b.n	8002cf8 <USBD_SetAddress+0x6c>
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8002cf6:	e004      	b.n	8002d02 <USBD_SetAddress+0x76>
 8002cf8:	e003      	b.n	8002d02 <USBD_SetAddress+0x76>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	6839      	ldr	r1, [r7, #0]
 8002cfe:	f000 f9a9 	bl	8003054 <USBD_CtlError>
  } 
}
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	885b      	ldrh	r3, [r3, #2]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	4b37      	ldr	r3, [pc, #220]	; (8002df8 <USBD_SetConfig+0xf0>)
 8002d1a:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8002d1c:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <USBD_SetConfig+0xf0>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d904      	bls.n	8002d2e <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	6839      	ldr	r1, [r7, #0]
 8002d28:	f000 f994 	bl	8003054 <USBD_CtlError>
 8002d2c:	e060      	b.n	8002df0 <USBD_SetConfig+0xe8>
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d002      	beq.n	8002d3e <USBD_SetConfig+0x36>
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d01b      	beq.n	8002d74 <USBD_SetConfig+0x6c>
 8002d3c:	e053      	b.n	8002de6 <USBD_SetConfig+0xde>
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <USBD_SetConfig+0xf0>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d012      	beq.n	8002d6c <USBD_SetConfig+0x64>
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 8002d46:	4b2c      	ldr	r3, [pc, #176]	; (8002df8 <USBD_SetConfig+0xf0>)
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2203      	movs	r2, #3
 8002d54:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        USBD_SetCfg(pdev , cfgidx);
 8002d58:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <USBD_SetConfig+0xf0>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	f000 fc3c 	bl	80035dc <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fa57 	bl	8003218 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8002d6a:	e041      	b.n	8002df0 <USBD_SetConfig+0xe8>
        USBD_SetCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fa53 	bl	8003218 <USBD_CtlSendStatus>
      }
      break;
 8002d72:	e03d      	b.n	8002df0 <USBD_SetConfig+0xe8>
      
    case USB_OTG_CONFIGURED:
      if (cfgidx == 0) 
 8002d74:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <USBD_SetConfig+0xf0>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d112      	bne.n	8002da2 <USBD_SetConfig+0x9a>
      {                           
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
 8002d84:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <USBD_SetConfig+0xf0>)
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_ClrCfg(pdev , cfgidx);
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <USBD_SetConfig+0xf0>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4619      	mov	r1, r3
 8002d96:	f000 fc39 	bl	800360c <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fa3c 	bl	8003218 <USBD_CtlSendStatus>
 8002da0:	e020      	b.n	8002de4 <USBD_SetConfig+0xdc>
        
      } 
      else  if (cfgidx != pdev->dev.device_config) 
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <USBD_SetConfig+0xf0>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d015      	beq.n	8002ddc <USBD_SetConfig+0xd4>
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4619      	mov	r1, r3
 8002dba:	f000 fc27 	bl	800360c <USBD_ClrCfg>
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <USBD_SetConfig+0xf0>)
 8002dc0:	781a      	ldrb	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <USBD_SetConfig+0xf0>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f000 fc04 	bl	80035dc <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fa1f 	bl	8003218 <USBD_CtlSendStatus>
 8002dda:	e003      	b.n	8002de4 <USBD_SetConfig+0xdc>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fa1b 	bl	8003218 <USBD_CtlSendStatus>
      }
      break;
 8002de2:	e005      	b.n	8002df0 <USBD_SetConfig+0xe8>
 8002de4:	e004      	b.n	8002df0 <USBD_SetConfig+0xe8>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	6839      	ldr	r1, [r7, #0]
 8002dea:	f000 f933 	bl	8003054 <USBD_CtlError>
      break;
 8002dee:	bf00      	nop
    }
  }
}
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	2000073c 	.word	0x2000073c

08002dfc <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
 
  if (req->wLength != 1) 
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	88db      	ldrh	r3, [r3, #6]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d004      	beq.n	8002e18 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	6839      	ldr	r1, [r7, #0]
 8002e12:	f000 f91f 	bl	8003054 <USBD_CtlError>
 8002e16:	e01b      	b.n	8002e50 <USBD_GetConfig+0x54>
  }
  else 
  {
    switch (pdev->dev.device_status )  
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d002      	beq.n	8002e28 <USBD_GetConfig+0x2c>
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d006      	beq.n	8002e34 <USBD_GetConfig+0x38>
 8002e26:	e00e      	b.n	8002e46 <USBD_GetConfig+0x4a>
    {
    case USB_OTG_ADDRESSED:                     
      
      USBD_CtlSendData (pdev, 
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	490b      	ldr	r1, [pc, #44]	; (8002e58 <USBD_GetConfig+0x5c>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f000 f98b 	bl	8003148 <USBD_CtlSendData>
                        (uint8_t *)&USBD_default_cfg,
                        1);
      break;
 8002e32:	e00d      	b.n	8002e50 <USBD_GetConfig+0x54>
      
    case USB_OTG_CONFIGURED:                   
      
      USBD_CtlSendData (pdev, 
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f000 f982 	bl	8003148 <USBD_CtlSendData>
                        &pdev->dev.device_config,
                        1);
      break;
 8002e44:	e004      	b.n	8002e50 <USBD_GetConfig+0x54>
      
    default:
       USBD_CtlError(pdev , req);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	6839      	ldr	r1, [r7, #0]
 8002e4a:	f000 f903 	bl	8003054 <USBD_CtlError>
      break;
 8002e4e:	bf00      	nop
    }
  }
}
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000734 	.word	0x20000734

08002e5c <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  
  switch (pdev->dev.device_status) 
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002e6c:	3b02      	subs	r3, #2
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d811      	bhi.n	8002e96 <USBD_GetStatus+0x3a>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    
    if (pdev->dev.DevRemoteWakeup) 
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <USBD_GetStatus+0x28>
    {
      USBD_cfg_status = USB_CONFIG_SELF_POWERED | USB_CONFIG_REMOTE_WAKEUP;                                
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <USBD_GetStatus+0x4c>)
 8002e7e:	2203      	movs	r2, #3
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e002      	b.n	8002e8a <USBD_GetStatus+0x2e>
    }
    else
    {
      USBD_cfg_status = USB_CONFIG_SELF_POWERED;   
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <USBD_GetStatus+0x4c>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
    }
    
    USBD_CtlSendData (pdev, 
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	4906      	ldr	r1, [pc, #24]	; (8002ea8 <USBD_GetStatus+0x4c>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f000 f95a 	bl	8003148 <USBD_CtlSendData>
                      (uint8_t *)&USBD_cfg_status,
                      1);
    break;
 8002e94:	e004      	b.n	8002ea0 <USBD_GetStatus+0x44>
    
  default :
    USBD_CtlError(pdev , req);                        
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	6839      	ldr	r1, [r7, #0]
 8002e9a:	f000 f8db 	bl	8003054 <USBD_CtlError>
    break;
 8002e9e:	bf00      	nop
  }
}
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000738 	.word	0x20000738

08002eac <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	885b      	ldrh	r3, [r3, #2]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d10e      	bne.n	8002ee0 <USBD_SetFeature+0x34>
  {
    pdev->dev.DevRemoteWakeup = 1;  
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    pdev->dev.class_cb->Setup (pdev, req);   
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	6839      	ldr	r1, [r7, #0]
 8002ed6:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f99d 	bl	8003218 <USBD_CtlSendStatus>
 8002ede:	e048      	b.n	8002f72 <USBD_SetFeature+0xc6>
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	885b      	ldrh	r3, [r3, #2]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d144      	bne.n	8002f72 <USBD_SetFeature+0xc6>
           ((req->wIndex & 0xFF) == 0))
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	889b      	ldrh	r3, [r3, #4]
 8002eec:	b2db      	uxtb	r3, r3
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d13f      	bne.n	8002f72 <USBD_SetFeature+0xc6>
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60bb      	str	r3, [r7, #8]
    
    test_mode = req->wIndex >> 8;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	889b      	ldrh	r3, [r3, #4]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	73fb      	strb	r3, [r7, #15]
    switch (test_mode) 
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d82b      	bhi.n	8002f64 <USBD_SetFeature+0xb8>
 8002f0c:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <USBD_SetFeature+0x68>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f29 	.word	0x08002f29
 8002f18:	08002f35 	.word	0x08002f35
 8002f1c:	08002f41 	.word	0x08002f41
 8002f20:	08002f4d 	.word	0x08002f4d
 8002f24:	08002f59 	.word	0x08002f59
    {
    case 1: // TEST_J
      dctl.b.tstctl = 1;
 8002f28:	7a3b      	ldrb	r3, [r7, #8]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f362 1306 	bfi	r3, r2, #4, #3
 8002f30:	723b      	strb	r3, [r7, #8]
      break;
 8002f32:	e017      	b.n	8002f64 <USBD_SetFeature+0xb8>
      
    case 2: // TEST_K	
      dctl.b.tstctl = 2;
 8002f34:	7a3b      	ldrb	r3, [r7, #8]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f362 1306 	bfi	r3, r2, #4, #3
 8002f3c:	723b      	strb	r3, [r7, #8]
      break;
 8002f3e:	e011      	b.n	8002f64 <USBD_SetFeature+0xb8>
      
    case 3: // TEST_SE0_NAK
      dctl.b.tstctl = 3;
 8002f40:	7a3b      	ldrb	r3, [r7, #8]
 8002f42:	2203      	movs	r2, #3
 8002f44:	f362 1306 	bfi	r3, r2, #4, #3
 8002f48:	723b      	strb	r3, [r7, #8]
      break;
 8002f4a:	e00b      	b.n	8002f64 <USBD_SetFeature+0xb8>
      
    case 4: // TEST_PACKET
      dctl.b.tstctl = 4;
 8002f4c:	7a3b      	ldrb	r3, [r7, #8]
 8002f4e:	2204      	movs	r2, #4
 8002f50:	f362 1306 	bfi	r3, r2, #4, #3
 8002f54:	723b      	strb	r3, [r7, #8]
      break;
 8002f56:	e005      	b.n	8002f64 <USBD_SetFeature+0xb8>
      
    case 5: // TEST_FORCE_ENABLE
      dctl.b.tstctl = 5;
 8002f58:	7a3b      	ldrb	r3, [r7, #8]
 8002f5a:	2205      	movs	r2, #5
 8002f5c:	f362 1306 	bfi	r3, r2, #4, #3
 8002f60:	723b      	strb	r3, [r7, #8]
      break;
 8002f62:	bf00      	nop
    }
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	605a      	str	r2, [r3, #4]
    USBD_CtlSendStatus(pdev);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f953 	bl	8003218 <USBD_CtlSendStatus>
  }

}
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev.device_status)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002f88:	3b02      	subs	r3, #2
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d813      	bhi.n	8002fb6 <USBD_ClrFeature+0x3e>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	885b      	ldrh	r3, [r3, #2]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d10e      	bne.n	8002fb4 <USBD_ClrFeature+0x3c>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
      pdev->dev.class_cb->Setup (pdev, req);   
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f933 	bl	8003218 <USBD_CtlSendStatus>
    }
    break;
 8002fb2:	e005      	b.n	8002fc0 <USBD_ClrFeature+0x48>
 8002fb4:	e004      	b.n	8002fc0 <USBD_ClrFeature+0x48>
    
  default :
     USBD_CtlError(pdev , req);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	6839      	ldr	r1, [r7, #0]
 8002fba:	f000 f84b 	bl	8003054 <USBD_CtlError>
    break;
 8002fbe:	bf00      	nop
  }
}
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop

08002fc8 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 25c8 	ldrb.w	r2, [r3, #1480]	; 0x5c8
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 25c9 	ldrb.w	r2, [r3, #1481]	; 0x5c9
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 35ca 	ldrb.w	r3, [r3, #1482]	; 0x5ca
 8002fec:	461a      	mov	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 35cb 	ldrb.w	r3, [r3, #1483]	; 0x5cb
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8003006:	461a      	mov	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 35cd 	ldrb.w	r3, [r3, #1485]	; 0x5cd
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	b29b      	uxth	r3, r3
 8003012:	4413      	add	r3, r2
 8003014:	b29a      	uxth	r2, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 35ce 	ldrb.w	r3, [r3, #1486]	; 0x5ce
 8003020:	461a      	mov	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 35cf 	ldrb.w	r3, [r3, #1487]	; 0x5cf
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	b29b      	uxth	r3, r3
 800302c:	4413      	add	r3, r2
 800302e:	b29a      	uxth	r2, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	80da      	strh	r2, [r3, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	88db      	ldrh	r3, [r3, #6]
 8003038:	461a      	mov	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
}
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop

08003054 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  if((req->bmRequest & 0x80) == 0x80)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	b25b      	sxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	da04      	bge.n	8003074 <USBD_CtlError+0x20>
  {
    DCD_EP_Stall(pdev , 0x80);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	2180      	movs	r1, #128	; 0x80
 800306e:	f7fe f9b5 	bl	80013dc <DCD_EP_Stall>
 8003072:	e00c      	b.n	800308e <USBD_CtlError+0x3a>
  }
  else 
  {
    if(req->wLength == 0)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	88db      	ldrh	r3, [r3, #6]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d104      	bne.n	8003086 <USBD_CtlError+0x32>
    {
       DCD_EP_Stall(pdev , 0x80);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	f7fe f9ac 	bl	80013dc <DCD_EP_Stall>
 8003084:	e003      	b.n	800308e <USBD_CtlError+0x3a>
    }
    else
    {
      DCD_EP_Stall(pdev , 0);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	2100      	movs	r1, #0
 800308a:	f7fe f9a7 	bl	80013dc <DCD_EP_Stall>
    }
  }
  USB_OTG_EP0_OutStart(pdev);  
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff fb62 	bl	8002758 <USB_OTG_EP0_OutStart>
}
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop

0800309c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02f      	beq.n	8003112 <USBD_GetString+0x76>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f830 	bl	8003118 <USBD_GetLen>
 80030b8:	4603      	mov	r3, r0
 80030ba:	3301      	adds	r3, #1
 80030bc:	b29b      	uxth	r3, r3
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	75fa      	strb	r2, [r7, #23]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	4413      	add	r3, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	8812      	ldrh	r2, [r2, #0]
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	75fa      	strb	r2, [r7, #23]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	4413      	add	r3, r2
 80030e2:	2203      	movs	r2, #3
 80030e4:	701a      	strb	r2, [r3, #0]
    
    while (*desc != NULL) 
 80030e6:	e010      	b.n	800310a <USBD_GetString+0x6e>
    {
      unicode[idx++] = *desc++;
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	75fa      	strb	r2, [r7, #23]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	441a      	add	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1c59      	adds	r1, r3, #1
 80030f6:	60f9      	str	r1, [r7, #12]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	75fa      	strb	r2, [r7, #23]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	4413      	add	r3, r2
 8003106:	2200      	movs	r2, #0
 8003108:	701a      	strb	r2, [r3, #0]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != NULL) 
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1ea      	bne.n	80030e8 <USBD_GetString+0x4c>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]

    while (*buf != NULL) 
 8003124:	e005      	b.n	8003132 <USBD_GetLen+0x1a>
    {
        len++;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	3301      	adds	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3301      	adds	r3, #1
 8003130:	607b      	str	r3, [r7, #4]
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f5      	bne.n	8003126 <USBD_GetLen+0xe>
    {
        len++;
        buf++;
    }

    return len;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	4613      	mov	r3, r2
 8003154:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.in_ep[0].total_data_len = len;
 800315a:	88fa      	ldrh	r2, [r7, #6]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  pdev->dev.in_ep[0].rem_data_len   = len;
 8003162:	88fa      	ldrh	r2, [r7, #6]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	2100      	movs	r1, #0
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	f7fe f8f3 	bl	8001364 <DCD_EP_Tx>
 
  return ret;
 800317e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	4613      	mov	r3, r2
 8003194:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	2100      	movs	r1, #0
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	f7fe f8df 	bl	8001364 <DCD_EP_Tx>
  
  
  return ret;
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_Status  USBD_CtlPrepareRx (USB_OTG_CORE_HANDLE  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	4613      	mov	r3, r2
 80031bc:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.out_ep[0].total_data_len = len;
 80031c2:	88fa      	ldrh	r2, [r7, #6]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
  pdev->dev.out_ep[0].rem_data_len   = len;
 80031ca:	88fa      	ldrh	r2, [r7, #6]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
  pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2203      	movs	r2, #3
 80031d6:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  
  DCD_EP_PrepareRx (pdev,
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	2100      	movs	r1, #0
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	f7fe f87f 	bl	80012e4 <DCD_EP_PrepareRx>
                    0,
                    pbuf,
                    len);
  

  return ret;
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	4613      	mov	r3, r2
 80031fc:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_PrepareRx (pdev,
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	2100      	movs	r1, #0
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	f7fe f86b 	bl	80012e4 <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
 800320e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2204      	movs	r2, #4
 8003228:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_Tx (pdev,
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	2100      	movs	r1, #0
 8003230:	2200      	movs	r2, #0
 8003232:	2300      	movs	r3, #0
 8003234:	f7fe f896 	bl	8001364 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff fa8d 	bl	8002758 <USB_OTG_EP0_OutStart>
  
  return ret;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2205      	movs	r2, #5
 8003258:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	2100      	movs	r1, #0
 8003260:	2200      	movs	r2, #0
 8003262:	2300      	movs	r3, #0
 8003264:	f7fe f83e 	bl	80012e4 <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff fa75 	bl	8002758 <USB_OTG_EP0_OutStart>
  
  return ret;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <USBD_Init>:
void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	460b      	mov	r3, r1
 8003286:	72fb      	strb	r3, [r7, #11]
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fe25 	bl	8003ed8 <USB_OTG_BSP_Init>
  
  USBD_DeInit(pdev);
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f81c 	bl	80032cc <USBD_DeInit>
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
  pdev->dev.usr_cb = usr_cb;  
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
  pdev->dev.usr_device = pDevice;    
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 80032ac:	7afb      	ldrb	r3, [r7, #11]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	4619      	mov	r1, r3
 80032b2:	f7fd ff11 	bl	80010d8 <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4798      	blx	r3
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fe61 	bl	8003f88 <USB_OTG_BSP_EnableInterrupt>
}
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <USBD_DeInit>:
*         Re-Initialize th deviuce library
* @param  pdev: device instance
* @retval status: status
*/
USBD_Status USBD_DeInit(USB_OTG_CORE_HANDLE *pdev)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Software Init */
  
  return USBD_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop

080032e4 <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 80032ec:	f107 0308 	add.w	r3, r7, #8
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4619      	mov	r1, r3
 80032f4:	f7ff fe68 	bl	8002fc8 <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 80032f8:	7a3b      	ldrb	r3, [r7, #8]
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d00a      	beq.n	8003318 <USBD_SetupStage+0x34>
 8003302:	2b02      	cmp	r3, #2
 8003304:	d00f      	beq.n	8003326 <USBD_SetupStage+0x42>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d114      	bne.n	8003334 <USBD_SetupStage+0x50>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 800330a:	f107 0308 	add.w	r3, r7, #8
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4619      	mov	r1, r3
 8003312:	f7ff fa83 	bl	800281c <USBD_StdDevReq>
    break;
 8003316:	e016      	b.n	8003346 <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 8003318:	f107 0308 	add.w	r3, r7, #8
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4619      	mov	r1, r3
 8003320:	f7ff facc 	bl	80028bc <USBD_StdItfReq>
    break;
 8003324:	e00f      	b.n	8003346 <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 8003326:	f107 0308 	add.w	r3, r7, #8
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4619      	mov	r1, r3
 800332e:	f7ff faf9 	bl	8002924 <USBD_StdEPReq>
    break;
 8003332:	e008      	b.n	8003346 <USBD_SetupStage+0x62>
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 8003334:	7a3b      	ldrb	r3, [r7, #8]
 8003336:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800333a:	b2db      	uxtb	r3, r3
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4619      	mov	r1, r3
 8003340:	f7fe f84c 	bl	80013dc <DCD_EP_Stall>
    break;
 8003344:	bf00      	nop
  }  
  return USBD_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d145      	bne.n	80033ee <USBD_DataOutStage+0x9e>
  {
    ep = &pdev->dev.out_ep[0];
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8003368:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8003370:	2b03      	cmp	r3, #3
 8003372:	d14f      	bne.n	8003414 <USBD_DataOutStage+0xc4>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	69da      	ldr	r2, [r3, #28]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	429a      	cmp	r2, r3
 800337e:	d921      	bls.n	80033c4 <USBD_DataOutStage+0x74>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	1ad2      	subs	r2, r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	61da      	str	r2, [r3, #28]
        
        if(pdev->cfg.dma_enable == 1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	78db      	ldrb	r3, [r3, #3]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d106      	bne.n	80033a4 <USBD_DataOutStage+0x54>
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	441a      	add	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	60da      	str	r2, [r3, #12]
        }        
        USBD_CtlContinueRx (pdev, 
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68da      	ldr	r2, [r3, #12]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6899      	ldr	r1, [r3, #8]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	4299      	cmp	r1, r3
 80033b2:	bf38      	it	cc
 80033b4:	460b      	movcc	r3, r1
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
        }        
        USBD_CtlContinueRx (pdev, 
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4611      	mov	r1, r2
 80033bc:	461a      	mov	r2, r3
 80033be:	f7ff ff17 	bl	80031f0 <USBD_CtlContinueRx>
 80033c2:	e027      	b.n	8003414 <USBD_DataOutStage+0xc4>
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <USBD_DataOutStage+0x96>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d105      	bne.n	80033e6 <USBD_DataOutStage+0x96>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ff16 	bl	8003218 <USBD_CtlSendStatus>
 80033ec:	e012      	b.n	8003414 <USBD_DataOutStage+0xc4>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00c      	beq.n	8003414 <USBD_DataOutStage+0xc4>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8003400:	2b03      	cmp	r3, #3
 8003402:	d107      	bne.n	8003414 <USBD_DataOutStage+0xc4>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4611      	mov	r1, r2
 8003412:	4798      	blx	r3
  }  
  return USBD_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop

08003420 <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d160      	bne.n	80034f4 <USBD_DataInStage+0xd4>
  {
    ep = &pdev->dev.in_ep[0];
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003438:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8003440:	2b02      	cmp	r3, #2
 8003442:	d16a      	bne.n	800351a <USBD_DataInStage+0xfa>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	69da      	ldr	r2, [r3, #28]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	429a      	cmp	r2, r3
 800344e:	d91c      	bls.n	800348a <USBD_DataInStage+0x6a>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	1ad2      	subs	r2, r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	61da      	str	r2, [r3, #28]
        if(pdev->cfg.dma_enable == 1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	78db      	ldrb	r3, [r3, #3]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d106      	bne.n	8003474 <USBD_DataInStage+0x54>
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	441a      	add	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	60da      	str	r2, [r3, #12]
        }
        USBD_CtlContinueSendData (pdev, 
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	68da      	ldr	r2, [r3, #12]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	69db      	ldr	r3, [r3, #28]
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
        }
        USBD_CtlContinueSendData (pdev, 
 800347c:	b29b      	uxth	r3, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4611      	mov	r1, r2
 8003482:	461a      	mov	r2, r3
 8003484:	f7ff fe80 	bl	8003188 <USBD_CtlContinueSendData>
 8003488:	e047      	b.n	800351a <USBD_DataInStage+0xfa>
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	6892      	ldr	r2, [r2, #8]
 8003492:	fbb3 f1f2 	udiv	r1, r3, r2
 8003496:	fb02 f201 	mul.w	r2, r2, r1
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d114      	bne.n	80034ca <USBD_DataInStage+0xaa>
           (ep->total_data_len >= ep->maxpacket) &&
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a1a      	ldr	r2, [r3, #32]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689b      	ldr	r3, [r3, #8]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d30e      	bcc.n	80034ca <USBD_DataInStage+0xaa>
           (ep->total_data_len >= ep->maxpacket) &&
             (ep->total_data_len < ep->ctl_data_len ))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a1a      	ldr	r2, [r3, #32]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
           (ep->total_data_len >= ep->maxpacket) &&
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d208      	bcs.n	80034ca <USBD_DataInStage+0xaa>
             (ep->total_data_len < ep->ctl_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	2100      	movs	r1, #0
 80034bc:	2200      	movs	r2, #0
 80034be:	f7ff fe63 	bl	8003188 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24
 80034c8:	e027      	b.n	800351a <USBD_DataInStage+0xfa>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <USBD_DataInStage+0xcc>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
          USBD_CtlContinueSendData(pdev , NULL, 0);
          ep->ctl_data_len = 0;
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d105      	bne.n	80034ec <USBD_DataInStage+0xcc>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff feab 	bl	8003248 <USBD_CtlReceiveStatus>
 80034f2:	e012      	b.n	800351a <USBD_DataInStage+0xfa>
        }
      }
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00c      	beq.n	800351a <USBD_DataInStage+0xfa>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8003506:	2b03      	cmp	r3, #3
 8003508:	d107      	bne.n	800351a <USBD_DataInStage+0xfa>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	78fa      	ldrb	r2, [r7, #3]
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4611      	mov	r1, r2
 8003518:	4798      	blx	r3
  }  
  return USBD_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <USBD_Reset>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	2100      	movs	r1, #0
 8003530:	2240      	movs	r2, #64	; 0x40
 8003532:	2300      	movs	r3, #0
 8003534:	f7fd fe50 	bl	80011d8 <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	2240      	movs	r2, #64	; 0x40
 800353e:	2300      	movs	r3, #0
 8003540:	f7fd fe4a 	bl	80011d8 <DCD_EP_Open>
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	7892      	ldrb	r2, [r2, #2]
 8003558:	4610      	mov	r0, r2
 800355a:	4798      	blx	r3
  
  return USBD_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop

08003568 <USBD_Resume>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	4798      	blx	r3
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2203      	movs	r2, #3
 800357e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  return USBD_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2204      	movs	r2, #4
 8003598:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4798      	blx	r3
  return USBD_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  if(pdev->dev.class_cb->SOF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <USBD_SOF+0x20>
  {
    pdev->dev.class_cb->SOF(pdev); 
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
  }
  return USBD_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop

080035dc <USBD_SetCfg>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4611      	mov	r1, r2
 80035f6:	4798      	blx	r3
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4798      	blx	r3
  return USBD_OK; 
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4611      	mov	r1, r2
 8003626:	4798      	blx	r3
  return USBD_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop

08003634 <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4798      	blx	r3
  return USBD_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop

08003654 <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4798      	blx	r3
  return USBD_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop

08003674 <VCP_Init>:
 * @brief  VCP_Init
 *         Initializes the Media on the STM32
 * @param  None
 * @retval Result of the opeartion (USBD_OK in all cases)
 */
static uint16_t VCP_Init(void) {
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
	return USBD_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <VCP_DeInit>:
 * @brief  VCP_DeInit
 *         DeInitializes the Media on the STM32
 * @param  None
 * @retval Result of the opeartion (USBD_OK in all cases)
 */
static uint16_t VCP_DeInit(void) {
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
	return USBD_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <VCP_Ctrl>:
 * @param  Cmd: Command code
 * @param  Buf: Buffer containing command data (request parameters)
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the operation (USBD_OK in all cases)
 */
static uint16_t VCP_Ctrl(uint32_t Cmd, uint8_t* Buf, uint32_t Len) {
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
	switch (Cmd) {
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b23      	cmp	r3, #35	; 0x23
 80036a4:	d874      	bhi.n	8003790 <VCP_Ctrl+0xfc>
 80036a6:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <VCP_Ctrl+0x18>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	08003791 	.word	0x08003791
 80036b0:	08003791 	.word	0x08003791
 80036b4:	08003791 	.word	0x08003791
 80036b8:	08003791 	.word	0x08003791
 80036bc:	08003791 	.word	0x08003791
 80036c0:	08003791 	.word	0x08003791
 80036c4:	08003791 	.word	0x08003791
 80036c8:	08003791 	.word	0x08003791
 80036cc:	08003791 	.word	0x08003791
 80036d0:	08003791 	.word	0x08003791
 80036d4:	08003791 	.word	0x08003791
 80036d8:	08003791 	.word	0x08003791
 80036dc:	08003791 	.word	0x08003791
 80036e0:	08003791 	.word	0x08003791
 80036e4:	08003791 	.word	0x08003791
 80036e8:	08003791 	.word	0x08003791
 80036ec:	08003791 	.word	0x08003791
 80036f0:	08003791 	.word	0x08003791
 80036f4:	08003791 	.word	0x08003791
 80036f8:	08003791 	.word	0x08003791
 80036fc:	08003791 	.word	0x08003791
 8003700:	08003791 	.word	0x08003791
 8003704:	08003791 	.word	0x08003791
 8003708:	08003791 	.word	0x08003791
 800370c:	08003791 	.word	0x08003791
 8003710:	08003791 	.word	0x08003791
 8003714:	08003791 	.word	0x08003791
 8003718:	08003791 	.word	0x08003791
 800371c:	08003791 	.word	0x08003791
 8003720:	08003791 	.word	0x08003791
 8003724:	08003791 	.word	0x08003791
 8003728:	08003791 	.word	0x08003791
 800372c:	08003791 	.word	0x08003791
 8003730:	0800373d 	.word	0x0800373d
 8003734:	08003791 	.word	0x08003791
 8003738:	08003791 	.word	0x08003791
	case SET_LINE_CODING:
		/* Not  needed for this driver */
		break;

	case GET_LINE_CODING:
		Buf[0] = (uint8_t) (linecoding.bitrate);
 800373c:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <VCP_Ctrl+0x10c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	701a      	strb	r2, [r3, #0]
		Buf[1] = (uint8_t) (linecoding.bitrate >> 8);
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	3301      	adds	r3, #1
 800374a:	4a15      	ldr	r2, [pc, #84]	; (80037a0 <VCP_Ctrl+0x10c>)
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	0a12      	lsrs	r2, r2, #8
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	701a      	strb	r2, [r3, #0]
		Buf[2] = (uint8_t) (linecoding.bitrate >> 16);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	3302      	adds	r3, #2
 8003758:	4a11      	ldr	r2, [pc, #68]	; (80037a0 <VCP_Ctrl+0x10c>)
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	0c12      	lsrs	r2, r2, #16
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]
		Buf[3] = (uint8_t) (linecoding.bitrate >> 24);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3303      	adds	r3, #3
 8003766:	4a0e      	ldr	r2, [pc, #56]	; (80037a0 <VCP_Ctrl+0x10c>)
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	0e12      	lsrs	r2, r2, #24
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	701a      	strb	r2, [r3, #0]
		Buf[4] = linecoding.format;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	3304      	adds	r3, #4
 8003774:	4a0a      	ldr	r2, [pc, #40]	; (80037a0 <VCP_Ctrl+0x10c>)
 8003776:	7912      	ldrb	r2, [r2, #4]
 8003778:	701a      	strb	r2, [r3, #0]
		Buf[5] = linecoding.paritytype;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	3305      	adds	r3, #5
 800377e:	4a08      	ldr	r2, [pc, #32]	; (80037a0 <VCP_Ctrl+0x10c>)
 8003780:	7952      	ldrb	r2, [r2, #5]
 8003782:	701a      	strb	r2, [r3, #0]
		Buf[6] = linecoding.datatype;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	3306      	adds	r3, #6
 8003788:	4a05      	ldr	r2, [pc, #20]	; (80037a0 <VCP_Ctrl+0x10c>)
 800378a:	7992      	ldrb	r2, [r2, #6]
 800378c:	701a      	strb	r2, [r3, #0]
		break;
 800378e:	e000      	b.n	8003792 <VCP_Ctrl+0xfe>
	case SEND_BREAK:
		/* Not  needed for this driver */
		break;

	default:
		break;
 8003790:	bf00      	nop
	}

	return USBD_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	20000044 	.word	0x20000044

080037a4 <VCP_DataTx>:
 *         this function.
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
 */
static uint16_t VCP_DataTx(uint8_t* Buf, uint32_t Len) {
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
	while (i < Len) {
 80037b2:	e017      	b.n	80037e4 <VCP_DataTx+0x40>
		APP_Rx_Buffer[APP_Rx_ptr_in] = *(Buf + i);
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <VCP_DataTx+0x58>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	440a      	add	r2, r1
 80037be:	7811      	ldrb	r1, [r2, #0]
 80037c0:	4a0f      	ldr	r2, [pc, #60]	; (8003800 <VCP_DataTx+0x5c>)
 80037c2:	54d1      	strb	r1, [r2, r3]
		APP_Rx_ptr_in++;
 80037c4:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <VCP_DataTx+0x58>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <VCP_DataTx+0x58>)
 80037cc:	601a      	str	r2, [r3, #0]
		i++;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3301      	adds	r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
		/* To avoid buffer overflow */
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 80037d4:	4b09      	ldr	r3, [pc, #36]	; (80037fc <VCP_DataTx+0x58>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037dc:	d102      	bne.n	80037e4 <VCP_DataTx+0x40>
			APP_Rx_ptr_in = 0;
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <VCP_DataTx+0x58>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
 */
static uint16_t VCP_DataTx(uint8_t* Buf, uint32_t Len) {
	uint32_t i = 0;
	while (i < Len) {
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d3e3      	bcc.n	80037b4 <VCP_DataTx+0x10>
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
			APP_Rx_ptr_in = 0;
		}
	}

	return USBD_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000744 	.word	0x20000744
 8003800:	20000930 	.word	0x20000930

08003804 <VCP_DataRx>:
#define APP_TX_BUF_SIZE 128
uint8_t APP_Tx_Buffer[APP_TX_BUF_SIZE];
uint32_t APP_tx_ptr_head;
uint32_t APP_tx_ptr_tail;

static uint16_t VCP_DataRx(uint8_t* Buf, uint32_t Len) {
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
	uint32_t i;

	for (i = 0; i < Len; i++) {
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	e01e      	b.n	8003852 <VCP_DataRx+0x4e>
		APP_Tx_Buffer[APP_tx_ptr_head] = *(Buf + i);
 8003814:	4b14      	ldr	r3, [pc, #80]	; (8003868 <VCP_DataRx+0x64>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	440a      	add	r2, r1
 800381e:	7811      	ldrb	r1, [r2, #0]
 8003820:	4a12      	ldr	r2, [pc, #72]	; (800386c <VCP_DataRx+0x68>)
 8003822:	54d1      	strb	r1, [r2, r3]
		APP_tx_ptr_head++;
 8003824:	4b10      	ldr	r3, [pc, #64]	; (8003868 <VCP_DataRx+0x64>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <VCP_DataRx+0x64>)
 800382c:	601a      	str	r2, [r3, #0]
		if (APP_tx_ptr_head == APP_TX_BUF_SIZE)
 800382e:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <VCP_DataRx+0x64>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b80      	cmp	r3, #128	; 0x80
 8003834:	d102      	bne.n	800383c <VCP_DataRx+0x38>
			APP_tx_ptr_head = 0;
 8003836:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <VCP_DataRx+0x64>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

		if (APP_tx_ptr_head == APP_tx_ptr_tail)
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <VCP_DataRx+0x64>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <VCP_DataRx+0x6c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d101      	bne.n	800384c <VCP_DataRx+0x48>
			return USBD_FAIL;
 8003848:	2302      	movs	r3, #2
 800384a:	e007      	b.n	800385c <VCP_DataRx+0x58>
uint32_t APP_tx_ptr_tail;

static uint16_t VCP_DataRx(uint8_t* Buf, uint32_t Len) {
	uint32_t i;

	for (i = 0; i < Len; i++) {
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3301      	adds	r3, #1
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d3dc      	bcc.n	8003814 <VCP_DataRx+0x10>

		if (APP_tx_ptr_head == APP_tx_ptr_tail)
			return USBD_FAIL;
	}

	return USBD_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	200008a0 	.word	0x200008a0
 800386c:	2000080c 	.word	0x2000080c
 8003870:	2000088c 	.word	0x2000088c

08003874 <usbd_cdc_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_Init (void  *pdev, 
                               uint8_t cfgidx)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	70fb      	strb	r3, [r7, #3]
  uint8_t *pbuf;

  /* Open EP IN */
  DCD_EP_Open(pdev,
              CDC_IN_EP,
              CDC_DATA_IN_PACKET_SIZE,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8003886:	3339      	adds	r3, #57	; 0x39
                               uint8_t cfgidx)
{
  uint8_t *pbuf;

  /* Open EP IN */
  DCD_EP_Open(pdev,
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	2181      	movs	r1, #129	; 0x81
 800388e:	461a      	mov	r2, r3
 8003890:	2302      	movs	r3, #2
 8003892:	f7fd fca1 	bl	80011d8 <DCD_EP_Open>
              USB_OTG_EP_BULK);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
              CDC_OUT_EP,
              CDC_DATA_OUT_PACKET_SIZE,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800389c:	3340      	adds	r3, #64	; 0x40
              CDC_IN_EP,
              CDC_DATA_IN_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	2101      	movs	r1, #1
 80038a4:	461a      	mov	r2, r3
 80038a6:	2302      	movs	r3, #2
 80038a8:	f7fd fc96 	bl	80011d8 <DCD_EP_Open>
              CDC_OUT_EP,
              CDC_DATA_OUT_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open Command IN EP */
  DCD_EP_Open(pdev,
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	2182      	movs	r1, #130	; 0x82
 80038b0:	2208      	movs	r2, #8
 80038b2:	2303      	movs	r3, #3
 80038b4:	f7fd fc90 	bl	80011d8 <DCD_EP_Open>
              CDC_CMD_EP,
              CDC_CMD_PACKET_SZE,
              USB_OTG_EP_INT);
  
  pbuf = (uint8_t *)USBD_DeviceDesc;
 80038b8:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <usbd_cdc_Init+0x7c>)
 80038ba:	60fb      	str	r3, [r7, #12]
  pbuf[4] = DEVICE_CLASS_CDC;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3304      	adds	r3, #4
 80038c0:	2202      	movs	r2, #2
 80038c2:	701a      	strb	r2, [r3, #0]
  pbuf[5] = DEVICE_SUBCLASS_CDC;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3305      	adds	r3, #5
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <usbd_cdc_Init+0x80>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4798      	blx	r3

  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80038d8:	3340      	adds	r3, #64	; 0x40
  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();

  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	2101      	movs	r1, #1
 80038e0:	4a05      	ldr	r2, [pc, #20]	; (80038f8 <usbd_cdc_Init+0x84>)
 80038e2:	f7fd fcff 	bl	80012e4 <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
  
  return USBD_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	2000010c 	.word	0x2000010c
 80038f4:	2000004c 	.word	0x2000004c
 80038f8:	200008e8 	.word	0x200008e8

080038fc <usbd_cdc_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_DeInit (void  *pdev, 
                                 uint8_t cfgidx)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  DCD_EP_Close(pdev,
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	2181      	movs	r1, #129	; 0x81
 800390c:	f7fd fcb2 	bl	8001274 <DCD_EP_Close>
              CDC_IN_EP);
  
  /* Open EP OUT */
  DCD_EP_Close(pdev,
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	2101      	movs	r1, #1
 8003914:	f7fd fcae 	bl	8001274 <DCD_EP_Close>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  DCD_EP_Close(pdev,
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	2182      	movs	r1, #130	; 0x82
 800391c:	f7fd fcaa 	bl	8001274 <DCD_EP_Close>
              CDC_CMD_EP);

  /* Restore default state of the Interface physical components */
  APP_FOPS.pIf_DeInit();
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <usbd_cdc_DeInit+0x34>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4798      	blx	r3
  
  return USBD_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	2000004c 	.word	0x2000004c

08003934 <usbd_cdc_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  usbd_cdc_Setup (void  *pdev, 
                                USB_SETUP_REQ *req)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t  *pbuf;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003946:	2b00      	cmp	r3, #0
 8003948:	d03f      	beq.n	80039ca <usbd_cdc_Setup+0x96>
 800394a:	2b20      	cmp	r3, #32
 800394c:	d137      	bne.n	80039be <usbd_cdc_Setup+0x8a>
  {
    /* CDC Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :
      /* Check if the request is a data setup packet */
      if (req->wLength)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	88db      	ldrh	r3, [r3, #6]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d029      	beq.n	80039aa <usbd_cdc_Setup+0x76>
      {
        /* Check if the request is Device-to-Host */
        if (req->bmRequest & 0x80)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	b25b      	sxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	da11      	bge.n	8003986 <usbd_cdc_Setup+0x52>
        {
          /* Get the data to be sent to Host from interface layer */
          APP_FOPS.pIf_Ctrl(req->bRequest, CmdBuff, req->wLength);
 8003962:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <usbd_cdc_Setup+0x108>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	7852      	ldrb	r2, [r2, #1]
 800396a:	4611      	mov	r1, r2
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	88d2      	ldrh	r2, [r2, #6]
 8003970:	4608      	mov	r0, r1
 8003972:	4933      	ldr	r1, [pc, #204]	; (8003a40 <usbd_cdc_Setup+0x10c>)
 8003974:	4798      	blx	r3
          
          /* Send the data to the host */
          USBD_CtlSendData (pdev, 
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	88db      	ldrh	r3, [r3, #6]
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4930      	ldr	r1, [pc, #192]	; (8003a40 <usbd_cdc_Setup+0x10c>)
 800397e:	461a      	mov	r2, r3
 8003980:	f7ff fbe2 	bl	8003148 <USBD_CtlSendData>
 8003984:	e019      	b.n	80039ba <usbd_cdc_Setup+0x86>
                            req->wLength);          
        }
        else /* Host-to-Device requeset */
        {
          /* Set the value of the current command to be processed */
          cdcCmd = req->bRequest;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	461a      	mov	r2, r3
 800398c:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <usbd_cdc_Setup+0x110>)
 800398e:	601a      	str	r2, [r3, #0]
          cdcLen = req->wLength;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	88db      	ldrh	r3, [r3, #6]
 8003994:	461a      	mov	r2, r3
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <usbd_cdc_Setup+0x114>)
 8003998:	601a      	str	r2, [r3, #0]
          
          /* Prepare the reception of the buffer over EP0
          Next step: the received data will be managed in usbd_cdc_EP0_TxSent() 
          function. */
          USBD_CtlPrepareRx (pdev,
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	88db      	ldrh	r3, [r3, #6]
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4927      	ldr	r1, [pc, #156]	; (8003a40 <usbd_cdc_Setup+0x10c>)
 80039a2:	461a      	mov	r2, r3
 80039a4:	f7ff fc04 	bl	80031b0 <USBD_CtlPrepareRx>
 80039a8:	e007      	b.n	80039ba <usbd_cdc_Setup+0x86>
        }
      }
      else /* No Data request */
      {
        /* Transfer the command to the interface layer */
        APP_FOPS.pIf_Ctrl(req->bRequest, NULL, 0);
 80039aa:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <usbd_cdc_Setup+0x108>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	7852      	ldrb	r2, [r2, #1]
 80039b2:	4610      	mov	r0, r2
 80039b4:	2100      	movs	r1, #0
 80039b6:	2200      	movs	r2, #0
 80039b8:	4798      	blx	r3
      }
      
      return USBD_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e03a      	b.n	8003a34 <usbd_cdc_Setup+0x100>
      
    default:
      USBD_CtlError (pdev, req);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	6839      	ldr	r1, [r7, #0]
 80039c2:	f7ff fb47 	bl	8003054 <USBD_CtlError>
      return USBD_FAIL;
 80039c6:	2302      	movs	r3, #2
 80039c8:	e034      	b.n	8003a34 <usbd_cdc_Setup+0x100>
    
      
      
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	785b      	ldrb	r3, [r3, #1]
 80039ce:	2b0a      	cmp	r3, #10
 80039d0:	d018      	beq.n	8003a04 <usbd_cdc_Setup+0xd0>
 80039d2:	2b0b      	cmp	r3, #11
 80039d4:	d01c      	beq.n	8003a10 <usbd_cdc_Setup+0xdc>
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d12b      	bne.n	8003a32 <usbd_cdc_Setup+0xfe>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == CDC_DESCRIPTOR_TYPE)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	885b      	ldrh	r3, [r3, #2]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b21      	cmp	r3, #33	; 0x21
 80039e4:	d107      	bne.n	80039f6 <usbd_cdc_Setup+0xc2>
      {
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
        pbuf = usbd_cdc_Desc;   
#else
        pbuf = usbd_cdc_CfgDesc + 9 + (9 * USBD_ITF_MAX_NUM);
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <usbd_cdc_Setup+0x118>)
 80039e8:	60bb      	str	r3, [r7, #8]
#endif 
        len = MIN(USB_CDC_DESC_SIZ , req->wLength);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	88db      	ldrh	r3, [r3, #6]
 80039ee:	2b3a      	cmp	r3, #58	; 0x3a
 80039f0:	bf28      	it	cs
 80039f2:	233a      	movcs	r3, #58	; 0x3a
 80039f4:	81fb      	strh	r3, [r7, #14]
      }
      
      USBD_CtlSendData (pdev, 
 80039f6:	89fb      	ldrh	r3, [r7, #14]
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	461a      	mov	r2, r3
 80039fe:	f7ff fba3 	bl	8003148 <USBD_CtlSendData>
                        pbuf,
                        len);
      break;
 8003a02:	e016      	b.n	8003a32 <usbd_cdc_Setup+0xfe>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4912      	ldr	r1, [pc, #72]	; (8003a50 <usbd_cdc_Setup+0x11c>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f7ff fb9d 	bl	8003148 <USBD_CtlSendData>
                        (uint8_t *)&usbd_cdc_AltSet,
                        1);
      break;
 8003a0e:	e010      	b.n	8003a32 <usbd_cdc_Setup+0xfe>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_ITF_MAX_NUM)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	885b      	ldrh	r3, [r3, #2]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <usbd_cdc_Setup+0xf4>
      {
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	885b      	ldrh	r3, [r3, #2]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <usbd_cdc_Setup+0x11c>)
 8003a24:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;
 8003a26:	e003      	b.n	8003a30 <usbd_cdc_Setup+0xfc>
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
      }
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	6839      	ldr	r1, [r7, #0]
 8003a2c:	f7ff fb12 	bl	8003054 <USBD_CtlError>
      }
      break;
 8003a30:	bf00      	nop
    }
  }
  return USBD_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	2000004c 	.word	0x2000004c
 8003a40:	20000928 	.word	0x20000928
 8003a44:	200000a4 	.word	0x200000a4
 8003a48:	20000754 	.word	0x20000754
 8003a4c:	20000072 	.word	0x20000072
 8003a50:	20000740 	.word	0x20000740

08003a54 <usbd_cdc_EP0_RxReady>:
  *         Data received on control endpoint
  * @param  pdev: device device instance
  * @retval status
  */
static uint8_t  usbd_cdc_EP0_RxReady (void  *pdev)
{ 
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if (cdcCmd != NO_CMD)
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <usbd_cdc_EP0_RxReady+0x34>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2bff      	cmp	r3, #255	; 0xff
 8003a62:	d00b      	beq.n	8003a7c <usbd_cdc_EP0_RxReady+0x28>
  {
    /* Process the data */
    APP_FOPS.pIf_Ctrl(cdcCmd, CmdBuff, cdcLen);
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <usbd_cdc_EP0_RxReady+0x38>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a07      	ldr	r2, [pc, #28]	; (8003a88 <usbd_cdc_EP0_RxReady+0x34>)
 8003a6a:	6811      	ldr	r1, [r2, #0]
 8003a6c:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <usbd_cdc_EP0_RxReady+0x3c>)
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	4608      	mov	r0, r1
 8003a72:	4908      	ldr	r1, [pc, #32]	; (8003a94 <usbd_cdc_EP0_RxReady+0x40>)
 8003a74:	4798      	blx	r3
    
    /* Reset the command variable to default value */
    cdcCmd = NO_CMD;
 8003a76:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <usbd_cdc_EP0_RxReady+0x34>)
 8003a78:	22ff      	movs	r2, #255	; 0xff
 8003a7a:	601a      	str	r2, [r3, #0]
  }
  
  return USBD_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	200000a4 	.word	0x200000a4
 8003a8c:	2000004c 	.word	0x2000004c
 8003a90:	20000754 	.word	0x20000754
 8003a94:	20000928 	.word	0x20000928

08003a98 <usbd_cdc_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataIn (void *pdev, uint8_t epnum)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if (USB_Tx_State == 1)
 8003aa4:	4b28      	ldr	r3, [pc, #160]	; (8003b48 <usbd_cdc_DataIn+0xb0>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d148      	bne.n	8003b3e <usbd_cdc_DataIn+0xa6>
  {
    if (APP_Rx_length == 0) 
 8003aac:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <usbd_cdc_DataIn+0xb4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d103      	bne.n	8003abc <usbd_cdc_DataIn+0x24>
    {
      USB_Tx_State = 0;
 8003ab4:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <usbd_cdc_DataIn+0xb0>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
 8003aba:	e040      	b.n	8003b3e <usbd_cdc_DataIn+0xa6>
    }
    else 
    {
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8003ac2:	3339      	adds	r3, #57	; 0x39
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <usbd_cdc_DataIn+0xb4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d21e      	bcs.n	8003b0e <usbd_cdc_DataIn+0x76>
        USB_Tx_ptr = APP_Rx_ptr_out;
 8003ad0:	4b1f      	ldr	r3, [pc, #124]	; (8003b50 <usbd_cdc_DataIn+0xb8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	81fb      	strh	r3, [r7, #14]
        USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8003adc:	f8b3 3039 	ldrh.w	r3, [r3, #57]	; 0x39
 8003ae0:	81bb      	strh	r3, [r7, #12]
        
        APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8003ae8:	3339      	adds	r3, #57	; 0x39
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <usbd_cdc_DataIn+0xb8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	441a      	add	r2, r3
 8003af4:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <usbd_cdc_DataIn+0xb8>)
 8003af6:	601a      	str	r2, [r3, #0]
        APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
 8003af8:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <usbd_cdc_DataIn+0xb4>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8003b02:	3339      	adds	r3, #57	; 0x39
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	1ad2      	subs	r2, r2, r3
 8003b08:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <usbd_cdc_DataIn+0xb4>)
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	e00f      	b.n	8003b2e <usbd_cdc_DataIn+0x96>
      }
      else 
      {
        USB_Tx_ptr = APP_Rx_ptr_out;
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <usbd_cdc_DataIn+0xb8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	81fb      	strh	r3, [r7, #14]
        USB_Tx_length = APP_Rx_length;
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <usbd_cdc_DataIn+0xb4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	81bb      	strh	r3, [r7, #12]
        
        APP_Rx_ptr_out += APP_Rx_length;
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <usbd_cdc_DataIn+0xb8>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <usbd_cdc_DataIn+0xb4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	441a      	add	r2, r3
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <usbd_cdc_DataIn+0xb8>)
 8003b26:	601a      	str	r2, [r3, #0]
        APP_Rx_length = 0;
 8003b28:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <usbd_cdc_DataIn+0xb4>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
                 CDC_IN_EP,
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 8003b2e:	89fa      	ldrh	r2, [r7, #14]
        APP_Rx_ptr_out += APP_Rx_length;
        APP_Rx_length = 0;
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <usbd_cdc_DataIn+0xbc>)
 8003b32:	441a      	add	r2, r3
 8003b34:	89bb      	ldrh	r3, [r7, #12]
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	2181      	movs	r1, #129	; 0x81
 8003b3a:	f7fd fc13 	bl	8001364 <DCD_EP_Tx>
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
                 USB_Tx_length);
    }
  }  
  
  return USBD_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000750 	.word	0x20000750
 8003b4c:	2000074c 	.word	0x2000074c
 8003b50:	20000748 	.word	0x20000748
 8003b54:	20000930 	.word	0x20000930

08003b58 <usbd_cdc_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataOut (void *pdev, uint8_t epnum)
{      
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	440b      	add	r3, r1
 8003b72:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	81fb      	strh	r3, [r7, #14]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <usbd_cdc_DataOut+0x4c>)
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	89fa      	ldrh	r2, [r7, #14]
 8003b80:	4809      	ldr	r0, [pc, #36]	; (8003ba8 <usbd_cdc_DataOut+0x50>)
 8003b82:	4611      	mov	r1, r2
 8003b84:	4798      	blx	r3
  
  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8003b8c:	3340      	adds	r3, #64	; 0x40
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
  
  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	2101      	movs	r1, #1
 8003b94:	4a04      	ldr	r2, [pc, #16]	; (8003ba8 <usbd_cdc_DataOut+0x50>)
 8003b96:	f7fd fba5 	bl	80012e4 <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	2000004c 	.word	0x2000004c
 8003ba8:	200008e8 	.word	0x200008e8

08003bac <usbd_cdc_SOF>:
  * @param  pdev: instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_SOF (void *pdev)
{      
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  static uint32_t FrameCount = 0;
  
  if (FrameCount++ == CDC_IN_FRAME_INTERVAL)
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <usbd_cdc_SOF+0x2c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	1c59      	adds	r1, r3, #1
 8003bba:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <usbd_cdc_SOF+0x2c>)
 8003bbc:	6011      	str	r1, [r2, #0]
 8003bbe:	2b05      	cmp	r3, #5
 8003bc0:	d105      	bne.n	8003bce <usbd_cdc_SOF+0x22>
  {
    /* Reset the frame counter */
    FrameCount = 0;
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <usbd_cdc_SOF+0x2c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
    
    /* Check the data to be sent through IN pipe */
    Handle_USBAsynchXfer(pdev);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f807 	bl	8003bdc <Handle_USBAsynchXfer>
  }
  
  return USBD_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000758 	.word	0x20000758

08003bdc <Handle_USBAsynchXfer>:
  *         Send data to USB
  * @param  pdev: instance
  * @retval None
  */
static void Handle_USBAsynchXfer (void *pdev)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8003be4:	4b38      	ldr	r3, [pc, #224]	; (8003cc8 <Handle_USBAsynchXfer+0xec>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d069      	beq.n	8003cc0 <Handle_USBAsynchXfer+0xe4>
  {
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
 8003bec:	4b37      	ldr	r3, [pc, #220]	; (8003ccc <Handle_USBAsynchXfer+0xf0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf4:	d102      	bne.n	8003bfc <Handle_USBAsynchXfer+0x20>
    {
      APP_Rx_ptr_out = 0;
 8003bf6:	4b35      	ldr	r3, [pc, #212]	; (8003ccc <Handle_USBAsynchXfer+0xf0>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
    }
    
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 8003bfc:	4b33      	ldr	r3, [pc, #204]	; (8003ccc <Handle_USBAsynchXfer+0xf0>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b33      	ldr	r3, [pc, #204]	; (8003cd0 <Handle_USBAsynchXfer+0xf4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d103      	bne.n	8003c10 <Handle_USBAsynchXfer+0x34>
    {
      USB_Tx_State = 0; 
 8003c08:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <Handle_USBAsynchXfer+0xec>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
      return;
 8003c0e:	e057      	b.n	8003cc0 <Handle_USBAsynchXfer+0xe4>
    }
    
    if(APP_Rx_ptr_out > APP_Rx_ptr_in) /* rollback */
 8003c10:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <Handle_USBAsynchXfer+0xf0>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b2e      	ldr	r3, [pc, #184]	; (8003cd0 <Handle_USBAsynchXfer+0xf4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d906      	bls.n	8003c2a <Handle_USBAsynchXfer+0x4e>
    { 
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 8003c1c:	4b2b      	ldr	r3, [pc, #172]	; (8003ccc <Handle_USBAsynchXfer+0xf0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8003c24:	4b2b      	ldr	r3, [pc, #172]	; (8003cd4 <Handle_USBAsynchXfer+0xf8>)
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e006      	b.n	8003c38 <Handle_USBAsynchXfer+0x5c>
    
    }
    else 
    {
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 8003c2a:	4b29      	ldr	r3, [pc, #164]	; (8003cd0 <Handle_USBAsynchXfer+0xf4>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <Handle_USBAsynchXfer+0xf0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	1ad2      	subs	r2, r2, r3
 8003c34:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <Handle_USBAsynchXfer+0xf8>)
 8003c36:	601a      	str	r2, [r3, #0]
    }
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     APP_Rx_length &= ~0x03;
#endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
    
    if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8003c3e:	3339      	adds	r3, #57	; 0x39
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	4b23      	ldr	r3, [pc, #140]	; (8003cd4 <Handle_USBAsynchXfer+0xf8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d21e      	bcs.n	8003c8a <Handle_USBAsynchXfer+0xae>
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8003c4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <Handle_USBAsynchXfer+0xf0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	81fb      	strh	r3, [r7, #14]
      USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8003c58:	f8b3 3039 	ldrh.w	r3, [r3, #57]	; 0x39
 8003c5c:	81bb      	strh	r3, [r7, #12]
      
      APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;	
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8003c64:	3339      	adds	r3, #57	; 0x39
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <Handle_USBAsynchXfer+0xf0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	441a      	add	r2, r3
 8003c70:	4b16      	ldr	r3, [pc, #88]	; (8003ccc <Handle_USBAsynchXfer+0xf0>)
 8003c72:	601a      	str	r2, [r3, #0]
      APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;
 8003c74:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <Handle_USBAsynchXfer+0xf8>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8003c7e:	3339      	adds	r3, #57	; 0x39
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	1ad2      	subs	r2, r2, r3
 8003c84:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <Handle_USBAsynchXfer+0xf8>)
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e00f      	b.n	8003caa <Handle_USBAsynchXfer+0xce>
    }
    else
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <Handle_USBAsynchXfer+0xf0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	81fb      	strh	r3, [r7, #14]
      USB_Tx_length = APP_Rx_length;
 8003c90:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <Handle_USBAsynchXfer+0xf8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	81bb      	strh	r3, [r7, #12]
      
      APP_Rx_ptr_out += APP_Rx_length;
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <Handle_USBAsynchXfer+0xf0>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <Handle_USBAsynchXfer+0xf8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	441a      	add	r2, r3
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <Handle_USBAsynchXfer+0xf0>)
 8003ca2:	601a      	str	r2, [r3, #0]
      APP_Rx_length = 0;
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <Handle_USBAsynchXfer+0xf8>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1; 
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <Handle_USBAsynchXfer+0xec>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	701a      	strb	r2, [r3, #0]

    DCD_EP_Tx (pdev,
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 8003cb0:	89fa      	ldrh	r2, [r7, #14]
      APP_Rx_ptr_out += APP_Rx_length;
      APP_Rx_length = 0;
    }
    USB_Tx_State = 1; 

    DCD_EP_Tx (pdev,
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <Handle_USBAsynchXfer+0xfc>)
 8003cb4:	441a      	add	r2, r3
 8003cb6:	89bb      	ldrh	r3, [r7, #12]
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	2181      	movs	r1, #129	; 0x81
 8003cbc:	f7fd fb52 	bl	8001364 <DCD_EP_Tx>
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
               USB_Tx_length);
  }  
  
}
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000750 	.word	0x20000750
 8003ccc:	20000748 	.word	0x20000748
 8003cd0:	20000744 	.word	0x20000744
 8003cd4:	2000074c 	.word	0x2000074c
 8003cd8:	20000930 	.word	0x20000930

08003cdc <USBD_cdc_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_cdc_GetCfgDesc (uint8_t speed, uint16_t *length)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof (usbd_cdc_CfgDesc);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2243      	movs	r2, #67	; 0x43
 8003cec:	801a      	strh	r2, [r3, #0]
  return usbd_cdc_CfgDesc;
 8003cee:	4b03      	ldr	r3, [pc, #12]	; (8003cfc <USBD_cdc_GetCfgDesc+0x20>)
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	20000060 	.word	0x20000060

08003d00 <USBD_USR_Init>:
*         Displays the message on LCD for host lib initialization
* @param  None
* @retval None
*/
void USBD_USR_Init(void)
{   
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0

}
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <USBD_USR_DeviceReset>:
*         Displays the message on LCD on device Reset Event
* @param  speed : device speed
* @retval None
*/
void USBD_USR_DeviceReset(uint8_t speed )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	71fb      	strb	r3, [r7, #7]
 switch (speed)
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <USBD_USR_DeviceReset+0x16>
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d002      	beq.n	8003d26 <USBD_USR_DeviceReset+0x1a>
     break;

  case USB_OTG_SPEED_FULL: 
     break;
 default:
     break;
 8003d20:	e002      	b.n	8003d28 <USBD_USR_DeviceReset+0x1c>
void USBD_USR_DeviceReset(uint8_t speed )
{
 switch (speed)
 {
   case USB_OTG_SPEED_HIGH: 
     break;
 8003d22:	bf00      	nop
 8003d24:	e000      	b.n	8003d28 <USBD_USR_DeviceReset+0x1c>

  case USB_OTG_SPEED_FULL: 
     break;
 8003d26:	bf00      	nop
 default:
     break;
     
 }
}
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop

08003d34 <USBD_USR_DeviceConfigured>:
*         Displays the message on LCD on device configuration Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceConfigured (void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
}
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <USBD_USR_DeviceConnected>:
*         Displays the message on LCD on device connection Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceConnected (void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
}
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <USBD_USR_DeviceDisconnected>:
*         Displays the message on LCD on device disconnection Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceDisconnected (void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
}
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <USBD_USR_DeviceSuspended>:
*         Displays the message on LCD on device suspend Event
* @param  None
* @retval None
*/
void USBD_USR_DeviceSuspended(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  /* Users can do their application actions here for the USB-Reset */
}
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <USBD_USR_DeviceResumed>:
*         Displays the message on LCD on device resume Event
* @param  None
* @retval None
*/
void USBD_USR_DeviceResumed(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  /* Users can do their application actions here for the USB-Reset */
}
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <USBD_USR_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	6039      	str	r1, [r7, #0]
 8003d7a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2212      	movs	r2, #18
 8003d80:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8003d82:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <USBD_USR_DeviceDescriptor+0x20>)
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	2000010c 	.word	0x2000010c

08003d94 <USBD_USR_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2204      	movs	r2, #4
 8003da4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8003da6:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <USBD_USR_LangIDStrDescriptor+0x20>)
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	20000120 	.word	0x20000120

08003db8 <USBD_USR_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	6039      	str	r1, [r7, #0]
 8003dc2:	71fb      	strb	r3, [r7, #7]
 
  
  if(speed == 0)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d105      	bne.n	8003dd6 <USBD_USR_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString ((uint8_t*)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8003dca:	4808      	ldr	r0, [pc, #32]	; (8003dec <USBD_USR_ProductStrDescriptor+0x34>)
 8003dcc:	4908      	ldr	r1, [pc, #32]	; (8003df0 <USBD_USR_ProductStrDescriptor+0x38>)
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	f7ff f964 	bl	800309c <USBD_GetString>
 8003dd4:	e004      	b.n	8003de0 <USBD_USR_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8003dd6:	4807      	ldr	r0, [pc, #28]	; (8003df4 <USBD_USR_ProductStrDescriptor+0x3c>)
 8003dd8:	4905      	ldr	r1, [pc, #20]	; (8003df0 <USBD_USR_ProductStrDescriptor+0x38>)
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	f7ff f95e 	bl	800309c <USBD_GetString>
  }
  return USBD_StrDesc;
 8003de0:	4b03      	ldr	r3, [pc, #12]	; (8003df0 <USBD_USR_ProductStrDescriptor+0x38>)
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	08004688 	.word	0x08004688
 8003df0:	200007d8 	.word	0x200007d8
 8003df4:	080046ac 	.word	0x080046ac

08003df8 <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	6039      	str	r1, [r7, #0]
 8003e02:	71fb      	strb	r3, [r7, #7]
  USBD_GetString ((uint8_t*)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003e04:	4804      	ldr	r0, [pc, #16]	; (8003e18 <USBD_USR_ManufacturerStrDescriptor+0x20>)
 8003e06:	4905      	ldr	r1, [pc, #20]	; (8003e1c <USBD_USR_ManufacturerStrDescriptor+0x24>)
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	f7ff f947 	bl	800309c <USBD_GetString>
  return USBD_StrDesc;
 8003e0e:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <USBD_USR_ManufacturerStrDescriptor+0x24>)
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	080046d0 	.word	0x080046d0
 8003e1c:	200007d8 	.word	0x200007d8

08003e20 <USBD_USR_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	6039      	str	r1, [r7, #0]
 8003e2a:	71fb      	strb	r3, [r7, #7]
  if(speed  == USB_OTG_SPEED_HIGH)
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d105      	bne.n	8003e3e <USBD_USR_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString ((uint8_t*)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 8003e32:	4808      	ldr	r0, [pc, #32]	; (8003e54 <USBD_USR_SerialStrDescriptor+0x34>)
 8003e34:	4908      	ldr	r1, [pc, #32]	; (8003e58 <USBD_USR_SerialStrDescriptor+0x38>)
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	f7ff f930 	bl	800309c <USBD_GetString>
 8003e3c:	e004      	b.n	8003e48 <USBD_USR_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 8003e3e:	4807      	ldr	r0, [pc, #28]	; (8003e5c <USBD_USR_SerialStrDescriptor+0x3c>)
 8003e40:	4905      	ldr	r1, [pc, #20]	; (8003e58 <USBD_USR_SerialStrDescriptor+0x38>)
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	f7ff f92a 	bl	800309c <USBD_GetString>
  }
  return USBD_StrDesc;
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <USBD_USR_SerialStrDescriptor+0x38>)
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	080046e4 	.word	0x080046e4
 8003e58:	200007d8 	.word	0x200007d8
 8003e5c:	080046f4 	.word	0x080046f4

08003e60 <USBD_USR_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	71fb      	strb	r3, [r7, #7]
  if(speed  == USB_OTG_SPEED_HIGH)
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d105      	bne.n	8003e7e <USBD_USR_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString ((uint8_t*)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8003e72:	4808      	ldr	r0, [pc, #32]	; (8003e94 <USBD_USR_ConfigStrDescriptor+0x34>)
 8003e74:	4908      	ldr	r1, [pc, #32]	; (8003e98 <USBD_USR_ConfigStrDescriptor+0x38>)
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	f7ff f910 	bl	800309c <USBD_GetString>
 8003e7c:	e004      	b.n	8003e88 <USBD_USR_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8003e7e:	4805      	ldr	r0, [pc, #20]	; (8003e94 <USBD_USR_ConfigStrDescriptor+0x34>)
 8003e80:	4905      	ldr	r1, [pc, #20]	; (8003e98 <USBD_USR_ConfigStrDescriptor+0x38>)
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	f7ff f90a 	bl	800309c <USBD_GetString>
  }
  return USBD_StrDesc;  
 8003e88:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <USBD_USR_ConfigStrDescriptor+0x38>)
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	08004704 	.word	0x08004704
 8003e98:	200007d8 	.word	0x200007d8

08003e9c <USBD_USR_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	6039      	str	r1, [r7, #0]
 8003ea6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <USBD_USR_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString ((uint8_t*)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8003eae:	4808      	ldr	r0, [pc, #32]	; (8003ed0 <USBD_USR_InterfaceStrDescriptor+0x34>)
 8003eb0:	4908      	ldr	r1, [pc, #32]	; (8003ed4 <USBD_USR_InterfaceStrDescriptor+0x38>)
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	f7ff f8f2 	bl	800309c <USBD_GetString>
 8003eb8:	e004      	b.n	8003ec4 <USBD_USR_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8003eba:	4805      	ldr	r0, [pc, #20]	; (8003ed0 <USBD_USR_InterfaceStrDescriptor+0x34>)
 8003ebc:	4905      	ldr	r1, [pc, #20]	; (8003ed4 <USBD_USR_InterfaceStrDescriptor+0x38>)
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	f7ff f8ec 	bl	800309c <USBD_GetString>
  }
  return USBD_StrDesc;  
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <USBD_USR_InterfaceStrDescriptor+0x38>)
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	08004710 	.word	0x08004710
 8003ed4:	200007d8 	.word	0x200007d8

08003ed8 <USB_OTG_BSP_Init>:
* @param  None
* @retval None
*/

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
#endif


 #ifdef USE_USB_OTG_FS

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	f000 f8c6 	bl	8004074 <RCC_AHB1PeriphClockCmd>

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8  |
 8003ee8:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8003eec:	60bb      	str	r3, [r7, #8]
    GPIO_Pin_9  |
      GPIO_Pin_11 |
        GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	737b      	strb	r3, [r7, #13]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003efe:	f107 0308 	add.w	r3, r7, #8
 8003f02:	4820      	ldr	r0, [pc, #128]	; (8003f84 <USB_OTG_BSP_Init+0xac>)
 8003f04:	4619      	mov	r1, r3
 8003f06:	f000 f92d 	bl	8004164 <GPIO_Init>

  GPIO_PinAFConfig(GPIOA,GPIO_PinSource8,GPIO_AF_OTG1_FS) ;
 8003f0a:	481e      	ldr	r0, [pc, #120]	; (8003f84 <USB_OTG_BSP_Init+0xac>)
 8003f0c:	2108      	movs	r1, #8
 8003f0e:	220a      	movs	r2, #10
 8003f10:	f000 f9b6 	bl	8004280 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_OTG1_FS) ;
 8003f14:	481b      	ldr	r0, [pc, #108]	; (8003f84 <USB_OTG_BSP_Init+0xac>)
 8003f16:	2109      	movs	r1, #9
 8003f18:	220a      	movs	r2, #10
 8003f1a:	f000 f9b1 	bl	8004280 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG1_FS) ;
 8003f1e:	4819      	ldr	r0, [pc, #100]	; (8003f84 <USB_OTG_BSP_Init+0xac>)
 8003f20:	210b      	movs	r1, #11
 8003f22:	220a      	movs	r2, #10
 8003f24:	f000 f9ac 	bl	8004280 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;
 8003f28:	4816      	ldr	r0, [pc, #88]	; (8003f84 <USB_OTG_BSP_Init+0xac>)
 8003f2a:	210c      	movs	r1, #12
 8003f2c:	220a      	movs	r2, #10
 8003f2e:	f000 f9a7 	bl	8004280 <GPIO_PinAFConfig>

  /* this for ID line debug */


  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
 8003f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003f40:	2303      	movs	r3, #3
 8003f42:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003f44:	f107 0308 	add.w	r3, r7, #8
 8003f48:	480e      	ldr	r0, [pc, #56]	; (8003f84 <USB_OTG_BSP_Init+0xac>)
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f000 f90a 	bl	8004164 <GPIO_Init>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_OTG1_FS) ;
 8003f50:	480c      	ldr	r0, [pc, #48]	; (8003f84 <USB_OTG_BSP_Init+0xac>)
 8003f52:	210a      	movs	r1, #10
 8003f54:	220a      	movs	r2, #10
 8003f56:	f000 f993 	bl	8004280 <GPIO_PinAFConfig>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8003f5a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003f5e:	2101      	movs	r1, #1
 8003f60:	f000 f8c4 	bl	80040ec <RCC_APB2PeriphClockCmd>
  RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ;
 8003f64:	2080      	movs	r0, #128	; 0x80
 8003f66:	2101      	movs	r1, #1
 8003f68:	f000 f8a2 	bl	80040b0 <RCC_AHB2PeriphClockCmd>

 #endif //USB_OTG_HS


  /* enable the PWR clock */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8003f6c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003f70:	2101      	movs	r1, #1
 8003f72:	f000 f8d9 	bl	8004128 <RCC_APB1PeriphResetCmd>
  NVIC_Init(&NVIC_InitStructure);

  EXTI_ClearITPendingBit(EXTI_Line20);
#endif

  EXTI_ClearITPendingBit(EXTI_Line0);
 8003f76:	2001      	movs	r0, #1
 8003f78:	f000 f9c8 	bl	800430c <EXTI_ClearITPendingBit>
}
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40020000 	.word	0x40020000

08003f88 <USB_OTG_BSP_EnableInterrupt>:
*         Enabele USB Global interrupt
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  NVIC_InitTypeDef NVIC_InitStructure;

  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8003f90:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8003f94:	f000 fad6 	bl	8004544 <NVIC_PriorityGroupConfig>
#ifdef USE_USB_OTG_HS
  NVIC_InitStructure.NVIC_IRQChannel = OTG_HS_IRQn;
#else
  NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;
 8003f98:	2343      	movs	r3, #67	; 0x43
 8003f9a:	733b      	strb	r3, [r7, #12]
#endif
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);
 8003fa8:	f107 030c 	add.w	r3, r7, #12
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fadb 	bl	8004568 <NVIC_Init>
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
#endif
}
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <USB_OTG_BSP_uDelay>:
*         This function provides delay time in micro sec
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
  const uint32_t utime = (120 * usec / 7);
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <USB_OTG_BSP_uDelay+0x44>)
 8003fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd6:	1ad2      	subs	r2, r2, r3
 8003fd8:	0852      	lsrs	r2, r2, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	60bb      	str	r3, [r7, #8]
  do
  {
    if ( ++count > utime )
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d900      	bls.n	8003ff0 <USB_OTG_BSP_uDelay+0x38>
    {
      return ;
 8003fee:	e000      	b.n	8003ff2 <USB_OTG_BSP_uDelay+0x3a>
    }
  }
  while (1);
 8003ff0:	e7f6      	b.n	8003fe0 <USB_OTG_BSP_uDelay+0x28>
}
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	24924925 	.word	0x24924925

08004000 <USB_OTG_BSP_mDelay>:
*          This function provides delay time in milli sec
* @param  msec : Value of delay required in milli sec
* @retval None
*/
void USB_OTG_BSP_mDelay (const uint32_t msec)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  USB_OTG_BSP_uDelay(msec * 1000);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800400e:	fb02 f303 	mul.w	r3, r2, r3
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff ffd0 	bl	8003fb8 <USB_OTG_BSP_uDelay>
}
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop

08004020 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	887a      	ldrh	r2, [r7, #2]
 8004030:	819a      	strh	r2, [r3, #12]
}
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8004048:	2300      	movs	r3, #0
 800404a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	891b      	ldrh	r3, [r3, #8]
 8004050:	b29a      	uxth	r2, r3
 8004052:	887b      	ldrh	r3, [r7, #2]
 8004054:	4013      	ands	r3, r2
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
 8004060:	e001      	b.n	8004066 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d006      	beq.n	8004094 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <RCC_AHB1PeriphClockCmd+0x38>)
 8004088:	4a08      	ldr	r2, [pc, #32]	; (80040ac <RCC_AHB1PeriphClockCmd+0x38>)
 800408a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	430a      	orrs	r2, r1
 8004090:	631a      	str	r2, [r3, #48]	; 0x30
 8004092:	e006      	b.n	80040a2 <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <RCC_AHB1PeriphClockCmd+0x38>)
 8004096:	4a05      	ldr	r2, [pc, #20]	; (80040ac <RCC_AHB1PeriphClockCmd+0x38>)
 8004098:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	43d2      	mvns	r2, r2
 800409e:	400a      	ands	r2, r1
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	40023800 	.word	0x40023800

080040b0 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d006      	beq.n	80040d0 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80040c2:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <RCC_AHB2PeriphClockCmd+0x38>)
 80040c4:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <RCC_AHB2PeriphClockCmd+0x38>)
 80040c6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34
 80040ce:	e006      	b.n	80040de <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <RCC_AHB2PeriphClockCmd+0x38>)
 80040d2:	4a05      	ldr	r2, [pc, #20]	; (80040e8 <RCC_AHB2PeriphClockCmd+0x38>)
 80040d4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	43d2      	mvns	r2, r2
 80040da:	400a      	ands	r2, r1
 80040dc:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40023800 	.word	0x40023800

080040ec <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d006      	beq.n	800410c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80040fe:	4b09      	ldr	r3, [pc, #36]	; (8004124 <RCC_APB2PeriphClockCmd+0x38>)
 8004100:	4a08      	ldr	r2, [pc, #32]	; (8004124 <RCC_APB2PeriphClockCmd+0x38>)
 8004102:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	430a      	orrs	r2, r1
 8004108:	645a      	str	r2, [r3, #68]	; 0x44
 800410a:	e006      	b.n	800411a <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <RCC_APB2PeriphClockCmd+0x38>)
 800410e:	4a05      	ldr	r2, [pc, #20]	; (8004124 <RCC_APB2PeriphClockCmd+0x38>)
 8004110:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	43d2      	mvns	r2, r2
 8004116:	400a      	ands	r2, r1
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	40023800 	.word	0x40023800

08004128 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d006      	beq.n	8004148 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800413a:	4b09      	ldr	r3, [pc, #36]	; (8004160 <RCC_APB1PeriphResetCmd+0x38>)
 800413c:	4a08      	ldr	r2, [pc, #32]	; (8004160 <RCC_APB1PeriphResetCmd+0x38>)
 800413e:	6a11      	ldr	r1, [r2, #32]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	430a      	orrs	r2, r1
 8004144:	621a      	str	r2, [r3, #32]
 8004146:	e006      	b.n	8004156 <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <RCC_APB1PeriphResetCmd+0x38>)
 800414a:	4a05      	ldr	r2, [pc, #20]	; (8004160 <RCC_APB1PeriphResetCmd+0x38>)
 800414c:	6a11      	ldr	r1, [r2, #32]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	43d2      	mvns	r2, r2
 8004152:	400a      	ands	r2, r1
 8004154:	621a      	str	r2, [r3, #32]
  }
}
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	40023800 	.word	0x40023800

08004164 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e076      	b.n	800426e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2201      	movs	r2, #1
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4013      	ands	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	429a      	cmp	r2, r3
 800419a:	d165      	bne.n	8004268 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	2103      	movs	r1, #3
 80041a6:	fa01 f303 	lsl.w	r3, r1, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	401a      	ands	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	791b      	ldrb	r3, [r3, #4]
 80041ba:	4619      	mov	r1, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	fa01 f303 	lsl.w	r3, r1, r3
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	791b      	ldrb	r3, [r3, #4]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d003      	beq.n	80041da <GPIO_Init+0x76>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	791b      	ldrb	r3, [r3, #4]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d12e      	bne.n	8004238 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	2103      	movs	r1, #3
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	401a      	ands	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	795b      	ldrb	r3, [r3, #5]
 80041f8:	4619      	mov	r1, r3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	b29b      	uxth	r3, r3
 8004210:	2101      	movs	r1, #1
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	401a      	ands	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	799b      	ldrb	r3, [r3, #6]
 8004226:	4619      	mov	r1, r3
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	b29b      	uxth	r3, r3
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	b29b      	uxth	r3, r3
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	b29b      	uxth	r3, r3
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	2103      	movs	r1, #3
 8004244:	fa01 f303 	lsl.w	r3, r1, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	401a      	ands	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	79db      	ldrb	r3, [r3, #7]
 8004258:	4619      	mov	r1, r3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fa01 f303 	lsl.w	r3, r1, r3
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	3301      	adds	r3, #1
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b0f      	cmp	r3, #15
 8004272:	d985      	bls.n	8004180 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop

08004280 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	460a      	mov	r2, r1
 800428c:	807a      	strh	r2, [r7, #2]
 800428e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8004294:	2300      	movs	r3, #0
 8004296:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8004298:	787a      	ldrb	r2, [r7, #1]
 800429a:	887b      	ldrh	r3, [r7, #2]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80042a8:	887b      	ldrh	r3, [r7, #2]
 80042aa:	08db      	lsrs	r3, r3, #3
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	887b      	ldrh	r3, [r7, #2]
 80042b2:	08db      	lsrs	r3, r3, #3
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	4619      	mov	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3108      	adds	r1, #8
 80042bc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80042c0:	887b      	ldrh	r3, [r7, #2]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	200f      	movs	r0, #15
 80042ca:	fa00 f303 	lsl.w	r3, r0, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	4019      	ands	r1, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3208      	adds	r2, #8
 80042d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80042da:	887b      	ldrh	r3, [r7, #2]
 80042dc:	08db      	lsrs	r3, r3, #3
 80042de:	b29b      	uxth	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3208      	adds	r2, #8
 80042e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80042f0:	887b      	ldrh	r3, [r7, #2]
 80042f2:	08db      	lsrs	r3, r3, #3
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3208      	adds	r2, #8
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004314:	4b03      	ldr	r3, [pc, #12]	; (8004324 <EXTI_ClearITPendingBit+0x18>)
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	615a      	str	r2, [r3, #20]
}
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	40013c00 	.word	0x40013c00

08004328 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <DMA_Init+0xa8>)
 8004340:	4013      	ands	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004352:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800435e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800436a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8004376:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0307 	bic.w	r3, r3, #7
 8004396:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	4313      	orrs	r3, r2
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60da      	str	r2, [r3, #12]
}
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	f01c803f 	.word	0xf01c803f

080043d4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d006      	beq.n	80043f4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f043 0201 	orr.w	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e005      	b.n	8004400 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f023 0201 	bic.w	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	601a      	str	r2, [r3, #0]
  }
}
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop

0800440c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8004414:	2300      	movs	r3, #0
 8004416:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
 8004428:	e001      	b.n	800442e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800442a:	2300      	movs	r3, #0
 800442c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800442e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8004446:	2300      	movs	r3, #0
 8004448:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <DMA_GetFlagStatus+0x6c>)
 8004452:	429a      	cmp	r2, r3
 8004454:	d802      	bhi.n	800445c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004456:	4b15      	ldr	r3, [pc, #84]	; (80044ac <DMA_GetFlagStatus+0x70>)
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	e001      	b.n	8004460 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800445c:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <DMA_GetFlagStatus+0x74>)
 800445e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e002      	b.n	8004478 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800447e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8004482:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	4013      	ands	r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800448e:	2301      	movs	r3, #1
 8004490:	75fb      	strb	r3, [r7, #23]
 8004492:	e001      	b.n	8004498 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8004494:	2300      	movs	r3, #0
 8004496:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8004498:	7dfb      	ldrb	r3, [r7, #23]
}
 800449a:	4618      	mov	r0, r3
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	4002640f 	.word	0x4002640f
 80044ac:	40026000 	.word	0x40026000
 80044b0:	40026400 	.word	0x40026400

080044b4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <DMA_ClearFlag+0x50>)
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d802      	bhi.n	80044cc <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <DMA_ClearFlag+0x54>)
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e001      	b.n	80044d0 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <DMA_ClearFlag+0x58>)
 80044ce:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80044e0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	60d3      	str	r3, [r2, #12]
 80044e8:	e006      	b.n	80044f8 <DMA_ClearFlag+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80044f0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	6093      	str	r3, [r2, #8]
  }    
}
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	4002640f 	.word	0x4002640f
 8004508:	40026000 	.word	0x40026000
 800450c:	40026400 	.word	0x40026400

08004510 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8004520:	4b07      	ldr	r3, [pc, #28]	; (8004540 <DAC_SetChannel1Data+0x30>)
 8004522:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4413      	add	r3, r2
 800452a:	3308      	adds	r3, #8
 800452c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	887a      	ldrh	r2, [r7, #2]
 8004532:	601a      	str	r2, [r3, #0]
}
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40007400 	.word	0x40007400

08004544 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800454c:	4a05      	ldr	r2, [pc, #20]	; (8004564 <NVIC_PriorityGroupConfig+0x20>)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004558:	60d3      	str	r3, [r2, #12]
}
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	e000ed00 	.word	0xe000ed00

08004568 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8004570:	2300      	movs	r3, #0
 8004572:	73fb      	strb	r3, [r7, #15]
 8004574:	2300      	movs	r3, #0
 8004576:	73bb      	strb	r3, [r7, #14]
 8004578:	230f      	movs	r3, #15
 800457a:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	78db      	ldrb	r3, [r3, #3]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d037      	beq.n	80045f4 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8004584:	4b25      	ldr	r3, [pc, #148]	; (800461c <NVIC_Init+0xb4>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	43db      	mvns	r3, r3
 800458a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800458e:	0a1b      	lsrs	r3, r3, #8
 8004590:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	f1c3 0304 	rsb	r3, r3, #4
 8004598:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800459a:	7b7a      	ldrb	r2, [r7, #13]
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	fa42 f303 	asr.w	r3, r2, r3
 80045a2:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	785b      	ldrb	r3, [r3, #1]
 80045a8:	461a      	mov	r2, r3
 80045aa:	7bbb      	ldrb	r3, [r7, #14]
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	789a      	ldrb	r2, [r3, #2]
 80045b6:	7b7b      	ldrb	r3, [r7, #13]
 80045b8:	4013      	ands	r3, r2
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	4313      	orrs	r3, r2
 80045c0:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80045c8:	4a15      	ldr	r2, [pc, #84]	; (8004620 <NVIC_Init+0xb8>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	4413      	add	r3, r2
 80045d0:	7bfa      	ldrb	r2, [r7, #15]
 80045d2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80045d6:	4b12      	ldr	r3, [pc, #72]	; (8004620 <NVIC_Init+0xb8>)
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	7812      	ldrb	r2, [r2, #0]
 80045dc:	0952      	lsrs	r2, r2, #5
 80045de:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	7809      	ldrb	r1, [r1, #0]
 80045e4:	f001 011f 	and.w	r1, r1, #31
 80045e8:	2001      	movs	r0, #1
 80045ea:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80045ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80045f2:	e00e      	b.n	8004612 <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <NVIC_Init+0xb8>)
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	7812      	ldrb	r2, [r2, #0]
 80045fa:	0952      	lsrs	r2, r2, #5
 80045fc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	7809      	ldrb	r1, [r1, #0]
 8004602:	f001 011f 	and.w	r1, r1, #31
 8004606:	2001      	movs	r0, #1
 8004608:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800460c:	3220      	adds	r2, #32
 800460e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	e000ed00 	.word	0xe000ed00
 8004620:	e000e100 	.word	0xe000e100

08004624 <__libc_init_array>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <__libc_init_array+0x3c>)
 8004628:	4d0e      	ldr	r5, [pc, #56]	; (8004664 <__libc_init_array+0x40>)
 800462a:	1aed      	subs	r5, r5, r3
 800462c:	10ad      	asrs	r5, r5, #2
 800462e:	2400      	movs	r4, #0
 8004630:	461e      	mov	r6, r3
 8004632:	42ac      	cmp	r4, r5
 8004634:	d004      	beq.n	8004640 <__libc_init_array+0x1c>
 8004636:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800463a:	4790      	blx	r2
 800463c:	3401      	adds	r4, #1
 800463e:	e7f8      	b.n	8004632 <__libc_init_array+0xe>
 8004640:	f000 f816 	bl	8004670 <_init>
 8004644:	4d08      	ldr	r5, [pc, #32]	; (8004668 <__libc_init_array+0x44>)
 8004646:	4b09      	ldr	r3, [pc, #36]	; (800466c <__libc_init_array+0x48>)
 8004648:	1aed      	subs	r5, r5, r3
 800464a:	10ad      	asrs	r5, r5, #2
 800464c:	2400      	movs	r4, #0
 800464e:	461e      	mov	r6, r3
 8004650:	42ac      	cmp	r4, r5
 8004652:	d004      	beq.n	800465e <__libc_init_array+0x3a>
 8004654:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004658:	4790      	blx	r2
 800465a:	3401      	adds	r4, #1
 800465c:	e7f8      	b.n	8004650 <__libc_init_array+0x2c>
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	08004720 	.word	0x08004720
 8004664:	08004720 	.word	0x08004720
 8004668:	08004724 	.word	0x08004724
 800466c:	08004720 	.word	0x08004720

08004670 <_init>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	bf00      	nop
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr

0800467c <_fini>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	bf00      	nop
 8004680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004682:	bc08      	pop	{r3}
 8004684:	469e      	mov	lr, r3
 8004686:	4770      	bx	lr
